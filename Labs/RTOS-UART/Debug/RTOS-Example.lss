
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a694  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a694  0040a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  0040a69c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003a4  204009b8  0040b054  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400d5c  0040b3f8  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402d60  0040d3fc  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001fc45  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000412a  00000000  00000000  00040684  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000981a  00000000  00000000  000447ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ef0  00000000  00000000  0004dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001210  00000000  00000000  0004eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023423  00000000  00000000  000500c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010ed5  00000000  00000000  000734eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009cef3  00000000  00000000  000843c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000037e0  00000000  00000000  001212b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 2d 40 20 9d 0c 40 00 9b 0c 40 00 9b 0c 40 00     `-@ ..@...@...@.
  400010:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	91 10 40 00 9b 0c 40 00 00 00 00 00 31 11 40 00     ..@...@.....1.@.
  40003c:	95 11 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  40004c:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  40005c:	9b 0c 40 00 9b 0c 40 00 00 00 00 00 f9 06 40 00     ..@...@.......@.
  40006c:	0d 07 40 00 21 07 40 00 9b 0c 40 00 15 37 40 00     ..@.!.@...@..7@.
  40007c:	9b 0c 40 00 35 07 40 00 49 07 40 00 9b 0c 40 00     ..@.5.@.I.@...@.
  40008c:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  40009c:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  4000ac:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  4000bc:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  4000cc:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  4000dc:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  4000ec:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  4000fc:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  40010c:	9b 0c 40 00 9b 0c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ......@...@...@.
  40012c:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  40013c:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  40014c:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00 9b 0c 40 00     ..@...@...@...@.
  40015c:	9b 0c 40 00 9b 0c 40 00 9b 0c 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	0040a69c 	.word	0x0040a69c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040a69c 	.word	0x0040a69c
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	0040a69c 	.word	0x0040a69c
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400e71 	.word	0x00400e71
  400220:	004007f9 	.word	0x004007f9
  400224:	0040084d 	.word	0x0040084d
  400228:	0040085d 	.word	0x0040085d
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	0040086d 	.word	0x0040086d
  400238:	0040075d 	.word	0x0040075d
  40023c:	00400795 	.word	0x00400795
  400240:	00400d65 	.word	0x00400d65

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400cdc 	.word	0x20400cdc
  40027c:	20400cd4 	.word	0x20400cd4

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400cd8 	.word	0x20400cd8
  4002cc:	20400cdc 	.word	0x20400cdc

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	0040087d 	.word	0x0040087d
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400464:	6301      	str	r1, [r0, #48]	; 0x30
  400466:	4770      	bx	lr

00400468 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400468:	6341      	str	r1, [r0, #52]	; 0x34
  40046a:	4770      	bx	lr

0040046c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40046c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40046e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400472:	d03a      	beq.n	4004ea <pio_set_peripheral+0x7e>
  400474:	d813      	bhi.n	40049e <pio_set_peripheral+0x32>
  400476:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40047a:	d025      	beq.n	4004c8 <pio_set_peripheral+0x5c>
  40047c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400480:	d10a      	bne.n	400498 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400482:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400484:	4313      	orrs	r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40048a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40048c:	400b      	ands	r3, r1
  40048e:	ea23 0302 	bic.w	r3, r3, r2
  400492:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400494:	6042      	str	r2, [r0, #4]
  400496:	4770      	bx	lr
	switch (ul_type) {
  400498:	2900      	cmp	r1, #0
  40049a:	d1fb      	bne.n	400494 <pio_set_peripheral+0x28>
  40049c:	4770      	bx	lr
  40049e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004a2:	d021      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004a4:	d809      	bhi.n	4004ba <pio_set_peripheral+0x4e>
  4004a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004aa:	d1f3      	bne.n	400494 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004ae:	4313      	orrs	r3, r2
  4004b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004b4:	4313      	orrs	r3, r2
  4004b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004b8:	e7ec      	b.n	400494 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004be:	d013      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004c4:	d010      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c6:	e7e5      	b.n	400494 <pio_set_peripheral+0x28>
{
  4004c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004ce:	43d3      	mvns	r3, r2
  4004d0:	4021      	ands	r1, r4
  4004d2:	461c      	mov	r4, r3
  4004d4:	4019      	ands	r1, r3
  4004d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004dc:	400b      	ands	r3, r1
  4004de:	4023      	ands	r3, r4
  4004e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004e2:	6042      	str	r2, [r0, #4]
}
  4004e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004ee:	400b      	ands	r3, r1
  4004f0:	ea23 0302 	bic.w	r3, r3, r2
  4004f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004f8:	4313      	orrs	r3, r2
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004fc:	e7ca      	b.n	400494 <pio_set_peripheral+0x28>

004004fe <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004fe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400500:	f012 0f01 	tst.w	r2, #1
  400504:	d10d      	bne.n	400522 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400506:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400508:	f012 0f0a 	tst.w	r2, #10
  40050c:	d00b      	beq.n	400526 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40050e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400510:	f012 0f02 	tst.w	r2, #2
  400514:	d109      	bne.n	40052a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400516:	f012 0f08 	tst.w	r2, #8
  40051a:	d008      	beq.n	40052e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40051c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400520:	e005      	b.n	40052e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400522:	6641      	str	r1, [r0, #100]	; 0x64
  400524:	e7f0      	b.n	400508 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400526:	6241      	str	r1, [r0, #36]	; 0x24
  400528:	e7f2      	b.n	400510 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40052a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40052e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400530:	6001      	str	r1, [r0, #0]
  400532:	4770      	bx	lr

00400534 <pio_set_output>:
{
  400534:	b410      	push	{r4}
  400536:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400538:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40053a:	b94c      	cbnz	r4, 400550 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40053c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40053e:	b14b      	cbz	r3, 400554 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400540:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400542:	b94a      	cbnz	r2, 400558 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400544:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400546:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400548:	6001      	str	r1, [r0, #0]
}
  40054a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40054e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400550:	6641      	str	r1, [r0, #100]	; 0x64
  400552:	e7f4      	b.n	40053e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400554:	6541      	str	r1, [r0, #84]	; 0x54
  400556:	e7f4      	b.n	400542 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400558:	6301      	str	r1, [r0, #48]	; 0x30
  40055a:	e7f4      	b.n	400546 <pio_set_output+0x12>

0040055c <pio_configure>:
{
  40055c:	b570      	push	{r4, r5, r6, lr}
  40055e:	b082      	sub	sp, #8
  400560:	4605      	mov	r5, r0
  400562:	4616      	mov	r6, r2
  400564:	461c      	mov	r4, r3
	switch (ul_type) {
  400566:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40056a:	d014      	beq.n	400596 <pio_configure+0x3a>
  40056c:	d90a      	bls.n	400584 <pio_configure+0x28>
  40056e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400572:	d024      	beq.n	4005be <pio_configure+0x62>
  400574:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400578:	d021      	beq.n	4005be <pio_configure+0x62>
  40057a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40057e:	d017      	beq.n	4005b0 <pio_configure+0x54>
		return 0;
  400580:	2000      	movs	r0, #0
  400582:	e01a      	b.n	4005ba <pio_configure+0x5e>
	switch (ul_type) {
  400584:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400588:	d005      	beq.n	400596 <pio_configure+0x3a>
  40058a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40058e:	d002      	beq.n	400596 <pio_configure+0x3a>
  400590:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400594:	d1f4      	bne.n	400580 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400596:	4632      	mov	r2, r6
  400598:	4628      	mov	r0, r5
  40059a:	4b11      	ldr	r3, [pc, #68]	; (4005e0 <pio_configure+0x84>)
  40059c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40059e:	f014 0f01 	tst.w	r4, #1
  4005a2:	d102      	bne.n	4005aa <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4005a4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4005a6:	2001      	movs	r0, #1
  4005a8:	e007      	b.n	4005ba <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4005aa:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4005ac:	2001      	movs	r0, #1
  4005ae:	e004      	b.n	4005ba <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4005b0:	461a      	mov	r2, r3
  4005b2:	4631      	mov	r1, r6
  4005b4:	4b0b      	ldr	r3, [pc, #44]	; (4005e4 <pio_configure+0x88>)
  4005b6:	4798      	blx	r3
	return 1;
  4005b8:	2001      	movs	r0, #1
}
  4005ba:	b002      	add	sp, #8
  4005bc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4005be:	f004 0301 	and.w	r3, r4, #1
  4005c2:	9300      	str	r3, [sp, #0]
  4005c4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4005cc:	bf14      	ite	ne
  4005ce:	2200      	movne	r2, #0
  4005d0:	2201      	moveq	r2, #1
  4005d2:	4631      	mov	r1, r6
  4005d4:	4628      	mov	r0, r5
  4005d6:	4c04      	ldr	r4, [pc, #16]	; (4005e8 <pio_configure+0x8c>)
  4005d8:	47a0      	blx	r4
	return 1;
  4005da:	2001      	movs	r0, #1
		break;
  4005dc:	e7ed      	b.n	4005ba <pio_configure+0x5e>
  4005de:	bf00      	nop
  4005e0:	0040046d 	.word	0x0040046d
  4005e4:	004004ff 	.word	0x004004ff
  4005e8:	00400535 	.word	0x00400535

004005ec <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4005ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4005ee:	420b      	tst	r3, r1
}
  4005f0:	bf14      	ite	ne
  4005f2:	2001      	movne	r0, #1
  4005f4:	2000      	moveq	r0, #0
  4005f6:	4770      	bx	lr

004005f8 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4005f8:	f012 0f10 	tst.w	r2, #16
  4005fc:	d012      	beq.n	400624 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4005fe:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400602:	f012 0f20 	tst.w	r2, #32
  400606:	d007      	beq.n	400618 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400608:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40060c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400610:	d005      	beq.n	40061e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400612:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400616:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400618:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40061c:	e7f6      	b.n	40060c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40061e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400622:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400624:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400628:	4770      	bx	lr

0040062a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40062a:	6401      	str	r1, [r0, #64]	; 0x40
  40062c:	4770      	bx	lr

0040062e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40062e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400630:	4770      	bx	lr

00400632 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400632:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400634:	4770      	bx	lr
	...

00400638 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40063c:	4604      	mov	r4, r0
  40063e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400640:	4b0e      	ldr	r3, [pc, #56]	; (40067c <pio_handler_process+0x44>)
  400642:	4798      	blx	r3
  400644:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400646:	4620      	mov	r0, r4
  400648:	4b0d      	ldr	r3, [pc, #52]	; (400680 <pio_handler_process+0x48>)
  40064a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40064c:	4005      	ands	r5, r0
  40064e:	d013      	beq.n	400678 <pio_handler_process+0x40>
  400650:	4c0c      	ldr	r4, [pc, #48]	; (400684 <pio_handler_process+0x4c>)
  400652:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400656:	e003      	b.n	400660 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400658:	42b4      	cmp	r4, r6
  40065a:	d00d      	beq.n	400678 <pio_handler_process+0x40>
  40065c:	3410      	adds	r4, #16
		while (status != 0) {
  40065e:	b15d      	cbz	r5, 400678 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400660:	6820      	ldr	r0, [r4, #0]
  400662:	4540      	cmp	r0, r8
  400664:	d1f8      	bne.n	400658 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400666:	6861      	ldr	r1, [r4, #4]
  400668:	4229      	tst	r1, r5
  40066a:	d0f5      	beq.n	400658 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40066c:	68e3      	ldr	r3, [r4, #12]
  40066e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400670:	6863      	ldr	r3, [r4, #4]
  400672:	ea25 0503 	bic.w	r5, r5, r3
  400676:	e7ef      	b.n	400658 <pio_handler_process+0x20>
  400678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40067c:	0040062f 	.word	0x0040062f
  400680:	00400633 	.word	0x00400633
  400684:	204009d4 	.word	0x204009d4

00400688 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40068a:	4c18      	ldr	r4, [pc, #96]	; (4006ec <pio_handler_set+0x64>)
  40068c:	6826      	ldr	r6, [r4, #0]
  40068e:	2e06      	cmp	r6, #6
  400690:	d82a      	bhi.n	4006e8 <pio_handler_set+0x60>
  400692:	f04f 0c00 	mov.w	ip, #0
  400696:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400698:	4f15      	ldr	r7, [pc, #84]	; (4006f0 <pio_handler_set+0x68>)
  40069a:	e004      	b.n	4006a6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40069c:	3401      	adds	r4, #1
  40069e:	b2e4      	uxtb	r4, r4
  4006a0:	46a4      	mov	ip, r4
  4006a2:	42a6      	cmp	r6, r4
  4006a4:	d309      	bcc.n	4006ba <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4006a6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006a8:	0125      	lsls	r5, r4, #4
  4006aa:	597d      	ldr	r5, [r7, r5]
  4006ac:	428d      	cmp	r5, r1
  4006ae:	d1f5      	bne.n	40069c <pio_handler_set+0x14>
  4006b0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4006b4:	686d      	ldr	r5, [r5, #4]
  4006b6:	4295      	cmp	r5, r2
  4006b8:	d1f0      	bne.n	40069c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006ba:	4d0d      	ldr	r5, [pc, #52]	; (4006f0 <pio_handler_set+0x68>)
  4006bc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4006c0:	eb05 040e 	add.w	r4, r5, lr
  4006c4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4006c8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006ca:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006cc:	9906      	ldr	r1, [sp, #24]
  4006ce:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4006d0:	3601      	adds	r6, #1
  4006d2:	4566      	cmp	r6, ip
  4006d4:	d005      	beq.n	4006e2 <pio_handler_set+0x5a>
  4006d6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006d8:	461a      	mov	r2, r3
  4006da:	4b06      	ldr	r3, [pc, #24]	; (4006f4 <pio_handler_set+0x6c>)
  4006dc:	4798      	blx	r3

	return 0;
  4006de:	2000      	movs	r0, #0
  4006e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4006e2:	4902      	ldr	r1, [pc, #8]	; (4006ec <pio_handler_set+0x64>)
  4006e4:	600e      	str	r6, [r1, #0]
  4006e6:	e7f6      	b.n	4006d6 <pio_handler_set+0x4e>
		return 1;
  4006e8:	2001      	movs	r0, #1
}
  4006ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006ec:	20400a44 	.word	0x20400a44
  4006f0:	204009d4 	.word	0x204009d4
  4006f4:	004005f9 	.word	0x004005f9

004006f8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006fa:	210a      	movs	r1, #10
  4006fc:	4801      	ldr	r0, [pc, #4]	; (400704 <PIOA_Handler+0xc>)
  4006fe:	4b02      	ldr	r3, [pc, #8]	; (400708 <PIOA_Handler+0x10>)
  400700:	4798      	blx	r3
  400702:	bd08      	pop	{r3, pc}
  400704:	400e0e00 	.word	0x400e0e00
  400708:	00400639 	.word	0x00400639

0040070c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40070c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40070e:	210b      	movs	r1, #11
  400710:	4801      	ldr	r0, [pc, #4]	; (400718 <PIOB_Handler+0xc>)
  400712:	4b02      	ldr	r3, [pc, #8]	; (40071c <PIOB_Handler+0x10>)
  400714:	4798      	blx	r3
  400716:	bd08      	pop	{r3, pc}
  400718:	400e1000 	.word	0x400e1000
  40071c:	00400639 	.word	0x00400639

00400720 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400720:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400722:	210c      	movs	r1, #12
  400724:	4801      	ldr	r0, [pc, #4]	; (40072c <PIOC_Handler+0xc>)
  400726:	4b02      	ldr	r3, [pc, #8]	; (400730 <PIOC_Handler+0x10>)
  400728:	4798      	blx	r3
  40072a:	bd08      	pop	{r3, pc}
  40072c:	400e1200 	.word	0x400e1200
  400730:	00400639 	.word	0x00400639

00400734 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400734:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400736:	2110      	movs	r1, #16
  400738:	4801      	ldr	r0, [pc, #4]	; (400740 <PIOD_Handler+0xc>)
  40073a:	4b02      	ldr	r3, [pc, #8]	; (400744 <PIOD_Handler+0x10>)
  40073c:	4798      	blx	r3
  40073e:	bd08      	pop	{r3, pc}
  400740:	400e1400 	.word	0x400e1400
  400744:	00400639 	.word	0x00400639

00400748 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400748:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40074a:	2111      	movs	r1, #17
  40074c:	4801      	ldr	r0, [pc, #4]	; (400754 <PIOE_Handler+0xc>)
  40074e:	4b02      	ldr	r3, [pc, #8]	; (400758 <PIOE_Handler+0x10>)
  400750:	4798      	blx	r3
  400752:	bd08      	pop	{r3, pc}
  400754:	400e1600 	.word	0x400e1600
  400758:	00400639 	.word	0x00400639

0040075c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40075c:	2803      	cmp	r0, #3
  40075e:	d011      	beq.n	400784 <pmc_mck_set_division+0x28>
  400760:	2804      	cmp	r0, #4
  400762:	d012      	beq.n	40078a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400764:	2802      	cmp	r0, #2
  400766:	bf0c      	ite	eq
  400768:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40076c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40076e:	4a08      	ldr	r2, [pc, #32]	; (400790 <pmc_mck_set_division+0x34>)
  400770:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400776:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400778:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40077a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40077c:	f013 0f08 	tst.w	r3, #8
  400780:	d0fb      	beq.n	40077a <pmc_mck_set_division+0x1e>
}
  400782:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400784:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400788:	e7f1      	b.n	40076e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40078a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40078e:	e7ee      	b.n	40076e <pmc_mck_set_division+0x12>
  400790:	400e0600 	.word	0x400e0600

00400794 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400794:	4a17      	ldr	r2, [pc, #92]	; (4007f4 <pmc_switch_mck_to_pllack+0x60>)
  400796:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40079c:	4318      	orrs	r0, r3
  40079e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007a2:	f013 0f08 	tst.w	r3, #8
  4007a6:	d10a      	bne.n	4007be <pmc_switch_mck_to_pllack+0x2a>
  4007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007ac:	4911      	ldr	r1, [pc, #68]	; (4007f4 <pmc_switch_mck_to_pllack+0x60>)
  4007ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007b0:	f012 0f08 	tst.w	r2, #8
  4007b4:	d103      	bne.n	4007be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007b6:	3b01      	subs	r3, #1
  4007b8:	d1f9      	bne.n	4007ae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4007ba:	2001      	movs	r0, #1
  4007bc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007be:	4a0d      	ldr	r2, [pc, #52]	; (4007f4 <pmc_switch_mck_to_pllack+0x60>)
  4007c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007c2:	f023 0303 	bic.w	r3, r3, #3
  4007c6:	f043 0302 	orr.w	r3, r3, #2
  4007ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007ce:	f013 0f08 	tst.w	r3, #8
  4007d2:	d10a      	bne.n	4007ea <pmc_switch_mck_to_pllack+0x56>
  4007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007d8:	4906      	ldr	r1, [pc, #24]	; (4007f4 <pmc_switch_mck_to_pllack+0x60>)
  4007da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007dc:	f012 0f08 	tst.w	r2, #8
  4007e0:	d105      	bne.n	4007ee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007e2:	3b01      	subs	r3, #1
  4007e4:	d1f9      	bne.n	4007da <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4007e6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007e8:	4770      	bx	lr
	return 0;
  4007ea:	2000      	movs	r0, #0
  4007ec:	4770      	bx	lr
  4007ee:	2000      	movs	r0, #0
  4007f0:	4770      	bx	lr
  4007f2:	bf00      	nop
  4007f4:	400e0600 	.word	0x400e0600

004007f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007f8:	b9a0      	cbnz	r0, 400824 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007fa:	480e      	ldr	r0, [pc, #56]	; (400834 <pmc_switch_mainck_to_xtal+0x3c>)
  4007fc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007fe:	0209      	lsls	r1, r1, #8
  400800:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400802:	4a0d      	ldr	r2, [pc, #52]	; (400838 <pmc_switch_mainck_to_xtal+0x40>)
  400804:	401a      	ands	r2, r3
  400806:	4b0d      	ldr	r3, [pc, #52]	; (40083c <pmc_switch_mainck_to_xtal+0x44>)
  400808:	4313      	orrs	r3, r2
  40080a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40080c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40080e:	4602      	mov	r2, r0
  400810:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400812:	f013 0f01 	tst.w	r3, #1
  400816:	d0fb      	beq.n	400810 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400818:	4a06      	ldr	r2, [pc, #24]	; (400834 <pmc_switch_mainck_to_xtal+0x3c>)
  40081a:	6a11      	ldr	r1, [r2, #32]
  40081c:	4b08      	ldr	r3, [pc, #32]	; (400840 <pmc_switch_mainck_to_xtal+0x48>)
  40081e:	430b      	orrs	r3, r1
  400820:	6213      	str	r3, [r2, #32]
  400822:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400824:	4903      	ldr	r1, [pc, #12]	; (400834 <pmc_switch_mainck_to_xtal+0x3c>)
  400826:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400828:	4a06      	ldr	r2, [pc, #24]	; (400844 <pmc_switch_mainck_to_xtal+0x4c>)
  40082a:	401a      	ands	r2, r3
  40082c:	4b06      	ldr	r3, [pc, #24]	; (400848 <pmc_switch_mainck_to_xtal+0x50>)
  40082e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400830:	620b      	str	r3, [r1, #32]
  400832:	4770      	bx	lr
  400834:	400e0600 	.word	0x400e0600
  400838:	ffc8fffc 	.word	0xffc8fffc
  40083c:	00370001 	.word	0x00370001
  400840:	01370000 	.word	0x01370000
  400844:	fec8fffc 	.word	0xfec8fffc
  400848:	01370002 	.word	0x01370002

0040084c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40084c:	4b02      	ldr	r3, [pc, #8]	; (400858 <pmc_osc_is_ready_mainck+0xc>)
  40084e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400850:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400854:	4770      	bx	lr
  400856:	bf00      	nop
  400858:	400e0600 	.word	0x400e0600

0040085c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40085c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400860:	4b01      	ldr	r3, [pc, #4]	; (400868 <pmc_disable_pllack+0xc>)
  400862:	629a      	str	r2, [r3, #40]	; 0x28
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	400e0600 	.word	0x400e0600

0040086c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40086c:	4b02      	ldr	r3, [pc, #8]	; (400878 <pmc_is_locked_pllack+0xc>)
  40086e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400870:	f000 0002 	and.w	r0, r0, #2
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	400e0600 	.word	0x400e0600

0040087c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  40087c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400880:	4b05      	ldr	r3, [pc, #20]	; (400898 <pmc_enable_periph_clk+0x1c>)
  400882:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400886:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40088a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40088e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400892:	2000      	movs	r0, #0
  400894:	4770      	bx	lr
  400896:	bf00      	nop
  400898:	400e0600 	.word	0x400e0600

0040089c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  40089c:	4770      	bx	lr
	...

004008a0 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4008a0:	4a10      	ldr	r2, [pc, #64]	; (4008e4 <pmc_enable_waitmode+0x44>)
  4008a2:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4008ac:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4008ae:	6a11      	ldr	r1, [r2, #32]
  4008b0:	4b0d      	ldr	r3, [pc, #52]	; (4008e8 <pmc_enable_waitmode+0x48>)
  4008b2:	430b      	orrs	r3, r1
  4008b4:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008b8:	f013 0f08 	tst.w	r3, #8
  4008bc:	d0fb      	beq.n	4008b6 <pmc_enable_waitmode+0x16>
  4008be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
		__NOP();
  4008c2:	bf00      	nop
	for (i = 0; i < 500; i++) {
  4008c4:	3b01      	subs	r3, #1
  4008c6:	d1fc      	bne.n	4008c2 <pmc_enable_waitmode+0x22>
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4008c8:	4a06      	ldr	r2, [pc, #24]	; (4008e4 <pmc_enable_waitmode+0x44>)
  4008ca:	6a13      	ldr	r3, [r2, #32]
  4008cc:	f013 0f08 	tst.w	r3, #8
  4008d0:	d0fb      	beq.n	4008ca <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4008d2:	4a04      	ldr	r2, [pc, #16]	; (4008e4 <pmc_enable_waitmode+0x44>)
  4008d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4008de:	6713      	str	r3, [r2, #112]	; 0x70
  4008e0:	4770      	bx	lr
  4008e2:	bf00      	nop
  4008e4:	400e0600 	.word	0x400e0600
  4008e8:	00370004 	.word	0x00370004

004008ec <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4008ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4008f0:	1e43      	subs	r3, r0, #1
  4008f2:	2b04      	cmp	r3, #4
  4008f4:	f200 8107 	bhi.w	400b06 <pmc_sleep+0x21a>
  4008f8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4008fc:	00050005 	.word	0x00050005
  400900:	00150015 	.word	0x00150015
  400904:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400906:	4a81      	ldr	r2, [pc, #516]	; (400b0c <pmc_sleep+0x220>)
  400908:	6913      	ldr	r3, [r2, #16]
  40090a:	f023 0304 	bic.w	r3, r3, #4
  40090e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400910:	2201      	movs	r2, #1
  400912:	4b7f      	ldr	r3, [pc, #508]	; (400b10 <pmc_sleep+0x224>)
  400914:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400916:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40091a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
  40091c:	f3bf 8f4f 	dsb	sy
		__DSB();
		__WFI();
  400920:	bf30      	wfi
		break;
  400922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400926:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400928:	2803      	cmp	r0, #3
  40092a:	bf0c      	ite	eq
  40092c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40092e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400932:	4b78      	ldr	r3, [pc, #480]	; (400b14 <pmc_sleep+0x228>)
  400934:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400936:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400938:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40093c:	2200      	movs	r2, #0
  40093e:	4b74      	ldr	r3, [pc, #464]	; (400b10 <pmc_sleep+0x224>)
  400940:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400942:	2201      	movs	r2, #1
  400944:	4b74      	ldr	r3, [pc, #464]	; (400b18 <pmc_sleep+0x22c>)
  400946:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400948:	4b74      	ldr	r3, [pc, #464]	; (400b1c <pmc_sleep+0x230>)
  40094a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40094c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40094e:	4a74      	ldr	r2, [pc, #464]	; (400b20 <pmc_sleep+0x234>)
  400950:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400954:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400956:	4a73      	ldr	r2, [pc, #460]	; (400b24 <pmc_sleep+0x238>)
  400958:	433a      	orrs	r2, r7
  40095a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40095c:	f005 0903 	and.w	r9, r5, #3
  400960:	f1b9 0f01 	cmp.w	r9, #1
  400964:	f240 8089 	bls.w	400a7a <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400968:	f025 0103 	bic.w	r1, r5, #3
  40096c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400970:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400972:	461a      	mov	r2, r3
  400974:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400976:	f013 0f08 	tst.w	r3, #8
  40097a:	d0fb      	beq.n	400974 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40097c:	f011 0f70 	tst.w	r1, #112	; 0x70
  400980:	d008      	beq.n	400994 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400982:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400986:	4b65      	ldr	r3, [pc, #404]	; (400b1c <pmc_sleep+0x230>)
  400988:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40098a:	461a      	mov	r2, r3
  40098c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40098e:	f013 0f08 	tst.w	r3, #8
  400992:	d0fb      	beq.n	40098c <pmc_sleep+0xa0>
	pmc_disable_pllack();
  400994:	4b64      	ldr	r3, [pc, #400]	; (400b28 <pmc_sleep+0x23c>)
  400996:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400998:	4a60      	ldr	r2, [pc, #384]	; (400b1c <pmc_sleep+0x230>)
  40099a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40099c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4009a0:	d0fb      	beq.n	40099a <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4009a2:	4a5e      	ldr	r2, [pc, #376]	; (400b1c <pmc_sleep+0x230>)
  4009a4:	6a11      	ldr	r1, [r2, #32]
  4009a6:	4b61      	ldr	r3, [pc, #388]	; (400b2c <pmc_sleep+0x240>)
  4009a8:	400b      	ands	r3, r1
  4009aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009ae:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4009b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009b6:	d0fb      	beq.n	4009b0 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4009b8:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4009bc:	4a58      	ldr	r2, [pc, #352]	; (400b20 <pmc_sleep+0x234>)
  4009be:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4009c0:	2c04      	cmp	r4, #4
  4009c2:	d05c      	beq.n	400a7e <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4009c4:	4c52      	ldr	r4, [pc, #328]	; (400b10 <pmc_sleep+0x224>)
  4009c6:	2301      	movs	r3, #1
  4009c8:	7023      	strb	r3, [r4, #0]
  4009ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009ce:	b662      	cpsie	i

		pmc_enable_waitmode();
  4009d0:	4b57      	ldr	r3, [pc, #348]	; (400b30 <pmc_sleep+0x244>)
  4009d2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4009d4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4009d6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4009da:	2300      	movs	r3, #0
  4009dc:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4009de:	f017 0f02 	tst.w	r7, #2
  4009e2:	d055      	beq.n	400a90 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009e4:	4a4d      	ldr	r2, [pc, #308]	; (400b1c <pmc_sleep+0x230>)
  4009e6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009e8:	4952      	ldr	r1, [pc, #328]	; (400b34 <pmc_sleep+0x248>)
  4009ea:	4019      	ands	r1, r3
  4009ec:	4b52      	ldr	r3, [pc, #328]	; (400b38 <pmc_sleep+0x24c>)
  4009ee:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009f0:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4009f2:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4009f4:	4b51      	ldr	r3, [pc, #324]	; (400b3c <pmc_sleep+0x250>)
  4009f6:	400b      	ands	r3, r1
  4009f8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4009fc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4009fe:	4b50      	ldr	r3, [pc, #320]	; (400b40 <pmc_sleep+0x254>)
  400a00:	4033      	ands	r3, r6
  400a02:	2b00      	cmp	r3, #0
  400a04:	d06e      	beq.n	400ae4 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400a06:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400a0a:	4b44      	ldr	r3, [pc, #272]	; (400b1c <pmc_sleep+0x230>)
  400a0c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  400a0e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400a10:	f1b9 0f02 	cmp.w	r9, #2
  400a14:	d104      	bne.n	400a20 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400a16:	4a41      	ldr	r2, [pc, #260]	; (400b1c <pmc_sleep+0x230>)
  400a18:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a1a:	f013 0f02 	tst.w	r3, #2
  400a1e:	d0fb      	beq.n	400a18 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  400a20:	4a3e      	ldr	r2, [pc, #248]	; (400b1c <pmc_sleep+0x230>)
  400a22:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400a28:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400a2c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a2e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a30:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a32:	f013 0f08 	tst.w	r3, #8
  400a36:	d0fb      	beq.n	400a30 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  400a38:	4b39      	ldr	r3, [pc, #228]	; (400b20 <pmc_sleep+0x234>)
  400a3a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  400a3e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400a42:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a44:	461a      	mov	r2, r3
  400a46:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a48:	f013 0f08 	tst.w	r3, #8
  400a4c:	d0fb      	beq.n	400a46 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  400a4e:	4a33      	ldr	r2, [pc, #204]	; (400b1c <pmc_sleep+0x230>)
  400a50:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a52:	420b      	tst	r3, r1
  400a54:	d0fc      	beq.n	400a50 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400a56:	2200      	movs	r2, #0
  400a58:	4b2f      	ldr	r3, [pc, #188]	; (400b18 <pmc_sleep+0x22c>)
  400a5a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400a5c:	4b39      	ldr	r3, [pc, #228]	; (400b44 <pmc_sleep+0x258>)
  400a5e:	681b      	ldr	r3, [r3, #0]
  400a60:	b11b      	cbz	r3, 400a6a <pmc_sleep+0x17e>
			callback_clocks_restored();
  400a62:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400a64:	2200      	movs	r2, #0
  400a66:	4b37      	ldr	r3, [pc, #220]	; (400b44 <pmc_sleep+0x258>)
  400a68:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400a6a:	2201      	movs	r2, #1
  400a6c:	4b28      	ldr	r3, [pc, #160]	; (400b10 <pmc_sleep+0x224>)
  400a6e:	701a      	strb	r2, [r3, #0]
  400a70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a74:	b662      	cpsie	i
  400a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400a7a:	4629      	mov	r1, r5
  400a7c:	e77e      	b.n	40097c <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a7e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400a82:	6a11      	ldr	r1, [r2, #32]
  400a84:	4b30      	ldr	r3, [pc, #192]	; (400b48 <pmc_sleep+0x25c>)
  400a86:	400b      	ands	r3, r1
  400a88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a8c:	6213      	str	r3, [r2, #32]
  400a8e:	e799      	b.n	4009c4 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400a90:	f017 0f01 	tst.w	r7, #1
  400a94:	d0b3      	beq.n	4009fe <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400a96:	4b21      	ldr	r3, [pc, #132]	; (400b1c <pmc_sleep+0x230>)
  400a98:	6a1b      	ldr	r3, [r3, #32]
  400a9a:	f013 0f01 	tst.w	r3, #1
  400a9e:	d10b      	bne.n	400ab8 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400aa0:	491e      	ldr	r1, [pc, #120]	; (400b1c <pmc_sleep+0x230>)
  400aa2:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400aa4:	4a29      	ldr	r2, [pc, #164]	; (400b4c <pmc_sleep+0x260>)
  400aa6:	401a      	ands	r2, r3
  400aa8:	4b29      	ldr	r3, [pc, #164]	; (400b50 <pmc_sleep+0x264>)
  400aaa:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400aac:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400aae:	460a      	mov	r2, r1
  400ab0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ab2:	f013 0f01 	tst.w	r3, #1
  400ab6:	d0fb      	beq.n	400ab0 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400ab8:	4b18      	ldr	r3, [pc, #96]	; (400b1c <pmc_sleep+0x230>)
  400aba:	6a1b      	ldr	r3, [r3, #32]
  400abc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ac0:	d108      	bne.n	400ad4 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400ac2:	4a16      	ldr	r2, [pc, #88]	; (400b1c <pmc_sleep+0x230>)
  400ac4:	6a11      	ldr	r1, [r2, #32]
  400ac6:	4b23      	ldr	r3, [pc, #140]	; (400b54 <pmc_sleep+0x268>)
  400ac8:	430b      	orrs	r3, r1
  400aca:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400acc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ace:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400ad2:	d0fb      	beq.n	400acc <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ad4:	4a11      	ldr	r2, [pc, #68]	; (400b1c <pmc_sleep+0x230>)
  400ad6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  400ad8:	4b18      	ldr	r3, [pc, #96]	; (400b3c <pmc_sleep+0x250>)
  400ada:	400b      	ands	r3, r1
  400adc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ae0:	6213      	str	r3, [r2, #32]
  400ae2:	e78c      	b.n	4009fe <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  400ae4:	2100      	movs	r1, #0
  400ae6:	e793      	b.n	400a10 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  400ae8:	4a08      	ldr	r2, [pc, #32]	; (400b0c <pmc_sleep+0x220>)
  400aea:	6913      	ldr	r3, [r2, #16]
  400aec:	f043 0304 	orr.w	r3, r3, #4
  400af0:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400af2:	4a19      	ldr	r2, [pc, #100]	; (400b58 <pmc_sleep+0x26c>)
  400af4:	4b19      	ldr	r3, [pc, #100]	; (400b5c <pmc_sleep+0x270>)
  400af6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400af8:	2201      	movs	r2, #1
  400afa:	4b05      	ldr	r3, [pc, #20]	; (400b10 <pmc_sleep+0x224>)
  400afc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400afe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b02:	b662      	cpsie	i
		__WFI() ;
  400b04:	bf30      	wfi
  400b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b0a:	bf00      	nop
  400b0c:	e000ed00 	.word	0xe000ed00
  400b10:	20400000 	.word	0x20400000
  400b14:	0040089d 	.word	0x0040089d
  400b18:	20400a48 	.word	0x20400a48
  400b1c:	400e0600 	.word	0x400e0600
  400b20:	400e0c00 	.word	0x400e0c00
  400b24:	00370008 	.word	0x00370008
  400b28:	0040085d 	.word	0x0040085d
  400b2c:	fec8ffff 	.word	0xfec8ffff
  400b30:	004008a1 	.word	0x004008a1
  400b34:	fec8fffc 	.word	0xfec8fffc
  400b38:	01370002 	.word	0x01370002
  400b3c:	ffc8ff87 	.word	0xffc8ff87
  400b40:	07ff0000 	.word	0x07ff0000
  400b44:	20400a4c 	.word	0x20400a4c
  400b48:	ffc8fffe 	.word	0xffc8fffe
  400b4c:	ffc8fffc 	.word	0xffc8fffc
  400b50:	00370001 	.word	0x00370001
  400b54:	01370000 	.word	0x01370000
  400b58:	a5000004 	.word	0xa5000004
  400b5c:	400e1810 	.word	0x400e1810

00400b60 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400b60:	6943      	ldr	r3, [r0, #20]
  400b62:	f013 0f02 	tst.w	r3, #2
  400b66:	d002      	beq.n	400b6e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b68:	61c1      	str	r1, [r0, #28]
	return 0;
  400b6a:	2000      	movs	r0, #0
  400b6c:	4770      	bx	lr
		return 1;
  400b6e:	2001      	movs	r0, #1
}
  400b70:	4770      	bx	lr

00400b72 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b72:	6943      	ldr	r3, [r0, #20]
  400b74:	f013 0f01 	tst.w	r3, #1
  400b78:	d003      	beq.n	400b82 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b7a:	6983      	ldr	r3, [r0, #24]
  400b7c:	700b      	strb	r3, [r1, #0]
	return 0;
  400b7e:	2000      	movs	r0, #0
  400b80:	4770      	bx	lr
		return 1;
  400b82:	2001      	movs	r0, #1
}
  400b84:	4770      	bx	lr

00400b86 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400b86:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400b88:	010b      	lsls	r3, r1, #4
  400b8a:	4293      	cmp	r3, r2
  400b8c:	d914      	bls.n	400bb8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400b8e:	00c9      	lsls	r1, r1, #3
  400b90:	084b      	lsrs	r3, r1, #1
  400b92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400b96:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400b9a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400b9c:	1e5c      	subs	r4, r3, #1
  400b9e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400ba2:	428c      	cmp	r4, r1
  400ba4:	d901      	bls.n	400baa <usart_set_async_baudrate+0x24>
		return 1;
  400ba6:	2001      	movs	r0, #1
  400ba8:	e017      	b.n	400bda <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400baa:	6841      	ldr	r1, [r0, #4]
  400bac:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400bb0:	6041      	str	r1, [r0, #4]
  400bb2:	e00c      	b.n	400bce <usart_set_async_baudrate+0x48>
		return 1;
  400bb4:	2001      	movs	r0, #1
  400bb6:	e010      	b.n	400bda <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400bb8:	0859      	lsrs	r1, r3, #1
  400bba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400bbe:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400bc2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400bc4:	1e5c      	subs	r4, r3, #1
  400bc6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400bca:	428c      	cmp	r4, r1
  400bcc:	d8f2      	bhi.n	400bb4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400bce:	0412      	lsls	r2, r2, #16
  400bd0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400bd4:	431a      	orrs	r2, r3
  400bd6:	6202      	str	r2, [r0, #32]

	return 0;
  400bd8:	2000      	movs	r0, #0
}
  400bda:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bde:	4770      	bx	lr

00400be0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400be0:	4b08      	ldr	r3, [pc, #32]	; (400c04 <usart_reset+0x24>)
  400be2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400be6:	2300      	movs	r3, #0
  400be8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400bea:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400bec:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bee:	2388      	movs	r3, #136	; 0x88
  400bf0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400bf2:	2324      	movs	r3, #36	; 0x24
  400bf4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
  400bfa:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400bfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400c00:	6003      	str	r3, [r0, #0]
  400c02:	4770      	bx	lr
  400c04:	55534100 	.word	0x55534100

00400c08 <usart_init_rs232>:
{
  400c08:	b570      	push	{r4, r5, r6, lr}
  400c0a:	4605      	mov	r5, r0
  400c0c:	460c      	mov	r4, r1
  400c0e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400c10:	4b0f      	ldr	r3, [pc, #60]	; (400c50 <usart_init_rs232+0x48>)
  400c12:	4798      	blx	r3
	ul_reg_val = 0;
  400c14:	2200      	movs	r2, #0
  400c16:	4b0f      	ldr	r3, [pc, #60]	; (400c54 <usart_init_rs232+0x4c>)
  400c18:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400c1a:	b1a4      	cbz	r4, 400c46 <usart_init_rs232+0x3e>
  400c1c:	4632      	mov	r2, r6
  400c1e:	6821      	ldr	r1, [r4, #0]
  400c20:	4628      	mov	r0, r5
  400c22:	4b0d      	ldr	r3, [pc, #52]	; (400c58 <usart_init_rs232+0x50>)
  400c24:	4798      	blx	r3
  400c26:	4602      	mov	r2, r0
  400c28:	b978      	cbnz	r0, 400c4a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c2a:	6863      	ldr	r3, [r4, #4]
  400c2c:	68a1      	ldr	r1, [r4, #8]
  400c2e:	430b      	orrs	r3, r1
  400c30:	6921      	ldr	r1, [r4, #16]
  400c32:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400c34:	68e1      	ldr	r1, [r4, #12]
  400c36:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c38:	4906      	ldr	r1, [pc, #24]	; (400c54 <usart_init_rs232+0x4c>)
  400c3a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400c3c:	6869      	ldr	r1, [r5, #4]
  400c3e:	430b      	orrs	r3, r1
  400c40:	606b      	str	r3, [r5, #4]
}
  400c42:	4610      	mov	r0, r2
  400c44:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400c46:	2201      	movs	r2, #1
  400c48:	e7fb      	b.n	400c42 <usart_init_rs232+0x3a>
  400c4a:	2201      	movs	r2, #1
  400c4c:	e7f9      	b.n	400c42 <usart_init_rs232+0x3a>
  400c4e:	bf00      	nop
  400c50:	00400be1 	.word	0x00400be1
  400c54:	20400a50 	.word	0x20400a50
  400c58:	00400b87 	.word	0x00400b87

00400c5c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400c5c:	2340      	movs	r3, #64	; 0x40
  400c5e:	6003      	str	r3, [r0, #0]
  400c60:	4770      	bx	lr

00400c62 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400c62:	2310      	movs	r3, #16
  400c64:	6003      	str	r3, [r0, #0]
  400c66:	4770      	bx	lr

00400c68 <usart_get_status>:
	return p_usart->US_CSR;
  400c68:	6940      	ldr	r0, [r0, #20]
}
  400c6a:	4770      	bx	lr

00400c6c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400c6c:	6943      	ldr	r3, [r0, #20]
  400c6e:	f013 0f02 	tst.w	r3, #2
  400c72:	d004      	beq.n	400c7e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400c74:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400c78:	61c1      	str	r1, [r0, #28]
	return 0;
  400c7a:	2000      	movs	r0, #0
  400c7c:	4770      	bx	lr
		return 1;
  400c7e:	2001      	movs	r0, #1
}
  400c80:	4770      	bx	lr

00400c82 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400c82:	6943      	ldr	r3, [r0, #20]
  400c84:	f013 0f01 	tst.w	r3, #1
  400c88:	d005      	beq.n	400c96 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400c8a:	6983      	ldr	r3, [r0, #24]
  400c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400c90:	600b      	str	r3, [r1, #0]
	return 0;
  400c92:	2000      	movs	r0, #0
  400c94:	4770      	bx	lr
		return 1;
  400c96:	2001      	movs	r0, #1
}
  400c98:	4770      	bx	lr

00400c9a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400c9a:	e7fe      	b.n	400c9a <Dummy_Handler>

00400c9c <Reset_Handler>:
{
  400c9c:	b500      	push	{lr}
  400c9e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400ca0:	4b25      	ldr	r3, [pc, #148]	; (400d38 <Reset_Handler+0x9c>)
  400ca2:	4a26      	ldr	r2, [pc, #152]	; (400d3c <Reset_Handler+0xa0>)
  400ca4:	429a      	cmp	r2, r3
  400ca6:	d010      	beq.n	400cca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400ca8:	4b25      	ldr	r3, [pc, #148]	; (400d40 <Reset_Handler+0xa4>)
  400caa:	4a23      	ldr	r2, [pc, #140]	; (400d38 <Reset_Handler+0x9c>)
  400cac:	429a      	cmp	r2, r3
  400cae:	d20c      	bcs.n	400cca <Reset_Handler+0x2e>
  400cb0:	3b01      	subs	r3, #1
  400cb2:	1a9b      	subs	r3, r3, r2
  400cb4:	f023 0303 	bic.w	r3, r3, #3
  400cb8:	3304      	adds	r3, #4
  400cba:	4413      	add	r3, r2
  400cbc:	491f      	ldr	r1, [pc, #124]	; (400d3c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400cbe:	f851 0b04 	ldr.w	r0, [r1], #4
  400cc2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400cc6:	429a      	cmp	r2, r3
  400cc8:	d1f9      	bne.n	400cbe <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400cca:	4b1e      	ldr	r3, [pc, #120]	; (400d44 <Reset_Handler+0xa8>)
  400ccc:	4a1e      	ldr	r2, [pc, #120]	; (400d48 <Reset_Handler+0xac>)
  400cce:	429a      	cmp	r2, r3
  400cd0:	d20a      	bcs.n	400ce8 <Reset_Handler+0x4c>
  400cd2:	3b01      	subs	r3, #1
  400cd4:	1a9b      	subs	r3, r3, r2
  400cd6:	f023 0303 	bic.w	r3, r3, #3
  400cda:	3304      	adds	r3, #4
  400cdc:	4413      	add	r3, r2
                *pDest++ = 0;
  400cde:	2100      	movs	r1, #0
  400ce0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400ce4:	4293      	cmp	r3, r2
  400ce6:	d1fb      	bne.n	400ce0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ce8:	4a18      	ldr	r2, [pc, #96]	; (400d4c <Reset_Handler+0xb0>)
  400cea:	4b19      	ldr	r3, [pc, #100]	; (400d50 <Reset_Handler+0xb4>)
  400cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400cf0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400cf2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400cf6:	fab3 f383 	clz	r3, r3
  400cfa:	095b      	lsrs	r3, r3, #5
  400cfc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400cfe:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d00:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d04:	2200      	movs	r2, #0
  400d06:	4b13      	ldr	r3, [pc, #76]	; (400d54 <Reset_Handler+0xb8>)
  400d08:	701a      	strb	r2, [r3, #0]
	return flags;
  400d0a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400d0c:	4a12      	ldr	r2, [pc, #72]	; (400d58 <Reset_Handler+0xbc>)
  400d0e:	6813      	ldr	r3, [r2, #0]
  400d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d14:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400d16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d1a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d1e:	b129      	cbz	r1, 400d2c <Reset_Handler+0x90>
		cpu_irq_enable();
  400d20:	2201      	movs	r2, #1
  400d22:	4b0c      	ldr	r3, [pc, #48]	; (400d54 <Reset_Handler+0xb8>)
  400d24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400d26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d2a:	b662      	cpsie	i
        __libc_init_array();
  400d2c:	4b0b      	ldr	r3, [pc, #44]	; (400d5c <Reset_Handler+0xc0>)
  400d2e:	4798      	blx	r3
        main();
  400d30:	4b0b      	ldr	r3, [pc, #44]	; (400d60 <Reset_Handler+0xc4>)
  400d32:	4798      	blx	r3
  400d34:	e7fe      	b.n	400d34 <Reset_Handler+0x98>
  400d36:	bf00      	nop
  400d38:	20400000 	.word	0x20400000
  400d3c:	0040a69c 	.word	0x0040a69c
  400d40:	204009b8 	.word	0x204009b8
  400d44:	20400d5c 	.word	0x20400d5c
  400d48:	204009b8 	.word	0x204009b8
  400d4c:	e000ed00 	.word	0xe000ed00
  400d50:	00400000 	.word	0x00400000
  400d54:	20400000 	.word	0x20400000
  400d58:	e000ed88 	.word	0xe000ed88
  400d5c:	00403a09 	.word	0x00403a09
  400d60:	004037a9 	.word	0x004037a9

00400d64 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400d64:	4b3b      	ldr	r3, [pc, #236]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d68:	f003 0303 	and.w	r3, r3, #3
  400d6c:	2b01      	cmp	r3, #1
  400d6e:	d01d      	beq.n	400dac <SystemCoreClockUpdate+0x48>
  400d70:	b183      	cbz	r3, 400d94 <SystemCoreClockUpdate+0x30>
  400d72:	2b02      	cmp	r3, #2
  400d74:	d036      	beq.n	400de4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400d76:	4b37      	ldr	r3, [pc, #220]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d7e:	2b70      	cmp	r3, #112	; 0x70
  400d80:	d05f      	beq.n	400e42 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d82:	4b34      	ldr	r3, [pc, #208]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d86:	4934      	ldr	r1, [pc, #208]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400d88:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400d8c:	680b      	ldr	r3, [r1, #0]
  400d8e:	40d3      	lsrs	r3, r2
  400d90:	600b      	str	r3, [r1, #0]
  400d92:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400d94:	4b31      	ldr	r3, [pc, #196]	; (400e5c <SystemCoreClockUpdate+0xf8>)
  400d96:	695b      	ldr	r3, [r3, #20]
  400d98:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400d9c:	bf14      	ite	ne
  400d9e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400da2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400da6:	4b2c      	ldr	r3, [pc, #176]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400da8:	601a      	str	r2, [r3, #0]
  400daa:	e7e4      	b.n	400d76 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400dac:	4b29      	ldr	r3, [pc, #164]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400dae:	6a1b      	ldr	r3, [r3, #32]
  400db0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400db4:	d003      	beq.n	400dbe <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400db6:	4a2a      	ldr	r2, [pc, #168]	; (400e60 <SystemCoreClockUpdate+0xfc>)
  400db8:	4b27      	ldr	r3, [pc, #156]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400dba:	601a      	str	r2, [r3, #0]
  400dbc:	e7db      	b.n	400d76 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400dbe:	4a29      	ldr	r2, [pc, #164]	; (400e64 <SystemCoreClockUpdate+0x100>)
  400dc0:	4b25      	ldr	r3, [pc, #148]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400dc2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400dc4:	4b23      	ldr	r3, [pc, #140]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400dc6:	6a1b      	ldr	r3, [r3, #32]
  400dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400dcc:	2b10      	cmp	r3, #16
  400dce:	d005      	beq.n	400ddc <SystemCoreClockUpdate+0x78>
  400dd0:	2b20      	cmp	r3, #32
  400dd2:	d1d0      	bne.n	400d76 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400dd4:	4a22      	ldr	r2, [pc, #136]	; (400e60 <SystemCoreClockUpdate+0xfc>)
  400dd6:	4b20      	ldr	r3, [pc, #128]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400dd8:	601a      	str	r2, [r3, #0]
          break;
  400dda:	e7cc      	b.n	400d76 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400ddc:	4a22      	ldr	r2, [pc, #136]	; (400e68 <SystemCoreClockUpdate+0x104>)
  400dde:	4b1e      	ldr	r3, [pc, #120]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400de0:	601a      	str	r2, [r3, #0]
          break;
  400de2:	e7c8      	b.n	400d76 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400de4:	4b1b      	ldr	r3, [pc, #108]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400de6:	6a1b      	ldr	r3, [r3, #32]
  400de8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400dec:	d016      	beq.n	400e1c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400dee:	4a1c      	ldr	r2, [pc, #112]	; (400e60 <SystemCoreClockUpdate+0xfc>)
  400df0:	4b19      	ldr	r3, [pc, #100]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400df2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400df4:	4b17      	ldr	r3, [pc, #92]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400df8:	f003 0303 	and.w	r3, r3, #3
  400dfc:	2b02      	cmp	r3, #2
  400dfe:	d1ba      	bne.n	400d76 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e00:	4a14      	ldr	r2, [pc, #80]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400e02:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e04:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400e06:	4814      	ldr	r0, [pc, #80]	; (400e58 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e08:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400e0c:	6803      	ldr	r3, [r0, #0]
  400e0e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e12:	b2d2      	uxtb	r2, r2
  400e14:	fbb3 f3f2 	udiv	r3, r3, r2
  400e18:	6003      	str	r3, [r0, #0]
  400e1a:	e7ac      	b.n	400d76 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e1c:	4a11      	ldr	r2, [pc, #68]	; (400e64 <SystemCoreClockUpdate+0x100>)
  400e1e:	4b0e      	ldr	r3, [pc, #56]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400e20:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400e22:	4b0c      	ldr	r3, [pc, #48]	; (400e54 <SystemCoreClockUpdate+0xf0>)
  400e24:	6a1b      	ldr	r3, [r3, #32]
  400e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e2a:	2b10      	cmp	r3, #16
  400e2c:	d005      	beq.n	400e3a <SystemCoreClockUpdate+0xd6>
  400e2e:	2b20      	cmp	r3, #32
  400e30:	d1e0      	bne.n	400df4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400e32:	4a0b      	ldr	r2, [pc, #44]	; (400e60 <SystemCoreClockUpdate+0xfc>)
  400e34:	4b08      	ldr	r3, [pc, #32]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400e36:	601a      	str	r2, [r3, #0]
          break;
  400e38:	e7dc      	b.n	400df4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400e3a:	4a0b      	ldr	r2, [pc, #44]	; (400e68 <SystemCoreClockUpdate+0x104>)
  400e3c:	4b06      	ldr	r3, [pc, #24]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400e3e:	601a      	str	r2, [r3, #0]
          break;
  400e40:	e7d8      	b.n	400df4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400e42:	4a05      	ldr	r2, [pc, #20]	; (400e58 <SystemCoreClockUpdate+0xf4>)
  400e44:	6813      	ldr	r3, [r2, #0]
  400e46:	4909      	ldr	r1, [pc, #36]	; (400e6c <SystemCoreClockUpdate+0x108>)
  400e48:	fba1 1303 	umull	r1, r3, r1, r3
  400e4c:	085b      	lsrs	r3, r3, #1
  400e4e:	6013      	str	r3, [r2, #0]
  400e50:	4770      	bx	lr
  400e52:	bf00      	nop
  400e54:	400e0600 	.word	0x400e0600
  400e58:	20400004 	.word	0x20400004
  400e5c:	400e1810 	.word	0x400e1810
  400e60:	00b71b00 	.word	0x00b71b00
  400e64:	003d0900 	.word	0x003d0900
  400e68:	007a1200 	.word	0x007a1200
  400e6c:	aaaaaaab 	.word	0xaaaaaaab

00400e70 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400e70:	4b16      	ldr	r3, [pc, #88]	; (400ecc <system_init_flash+0x5c>)
  400e72:	4298      	cmp	r0, r3
  400e74:	d913      	bls.n	400e9e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400e76:	4b16      	ldr	r3, [pc, #88]	; (400ed0 <system_init_flash+0x60>)
  400e78:	4298      	cmp	r0, r3
  400e7a:	d915      	bls.n	400ea8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400e7c:	4b15      	ldr	r3, [pc, #84]	; (400ed4 <system_init_flash+0x64>)
  400e7e:	4298      	cmp	r0, r3
  400e80:	d916      	bls.n	400eb0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400e82:	4b15      	ldr	r3, [pc, #84]	; (400ed8 <system_init_flash+0x68>)
  400e84:	4298      	cmp	r0, r3
  400e86:	d917      	bls.n	400eb8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400e88:	4b14      	ldr	r3, [pc, #80]	; (400edc <system_init_flash+0x6c>)
  400e8a:	4298      	cmp	r0, r3
  400e8c:	d918      	bls.n	400ec0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400e8e:	4b14      	ldr	r3, [pc, #80]	; (400ee0 <system_init_flash+0x70>)
  400e90:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400e92:	bf94      	ite	ls
  400e94:	4a13      	ldrls	r2, [pc, #76]	; (400ee4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400e96:	4a14      	ldrhi	r2, [pc, #80]	; (400ee8 <system_init_flash+0x78>)
  400e98:	4b14      	ldr	r3, [pc, #80]	; (400eec <system_init_flash+0x7c>)
  400e9a:	601a      	str	r2, [r3, #0]
  400e9c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400e9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400ea2:	4b12      	ldr	r3, [pc, #72]	; (400eec <system_init_flash+0x7c>)
  400ea4:	601a      	str	r2, [r3, #0]
  400ea6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ea8:	4a11      	ldr	r2, [pc, #68]	; (400ef0 <system_init_flash+0x80>)
  400eaa:	4b10      	ldr	r3, [pc, #64]	; (400eec <system_init_flash+0x7c>)
  400eac:	601a      	str	r2, [r3, #0]
  400eae:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400eb0:	4a10      	ldr	r2, [pc, #64]	; (400ef4 <system_init_flash+0x84>)
  400eb2:	4b0e      	ldr	r3, [pc, #56]	; (400eec <system_init_flash+0x7c>)
  400eb4:	601a      	str	r2, [r3, #0]
  400eb6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400eb8:	4a0f      	ldr	r2, [pc, #60]	; (400ef8 <system_init_flash+0x88>)
  400eba:	4b0c      	ldr	r3, [pc, #48]	; (400eec <system_init_flash+0x7c>)
  400ebc:	601a      	str	r2, [r3, #0]
  400ebe:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400ec0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400ec4:	4b09      	ldr	r3, [pc, #36]	; (400eec <system_init_flash+0x7c>)
  400ec6:	601a      	str	r2, [r3, #0]
  400ec8:	4770      	bx	lr
  400eca:	bf00      	nop
  400ecc:	015ef3bf 	.word	0x015ef3bf
  400ed0:	02bde77f 	.word	0x02bde77f
  400ed4:	041cdb3f 	.word	0x041cdb3f
  400ed8:	057bceff 	.word	0x057bceff
  400edc:	06dac2bf 	.word	0x06dac2bf
  400ee0:	0839b67f 	.word	0x0839b67f
  400ee4:	04000500 	.word	0x04000500
  400ee8:	04000600 	.word	0x04000600
  400eec:	400e0c00 	.word	0x400e0c00
  400ef0:	04000100 	.word	0x04000100
  400ef4:	04000200 	.word	0x04000200
  400ef8:	04000300 	.word	0x04000300

00400efc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400efc:	4b0a      	ldr	r3, [pc, #40]	; (400f28 <_sbrk+0x2c>)
  400efe:	681b      	ldr	r3, [r3, #0]
  400f00:	b153      	cbz	r3, 400f18 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400f02:	4b09      	ldr	r3, [pc, #36]	; (400f28 <_sbrk+0x2c>)
  400f04:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400f06:	181a      	adds	r2, r3, r0
  400f08:	4908      	ldr	r1, [pc, #32]	; (400f2c <_sbrk+0x30>)
  400f0a:	4291      	cmp	r1, r2
  400f0c:	db08      	blt.n	400f20 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f0e:	4610      	mov	r0, r2
  400f10:	4a05      	ldr	r2, [pc, #20]	; (400f28 <_sbrk+0x2c>)
  400f12:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f14:	4618      	mov	r0, r3
  400f16:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400f18:	4a05      	ldr	r2, [pc, #20]	; (400f30 <_sbrk+0x34>)
  400f1a:	4b03      	ldr	r3, [pc, #12]	; (400f28 <_sbrk+0x2c>)
  400f1c:	601a      	str	r2, [r3, #0]
  400f1e:	e7f0      	b.n	400f02 <_sbrk+0x6>
		return (caddr_t) -1;	
  400f20:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f24:	4770      	bx	lr
  400f26:	bf00      	nop
  400f28:	20400a54 	.word	0x20400a54
  400f2c:	2045fffc 	.word	0x2045fffc
  400f30:	20402f60 	.word	0x20402f60

00400f34 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400f34:	f04f 30ff 	mov.w	r0, #4294967295
  400f38:	4770      	bx	lr

00400f3a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400f3e:	604b      	str	r3, [r1, #4]

	return 0;
}
  400f40:	2000      	movs	r0, #0
  400f42:	4770      	bx	lr

00400f44 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400f44:	2001      	movs	r0, #1
  400f46:	4770      	bx	lr

00400f48 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400f48:	2000      	movs	r0, #0
  400f4a:	4770      	bx	lr

00400f4c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f4c:	f100 0308 	add.w	r3, r0, #8
  400f50:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400f52:	f04f 32ff 	mov.w	r2, #4294967295
  400f56:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f58:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f5a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400f5c:	2300      	movs	r3, #0
  400f5e:	6003      	str	r3, [r0, #0]
  400f60:	4770      	bx	lr

00400f62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400f62:	2300      	movs	r3, #0
  400f64:	6103      	str	r3, [r0, #16]
  400f66:	4770      	bx	lr

00400f68 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400f68:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400f6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400f6c:	689a      	ldr	r2, [r3, #8]
  400f6e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400f70:	689a      	ldr	r2, [r3, #8]
  400f72:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400f74:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400f76:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400f78:	6803      	ldr	r3, [r0, #0]
  400f7a:	3301      	adds	r3, #1
  400f7c:	6003      	str	r3, [r0, #0]
  400f7e:	4770      	bx	lr

00400f80 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400f80:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400f82:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400f84:	f1b5 3fff 	cmp.w	r5, #4294967295
  400f88:	d002      	beq.n	400f90 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f8a:	f100 0208 	add.w	r2, r0, #8
  400f8e:	e002      	b.n	400f96 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400f90:	6902      	ldr	r2, [r0, #16]
  400f92:	e004      	b.n	400f9e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f94:	461a      	mov	r2, r3
  400f96:	6853      	ldr	r3, [r2, #4]
  400f98:	681c      	ldr	r4, [r3, #0]
  400f9a:	42a5      	cmp	r5, r4
  400f9c:	d2fa      	bcs.n	400f94 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400f9e:	6853      	ldr	r3, [r2, #4]
  400fa0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400fa2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400fa4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400fa6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400fa8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400faa:	6803      	ldr	r3, [r0, #0]
  400fac:	3301      	adds	r3, #1
  400fae:	6003      	str	r3, [r0, #0]
}
  400fb0:	bc30      	pop	{r4, r5}
  400fb2:	4770      	bx	lr

00400fb4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400fb4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400fb6:	6842      	ldr	r2, [r0, #4]
  400fb8:	6881      	ldr	r1, [r0, #8]
  400fba:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400fbc:	6882      	ldr	r2, [r0, #8]
  400fbe:	6841      	ldr	r1, [r0, #4]
  400fc0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400fc2:	685a      	ldr	r2, [r3, #4]
  400fc4:	4290      	cmp	r0, r2
  400fc6:	d006      	beq.n	400fd6 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400fc8:	2200      	movs	r2, #0
  400fca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400fcc:	681a      	ldr	r2, [r3, #0]
  400fce:	3a01      	subs	r2, #1
  400fd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400fd2:	6818      	ldr	r0, [r3, #0]
}
  400fd4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400fd6:	6882      	ldr	r2, [r0, #8]
  400fd8:	605a      	str	r2, [r3, #4]
  400fda:	e7f5      	b.n	400fc8 <uxListRemove+0x14>

00400fdc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400fdc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400fde:	2300      	movs	r3, #0
  400fe0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400fe2:	4b0f      	ldr	r3, [pc, #60]	; (401020 <prvTaskExitError+0x44>)
  400fe4:	681b      	ldr	r3, [r3, #0]
  400fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fea:	d00a      	beq.n	401002 <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400fec:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ff0:	b672      	cpsid	i
  400ff2:	f383 8811 	msr	BASEPRI, r3
  400ff6:	f3bf 8f6f 	isb	sy
  400ffa:	f3bf 8f4f 	dsb	sy
  400ffe:	b662      	cpsie	i
  401000:	e7fe      	b.n	401000 <prvTaskExitError+0x24>
  401002:	f04f 0380 	mov.w	r3, #128	; 0x80
  401006:	b672      	cpsid	i
  401008:	f383 8811 	msr	BASEPRI, r3
  40100c:	f3bf 8f6f 	isb	sy
  401010:	f3bf 8f4f 	dsb	sy
  401014:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  401016:	9b01      	ldr	r3, [sp, #4]
  401018:	2b00      	cmp	r3, #0
  40101a:	d0fc      	beq.n	401016 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  40101c:	b002      	add	sp, #8
  40101e:	4770      	bx	lr
  401020:	20400008 	.word	0x20400008

00401024 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  401024:	4808      	ldr	r0, [pc, #32]	; (401048 <prvPortStartFirstTask+0x24>)
  401026:	6800      	ldr	r0, [r0, #0]
  401028:	6800      	ldr	r0, [r0, #0]
  40102a:	f380 8808 	msr	MSP, r0
  40102e:	f04f 0000 	mov.w	r0, #0
  401032:	f380 8814 	msr	CONTROL, r0
  401036:	b662      	cpsie	i
  401038:	b661      	cpsie	f
  40103a:	f3bf 8f4f 	dsb	sy
  40103e:	f3bf 8f6f 	isb	sy
  401042:	df00      	svc	0
  401044:	bf00      	nop
  401046:	0000      	.short	0x0000
  401048:	e000ed08 	.word	0xe000ed08

0040104c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40104c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40105c <vPortEnableVFP+0x10>
  401050:	6801      	ldr	r1, [r0, #0]
  401052:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401056:	6001      	str	r1, [r0, #0]
  401058:	4770      	bx	lr
  40105a:	0000      	.short	0x0000
  40105c:	e000ed88 	.word	0xe000ed88

00401060 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401064:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  401068:	f021 0101 	bic.w	r1, r1, #1
  40106c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401070:	4b05      	ldr	r3, [pc, #20]	; (401088 <pxPortInitialiseStack+0x28>)
  401072:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401076:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40107a:	f06f 0302 	mvn.w	r3, #2
  40107e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401082:	3844      	subs	r0, #68	; 0x44
  401084:	4770      	bx	lr
  401086:	bf00      	nop
  401088:	00400fdd 	.word	0x00400fdd
  40108c:	00000000 	.word	0x00000000

00401090 <SVC_Handler>:
	__asm volatile (
  401090:	4b07      	ldr	r3, [pc, #28]	; (4010b0 <pxCurrentTCBConst2>)
  401092:	6819      	ldr	r1, [r3, #0]
  401094:	6808      	ldr	r0, [r1, #0]
  401096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40109a:	f380 8809 	msr	PSP, r0
  40109e:	f3bf 8f6f 	isb	sy
  4010a2:	f04f 0000 	mov.w	r0, #0
  4010a6:	f380 8811 	msr	BASEPRI, r0
  4010aa:	4770      	bx	lr
  4010ac:	f3af 8000 	nop.w

004010b0 <pxCurrentTCBConst2>:
  4010b0:	20400a60 	.word	0x20400a60

004010b4 <vPortEnterCritical>:
  4010b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010b8:	b672      	cpsid	i
  4010ba:	f383 8811 	msr	BASEPRI, r3
  4010be:	f3bf 8f6f 	isb	sy
  4010c2:	f3bf 8f4f 	dsb	sy
  4010c6:	b662      	cpsie	i
	uxCriticalNesting++;
  4010c8:	4a0b      	ldr	r2, [pc, #44]	; (4010f8 <vPortEnterCritical+0x44>)
  4010ca:	6813      	ldr	r3, [r2, #0]
  4010cc:	3301      	adds	r3, #1
  4010ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4010d0:	2b01      	cmp	r3, #1
  4010d2:	d10f      	bne.n	4010f4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4010d4:	4b09      	ldr	r3, [pc, #36]	; (4010fc <vPortEnterCritical+0x48>)
  4010d6:	681b      	ldr	r3, [r3, #0]
  4010d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010dc:	d00a      	beq.n	4010f4 <vPortEnterCritical+0x40>
  4010de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010e2:	b672      	cpsid	i
  4010e4:	f383 8811 	msr	BASEPRI, r3
  4010e8:	f3bf 8f6f 	isb	sy
  4010ec:	f3bf 8f4f 	dsb	sy
  4010f0:	b662      	cpsie	i
  4010f2:	e7fe      	b.n	4010f2 <vPortEnterCritical+0x3e>
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	20400008 	.word	0x20400008
  4010fc:	e000ed04 	.word	0xe000ed04

00401100 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401100:	4b0a      	ldr	r3, [pc, #40]	; (40112c <vPortExitCritical+0x2c>)
  401102:	681b      	ldr	r3, [r3, #0]
  401104:	b953      	cbnz	r3, 40111c <vPortExitCritical+0x1c>
  401106:	f04f 0380 	mov.w	r3, #128	; 0x80
  40110a:	b672      	cpsid	i
  40110c:	f383 8811 	msr	BASEPRI, r3
  401110:	f3bf 8f6f 	isb	sy
  401114:	f3bf 8f4f 	dsb	sy
  401118:	b662      	cpsie	i
  40111a:	e7fe      	b.n	40111a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40111c:	3b01      	subs	r3, #1
  40111e:	4a03      	ldr	r2, [pc, #12]	; (40112c <vPortExitCritical+0x2c>)
  401120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401122:	b90b      	cbnz	r3, 401128 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401124:	f383 8811 	msr	BASEPRI, r3
  401128:	4770      	bx	lr
  40112a:	bf00      	nop
  40112c:	20400008 	.word	0x20400008

00401130 <PendSV_Handler>:
	__asm volatile
  401130:	f3ef 8009 	mrs	r0, PSP
  401134:	f3bf 8f6f 	isb	sy
  401138:	4b15      	ldr	r3, [pc, #84]	; (401190 <pxCurrentTCBConst>)
  40113a:	681a      	ldr	r2, [r3, #0]
  40113c:	f01e 0f10 	tst.w	lr, #16
  401140:	bf08      	it	eq
  401142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40114a:	6010      	str	r0, [r2, #0]
  40114c:	e92d 0009 	stmdb	sp!, {r0, r3}
  401150:	f04f 0080 	mov.w	r0, #128	; 0x80
  401154:	b672      	cpsid	i
  401156:	f380 8811 	msr	BASEPRI, r0
  40115a:	f3bf 8f4f 	dsb	sy
  40115e:	f3bf 8f6f 	isb	sy
  401162:	b662      	cpsie	i
  401164:	f001 f9c4 	bl	4024f0 <vTaskSwitchContext>
  401168:	f04f 0000 	mov.w	r0, #0
  40116c:	f380 8811 	msr	BASEPRI, r0
  401170:	bc09      	pop	{r0, r3}
  401172:	6819      	ldr	r1, [r3, #0]
  401174:	6808      	ldr	r0, [r1, #0]
  401176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40117a:	f01e 0f10 	tst.w	lr, #16
  40117e:	bf08      	it	eq
  401180:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401184:	f380 8809 	msr	PSP, r0
  401188:	f3bf 8f6f 	isb	sy
  40118c:	4770      	bx	lr
  40118e:	bf00      	nop

00401190 <pxCurrentTCBConst>:
  401190:	20400a60 	.word	0x20400a60

00401194 <SysTick_Handler>:
{
  401194:	b508      	push	{r3, lr}
	__asm volatile
  401196:	f04f 0380 	mov.w	r3, #128	; 0x80
  40119a:	b672      	cpsid	i
  40119c:	f383 8811 	msr	BASEPRI, r3
  4011a0:	f3bf 8f6f 	isb	sy
  4011a4:	f3bf 8f4f 	dsb	sy
  4011a8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4011aa:	4b05      	ldr	r3, [pc, #20]	; (4011c0 <SysTick_Handler+0x2c>)
  4011ac:	4798      	blx	r3
  4011ae:	b118      	cbz	r0, 4011b8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4011b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011b4:	4b03      	ldr	r3, [pc, #12]	; (4011c4 <SysTick_Handler+0x30>)
  4011b6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4011b8:	2300      	movs	r3, #0
  4011ba:	f383 8811 	msr	BASEPRI, r3
  4011be:	bd08      	pop	{r3, pc}
  4011c0:	00402235 	.word	0x00402235
  4011c4:	e000ed04 	.word	0xe000ed04

004011c8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4011c8:	4b05      	ldr	r3, [pc, #20]	; (4011e0 <vPortSetupTimerInterrupt+0x18>)
  4011ca:	2200      	movs	r2, #0
  4011cc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4011ce:	4905      	ldr	r1, [pc, #20]	; (4011e4 <vPortSetupTimerInterrupt+0x1c>)
  4011d0:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4011d2:	4905      	ldr	r1, [pc, #20]	; (4011e8 <vPortSetupTimerInterrupt+0x20>)
  4011d4:	4a05      	ldr	r2, [pc, #20]	; (4011ec <vPortSetupTimerInterrupt+0x24>)
  4011d6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4011d8:	2207      	movs	r2, #7
  4011da:	601a      	str	r2, [r3, #0]
  4011dc:	4770      	bx	lr
  4011de:	bf00      	nop
  4011e0:	e000e010 	.word	0xe000e010
  4011e4:	e000e018 	.word	0xe000e018
  4011e8:	000927bf 	.word	0x000927bf
  4011ec:	e000e014 	.word	0xe000e014

004011f0 <xPortStartScheduler>:
{
  4011f0:	b510      	push	{r4, lr}
  4011f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4011f4:	4b2e      	ldr	r3, [pc, #184]	; (4012b0 <xPortStartScheduler+0xc0>)
  4011f6:	781a      	ldrb	r2, [r3, #0]
  4011f8:	b2d2      	uxtb	r2, r2
  4011fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4011fc:	22ff      	movs	r2, #255	; 0xff
  4011fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401200:	781b      	ldrb	r3, [r3, #0]
  401202:	b2db      	uxtb	r3, r3
  401204:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401208:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401210:	4a28      	ldr	r2, [pc, #160]	; (4012b4 <xPortStartScheduler+0xc4>)
  401212:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401214:	2207      	movs	r2, #7
  401216:	4b28      	ldr	r3, [pc, #160]	; (4012b8 <xPortStartScheduler+0xc8>)
  401218:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40121a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40121e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401222:	d012      	beq.n	40124a <xPortStartScheduler+0x5a>
  401224:	2306      	movs	r3, #6
  401226:	e000      	b.n	40122a <xPortStartScheduler+0x3a>
  401228:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40122a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40122e:	0052      	lsls	r2, r2, #1
  401230:	b2d2      	uxtb	r2, r2
  401232:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401236:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40123a:	1e59      	subs	r1, r3, #1
  40123c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401240:	d1f2      	bne.n	401228 <xPortStartScheduler+0x38>
  401242:	4a1d      	ldr	r2, [pc, #116]	; (4012b8 <xPortStartScheduler+0xc8>)
  401244:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401246:	2b04      	cmp	r3, #4
  401248:	d00a      	beq.n	401260 <xPortStartScheduler+0x70>
	__asm volatile
  40124a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40124e:	b672      	cpsid	i
  401250:	f383 8811 	msr	BASEPRI, r3
  401254:	f3bf 8f6f 	isb	sy
  401258:	f3bf 8f4f 	dsb	sy
  40125c:	b662      	cpsie	i
  40125e:	e7fe      	b.n	40125e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401260:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401262:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401266:	4a14      	ldr	r2, [pc, #80]	; (4012b8 <xPortStartScheduler+0xc8>)
  401268:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40126a:	9b01      	ldr	r3, [sp, #4]
  40126c:	b2db      	uxtb	r3, r3
  40126e:	4a10      	ldr	r2, [pc, #64]	; (4012b0 <xPortStartScheduler+0xc0>)
  401270:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401272:	4b12      	ldr	r3, [pc, #72]	; (4012bc <xPortStartScheduler+0xcc>)
  401274:	681a      	ldr	r2, [r3, #0]
  401276:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40127a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40127c:	681a      	ldr	r2, [r3, #0]
  40127e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401282:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401284:	4b0e      	ldr	r3, [pc, #56]	; (4012c0 <xPortStartScheduler+0xd0>)
  401286:	4798      	blx	r3
	uxCriticalNesting = 0;
  401288:	2400      	movs	r4, #0
  40128a:	4b0e      	ldr	r3, [pc, #56]	; (4012c4 <xPortStartScheduler+0xd4>)
  40128c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40128e:	4b0e      	ldr	r3, [pc, #56]	; (4012c8 <xPortStartScheduler+0xd8>)
  401290:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401292:	4a0e      	ldr	r2, [pc, #56]	; (4012cc <xPortStartScheduler+0xdc>)
  401294:	6813      	ldr	r3, [r2, #0]
  401296:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40129a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40129c:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <xPortStartScheduler+0xe0>)
  40129e:	4798      	blx	r3
	vTaskSwitchContext();
  4012a0:	4b0c      	ldr	r3, [pc, #48]	; (4012d4 <xPortStartScheduler+0xe4>)
  4012a2:	4798      	blx	r3
	prvTaskExitError();
  4012a4:	4b0c      	ldr	r3, [pc, #48]	; (4012d8 <xPortStartScheduler+0xe8>)
  4012a6:	4798      	blx	r3
}
  4012a8:	4620      	mov	r0, r4
  4012aa:	b002      	add	sp, #8
  4012ac:	bd10      	pop	{r4, pc}
  4012ae:	bf00      	nop
  4012b0:	e000e400 	.word	0xe000e400
  4012b4:	20400a58 	.word	0x20400a58
  4012b8:	20400a5c 	.word	0x20400a5c
  4012bc:	e000ed20 	.word	0xe000ed20
  4012c0:	004011c9 	.word	0x004011c9
  4012c4:	20400008 	.word	0x20400008
  4012c8:	0040104d 	.word	0x0040104d
  4012cc:	e000ef34 	.word	0xe000ef34
  4012d0:	00401025 	.word	0x00401025
  4012d4:	004024f1 	.word	0x004024f1
  4012d8:	00400fdd 	.word	0x00400fdd

004012dc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4012dc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4012e0:	2b0f      	cmp	r3, #15
  4012e2:	d911      	bls.n	401308 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4012e4:	4a12      	ldr	r2, [pc, #72]	; (401330 <vPortValidateInterruptPriority+0x54>)
  4012e6:	5c9b      	ldrb	r3, [r3, r2]
  4012e8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4012ea:	4a12      	ldr	r2, [pc, #72]	; (401334 <vPortValidateInterruptPriority+0x58>)
  4012ec:	7812      	ldrb	r2, [r2, #0]
  4012ee:	429a      	cmp	r2, r3
  4012f0:	d90a      	bls.n	401308 <vPortValidateInterruptPriority+0x2c>
  4012f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012f6:	b672      	cpsid	i
  4012f8:	f383 8811 	msr	BASEPRI, r3
  4012fc:	f3bf 8f6f 	isb	sy
  401300:	f3bf 8f4f 	dsb	sy
  401304:	b662      	cpsie	i
  401306:	e7fe      	b.n	401306 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401308:	4b0b      	ldr	r3, [pc, #44]	; (401338 <vPortValidateInterruptPriority+0x5c>)
  40130a:	681b      	ldr	r3, [r3, #0]
  40130c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401310:	4a0a      	ldr	r2, [pc, #40]	; (40133c <vPortValidateInterruptPriority+0x60>)
  401312:	6812      	ldr	r2, [r2, #0]
  401314:	4293      	cmp	r3, r2
  401316:	d90a      	bls.n	40132e <vPortValidateInterruptPriority+0x52>
  401318:	f04f 0380 	mov.w	r3, #128	; 0x80
  40131c:	b672      	cpsid	i
  40131e:	f383 8811 	msr	BASEPRI, r3
  401322:	f3bf 8f6f 	isb	sy
  401326:	f3bf 8f4f 	dsb	sy
  40132a:	b662      	cpsie	i
  40132c:	e7fe      	b.n	40132c <vPortValidateInterruptPriority+0x50>
  40132e:	4770      	bx	lr
  401330:	e000e3f0 	.word	0xe000e3f0
  401334:	20400a58 	.word	0x20400a58
  401338:	e000ed0c 	.word	0xe000ed0c
  40133c:	20400a5c 	.word	0x20400a5c

00401340 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401340:	b510      	push	{r4, lr}
  401342:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401344:	4b06      	ldr	r3, [pc, #24]	; (401360 <pvPortMalloc+0x20>)
  401346:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401348:	4620      	mov	r0, r4
  40134a:	4b06      	ldr	r3, [pc, #24]	; (401364 <pvPortMalloc+0x24>)
  40134c:	4798      	blx	r3
  40134e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401350:	4b05      	ldr	r3, [pc, #20]	; (401368 <pvPortMalloc+0x28>)
  401352:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401354:	b10c      	cbz	r4, 40135a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401356:	4620      	mov	r0, r4
  401358:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40135a:	4b04      	ldr	r3, [pc, #16]	; (40136c <pvPortMalloc+0x2c>)
  40135c:	4798      	blx	r3
	return pvReturn;
  40135e:	e7fa      	b.n	401356 <pvPortMalloc+0x16>
  401360:	0040220d 	.word	0x0040220d
  401364:	00403a81 	.word	0x00403a81
  401368:	0040237d 	.word	0x0040237d
  40136c:	00403793 	.word	0x00403793

00401370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401370:	b148      	cbz	r0, 401386 <vPortFree+0x16>
{
  401372:	b510      	push	{r4, lr}
  401374:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401376:	4b04      	ldr	r3, [pc, #16]	; (401388 <vPortFree+0x18>)
  401378:	4798      	blx	r3
		{
			free( pv );
  40137a:	4620      	mov	r0, r4
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <vPortFree+0x1c>)
  40137e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401380:	4b03      	ldr	r3, [pc, #12]	; (401390 <vPortFree+0x20>)
  401382:	4798      	blx	r3
  401384:	bd10      	pop	{r4, pc}
  401386:	4770      	bx	lr
  401388:	0040220d 	.word	0x0040220d
  40138c:	00403a91 	.word	0x00403a91
  401390:	0040237d 	.word	0x0040237d

00401394 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  401394:	b510      	push	{r4, lr}
  401396:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401398:	4b04      	ldr	r3, [pc, #16]	; (4013ac <prvIsQueueEmpty+0x18>)
  40139a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40139c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40139e:	4b04      	ldr	r3, [pc, #16]	; (4013b0 <prvIsQueueEmpty+0x1c>)
  4013a0:	4798      	blx	r3

	return xReturn;
}
  4013a2:	fab4 f084 	clz	r0, r4
  4013a6:	0940      	lsrs	r0, r0, #5
  4013a8:	bd10      	pop	{r4, pc}
  4013aa:	bf00      	nop
  4013ac:	004010b5 	.word	0x004010b5
  4013b0:	00401101 	.word	0x00401101

004013b4 <prvCopyDataToQueue>:
{
  4013b4:	b570      	push	{r4, r5, r6, lr}
  4013b6:	4604      	mov	r4, r0
  4013b8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4013ba:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4013bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4013be:	b952      	cbnz	r2, 4013d6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4013c0:	6803      	ldr	r3, [r0, #0]
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d12a      	bne.n	40141c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4013c6:	6840      	ldr	r0, [r0, #4]
  4013c8:	4b17      	ldr	r3, [pc, #92]	; (401428 <prvCopyDataToQueue+0x74>)
  4013ca:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4013cc:	2300      	movs	r3, #0
  4013ce:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4013d0:	3501      	adds	r5, #1
  4013d2:	63a5      	str	r5, [r4, #56]	; 0x38
}
  4013d4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4013d6:	b96e      	cbnz	r6, 4013f4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4013d8:	6880      	ldr	r0, [r0, #8]
  4013da:	4b14      	ldr	r3, [pc, #80]	; (40142c <prvCopyDataToQueue+0x78>)
  4013dc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4013de:	68a3      	ldr	r3, [r4, #8]
  4013e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4013e2:	4413      	add	r3, r2
  4013e4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4013e6:	6862      	ldr	r2, [r4, #4]
  4013e8:	4293      	cmp	r3, r2
  4013ea:	d319      	bcc.n	401420 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4013ec:	6823      	ldr	r3, [r4, #0]
  4013ee:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4013f0:	2000      	movs	r0, #0
  4013f2:	e7ed      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013f4:	68c0      	ldr	r0, [r0, #12]
  4013f6:	4b0d      	ldr	r3, [pc, #52]	; (40142c <prvCopyDataToQueue+0x78>)
  4013f8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4013fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4013fc:	425b      	negs	r3, r3
  4013fe:	68e2      	ldr	r2, [r4, #12]
  401400:	441a      	add	r2, r3
  401402:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401404:	6821      	ldr	r1, [r4, #0]
  401406:	428a      	cmp	r2, r1
  401408:	d202      	bcs.n	401410 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40140a:	6862      	ldr	r2, [r4, #4]
  40140c:	4413      	add	r3, r2
  40140e:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401410:	b145      	cbz	r5, 401424 <prvCopyDataToQueue+0x70>
  401412:	2e02      	cmp	r6, #2
  401414:	d106      	bne.n	401424 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401416:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401418:	2000      	movs	r0, #0
  40141a:	e7d9      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  40141c:	2000      	movs	r0, #0
  40141e:	e7d7      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  401420:	2000      	movs	r0, #0
  401422:	e7d5      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  401424:	2000      	movs	r0, #0
  401426:	e7d3      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  401428:	00402a39 	.word	0x00402a39
  40142c:	00404001 	.word	0x00404001

00401430 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401430:	b570      	push	{r4, r5, r6, lr}
  401432:	b082      	sub	sp, #8
  401434:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401436:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401438:	b174      	cbz	r4, 401458 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40143a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40143c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40143e:	429a      	cmp	r2, r3
  401440:	d315      	bcc.n	40146e <prvNotifyQueueSetContainer+0x3e>
  401442:	f04f 0380 	mov.w	r3, #128	; 0x80
  401446:	b672      	cpsid	i
  401448:	f383 8811 	msr	BASEPRI, r3
  40144c:	f3bf 8f6f 	isb	sy
  401450:	f3bf 8f4f 	dsb	sy
  401454:	b662      	cpsie	i
  401456:	e7fe      	b.n	401456 <prvNotifyQueueSetContainer+0x26>
  401458:	f04f 0380 	mov.w	r3, #128	; 0x80
  40145c:	b672      	cpsid	i
  40145e:	f383 8811 	msr	BASEPRI, r3
  401462:	f3bf 8f6f 	isb	sy
  401466:	f3bf 8f4f 	dsb	sy
  40146a:	b662      	cpsie	i
  40146c:	e7fe      	b.n	40146c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40146e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401470:	4293      	cmp	r3, r2
  401472:	d803      	bhi.n	40147c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401474:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401476:	4630      	mov	r0, r6
  401478:	b002      	add	sp, #8
  40147a:	bd70      	pop	{r4, r5, r6, pc}
  40147c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40147e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401482:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401484:	a901      	add	r1, sp, #4
  401486:	4620      	mov	r0, r4
  401488:	4b0a      	ldr	r3, [pc, #40]	; (4014b4 <prvNotifyQueueSetContainer+0x84>)
  40148a:	4798      	blx	r3
  40148c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40148e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401492:	d10a      	bne.n	4014aa <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401494:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401496:	2b00      	cmp	r3, #0
  401498:	d0ed      	beq.n	401476 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40149a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40149e:	4b06      	ldr	r3, [pc, #24]	; (4014b8 <prvNotifyQueueSetContainer+0x88>)
  4014a0:	4798      	blx	r3
  4014a2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4014a4:	bf18      	it	ne
  4014a6:	2601      	movne	r6, #1
  4014a8:	e7e5      	b.n	401476 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4014aa:	1c6b      	adds	r3, r5, #1
  4014ac:	b25b      	sxtb	r3, r3
  4014ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4014b2:	e7e0      	b.n	401476 <prvNotifyQueueSetContainer+0x46>
  4014b4:	004013b5 	.word	0x004013b5
  4014b8:	00402645 	.word	0x00402645

004014bc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4014bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014be:	b172      	cbz	r2, 4014de <prvCopyDataFromQueue+0x22>
{
  4014c0:	b510      	push	{r4, lr}
  4014c2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4014c4:	68c4      	ldr	r4, [r0, #12]
  4014c6:	4414      	add	r4, r2
  4014c8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4014ca:	6840      	ldr	r0, [r0, #4]
  4014cc:	4284      	cmp	r4, r0
  4014ce:	d301      	bcc.n	4014d4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4014d0:	6818      	ldr	r0, [r3, #0]
  4014d2:	60d8      	str	r0, [r3, #12]
  4014d4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4014d6:	68d9      	ldr	r1, [r3, #12]
  4014d8:	4b01      	ldr	r3, [pc, #4]	; (4014e0 <prvCopyDataFromQueue+0x24>)
  4014da:	4798      	blx	r3
  4014dc:	bd10      	pop	{r4, pc}
  4014de:	4770      	bx	lr
  4014e0:	00404001 	.word	0x00404001

004014e4 <prvUnlockQueue>:
{
  4014e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014e8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4014ea:	4b23      	ldr	r3, [pc, #140]	; (401578 <prvUnlockQueue+0x94>)
  4014ec:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4014ee:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4014f2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4014f4:	2c00      	cmp	r4, #0
  4014f6:	dd19      	ble.n	40152c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4014f8:	4e20      	ldr	r6, [pc, #128]	; (40157c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  4014fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401588 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014fe:	4f20      	ldr	r7, [pc, #128]	; (401580 <prvUnlockQueue+0x9c>)
  401500:	e008      	b.n	401514 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401504:	b193      	cbz	r3, 40152c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401506:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40150a:	47b8      	blx	r7
  40150c:	b960      	cbnz	r0, 401528 <prvUnlockQueue+0x44>
  40150e:	3c01      	subs	r4, #1
  401510:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401512:	b15c      	cbz	r4, 40152c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401514:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401516:	2b00      	cmp	r3, #0
  401518:	d0f3      	beq.n	401502 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40151a:	2100      	movs	r1, #0
  40151c:	4628      	mov	r0, r5
  40151e:	47b0      	blx	r6
  401520:	2800      	cmp	r0, #0
  401522:	d0f4      	beq.n	40150e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401524:	47c0      	blx	r8
  401526:	e7f2      	b.n	40150e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401528:	47c0      	blx	r8
  40152a:	e7f0      	b.n	40150e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40152c:	23ff      	movs	r3, #255	; 0xff
  40152e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401532:	4b14      	ldr	r3, [pc, #80]	; (401584 <prvUnlockQueue+0xa0>)
  401534:	4798      	blx	r3
	taskENTER_CRITICAL();
  401536:	4b10      	ldr	r3, [pc, #64]	; (401578 <prvUnlockQueue+0x94>)
  401538:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40153a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40153e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401540:	2c00      	cmp	r4, #0
  401542:	dd12      	ble.n	40156a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401544:	692b      	ldr	r3, [r5, #16]
  401546:	b183      	cbz	r3, 40156a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401548:	f105 0710 	add.w	r7, r5, #16
  40154c:	4e0c      	ldr	r6, [pc, #48]	; (401580 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40154e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401588 <prvUnlockQueue+0xa4>
  401552:	e004      	b.n	40155e <prvUnlockQueue+0x7a>
  401554:	3c01      	subs	r4, #1
  401556:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401558:	b13c      	cbz	r4, 40156a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40155a:	692b      	ldr	r3, [r5, #16]
  40155c:	b12b      	cbz	r3, 40156a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40155e:	4638      	mov	r0, r7
  401560:	47b0      	blx	r6
  401562:	2800      	cmp	r0, #0
  401564:	d0f6      	beq.n	401554 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401566:	47c0      	blx	r8
  401568:	e7f4      	b.n	401554 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40156a:	23ff      	movs	r3, #255	; 0xff
  40156c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401570:	4b04      	ldr	r3, [pc, #16]	; (401584 <prvUnlockQueue+0xa0>)
  401572:	4798      	blx	r3
  401574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401578:	004010b5 	.word	0x004010b5
  40157c:	00401431 	.word	0x00401431
  401580:	00402645 	.word	0x00402645
  401584:	00401101 	.word	0x00401101
  401588:	00402789 	.word	0x00402789

0040158c <xQueueGenericReset>:
{
  40158c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40158e:	b330      	cbz	r0, 4015de <xQueueGenericReset+0x52>
  401590:	4604      	mov	r4, r0
  401592:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401594:	4b1d      	ldr	r3, [pc, #116]	; (40160c <xQueueGenericReset+0x80>)
  401596:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401598:	6822      	ldr	r2, [r4, #0]
  40159a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40159c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40159e:	fb03 f301 	mul.w	r3, r3, r1
  4015a2:	18d0      	adds	r0, r2, r3
  4015a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4015a6:	2000      	movs	r0, #0
  4015a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4015aa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4015ac:	1a5b      	subs	r3, r3, r1
  4015ae:	4413      	add	r3, r2
  4015b0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  4015b2:	23ff      	movs	r3, #255	; 0xff
  4015b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  4015b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  4015bc:	b9d5      	cbnz	r5, 4015f4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015be:	6923      	ldr	r3, [r4, #16]
  4015c0:	b1fb      	cbz	r3, 401602 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015c2:	f104 0010 	add.w	r0, r4, #16
  4015c6:	4b12      	ldr	r3, [pc, #72]	; (401610 <xQueueGenericReset+0x84>)
  4015c8:	4798      	blx	r3
  4015ca:	b1d0      	cbz	r0, 401602 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4015cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015d0:	4b10      	ldr	r3, [pc, #64]	; (401614 <xQueueGenericReset+0x88>)
  4015d2:	601a      	str	r2, [r3, #0]
  4015d4:	f3bf 8f4f 	dsb	sy
  4015d8:	f3bf 8f6f 	isb	sy
  4015dc:	e011      	b.n	401602 <xQueueGenericReset+0x76>
  4015de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e2:	b672      	cpsid	i
  4015e4:	f383 8811 	msr	BASEPRI, r3
  4015e8:	f3bf 8f6f 	isb	sy
  4015ec:	f3bf 8f4f 	dsb	sy
  4015f0:	b662      	cpsie	i
  4015f2:	e7fe      	b.n	4015f2 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4015f4:	f104 0010 	add.w	r0, r4, #16
  4015f8:	4d07      	ldr	r5, [pc, #28]	; (401618 <xQueueGenericReset+0x8c>)
  4015fa:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4015fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401600:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401602:	4b06      	ldr	r3, [pc, #24]	; (40161c <xQueueGenericReset+0x90>)
  401604:	4798      	blx	r3
}
  401606:	2001      	movs	r0, #1
  401608:	bd38      	pop	{r3, r4, r5, pc}
  40160a:	bf00      	nop
  40160c:	004010b5 	.word	0x004010b5
  401610:	00402645 	.word	0x00402645
  401614:	e000ed04 	.word	0xe000ed04
  401618:	00400f4d 	.word	0x00400f4d
  40161c:	00401101 	.word	0x00401101

00401620 <xQueueGenericCreate>:
	{
  401620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401622:	b950      	cbnz	r0, 40163a <xQueueGenericCreate+0x1a>
  401624:	f04f 0380 	mov.w	r3, #128	; 0x80
  401628:	b672      	cpsid	i
  40162a:	f383 8811 	msr	BASEPRI, r3
  40162e:	f3bf 8f6f 	isb	sy
  401632:	f3bf 8f4f 	dsb	sy
  401636:	b662      	cpsie	i
  401638:	e7fe      	b.n	401638 <xQueueGenericCreate+0x18>
  40163a:	4606      	mov	r6, r0
  40163c:	4617      	mov	r7, r2
  40163e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401640:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401644:	3054      	adds	r0, #84	; 0x54
  401646:	4b0b      	ldr	r3, [pc, #44]	; (401674 <xQueueGenericCreate+0x54>)
  401648:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40164a:	4604      	mov	r4, r0
  40164c:	b178      	cbz	r0, 40166e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40164e:	b11d      	cbz	r5, 401658 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401650:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401654:	6003      	str	r3, [r0, #0]
  401656:	e000      	b.n	40165a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401658:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40165a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40165c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40165e:	2101      	movs	r1, #1
  401660:	4620      	mov	r0, r4
  401662:	4b05      	ldr	r3, [pc, #20]	; (401678 <xQueueGenericCreate+0x58>)
  401664:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401666:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40166a:	2300      	movs	r3, #0
  40166c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40166e:	4620      	mov	r0, r4
  401670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401672:	bf00      	nop
  401674:	00401341 	.word	0x00401341
  401678:	0040158d 	.word	0x0040158d

0040167c <xQueueGenericSend>:
{
  40167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401680:	b085      	sub	sp, #20
  401682:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401684:	b1b8      	cbz	r0, 4016b6 <xQueueGenericSend+0x3a>
  401686:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401688:	b301      	cbz	r1, 4016cc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40168a:	2b02      	cmp	r3, #2
  40168c:	d02c      	beq.n	4016e8 <xQueueGenericSend+0x6c>
  40168e:	461e      	mov	r6, r3
  401690:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401692:	4b69      	ldr	r3, [pc, #420]	; (401838 <xQueueGenericSend+0x1bc>)
  401694:	4798      	blx	r3
  401696:	2800      	cmp	r0, #0
  401698:	d134      	bne.n	401704 <xQueueGenericSend+0x88>
  40169a:	9b01      	ldr	r3, [sp, #4]
  40169c:	2b00      	cmp	r3, #0
  40169e:	d039      	beq.n	401714 <xQueueGenericSend+0x98>
  4016a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016a4:	b672      	cpsid	i
  4016a6:	f383 8811 	msr	BASEPRI, r3
  4016aa:	f3bf 8f6f 	isb	sy
  4016ae:	f3bf 8f4f 	dsb	sy
  4016b2:	b662      	cpsie	i
  4016b4:	e7fe      	b.n	4016b4 <xQueueGenericSend+0x38>
  4016b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ba:	b672      	cpsid	i
  4016bc:	f383 8811 	msr	BASEPRI, r3
  4016c0:	f3bf 8f6f 	isb	sy
  4016c4:	f3bf 8f4f 	dsb	sy
  4016c8:	b662      	cpsie	i
  4016ca:	e7fe      	b.n	4016ca <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4016ce:	2a00      	cmp	r2, #0
  4016d0:	d0db      	beq.n	40168a <xQueueGenericSend+0xe>
  4016d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016d6:	b672      	cpsid	i
  4016d8:	f383 8811 	msr	BASEPRI, r3
  4016dc:	f3bf 8f6f 	isb	sy
  4016e0:	f3bf 8f4f 	dsb	sy
  4016e4:	b662      	cpsie	i
  4016e6:	e7fe      	b.n	4016e6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4016ea:	2a01      	cmp	r2, #1
  4016ec:	d0cf      	beq.n	40168e <xQueueGenericSend+0x12>
  4016ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016f2:	b672      	cpsid	i
  4016f4:	f383 8811 	msr	BASEPRI, r3
  4016f8:	f3bf 8f6f 	isb	sy
  4016fc:	f3bf 8f4f 	dsb	sy
  401700:	b662      	cpsie	i
  401702:	e7fe      	b.n	401702 <xQueueGenericSend+0x86>
  401704:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401706:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401864 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40170a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401868 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  40170e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401844 <xQueueGenericSend+0x1c8>
  401712:	e041      	b.n	401798 <xQueueGenericSend+0x11c>
  401714:	2500      	movs	r5, #0
  401716:	e7f6      	b.n	401706 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401718:	4632      	mov	r2, r6
  40171a:	4639      	mov	r1, r7
  40171c:	4620      	mov	r0, r4
  40171e:	4b47      	ldr	r3, [pc, #284]	; (40183c <xQueueGenericSend+0x1c0>)
  401720:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401722:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401724:	b193      	cbz	r3, 40174c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401726:	4631      	mov	r1, r6
  401728:	4620      	mov	r0, r4
  40172a:	4b45      	ldr	r3, [pc, #276]	; (401840 <xQueueGenericSend+0x1c4>)
  40172c:	4798      	blx	r3
  40172e:	b138      	cbz	r0, 401740 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401734:	4b43      	ldr	r3, [pc, #268]	; (401844 <xQueueGenericSend+0x1c8>)
  401736:	601a      	str	r2, [r3, #0]
  401738:	f3bf 8f4f 	dsb	sy
  40173c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401740:	4b41      	ldr	r3, [pc, #260]	; (401848 <xQueueGenericSend+0x1cc>)
  401742:	4798      	blx	r3
				return pdPASS;
  401744:	2001      	movs	r0, #1
}
  401746:	b005      	add	sp, #20
  401748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40174c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40174e:	b173      	cbz	r3, 40176e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401750:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401754:	4b3d      	ldr	r3, [pc, #244]	; (40184c <xQueueGenericSend+0x1d0>)
  401756:	4798      	blx	r3
  401758:	2800      	cmp	r0, #0
  40175a:	d0f1      	beq.n	401740 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40175c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401760:	4b38      	ldr	r3, [pc, #224]	; (401844 <xQueueGenericSend+0x1c8>)
  401762:	601a      	str	r2, [r3, #0]
  401764:	f3bf 8f4f 	dsb	sy
  401768:	f3bf 8f6f 	isb	sy
  40176c:	e7e8      	b.n	401740 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40176e:	2800      	cmp	r0, #0
  401770:	d0e6      	beq.n	401740 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401776:	4b33      	ldr	r3, [pc, #204]	; (401844 <xQueueGenericSend+0x1c8>)
  401778:	601a      	str	r2, [r3, #0]
  40177a:	f3bf 8f4f 	dsb	sy
  40177e:	f3bf 8f6f 	isb	sy
  401782:	e7dd      	b.n	401740 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401784:	4b30      	ldr	r3, [pc, #192]	; (401848 <xQueueGenericSend+0x1cc>)
  401786:	4798      	blx	r3
					return errQUEUE_FULL;
  401788:	2000      	movs	r0, #0
  40178a:	e7dc      	b.n	401746 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40178c:	4620      	mov	r0, r4
  40178e:	4b30      	ldr	r3, [pc, #192]	; (401850 <xQueueGenericSend+0x1d4>)
  401790:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401792:	4b30      	ldr	r3, [pc, #192]	; (401854 <xQueueGenericSend+0x1d8>)
  401794:	4798      	blx	r3
  401796:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  401798:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40179a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40179c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40179e:	429a      	cmp	r2, r3
  4017a0:	d3ba      	bcc.n	401718 <xQueueGenericSend+0x9c>
  4017a2:	2e02      	cmp	r6, #2
  4017a4:	d0b8      	beq.n	401718 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4017a6:	9b01      	ldr	r3, [sp, #4]
  4017a8:	2b00      	cmp	r3, #0
  4017aa:	d0eb      	beq.n	401784 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4017ac:	b90d      	cbnz	r5, 4017b2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4017ae:	a802      	add	r0, sp, #8
  4017b0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4017b2:	4b25      	ldr	r3, [pc, #148]	; (401848 <xQueueGenericSend+0x1cc>)
  4017b4:	4798      	blx	r3
		vTaskSuspendAll();
  4017b6:	4b28      	ldr	r3, [pc, #160]	; (401858 <xQueueGenericSend+0x1dc>)
  4017b8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4017ba:	47c0      	blx	r8
  4017bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4017c0:	b25b      	sxtb	r3, r3
  4017c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017c6:	d102      	bne.n	4017ce <xQueueGenericSend+0x152>
  4017c8:	2300      	movs	r3, #0
  4017ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4017ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4017d2:	b25b      	sxtb	r3, r3
  4017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017d8:	d102      	bne.n	4017e0 <xQueueGenericSend+0x164>
  4017da:	2300      	movs	r3, #0
  4017dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4017e0:	4b19      	ldr	r3, [pc, #100]	; (401848 <xQueueGenericSend+0x1cc>)
  4017e2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4017e4:	a901      	add	r1, sp, #4
  4017e6:	a802      	add	r0, sp, #8
  4017e8:	4b1c      	ldr	r3, [pc, #112]	; (40185c <xQueueGenericSend+0x1e0>)
  4017ea:	4798      	blx	r3
  4017ec:	b9e0      	cbnz	r0, 401828 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  4017ee:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4017f0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4017f4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4017f6:	4b14      	ldr	r3, [pc, #80]	; (401848 <xQueueGenericSend+0x1cc>)
  4017f8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4017fa:	45ab      	cmp	fp, r5
  4017fc:	d1c6      	bne.n	40178c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4017fe:	9901      	ldr	r1, [sp, #4]
  401800:	f104 0010 	add.w	r0, r4, #16
  401804:	4b16      	ldr	r3, [pc, #88]	; (401860 <xQueueGenericSend+0x1e4>)
  401806:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401808:	4620      	mov	r0, r4
  40180a:	4b11      	ldr	r3, [pc, #68]	; (401850 <xQueueGenericSend+0x1d4>)
  40180c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40180e:	4b11      	ldr	r3, [pc, #68]	; (401854 <xQueueGenericSend+0x1d8>)
  401810:	4798      	blx	r3
  401812:	2800      	cmp	r0, #0
  401814:	d1bf      	bne.n	401796 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40181a:	f8c9 3000 	str.w	r3, [r9]
  40181e:	f3bf 8f4f 	dsb	sy
  401822:	f3bf 8f6f 	isb	sy
  401826:	e7b6      	b.n	401796 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401828:	4620      	mov	r0, r4
  40182a:	4b09      	ldr	r3, [pc, #36]	; (401850 <xQueueGenericSend+0x1d4>)
  40182c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40182e:	4b09      	ldr	r3, [pc, #36]	; (401854 <xQueueGenericSend+0x1d8>)
  401830:	4798      	blx	r3
			return errQUEUE_FULL;
  401832:	2000      	movs	r0, #0
  401834:	e787      	b.n	401746 <xQueueGenericSend+0xca>
  401836:	bf00      	nop
  401838:	00402959 	.word	0x00402959
  40183c:	004013b5 	.word	0x004013b5
  401840:	00401431 	.word	0x00401431
  401844:	e000ed04 	.word	0xe000ed04
  401848:	00401101 	.word	0x00401101
  40184c:	00402645 	.word	0x00402645
  401850:	004014e5 	.word	0x004014e5
  401854:	0040237d 	.word	0x0040237d
  401858:	0040220d 	.word	0x0040220d
  40185c:	004026f5 	.word	0x004026f5
  401860:	004025c1 	.word	0x004025c1
  401864:	004010b5 	.word	0x004010b5
  401868:	004026dd 	.word	0x004026dd

0040186c <xQueueGenericSendFromISR>:
{
  40186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401870:	2800      	cmp	r0, #0
  401872:	d039      	beq.n	4018e8 <xQueueGenericSendFromISR+0x7c>
  401874:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401876:	2900      	cmp	r1, #0
  401878:	d041      	beq.n	4018fe <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40187a:	2b02      	cmp	r3, #2
  40187c:	d04d      	beq.n	40191a <xQueueGenericSendFromISR+0xae>
  40187e:	461f      	mov	r7, r3
  401880:	4690      	mov	r8, r2
  401882:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401884:	4b3a      	ldr	r3, [pc, #232]	; (401970 <xQueueGenericSendFromISR+0x104>)
  401886:	4798      	blx	r3
	__asm volatile
  401888:	f3ef 8611 	mrs	r6, BASEPRI
  40188c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401890:	b672      	cpsid	i
  401892:	f383 8811 	msr	BASEPRI, r3
  401896:	f3bf 8f6f 	isb	sy
  40189a:	f3bf 8f4f 	dsb	sy
  40189e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018a4:	429a      	cmp	r2, r3
  4018a6:	d301      	bcc.n	4018ac <xQueueGenericSendFromISR+0x40>
  4018a8:	2f02      	cmp	r7, #2
  4018aa:	d158      	bne.n	40195e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  4018ac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4018b0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4018b2:	463a      	mov	r2, r7
  4018b4:	4649      	mov	r1, r9
  4018b6:	4620      	mov	r0, r4
  4018b8:	4b2e      	ldr	r3, [pc, #184]	; (401974 <xQueueGenericSendFromISR+0x108>)
  4018ba:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4018bc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4018c0:	d147      	bne.n	401952 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4018c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018c4:	2b00      	cmp	r3, #0
  4018c6:	d036      	beq.n	401936 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4018c8:	4639      	mov	r1, r7
  4018ca:	4620      	mov	r0, r4
  4018cc:	4b2a      	ldr	r3, [pc, #168]	; (401978 <xQueueGenericSendFromISR+0x10c>)
  4018ce:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4018d0:	f1b8 0f00 	cmp.w	r8, #0
  4018d4:	d045      	beq.n	401962 <xQueueGenericSendFromISR+0xf6>
  4018d6:	2800      	cmp	r0, #0
  4018d8:	d043      	beq.n	401962 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4018da:	2001      	movs	r0, #1
  4018dc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  4018e0:	f386 8811 	msr	BASEPRI, r6
}
  4018e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  4018e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018ec:	b672      	cpsid	i
  4018ee:	f383 8811 	msr	BASEPRI, r3
  4018f2:	f3bf 8f6f 	isb	sy
  4018f6:	f3bf 8f4f 	dsb	sy
  4018fa:	b662      	cpsie	i
  4018fc:	e7fe      	b.n	4018fc <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4018fe:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401900:	2800      	cmp	r0, #0
  401902:	d0ba      	beq.n	40187a <xQueueGenericSendFromISR+0xe>
  401904:	f04f 0380 	mov.w	r3, #128	; 0x80
  401908:	b672      	cpsid	i
  40190a:	f383 8811 	msr	BASEPRI, r3
  40190e:	f3bf 8f6f 	isb	sy
  401912:	f3bf 8f4f 	dsb	sy
  401916:	b662      	cpsie	i
  401918:	e7fe      	b.n	401918 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40191a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40191c:	2801      	cmp	r0, #1
  40191e:	d0ae      	beq.n	40187e <xQueueGenericSendFromISR+0x12>
  401920:	f04f 0380 	mov.w	r3, #128	; 0x80
  401924:	b672      	cpsid	i
  401926:	f383 8811 	msr	BASEPRI, r3
  40192a:	f3bf 8f6f 	isb	sy
  40192e:	f3bf 8f4f 	dsb	sy
  401932:	b662      	cpsie	i
  401934:	e7fe      	b.n	401934 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401936:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401938:	b1ab      	cbz	r3, 401966 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40193a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40193e:	4b0f      	ldr	r3, [pc, #60]	; (40197c <xQueueGenericSendFromISR+0x110>)
  401940:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401942:	f1b8 0f00 	cmp.w	r8, #0
  401946:	d010      	beq.n	40196a <xQueueGenericSendFromISR+0xfe>
  401948:	b178      	cbz	r0, 40196a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40194a:	2001      	movs	r0, #1
  40194c:	f8c8 0000 	str.w	r0, [r8]
  401950:	e7c6      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401952:	1c6b      	adds	r3, r5, #1
  401954:	b25b      	sxtb	r3, r3
  401956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40195a:	2001      	movs	r0, #1
  40195c:	e7c0      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40195e:	2000      	movs	r0, #0
  401960:	e7be      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401962:	2001      	movs	r0, #1
  401964:	e7bc      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
  401966:	2001      	movs	r0, #1
  401968:	e7ba      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
  40196a:	2001      	movs	r0, #1
  40196c:	e7b8      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
  40196e:	bf00      	nop
  401970:	004012dd 	.word	0x004012dd
  401974:	004013b5 	.word	0x004013b5
  401978:	00401431 	.word	0x00401431
  40197c:	00402645 	.word	0x00402645

00401980 <xQueueReceive>:
{
  401980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401984:	b084      	sub	sp, #16
  401986:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401988:	b190      	cbz	r0, 4019b0 <xQueueReceive+0x30>
  40198a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40198c:	b1d9      	cbz	r1, 4019c6 <xQueueReceive+0x46>
  40198e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401990:	4b54      	ldr	r3, [pc, #336]	; (401ae4 <xQueueReceive+0x164>)
  401992:	4798      	blx	r3
  401994:	bb28      	cbnz	r0, 4019e2 <xQueueReceive+0x62>
  401996:	9b01      	ldr	r3, [sp, #4]
  401998:	b35b      	cbz	r3, 4019f2 <xQueueReceive+0x72>
  40199a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40199e:	b672      	cpsid	i
  4019a0:	f383 8811 	msr	BASEPRI, r3
  4019a4:	f3bf 8f6f 	isb	sy
  4019a8:	f3bf 8f4f 	dsb	sy
  4019ac:	b662      	cpsie	i
  4019ae:	e7fe      	b.n	4019ae <xQueueReceive+0x2e>
  4019b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019b4:	b672      	cpsid	i
  4019b6:	f383 8811 	msr	BASEPRI, r3
  4019ba:	f3bf 8f6f 	isb	sy
  4019be:	f3bf 8f4f 	dsb	sy
  4019c2:	b662      	cpsie	i
  4019c4:	e7fe      	b.n	4019c4 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4019c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4019c8:	2b00      	cmp	r3, #0
  4019ca:	d0e0      	beq.n	40198e <xQueueReceive+0xe>
  4019cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d0:	b672      	cpsid	i
  4019d2:	f383 8811 	msr	BASEPRI, r3
  4019d6:	f3bf 8f6f 	isb	sy
  4019da:	f3bf 8f4f 	dsb	sy
  4019de:	b662      	cpsie	i
  4019e0:	e7fe      	b.n	4019e0 <xQueueReceive+0x60>
  4019e2:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4019e4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401b10 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4019e8:	f8df a128 	ldr.w	sl, [pc, #296]	; 401b14 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  4019ec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401af0 <xQueueReceive+0x170>
  4019f0:	e031      	b.n	401a56 <xQueueReceive+0xd6>
  4019f2:	2700      	movs	r7, #0
  4019f4:	e7f6      	b.n	4019e4 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4019f6:	4631      	mov	r1, r6
  4019f8:	4620      	mov	r0, r4
  4019fa:	4b3b      	ldr	r3, [pc, #236]	; (401ae8 <xQueueReceive+0x168>)
  4019fc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  4019fe:	3d01      	subs	r5, #1
  401a00:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a02:	6923      	ldr	r3, [r4, #16]
  401a04:	b163      	cbz	r3, 401a20 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401a06:	f104 0010 	add.w	r0, r4, #16
  401a0a:	4b38      	ldr	r3, [pc, #224]	; (401aec <xQueueReceive+0x16c>)
  401a0c:	4798      	blx	r3
  401a0e:	b138      	cbz	r0, 401a20 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  401a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a14:	4b36      	ldr	r3, [pc, #216]	; (401af0 <xQueueReceive+0x170>)
  401a16:	601a      	str	r2, [r3, #0]
  401a18:	f3bf 8f4f 	dsb	sy
  401a1c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401a20:	4b34      	ldr	r3, [pc, #208]	; (401af4 <xQueueReceive+0x174>)
  401a22:	4798      	blx	r3
				return pdPASS;
  401a24:	2001      	movs	r0, #1
}
  401a26:	b004      	add	sp, #16
  401a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  401a2c:	4b31      	ldr	r3, [pc, #196]	; (401af4 <xQueueReceive+0x174>)
  401a2e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401a30:	2000      	movs	r0, #0
  401a32:	e7f8      	b.n	401a26 <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401a34:	a802      	add	r0, sp, #8
  401a36:	47d0      	blx	sl
  401a38:	e016      	b.n	401a68 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  401a3a:	2300      	movs	r3, #0
  401a3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401a40:	e01d      	b.n	401a7e <xQueueReceive+0xfe>
  401a42:	2300      	movs	r3, #0
  401a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401a48:	e01f      	b.n	401a8a <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  401a4a:	4620      	mov	r0, r4
  401a4c:	4b2a      	ldr	r3, [pc, #168]	; (401af8 <xQueueReceive+0x178>)
  401a4e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401a50:	4b2a      	ldr	r3, [pc, #168]	; (401afc <xQueueReceive+0x17c>)
  401a52:	4798      	blx	r3
  401a54:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401a56:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401a58:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401a5a:	2d00      	cmp	r5, #0
  401a5c:	d1cb      	bne.n	4019f6 <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401a5e:	9b01      	ldr	r3, [sp, #4]
  401a60:	2b00      	cmp	r3, #0
  401a62:	d0e3      	beq.n	401a2c <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401a64:	2f00      	cmp	r7, #0
  401a66:	d0e5      	beq.n	401a34 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401a68:	4b22      	ldr	r3, [pc, #136]	; (401af4 <xQueueReceive+0x174>)
  401a6a:	4798      	blx	r3
		vTaskSuspendAll();
  401a6c:	4b24      	ldr	r3, [pc, #144]	; (401b00 <xQueueReceive+0x180>)
  401a6e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401a70:	47c0      	blx	r8
  401a72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401a76:	b25b      	sxtb	r3, r3
  401a78:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a7c:	d0dd      	beq.n	401a3a <xQueueReceive+0xba>
  401a7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401a82:	b25b      	sxtb	r3, r3
  401a84:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a88:	d0db      	beq.n	401a42 <xQueueReceive+0xc2>
  401a8a:	4b1a      	ldr	r3, [pc, #104]	; (401af4 <xQueueReceive+0x174>)
  401a8c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401a8e:	a901      	add	r1, sp, #4
  401a90:	a802      	add	r0, sp, #8
  401a92:	4b1c      	ldr	r3, [pc, #112]	; (401b04 <xQueueReceive+0x184>)
  401a94:	4798      	blx	r3
  401a96:	b9c8      	cbnz	r0, 401acc <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401a98:	4620      	mov	r0, r4
  401a9a:	4b1b      	ldr	r3, [pc, #108]	; (401b08 <xQueueReceive+0x188>)
  401a9c:	4798      	blx	r3
  401a9e:	2800      	cmp	r0, #0
  401aa0:	d0d3      	beq.n	401a4a <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401aa2:	9901      	ldr	r1, [sp, #4]
  401aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401aa8:	4b18      	ldr	r3, [pc, #96]	; (401b0c <xQueueReceive+0x18c>)
  401aaa:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401aac:	4620      	mov	r0, r4
  401aae:	4b12      	ldr	r3, [pc, #72]	; (401af8 <xQueueReceive+0x178>)
  401ab0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ab2:	4b12      	ldr	r3, [pc, #72]	; (401afc <xQueueReceive+0x17c>)
  401ab4:	4798      	blx	r3
  401ab6:	2800      	cmp	r0, #0
  401ab8:	d1cc      	bne.n	401a54 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  401aba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401abe:	f8c9 3000 	str.w	r3, [r9]
  401ac2:	f3bf 8f4f 	dsb	sy
  401ac6:	f3bf 8f6f 	isb	sy
  401aca:	e7c3      	b.n	401a54 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  401acc:	4620      	mov	r0, r4
  401ace:	4b0a      	ldr	r3, [pc, #40]	; (401af8 <xQueueReceive+0x178>)
  401ad0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401ad2:	4b0a      	ldr	r3, [pc, #40]	; (401afc <xQueueReceive+0x17c>)
  401ad4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401ad6:	4620      	mov	r0, r4
  401ad8:	4b0b      	ldr	r3, [pc, #44]	; (401b08 <xQueueReceive+0x188>)
  401ada:	4798      	blx	r3
  401adc:	2800      	cmp	r0, #0
  401ade:	d0b9      	beq.n	401a54 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  401ae0:	2000      	movs	r0, #0
  401ae2:	e7a0      	b.n	401a26 <xQueueReceive+0xa6>
  401ae4:	00402959 	.word	0x00402959
  401ae8:	004014bd 	.word	0x004014bd
  401aec:	00402645 	.word	0x00402645
  401af0:	e000ed04 	.word	0xe000ed04
  401af4:	00401101 	.word	0x00401101
  401af8:	004014e5 	.word	0x004014e5
  401afc:	0040237d 	.word	0x0040237d
  401b00:	0040220d 	.word	0x0040220d
  401b04:	004026f5 	.word	0x004026f5
  401b08:	00401395 	.word	0x00401395
  401b0c:	004025c1 	.word	0x004025c1
  401b10:	004010b5 	.word	0x004010b5
  401b14:	004026dd 	.word	0x004026dd

00401b18 <xQueueSemaphoreTake>:
{
  401b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401b1c:	b085      	sub	sp, #20
  401b1e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  401b20:	b168      	cbz	r0, 401b3e <xQueueSemaphoreTake+0x26>
  401b22:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401b24:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401b26:	b1ab      	cbz	r3, 401b54 <xQueueSemaphoreTake+0x3c>
  401b28:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b2c:	b672      	cpsid	i
  401b2e:	f383 8811 	msr	BASEPRI, r3
  401b32:	f3bf 8f6f 	isb	sy
  401b36:	f3bf 8f4f 	dsb	sy
  401b3a:	b662      	cpsie	i
  401b3c:	e7fe      	b.n	401b3c <xQueueSemaphoreTake+0x24>
  401b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b42:	b672      	cpsid	i
  401b44:	f383 8811 	msr	BASEPRI, r3
  401b48:	f3bf 8f6f 	isb	sy
  401b4c:	f3bf 8f4f 	dsb	sy
  401b50:	b662      	cpsie	i
  401b52:	e7fe      	b.n	401b52 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b54:	4b5e      	ldr	r3, [pc, #376]	; (401cd0 <xQueueSemaphoreTake+0x1b8>)
  401b56:	4798      	blx	r3
  401b58:	b960      	cbnz	r0, 401b74 <xQueueSemaphoreTake+0x5c>
  401b5a:	9b01      	ldr	r3, [sp, #4]
  401b5c:	b193      	cbz	r3, 401b84 <xQueueSemaphoreTake+0x6c>
  401b5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b62:	b672      	cpsid	i
  401b64:	f383 8811 	msr	BASEPRI, r3
  401b68:	f3bf 8f6f 	isb	sy
  401b6c:	f3bf 8f4f 	dsb	sy
  401b70:	b662      	cpsie	i
  401b72:	e7fe      	b.n	401b72 <xQueueSemaphoreTake+0x5a>
  401b74:	2500      	movs	r5, #0
  401b76:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  401b78:	4e56      	ldr	r6, [pc, #344]	; (401cd4 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  401b7a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 401d08 <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  401b7e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 401ce0 <xQueueSemaphoreTake+0x1c8>
  401b82:	e052      	b.n	401c2a <xQueueSemaphoreTake+0x112>
  401b84:	2500      	movs	r5, #0
  401b86:	462f      	mov	r7, r5
  401b88:	e7f6      	b.n	401b78 <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  401b8a:	3b01      	subs	r3, #1
  401b8c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b8e:	6823      	ldr	r3, [r4, #0]
  401b90:	b913      	cbnz	r3, 401b98 <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401b92:	4b51      	ldr	r3, [pc, #324]	; (401cd8 <xQueueSemaphoreTake+0x1c0>)
  401b94:	4798      	blx	r3
  401b96:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401b98:	6923      	ldr	r3, [r4, #16]
  401b9a:	b163      	cbz	r3, 401bb6 <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401b9c:	f104 0010 	add.w	r0, r4, #16
  401ba0:	4b4e      	ldr	r3, [pc, #312]	; (401cdc <xQueueSemaphoreTake+0x1c4>)
  401ba2:	4798      	blx	r3
  401ba4:	b138      	cbz	r0, 401bb6 <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  401ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401baa:	4b4d      	ldr	r3, [pc, #308]	; (401ce0 <xQueueSemaphoreTake+0x1c8>)
  401bac:	601a      	str	r2, [r3, #0]
  401bae:	f3bf 8f4f 	dsb	sy
  401bb2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bb6:	4b4b      	ldr	r3, [pc, #300]	; (401ce4 <xQueueSemaphoreTake+0x1cc>)
  401bb8:	4798      	blx	r3
				return pdPASS;
  401bba:	2501      	movs	r5, #1
}
  401bbc:	4628      	mov	r0, r5
  401bbe:	b005      	add	sp, #20
  401bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  401bc4:	b155      	cbz	r5, 401bdc <xQueueSemaphoreTake+0xc4>
  401bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bca:	b672      	cpsid	i
  401bcc:	f383 8811 	msr	BASEPRI, r3
  401bd0:	f3bf 8f6f 	isb	sy
  401bd4:	f3bf 8f4f 	dsb	sy
  401bd8:	b662      	cpsie	i
  401bda:	e7fe      	b.n	401bda <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  401bdc:	4b41      	ldr	r3, [pc, #260]	; (401ce4 <xQueueSemaphoreTake+0x1cc>)
  401bde:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401be0:	e7ec      	b.n	401bbc <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401be2:	a802      	add	r0, sp, #8
  401be4:	47c8      	blx	r9
  401be6:	e029      	b.n	401c3c <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  401be8:	2300      	movs	r3, #0
  401bea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401bee:	e030      	b.n	401c52 <xQueueSemaphoreTake+0x13a>
  401bf0:	2300      	movs	r3, #0
  401bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401bf6:	e032      	b.n	401c5e <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  401bf8:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401bfa:	6860      	ldr	r0, [r4, #4]
  401bfc:	4b3a      	ldr	r3, [pc, #232]	; (401ce8 <xQueueSemaphoreTake+0x1d0>)
  401bfe:	4798      	blx	r3
  401c00:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  401c02:	4b38      	ldr	r3, [pc, #224]	; (401ce4 <xQueueSemaphoreTake+0x1cc>)
  401c04:	4798      	blx	r3
  401c06:	e03a      	b.n	401c7e <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  401c08:	4620      	mov	r0, r4
  401c0a:	4b38      	ldr	r3, [pc, #224]	; (401cec <xQueueSemaphoreTake+0x1d4>)
  401c0c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c0e:	4b38      	ldr	r3, [pc, #224]	; (401cf0 <xQueueSemaphoreTake+0x1d8>)
  401c10:	4798      	blx	r3
  401c12:	e009      	b.n	401c28 <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  401c14:	4620      	mov	r0, r4
  401c16:	4b35      	ldr	r3, [pc, #212]	; (401cec <xQueueSemaphoreTake+0x1d4>)
  401c18:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401c1a:	4b35      	ldr	r3, [pc, #212]	; (401cf0 <xQueueSemaphoreTake+0x1d8>)
  401c1c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c1e:	4620      	mov	r0, r4
  401c20:	4b34      	ldr	r3, [pc, #208]	; (401cf4 <xQueueSemaphoreTake+0x1dc>)
  401c22:	4798      	blx	r3
  401c24:	2800      	cmp	r0, #0
  401c26:	d13f      	bne.n	401ca8 <xQueueSemaphoreTake+0x190>
  401c28:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401c2a:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  401c2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  401c2e:	2b00      	cmp	r3, #0
  401c30:	d1ab      	bne.n	401b8a <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c32:	9b01      	ldr	r3, [sp, #4]
  401c34:	2b00      	cmp	r3, #0
  401c36:	d0c5      	beq.n	401bc4 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401c38:	2f00      	cmp	r7, #0
  401c3a:	d0d2      	beq.n	401be2 <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  401c3c:	4b29      	ldr	r3, [pc, #164]	; (401ce4 <xQueueSemaphoreTake+0x1cc>)
  401c3e:	4798      	blx	r3
		vTaskSuspendAll();
  401c40:	4b2d      	ldr	r3, [pc, #180]	; (401cf8 <xQueueSemaphoreTake+0x1e0>)
  401c42:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c44:	47b0      	blx	r6
  401c46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401c4a:	b25b      	sxtb	r3, r3
  401c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c50:	d0ca      	beq.n	401be8 <xQueueSemaphoreTake+0xd0>
  401c52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401c56:	b25b      	sxtb	r3, r3
  401c58:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c5c:	d0c8      	beq.n	401bf0 <xQueueSemaphoreTake+0xd8>
  401c5e:	4b21      	ldr	r3, [pc, #132]	; (401ce4 <xQueueSemaphoreTake+0x1cc>)
  401c60:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c62:	a901      	add	r1, sp, #4
  401c64:	a802      	add	r0, sp, #8
  401c66:	4b25      	ldr	r3, [pc, #148]	; (401cfc <xQueueSemaphoreTake+0x1e4>)
  401c68:	4798      	blx	r3
  401c6a:	2800      	cmp	r0, #0
  401c6c:	d1d2      	bne.n	401c14 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c6e:	4620      	mov	r0, r4
  401c70:	4b20      	ldr	r3, [pc, #128]	; (401cf4 <xQueueSemaphoreTake+0x1dc>)
  401c72:	4798      	blx	r3
  401c74:	2800      	cmp	r0, #0
  401c76:	d0c7      	beq.n	401c08 <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c78:	6823      	ldr	r3, [r4, #0]
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d0bc      	beq.n	401bf8 <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401c7e:	9901      	ldr	r1, [sp, #4]
  401c80:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c84:	4b1e      	ldr	r3, [pc, #120]	; (401d00 <xQueueSemaphoreTake+0x1e8>)
  401c86:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401c88:	4620      	mov	r0, r4
  401c8a:	4b18      	ldr	r3, [pc, #96]	; (401cec <xQueueSemaphoreTake+0x1d4>)
  401c8c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c8e:	4b18      	ldr	r3, [pc, #96]	; (401cf0 <xQueueSemaphoreTake+0x1d8>)
  401c90:	4798      	blx	r3
  401c92:	2800      	cmp	r0, #0
  401c94:	d1c8      	bne.n	401c28 <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  401c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c9a:	f8c8 3000 	str.w	r3, [r8]
  401c9e:	f3bf 8f4f 	dsb	sy
  401ca2:	f3bf 8f6f 	isb	sy
  401ca6:	e7bf      	b.n	401c28 <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  401ca8:	2d00      	cmp	r5, #0
  401caa:	d087      	beq.n	401bbc <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  401cac:	4b09      	ldr	r3, [pc, #36]	; (401cd4 <xQueueSemaphoreTake+0x1bc>)
  401cae:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  401cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cb2:	b153      	cbz	r3, 401cca <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  401cb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cb6:	6819      	ldr	r1, [r3, #0]
  401cb8:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  401cbc:	6860      	ldr	r0, [r4, #4]
  401cbe:	4b11      	ldr	r3, [pc, #68]	; (401d04 <xQueueSemaphoreTake+0x1ec>)
  401cc0:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401cc2:	4b08      	ldr	r3, [pc, #32]	; (401ce4 <xQueueSemaphoreTake+0x1cc>)
  401cc4:	4798      	blx	r3
				return errQUEUE_EMPTY;
  401cc6:	2500      	movs	r5, #0
  401cc8:	e778      	b.n	401bbc <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  401cca:	2100      	movs	r1, #0
  401ccc:	e7f6      	b.n	401cbc <xQueueSemaphoreTake+0x1a4>
  401cce:	bf00      	nop
  401cd0:	00402959 	.word	0x00402959
  401cd4:	004010b5 	.word	0x004010b5
  401cd8:	00402ce9 	.word	0x00402ce9
  401cdc:	00402645 	.word	0x00402645
  401ce0:	e000ed04 	.word	0xe000ed04
  401ce4:	00401101 	.word	0x00401101
  401ce8:	00402979 	.word	0x00402979
  401cec:	004014e5 	.word	0x004014e5
  401cf0:	0040237d 	.word	0x0040237d
  401cf4:	00401395 	.word	0x00401395
  401cf8:	0040220d 	.word	0x0040220d
  401cfc:	004026f5 	.word	0x004026f5
  401d00:	004025c1 	.word	0x004025c1
  401d04:	00402af5 	.word	0x00402af5
  401d08:	004026dd 	.word	0x004026dd

00401d0c <vQueueAddToRegistry>:
	{
  401d0c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401d0e:	4b0b      	ldr	r3, [pc, #44]	; (401d3c <vQueueAddToRegistry+0x30>)
  401d10:	681b      	ldr	r3, [r3, #0]
  401d12:	b153      	cbz	r3, 401d2a <vQueueAddToRegistry+0x1e>
  401d14:	2301      	movs	r3, #1
  401d16:	4c09      	ldr	r4, [pc, #36]	; (401d3c <vQueueAddToRegistry+0x30>)
  401d18:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401d1c:	b132      	cbz	r2, 401d2c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401d1e:	3301      	adds	r3, #1
  401d20:	2b08      	cmp	r3, #8
  401d22:	d1f9      	bne.n	401d18 <vQueueAddToRegistry+0xc>
	}
  401d24:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d28:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401d2a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401d2c:	4a03      	ldr	r2, [pc, #12]	; (401d3c <vQueueAddToRegistry+0x30>)
  401d2e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401d32:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401d36:	6058      	str	r0, [r3, #4]
				break;
  401d38:	e7f4      	b.n	401d24 <vQueueAddToRegistry+0x18>
  401d3a:	bf00      	nop
  401d3c:	20400ce0 	.word	0x20400ce0

00401d40 <vQueueWaitForMessageRestricted>:
	{
  401d40:	b570      	push	{r4, r5, r6, lr}
  401d42:	4604      	mov	r4, r0
  401d44:	460d      	mov	r5, r1
  401d46:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401d48:	4b12      	ldr	r3, [pc, #72]	; (401d94 <vQueueWaitForMessageRestricted+0x54>)
  401d4a:	4798      	blx	r3
  401d4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401d50:	b25b      	sxtb	r3, r3
  401d52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d56:	d00d      	beq.n	401d74 <vQueueWaitForMessageRestricted+0x34>
  401d58:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401d5c:	b25b      	sxtb	r3, r3
  401d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d62:	d00b      	beq.n	401d7c <vQueueWaitForMessageRestricted+0x3c>
  401d64:	4b0c      	ldr	r3, [pc, #48]	; (401d98 <vQueueWaitForMessageRestricted+0x58>)
  401d66:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401d68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d6a:	b15b      	cbz	r3, 401d84 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401d6c:	4620      	mov	r0, r4
  401d6e:	4b0b      	ldr	r3, [pc, #44]	; (401d9c <vQueueWaitForMessageRestricted+0x5c>)
  401d70:	4798      	blx	r3
  401d72:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401d74:	2300      	movs	r3, #0
  401d76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401d7a:	e7ed      	b.n	401d58 <vQueueWaitForMessageRestricted+0x18>
  401d7c:	2300      	movs	r3, #0
  401d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401d82:	e7ef      	b.n	401d64 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401d84:	4632      	mov	r2, r6
  401d86:	4629      	mov	r1, r5
  401d88:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d8c:	4b04      	ldr	r3, [pc, #16]	; (401da0 <vQueueWaitForMessageRestricted+0x60>)
  401d8e:	4798      	blx	r3
  401d90:	e7ec      	b.n	401d6c <vQueueWaitForMessageRestricted+0x2c>
  401d92:	bf00      	nop
  401d94:	004010b5 	.word	0x004010b5
  401d98:	00401101 	.word	0x00401101
  401d9c:	004014e5 	.word	0x004014e5
  401da0:	004025fd 	.word	0x004025fd

00401da4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401da4:	4b08      	ldr	r3, [pc, #32]	; (401dc8 <prvResetNextTaskUnblockTime+0x24>)
  401da6:	681b      	ldr	r3, [r3, #0]
  401da8:	681b      	ldr	r3, [r3, #0]
  401daa:	b13b      	cbz	r3, 401dbc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401dac:	4b06      	ldr	r3, [pc, #24]	; (401dc8 <prvResetNextTaskUnblockTime+0x24>)
  401dae:	681b      	ldr	r3, [r3, #0]
  401db0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401db2:	68db      	ldr	r3, [r3, #12]
  401db4:	685a      	ldr	r2, [r3, #4]
  401db6:	4b05      	ldr	r3, [pc, #20]	; (401dcc <prvResetNextTaskUnblockTime+0x28>)
  401db8:	601a      	str	r2, [r3, #0]
  401dba:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401dbc:	f04f 32ff 	mov.w	r2, #4294967295
  401dc0:	4b02      	ldr	r3, [pc, #8]	; (401dcc <prvResetNextTaskUnblockTime+0x28>)
  401dc2:	601a      	str	r2, [r3, #0]
  401dc4:	4770      	bx	lr
  401dc6:	bf00      	nop
  401dc8:	20400a64 	.word	0x20400a64
  401dcc:	20400b14 	.word	0x20400b14

00401dd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401dd0:	b570      	push	{r4, r5, r6, lr}
  401dd2:	4604      	mov	r4, r0
  401dd4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401dd6:	4b1c      	ldr	r3, [pc, #112]	; (401e48 <prvAddCurrentTaskToDelayedList+0x78>)
  401dd8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401dda:	4b1c      	ldr	r3, [pc, #112]	; (401e4c <prvAddCurrentTaskToDelayedList+0x7c>)
  401ddc:	6818      	ldr	r0, [r3, #0]
  401dde:	3004      	adds	r0, #4
  401de0:	4b1b      	ldr	r3, [pc, #108]	; (401e50 <prvAddCurrentTaskToDelayedList+0x80>)
  401de2:	4798      	blx	r3
  401de4:	b948      	cbnz	r0, 401dfa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401de6:	4b19      	ldr	r3, [pc, #100]	; (401e4c <prvAddCurrentTaskToDelayedList+0x7c>)
  401de8:	681a      	ldr	r2, [r3, #0]
  401dea:	491a      	ldr	r1, [pc, #104]	; (401e54 <prvAddCurrentTaskToDelayedList+0x84>)
  401dec:	680b      	ldr	r3, [r1, #0]
  401dee:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401df0:	2201      	movs	r2, #1
  401df2:	4082      	lsls	r2, r0
  401df4:	ea23 0302 	bic.w	r3, r3, r2
  401df8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401dfa:	f1b4 3fff 	cmp.w	r4, #4294967295
  401dfe:	d100      	bne.n	401e02 <prvAddCurrentTaskToDelayedList+0x32>
  401e00:	b99e      	cbnz	r6, 401e2a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401e02:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401e04:	4b11      	ldr	r3, [pc, #68]	; (401e4c <prvAddCurrentTaskToDelayedList+0x7c>)
  401e06:	681b      	ldr	r3, [r3, #0]
  401e08:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401e0a:	42a5      	cmp	r5, r4
  401e0c:	d814      	bhi.n	401e38 <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401e0e:	4b12      	ldr	r3, [pc, #72]	; (401e58 <prvAddCurrentTaskToDelayedList+0x88>)
  401e10:	6818      	ldr	r0, [r3, #0]
  401e12:	4b0e      	ldr	r3, [pc, #56]	; (401e4c <prvAddCurrentTaskToDelayedList+0x7c>)
  401e14:	6819      	ldr	r1, [r3, #0]
  401e16:	3104      	adds	r1, #4
  401e18:	4b10      	ldr	r3, [pc, #64]	; (401e5c <prvAddCurrentTaskToDelayedList+0x8c>)
  401e1a:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401e1c:	4b10      	ldr	r3, [pc, #64]	; (401e60 <prvAddCurrentTaskToDelayedList+0x90>)
  401e1e:	681b      	ldr	r3, [r3, #0]
  401e20:	429c      	cmp	r4, r3
  401e22:	d201      	bcs.n	401e28 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401e24:	4b0e      	ldr	r3, [pc, #56]	; (401e60 <prvAddCurrentTaskToDelayedList+0x90>)
  401e26:	601c      	str	r4, [r3, #0]
  401e28:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401e2a:	4b08      	ldr	r3, [pc, #32]	; (401e4c <prvAddCurrentTaskToDelayedList+0x7c>)
  401e2c:	6819      	ldr	r1, [r3, #0]
  401e2e:	3104      	adds	r1, #4
  401e30:	480c      	ldr	r0, [pc, #48]	; (401e64 <prvAddCurrentTaskToDelayedList+0x94>)
  401e32:	4b0d      	ldr	r3, [pc, #52]	; (401e68 <prvAddCurrentTaskToDelayedList+0x98>)
  401e34:	4798      	blx	r3
  401e36:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401e38:	4b0c      	ldr	r3, [pc, #48]	; (401e6c <prvAddCurrentTaskToDelayedList+0x9c>)
  401e3a:	6818      	ldr	r0, [r3, #0]
  401e3c:	4b03      	ldr	r3, [pc, #12]	; (401e4c <prvAddCurrentTaskToDelayedList+0x7c>)
  401e3e:	6819      	ldr	r1, [r3, #0]
  401e40:	3104      	adds	r1, #4
  401e42:	4b06      	ldr	r3, [pc, #24]	; (401e5c <prvAddCurrentTaskToDelayedList+0x8c>)
  401e44:	4798      	blx	r3
  401e46:	bd70      	pop	{r4, r5, r6, pc}
  401e48:	20400b5c 	.word	0x20400b5c
  401e4c:	20400a60 	.word	0x20400a60
  401e50:	00400fb5 	.word	0x00400fb5
  401e54:	20400ae4 	.word	0x20400ae4
  401e58:	20400a64 	.word	0x20400a64
  401e5c:	00400f81 	.word	0x00400f81
  401e60:	20400b14 	.word	0x20400b14
  401e64:	20400b34 	.word	0x20400b34
  401e68:	00400f69 	.word	0x00400f69
  401e6c:	20400a68 	.word	0x20400a68

00401e70 <prvIdleTask>:
{
  401e70:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401e72:	4d18      	ldr	r5, [pc, #96]	; (401ed4 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401e74:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401ef0 <prvIdleTask+0x80>
				taskYIELD();
  401e78:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401ef4 <prvIdleTask+0x84>
  401e7c:	e001      	b.n	401e82 <prvIdleTask+0x12>
			vApplicationIdleHook();
  401e7e:	4b16      	ldr	r3, [pc, #88]	; (401ed8 <prvIdleTask+0x68>)
  401e80:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401e82:	682b      	ldr	r3, [r5, #0]
  401e84:	b1c3      	cbz	r3, 401eb8 <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401e86:	4f15      	ldr	r7, [pc, #84]	; (401edc <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401e88:	4e15      	ldr	r6, [pc, #84]	; (401ee0 <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  401e8a:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401e8c:	68fb      	ldr	r3, [r7, #12]
  401e8e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401e90:	1d20      	adds	r0, r4, #4
  401e92:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401e94:	4a13      	ldr	r2, [pc, #76]	; (401ee4 <prvIdleTask+0x74>)
  401e96:	6813      	ldr	r3, [r2, #0]
  401e98:	3b01      	subs	r3, #1
  401e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401e9c:	682b      	ldr	r3, [r5, #0]
  401e9e:	3b01      	subs	r3, #1
  401ea0:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401ea2:	4b11      	ldr	r3, [pc, #68]	; (401ee8 <prvIdleTask+0x78>)
  401ea4:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401ea6:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401ea8:	f8df a04c 	ldr.w	sl, [pc, #76]	; 401ef8 <prvIdleTask+0x88>
  401eac:	47d0      	blx	sl
			vPortFree( pxTCB );
  401eae:	4620      	mov	r0, r4
  401eb0:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401eb2:	682b      	ldr	r3, [r5, #0]
  401eb4:	2b00      	cmp	r3, #0
  401eb6:	d1e8      	bne.n	401e8a <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401eb8:	4b0c      	ldr	r3, [pc, #48]	; (401eec <prvIdleTask+0x7c>)
  401eba:	681b      	ldr	r3, [r3, #0]
  401ebc:	2b01      	cmp	r3, #1
  401ebe:	d9de      	bls.n	401e7e <prvIdleTask+0xe>
				taskYIELD();
  401ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401ec4:	f8c9 3000 	str.w	r3, [r9]
  401ec8:	f3bf 8f4f 	dsb	sy
  401ecc:	f3bf 8f6f 	isb	sy
  401ed0:	e7d5      	b.n	401e7e <prvIdleTask+0xe>
  401ed2:	bf00      	nop
  401ed4:	20400ad4 	.word	0x20400ad4
  401ed8:	00403781 	.word	0x00403781
  401edc:	20400b48 	.word	0x20400b48
  401ee0:	00400fb5 	.word	0x00400fb5
  401ee4:	20400ad0 	.word	0x20400ad0
  401ee8:	00401101 	.word	0x00401101
  401eec:	20400a6c 	.word	0x20400a6c
  401ef0:	004010b5 	.word	0x004010b5
  401ef4:	e000ed04 	.word	0xe000ed04
  401ef8:	00401371 	.word	0x00401371

00401efc <xTaskCreate>:
	{
  401efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f00:	b083      	sub	sp, #12
  401f02:	4683      	mov	fp, r0
  401f04:	460d      	mov	r5, r1
  401f06:	9301      	str	r3, [sp, #4]
  401f08:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401f0c:	0096      	lsls	r6, r2, #2
  401f0e:	4630      	mov	r0, r6
  401f10:	4b60      	ldr	r3, [pc, #384]	; (402094 <xTaskCreate+0x198>)
  401f12:	4798      	blx	r3
			if( pxStack != NULL )
  401f14:	2800      	cmp	r0, #0
  401f16:	f000 808d 	beq.w	402034 <xTaskCreate+0x138>
  401f1a:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  401f1c:	2058      	movs	r0, #88	; 0x58
  401f1e:	4b5d      	ldr	r3, [pc, #372]	; (402094 <xTaskCreate+0x198>)
  401f20:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401f22:	4604      	mov	r4, r0
  401f24:	2800      	cmp	r0, #0
  401f26:	f000 8082 	beq.w	40202e <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  401f2a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401f2c:	4632      	mov	r2, r6
  401f2e:	21a5      	movs	r1, #165	; 0xa5
  401f30:	4638      	mov	r0, r7
  401f32:	4b59      	ldr	r3, [pc, #356]	; (402098 <xTaskCreate+0x19c>)
  401f34:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  401f36:	3e04      	subs	r6, #4
  401f38:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401f3a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401f3c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401f40:	782b      	ldrb	r3, [r5, #0]
  401f42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401f46:	782b      	ldrb	r3, [r5, #0]
  401f48:	b163      	cbz	r3, 401f64 <xTaskCreate+0x68>
  401f4a:	462b      	mov	r3, r5
  401f4c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f50:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401f54:	7858      	ldrb	r0, [r3, #1]
  401f56:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f5a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  401f5e:	b108      	cbz	r0, 401f64 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401f60:	428b      	cmp	r3, r1
  401f62:	d1f7      	bne.n	401f54 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401f64:	2700      	movs	r7, #0
  401f66:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401f6c:	2d04      	cmp	r5, #4
  401f6e:	bf28      	it	cs
  401f70:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  401f72:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401f74:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401f76:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401f78:	f104 0804 	add.w	r8, r4, #4
  401f7c:	4640      	mov	r0, r8
  401f7e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 4020ec <xTaskCreate+0x1f0>
  401f82:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401f84:	f104 0018 	add.w	r0, r4, #24
  401f88:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401f8a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401f8c:	f1c5 0505 	rsb	r5, r5, #5
  401f90:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401f92:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  401f94:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401f96:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401f9a:	9a01      	ldr	r2, [sp, #4]
  401f9c:	4659      	mov	r1, fp
  401f9e:	4630      	mov	r0, r6
  401fa0:	4b3e      	ldr	r3, [pc, #248]	; (40209c <xTaskCreate+0x1a0>)
  401fa2:	4798      	blx	r3
  401fa4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  401fa6:	f1ba 0f00 	cmp.w	sl, #0
  401faa:	d001      	beq.n	401fb0 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401fac:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401fb0:	4b3b      	ldr	r3, [pc, #236]	; (4020a0 <xTaskCreate+0x1a4>)
  401fb2:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401fb4:	4a3b      	ldr	r2, [pc, #236]	; (4020a4 <xTaskCreate+0x1a8>)
  401fb6:	6813      	ldr	r3, [r2, #0]
  401fb8:	3301      	adds	r3, #1
  401fba:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  401fbc:	4b3a      	ldr	r3, [pc, #232]	; (4020a8 <xTaskCreate+0x1ac>)
  401fbe:	681b      	ldr	r3, [r3, #0]
  401fc0:	2b00      	cmp	r3, #0
  401fc2:	d03a      	beq.n	40203a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  401fc4:	4b39      	ldr	r3, [pc, #228]	; (4020ac <xTaskCreate+0x1b0>)
  401fc6:	681b      	ldr	r3, [r3, #0]
  401fc8:	b93b      	cbnz	r3, 401fda <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401fca:	4b37      	ldr	r3, [pc, #220]	; (4020a8 <xTaskCreate+0x1ac>)
  401fcc:	681b      	ldr	r3, [r3, #0]
  401fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401fd2:	429a      	cmp	r2, r3
  401fd4:	d801      	bhi.n	401fda <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  401fd6:	4b34      	ldr	r3, [pc, #208]	; (4020a8 <xTaskCreate+0x1ac>)
  401fd8:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  401fda:	4a35      	ldr	r2, [pc, #212]	; (4020b0 <xTaskCreate+0x1b4>)
  401fdc:	6813      	ldr	r3, [r2, #0]
  401fde:	3301      	adds	r3, #1
  401fe0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401fe2:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  401fe4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401fe6:	4a33      	ldr	r2, [pc, #204]	; (4020b4 <xTaskCreate+0x1b8>)
  401fe8:	6811      	ldr	r1, [r2, #0]
  401fea:	2301      	movs	r3, #1
  401fec:	4083      	lsls	r3, r0
  401fee:	430b      	orrs	r3, r1
  401ff0:	6013      	str	r3, [r2, #0]
  401ff2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ff6:	4641      	mov	r1, r8
  401ff8:	4b2f      	ldr	r3, [pc, #188]	; (4020b8 <xTaskCreate+0x1bc>)
  401ffa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ffe:	4b2f      	ldr	r3, [pc, #188]	; (4020bc <xTaskCreate+0x1c0>)
  402000:	4798      	blx	r3
	taskEXIT_CRITICAL();
  402002:	4b2f      	ldr	r3, [pc, #188]	; (4020c0 <xTaskCreate+0x1c4>)
  402004:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  402006:	4b29      	ldr	r3, [pc, #164]	; (4020ac <xTaskCreate+0x1b0>)
  402008:	681b      	ldr	r3, [r3, #0]
  40200a:	2b00      	cmp	r3, #0
  40200c:	d03b      	beq.n	402086 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40200e:	4b26      	ldr	r3, [pc, #152]	; (4020a8 <xTaskCreate+0x1ac>)
  402010:	681b      	ldr	r3, [r3, #0]
  402012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402014:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402016:	429a      	cmp	r2, r3
  402018:	d239      	bcs.n	40208e <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  40201a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40201e:	4b29      	ldr	r3, [pc, #164]	; (4020c4 <xTaskCreate+0x1c8>)
  402020:	601a      	str	r2, [r3, #0]
  402022:	f3bf 8f4f 	dsb	sy
  402026:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40202a:	2001      	movs	r0, #1
  40202c:	e02c      	b.n	402088 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  40202e:	4638      	mov	r0, r7
  402030:	4b25      	ldr	r3, [pc, #148]	; (4020c8 <xTaskCreate+0x1cc>)
  402032:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402034:	f04f 30ff 	mov.w	r0, #4294967295
  402038:	e026      	b.n	402088 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  40203a:	4b1b      	ldr	r3, [pc, #108]	; (4020a8 <xTaskCreate+0x1ac>)
  40203c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40203e:	6813      	ldr	r3, [r2, #0]
  402040:	2b01      	cmp	r3, #1
  402042:	d1ca      	bne.n	401fda <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402044:	4e1c      	ldr	r6, [pc, #112]	; (4020b8 <xTaskCreate+0x1bc>)
  402046:	4630      	mov	r0, r6
  402048:	4d20      	ldr	r5, [pc, #128]	; (4020cc <xTaskCreate+0x1d0>)
  40204a:	47a8      	blx	r5
  40204c:	f106 0014 	add.w	r0, r6, #20
  402050:	47a8      	blx	r5
  402052:	f106 0028 	add.w	r0, r6, #40	; 0x28
  402056:	47a8      	blx	r5
  402058:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  40205c:	47a8      	blx	r5
  40205e:	f106 0050 	add.w	r0, r6, #80	; 0x50
  402062:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  402064:	4f1a      	ldr	r7, [pc, #104]	; (4020d0 <xTaskCreate+0x1d4>)
  402066:	4638      	mov	r0, r7
  402068:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40206a:	4e1a      	ldr	r6, [pc, #104]	; (4020d4 <xTaskCreate+0x1d8>)
  40206c:	4630      	mov	r0, r6
  40206e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  402070:	4819      	ldr	r0, [pc, #100]	; (4020d8 <xTaskCreate+0x1dc>)
  402072:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  402074:	4819      	ldr	r0, [pc, #100]	; (4020dc <xTaskCreate+0x1e0>)
  402076:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  402078:	4819      	ldr	r0, [pc, #100]	; (4020e0 <xTaskCreate+0x1e4>)
  40207a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  40207c:	4b19      	ldr	r3, [pc, #100]	; (4020e4 <xTaskCreate+0x1e8>)
  40207e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402080:	4b19      	ldr	r3, [pc, #100]	; (4020e8 <xTaskCreate+0x1ec>)
  402082:	601e      	str	r6, [r3, #0]
  402084:	e7a9      	b.n	401fda <xTaskCreate+0xde>
			xReturn = pdPASS;
  402086:	2001      	movs	r0, #1
	}
  402088:	b003      	add	sp, #12
  40208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  40208e:	2001      	movs	r0, #1
		return xReturn;
  402090:	e7fa      	b.n	402088 <xTaskCreate+0x18c>
  402092:	bf00      	nop
  402094:	00401341 	.word	0x00401341
  402098:	00404135 	.word	0x00404135
  40209c:	00401061 	.word	0x00401061
  4020a0:	004010b5 	.word	0x004010b5
  4020a4:	20400ad0 	.word	0x20400ad0
  4020a8:	20400a60 	.word	0x20400a60
  4020ac:	20400b30 	.word	0x20400b30
  4020b0:	20400ae0 	.word	0x20400ae0
  4020b4:	20400ae4 	.word	0x20400ae4
  4020b8:	20400a6c 	.word	0x20400a6c
  4020bc:	00400f69 	.word	0x00400f69
  4020c0:	00401101 	.word	0x00401101
  4020c4:	e000ed04 	.word	0xe000ed04
  4020c8:	00401371 	.word	0x00401371
  4020cc:	00400f4d 	.word	0x00400f4d
  4020d0:	20400ae8 	.word	0x20400ae8
  4020d4:	20400afc 	.word	0x20400afc
  4020d8:	20400b1c 	.word	0x20400b1c
  4020dc:	20400b48 	.word	0x20400b48
  4020e0:	20400b34 	.word	0x20400b34
  4020e4:	20400a64 	.word	0x20400a64
  4020e8:	20400a68 	.word	0x20400a68
  4020ec:	00400f63 	.word	0x00400f63

004020f0 <eTaskGetState>:
	{
  4020f0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
  4020f2:	b1d0      	cbz	r0, 40212a <eTaskGetState+0x3a>
  4020f4:	4605      	mov	r5, r0
		if( pxTCB == pxCurrentTCB )
  4020f6:	4b19      	ldr	r3, [pc, #100]	; (40215c <eTaskGetState+0x6c>)
  4020f8:	681b      	ldr	r3, [r3, #0]
  4020fa:	4298      	cmp	r0, r3
  4020fc:	d026      	beq.n	40214c <eTaskGetState+0x5c>
			taskENTER_CRITICAL();
  4020fe:	4b18      	ldr	r3, [pc, #96]	; (402160 <eTaskGetState+0x70>)
  402100:	4798      	blx	r3
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
  402102:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
  402104:	4b17      	ldr	r3, [pc, #92]	; (402164 <eTaskGetState+0x74>)
  402106:	4798      	blx	r3
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
  402108:	4b17      	ldr	r3, [pc, #92]	; (402168 <eTaskGetState+0x78>)
  40210a:	681b      	ldr	r3, [r3, #0]
  40210c:	429c      	cmp	r4, r3
  40210e:	d01f      	beq.n	402150 <eTaskGetState+0x60>
  402110:	4b16      	ldr	r3, [pc, #88]	; (40216c <eTaskGetState+0x7c>)
  402112:	681b      	ldr	r3, [r3, #0]
  402114:	429c      	cmp	r4, r3
  402116:	d01d      	beq.n	402154 <eTaskGetState+0x64>
				else if( pxStateList == &xSuspendedTaskList )
  402118:	4b15      	ldr	r3, [pc, #84]	; (402170 <eTaskGetState+0x80>)
  40211a:	429c      	cmp	r4, r3
  40211c:	d010      	beq.n	402140 <eTaskGetState+0x50>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
  40211e:	b1dc      	cbz	r4, 402158 <eTaskGetState+0x68>
  402120:	4b14      	ldr	r3, [pc, #80]	; (402174 <eTaskGetState+0x84>)
  402122:	429c      	cmp	r4, r3
  402124:	d018      	beq.n	402158 <eTaskGetState+0x68>
				eReturn = eReady;
  402126:	2001      	movs	r0, #1
  402128:	bd38      	pop	{r3, r4, r5, pc}
  40212a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40212e:	b672      	cpsid	i
  402130:	f383 8811 	msr	BASEPRI, r3
  402134:	f3bf 8f6f 	isb	sy
  402138:	f3bf 8f4f 	dsb	sy
  40213c:	b662      	cpsie	i
  40213e:	e7fe      	b.n	40213e <eTaskGetState+0x4e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
  402140:	6aab      	ldr	r3, [r5, #40]	; 0x28
						eReturn = eBlocked;
  402142:	2b00      	cmp	r3, #0
  402144:	bf0c      	ite	eq
  402146:	2003      	moveq	r0, #3
  402148:	2002      	movne	r0, #2
  40214a:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
  40214c:	2000      	movs	r0, #0
  40214e:	bd38      	pop	{r3, r4, r5, pc}
				eReturn = eBlocked;
  402150:	2002      	movs	r0, #2
  402152:	bd38      	pop	{r3, r4, r5, pc}
  402154:	2002      	movs	r0, #2
  402156:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
  402158:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  40215a:	bd38      	pop	{r3, r4, r5, pc}
  40215c:	20400a60 	.word	0x20400a60
  402160:	004010b5 	.word	0x004010b5
  402164:	00401101 	.word	0x00401101
  402168:	20400a64 	.word	0x20400a64
  40216c:	20400a68 	.word	0x20400a68
  402170:	20400b34 	.word	0x20400b34
  402174:	20400b48 	.word	0x20400b48

00402178 <vTaskStartScheduler>:
{
  402178:	b510      	push	{r4, lr}
  40217a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  40217c:	4b1a      	ldr	r3, [pc, #104]	; (4021e8 <vTaskStartScheduler+0x70>)
  40217e:	9301      	str	r3, [sp, #4]
  402180:	2300      	movs	r3, #0
  402182:	9300      	str	r3, [sp, #0]
  402184:	2282      	movs	r2, #130	; 0x82
  402186:	4919      	ldr	r1, [pc, #100]	; (4021ec <vTaskStartScheduler+0x74>)
  402188:	4819      	ldr	r0, [pc, #100]	; (4021f0 <vTaskStartScheduler+0x78>)
  40218a:	4c1a      	ldr	r4, [pc, #104]	; (4021f4 <vTaskStartScheduler+0x7c>)
  40218c:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40218e:	2801      	cmp	r0, #1
  402190:	d004      	beq.n	40219c <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  402192:	f1b0 3fff 	cmp.w	r0, #4294967295
  402196:	d01c      	beq.n	4021d2 <vTaskStartScheduler+0x5a>
}
  402198:	b002      	add	sp, #8
  40219a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  40219c:	4b16      	ldr	r3, [pc, #88]	; (4021f8 <vTaskStartScheduler+0x80>)
  40219e:	4798      	blx	r3
	if( xReturn == pdPASS )
  4021a0:	2801      	cmp	r0, #1
  4021a2:	d1f6      	bne.n	402192 <vTaskStartScheduler+0x1a>
  4021a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021a8:	b672      	cpsid	i
  4021aa:	f383 8811 	msr	BASEPRI, r3
  4021ae:	f3bf 8f6f 	isb	sy
  4021b2:	f3bf 8f4f 	dsb	sy
  4021b6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4021b8:	f04f 32ff 	mov.w	r2, #4294967295
  4021bc:	4b0f      	ldr	r3, [pc, #60]	; (4021fc <vTaskStartScheduler+0x84>)
  4021be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4021c0:	2201      	movs	r2, #1
  4021c2:	4b0f      	ldr	r3, [pc, #60]	; (402200 <vTaskStartScheduler+0x88>)
  4021c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4021c6:	2200      	movs	r2, #0
  4021c8:	4b0e      	ldr	r3, [pc, #56]	; (402204 <vTaskStartScheduler+0x8c>)
  4021ca:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4021cc:	4b0e      	ldr	r3, [pc, #56]	; (402208 <vTaskStartScheduler+0x90>)
  4021ce:	4798      	blx	r3
  4021d0:	e7e2      	b.n	402198 <vTaskStartScheduler+0x20>
  4021d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021d6:	b672      	cpsid	i
  4021d8:	f383 8811 	msr	BASEPRI, r3
  4021dc:	f3bf 8f6f 	isb	sy
  4021e0:	f3bf 8f4f 	dsb	sy
  4021e4:	b662      	cpsie	i
  4021e6:	e7fe      	b.n	4021e6 <vTaskStartScheduler+0x6e>
  4021e8:	20400b10 	.word	0x20400b10
  4021ec:	0040a218 	.word	0x0040a218
  4021f0:	00401e71 	.word	0x00401e71
  4021f4:	00401efd 	.word	0x00401efd
  4021f8:	00402dc1 	.word	0x00402dc1
  4021fc:	20400b14 	.word	0x20400b14
  402200:	20400b30 	.word	0x20400b30
  402204:	20400b5c 	.word	0x20400b5c
  402208:	004011f1 	.word	0x004011f1

0040220c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40220c:	4a02      	ldr	r2, [pc, #8]	; (402218 <vTaskSuspendAll+0xc>)
  40220e:	6813      	ldr	r3, [r2, #0]
  402210:	3301      	adds	r3, #1
  402212:	6013      	str	r3, [r2, #0]
  402214:	4770      	bx	lr
  402216:	bf00      	nop
  402218:	20400adc 	.word	0x20400adc

0040221c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40221c:	4b01      	ldr	r3, [pc, #4]	; (402224 <xTaskGetTickCount+0x8>)
  40221e:	6818      	ldr	r0, [r3, #0]
}
  402220:	4770      	bx	lr
  402222:	bf00      	nop
  402224:	20400b5c 	.word	0x20400b5c

00402228 <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
  402228:	4b01      	ldr	r3, [pc, #4]	; (402230 <uxTaskGetNumberOfTasks+0x8>)
  40222a:	6818      	ldr	r0, [r3, #0]
}
  40222c:	4770      	bx	lr
  40222e:	bf00      	nop
  402230:	20400ad0 	.word	0x20400ad0

00402234 <xTaskIncrementTick>:
{
  402234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402238:	4b41      	ldr	r3, [pc, #260]	; (402340 <xTaskIncrementTick+0x10c>)
  40223a:	681b      	ldr	r3, [r3, #0]
  40223c:	2b00      	cmp	r3, #0
  40223e:	d177      	bne.n	402330 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  402240:	4b40      	ldr	r3, [pc, #256]	; (402344 <xTaskIncrementTick+0x110>)
  402242:	681d      	ldr	r5, [r3, #0]
  402244:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  402246:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  402248:	b9d5      	cbnz	r5, 402280 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  40224a:	4b3f      	ldr	r3, [pc, #252]	; (402348 <xTaskIncrementTick+0x114>)
  40224c:	681b      	ldr	r3, [r3, #0]
  40224e:	681b      	ldr	r3, [r3, #0]
  402250:	b153      	cbz	r3, 402268 <xTaskIncrementTick+0x34>
  402252:	f04f 0380 	mov.w	r3, #128	; 0x80
  402256:	b672      	cpsid	i
  402258:	f383 8811 	msr	BASEPRI, r3
  40225c:	f3bf 8f6f 	isb	sy
  402260:	f3bf 8f4f 	dsb	sy
  402264:	b662      	cpsie	i
  402266:	e7fe      	b.n	402266 <xTaskIncrementTick+0x32>
  402268:	4a37      	ldr	r2, [pc, #220]	; (402348 <xTaskIncrementTick+0x114>)
  40226a:	6811      	ldr	r1, [r2, #0]
  40226c:	4b37      	ldr	r3, [pc, #220]	; (40234c <xTaskIncrementTick+0x118>)
  40226e:	6818      	ldr	r0, [r3, #0]
  402270:	6010      	str	r0, [r2, #0]
  402272:	6019      	str	r1, [r3, #0]
  402274:	4a36      	ldr	r2, [pc, #216]	; (402350 <xTaskIncrementTick+0x11c>)
  402276:	6813      	ldr	r3, [r2, #0]
  402278:	3301      	adds	r3, #1
  40227a:	6013      	str	r3, [r2, #0]
  40227c:	4b35      	ldr	r3, [pc, #212]	; (402354 <xTaskIncrementTick+0x120>)
  40227e:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  402280:	4b35      	ldr	r3, [pc, #212]	; (402358 <xTaskIncrementTick+0x124>)
  402282:	681b      	ldr	r3, [r3, #0]
  402284:	429d      	cmp	r5, r3
  402286:	d218      	bcs.n	4022ba <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  402288:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40228a:	4b34      	ldr	r3, [pc, #208]	; (40235c <xTaskIncrementTick+0x128>)
  40228c:	681b      	ldr	r3, [r3, #0]
  40228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402290:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402294:	009b      	lsls	r3, r3, #2
  402296:	4a32      	ldr	r2, [pc, #200]	; (402360 <xTaskIncrementTick+0x12c>)
  402298:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  40229a:	2b02      	cmp	r3, #2
  40229c:	bf28      	it	cs
  40229e:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4022a0:	4b30      	ldr	r3, [pc, #192]	; (402364 <xTaskIncrementTick+0x130>)
  4022a2:	681b      	ldr	r3, [r3, #0]
  4022a4:	b90b      	cbnz	r3, 4022aa <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  4022a6:	4b30      	ldr	r3, [pc, #192]	; (402368 <xTaskIncrementTick+0x134>)
  4022a8:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4022aa:	4b30      	ldr	r3, [pc, #192]	; (40236c <xTaskIncrementTick+0x138>)
  4022ac:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4022ae:	2b00      	cmp	r3, #0
}
  4022b0:	bf0c      	ite	eq
  4022b2:	4620      	moveq	r0, r4
  4022b4:	2001      	movne	r0, #1
  4022b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022ba:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4022bc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 402348 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4022c0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 402378 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  4022c4:	4f2a      	ldr	r7, [pc, #168]	; (402370 <xTaskIncrementTick+0x13c>)
  4022c6:	e01f      	b.n	402308 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022c8:	f04f 32ff 	mov.w	r2, #4294967295
  4022cc:	4b22      	ldr	r3, [pc, #136]	; (402358 <xTaskIncrementTick+0x124>)
  4022ce:	601a      	str	r2, [r3, #0]
					break;
  4022d0:	e7db      	b.n	40228a <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  4022d2:	4a21      	ldr	r2, [pc, #132]	; (402358 <xTaskIncrementTick+0x124>)
  4022d4:	6013      	str	r3, [r2, #0]
						break;
  4022d6:	e7d8      	b.n	40228a <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4022d8:	f106 0018 	add.w	r0, r6, #24
  4022dc:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  4022de:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  4022e0:	683a      	ldr	r2, [r7, #0]
  4022e2:	2301      	movs	r3, #1
  4022e4:	4083      	lsls	r3, r0
  4022e6:	4313      	orrs	r3, r2
  4022e8:	603b      	str	r3, [r7, #0]
  4022ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4022ee:	4651      	mov	r1, sl
  4022f0:	4b1b      	ldr	r3, [pc, #108]	; (402360 <xTaskIncrementTick+0x12c>)
  4022f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4022f6:	4b1f      	ldr	r3, [pc, #124]	; (402374 <xTaskIncrementTick+0x140>)
  4022f8:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4022fa:	4b18      	ldr	r3, [pc, #96]	; (40235c <xTaskIncrementTick+0x128>)
  4022fc:	681b      	ldr	r3, [r3, #0]
  4022fe:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  402300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  402302:	429a      	cmp	r2, r3
  402304:	bf28      	it	cs
  402306:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402308:	f8d9 3000 	ldr.w	r3, [r9]
  40230c:	681b      	ldr	r3, [r3, #0]
  40230e:	2b00      	cmp	r3, #0
  402310:	d0da      	beq.n	4022c8 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402312:	f8d9 3000 	ldr.w	r3, [r9]
  402316:	68db      	ldr	r3, [r3, #12]
  402318:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40231a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  40231c:	429d      	cmp	r5, r3
  40231e:	d3d8      	bcc.n	4022d2 <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402320:	f106 0a04 	add.w	sl, r6, #4
  402324:	4650      	mov	r0, sl
  402326:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402328:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  40232a:	2b00      	cmp	r3, #0
  40232c:	d1d4      	bne.n	4022d8 <xTaskIncrementTick+0xa4>
  40232e:	e7d6      	b.n	4022de <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  402330:	4a0c      	ldr	r2, [pc, #48]	; (402364 <xTaskIncrementTick+0x130>)
  402332:	6813      	ldr	r3, [r2, #0]
  402334:	3301      	adds	r3, #1
  402336:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402338:	4b0b      	ldr	r3, [pc, #44]	; (402368 <xTaskIncrementTick+0x134>)
  40233a:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40233c:	2400      	movs	r4, #0
  40233e:	e7b4      	b.n	4022aa <xTaskIncrementTick+0x76>
  402340:	20400adc 	.word	0x20400adc
  402344:	20400b5c 	.word	0x20400b5c
  402348:	20400a64 	.word	0x20400a64
  40234c:	20400a68 	.word	0x20400a68
  402350:	20400b18 	.word	0x20400b18
  402354:	00401da5 	.word	0x00401da5
  402358:	20400b14 	.word	0x20400b14
  40235c:	20400a60 	.word	0x20400a60
  402360:	20400a6c 	.word	0x20400a6c
  402364:	20400ad8 	.word	0x20400ad8
  402368:	00403791 	.word	0x00403791
  40236c:	20400b60 	.word	0x20400b60
  402370:	20400ae4 	.word	0x20400ae4
  402374:	00400f69 	.word	0x00400f69
  402378:	00400fb5 	.word	0x00400fb5

0040237c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  40237c:	4b36      	ldr	r3, [pc, #216]	; (402458 <xTaskResumeAll+0xdc>)
  40237e:	681b      	ldr	r3, [r3, #0]
  402380:	b953      	cbnz	r3, 402398 <xTaskResumeAll+0x1c>
  402382:	f04f 0380 	mov.w	r3, #128	; 0x80
  402386:	b672      	cpsid	i
  402388:	f383 8811 	msr	BASEPRI, r3
  40238c:	f3bf 8f6f 	isb	sy
  402390:	f3bf 8f4f 	dsb	sy
  402394:	b662      	cpsie	i
  402396:	e7fe      	b.n	402396 <xTaskResumeAll+0x1a>
{
  402398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  40239c:	4b2f      	ldr	r3, [pc, #188]	; (40245c <xTaskResumeAll+0xe0>)
  40239e:	4798      	blx	r3
		--uxSchedulerSuspended;
  4023a0:	4b2d      	ldr	r3, [pc, #180]	; (402458 <xTaskResumeAll+0xdc>)
  4023a2:	681a      	ldr	r2, [r3, #0]
  4023a4:	3a01      	subs	r2, #1
  4023a6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4023a8:	681b      	ldr	r3, [r3, #0]
  4023aa:	2b00      	cmp	r3, #0
  4023ac:	d150      	bne.n	402450 <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4023ae:	4b2c      	ldr	r3, [pc, #176]	; (402460 <xTaskResumeAll+0xe4>)
  4023b0:	681b      	ldr	r3, [r3, #0]
  4023b2:	b92b      	cbnz	r3, 4023c0 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  4023b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4023b6:	4b2b      	ldr	r3, [pc, #172]	; (402464 <xTaskResumeAll+0xe8>)
  4023b8:	4798      	blx	r3
}
  4023ba:	4620      	mov	r0, r4
  4023bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023c0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4023c2:	4f29      	ldr	r7, [pc, #164]	; (402468 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4023c4:	4e29      	ldr	r6, [pc, #164]	; (40246c <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  4023c6:	4d2a      	ldr	r5, [pc, #168]	; (402470 <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4023c8:	683b      	ldr	r3, [r7, #0]
  4023ca:	b303      	cbz	r3, 40240e <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4023cc:	68fb      	ldr	r3, [r7, #12]
  4023ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4023d0:	f104 0018 	add.w	r0, r4, #24
  4023d4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4023d6:	f104 0804 	add.w	r8, r4, #4
  4023da:	4640      	mov	r0, r8
  4023dc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4023de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4023e0:	682a      	ldr	r2, [r5, #0]
  4023e2:	2301      	movs	r3, #1
  4023e4:	4083      	lsls	r3, r0
  4023e6:	4313      	orrs	r3, r2
  4023e8:	602b      	str	r3, [r5, #0]
  4023ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023ee:	4641      	mov	r1, r8
  4023f0:	4b20      	ldr	r3, [pc, #128]	; (402474 <xTaskResumeAll+0xf8>)
  4023f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023f6:	4b20      	ldr	r3, [pc, #128]	; (402478 <xTaskResumeAll+0xfc>)
  4023f8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4023fa:	4b20      	ldr	r3, [pc, #128]	; (40247c <xTaskResumeAll+0x100>)
  4023fc:	681b      	ldr	r3, [r3, #0]
  4023fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402402:	429a      	cmp	r2, r3
  402404:	d3e0      	bcc.n	4023c8 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  402406:	2201      	movs	r2, #1
  402408:	4b1d      	ldr	r3, [pc, #116]	; (402480 <xTaskResumeAll+0x104>)
  40240a:	601a      	str	r2, [r3, #0]
  40240c:	e7dc      	b.n	4023c8 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  40240e:	b10c      	cbz	r4, 402414 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  402410:	4b1c      	ldr	r3, [pc, #112]	; (402484 <xTaskResumeAll+0x108>)
  402412:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  402414:	4b1c      	ldr	r3, [pc, #112]	; (402488 <xTaskResumeAll+0x10c>)
  402416:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  402418:	b16c      	cbz	r4, 402436 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  40241a:	4f1c      	ldr	r7, [pc, #112]	; (40248c <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  40241c:	4e18      	ldr	r6, [pc, #96]	; (402480 <xTaskResumeAll+0x104>)
  40241e:	2501      	movs	r5, #1
  402420:	e001      	b.n	402426 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  402422:	3c01      	subs	r4, #1
  402424:	d004      	beq.n	402430 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  402426:	47b8      	blx	r7
  402428:	2800      	cmp	r0, #0
  40242a:	d0fa      	beq.n	402422 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  40242c:	6035      	str	r5, [r6, #0]
  40242e:	e7f8      	b.n	402422 <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  402430:	2200      	movs	r2, #0
  402432:	4b15      	ldr	r3, [pc, #84]	; (402488 <xTaskResumeAll+0x10c>)
  402434:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  402436:	4b12      	ldr	r3, [pc, #72]	; (402480 <xTaskResumeAll+0x104>)
  402438:	681b      	ldr	r3, [r3, #0]
  40243a:	b15b      	cbz	r3, 402454 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  40243c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402440:	4b13      	ldr	r3, [pc, #76]	; (402490 <xTaskResumeAll+0x114>)
  402442:	601a      	str	r2, [r3, #0]
  402444:	f3bf 8f4f 	dsb	sy
  402448:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40244c:	2401      	movs	r4, #1
  40244e:	e7b2      	b.n	4023b6 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  402450:	2400      	movs	r4, #0
  402452:	e7b0      	b.n	4023b6 <xTaskResumeAll+0x3a>
  402454:	2400      	movs	r4, #0
  402456:	e7ae      	b.n	4023b6 <xTaskResumeAll+0x3a>
  402458:	20400adc 	.word	0x20400adc
  40245c:	004010b5 	.word	0x004010b5
  402460:	20400ad0 	.word	0x20400ad0
  402464:	00401101 	.word	0x00401101
  402468:	20400b1c 	.word	0x20400b1c
  40246c:	00400fb5 	.word	0x00400fb5
  402470:	20400ae4 	.word	0x20400ae4
  402474:	20400a6c 	.word	0x20400a6c
  402478:	00400f69 	.word	0x00400f69
  40247c:	20400a60 	.word	0x20400a60
  402480:	20400b60 	.word	0x20400b60
  402484:	00401da5 	.word	0x00401da5
  402488:	20400ad8 	.word	0x20400ad8
  40248c:	00402235 	.word	0x00402235
  402490:	e000ed04 	.word	0xe000ed04

00402494 <vTaskDelay>:
	{
  402494:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402496:	b1b8      	cbz	r0, 4024c8 <vTaskDelay+0x34>
  402498:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40249a:	4b10      	ldr	r3, [pc, #64]	; (4024dc <vTaskDelay+0x48>)
  40249c:	681b      	ldr	r3, [r3, #0]
  40249e:	b153      	cbz	r3, 4024b6 <vTaskDelay+0x22>
  4024a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024a4:	b672      	cpsid	i
  4024a6:	f383 8811 	msr	BASEPRI, r3
  4024aa:	f3bf 8f6f 	isb	sy
  4024ae:	f3bf 8f4f 	dsb	sy
  4024b2:	b662      	cpsie	i
  4024b4:	e7fe      	b.n	4024b4 <vTaskDelay+0x20>
			vTaskSuspendAll();
  4024b6:	4b0a      	ldr	r3, [pc, #40]	; (4024e0 <vTaskDelay+0x4c>)
  4024b8:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  4024ba:	2100      	movs	r1, #0
  4024bc:	4620      	mov	r0, r4
  4024be:	4b09      	ldr	r3, [pc, #36]	; (4024e4 <vTaskDelay+0x50>)
  4024c0:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4024c2:	4b09      	ldr	r3, [pc, #36]	; (4024e8 <vTaskDelay+0x54>)
  4024c4:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4024c6:	b938      	cbnz	r0, 4024d8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  4024c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024cc:	4b07      	ldr	r3, [pc, #28]	; (4024ec <vTaskDelay+0x58>)
  4024ce:	601a      	str	r2, [r3, #0]
  4024d0:	f3bf 8f4f 	dsb	sy
  4024d4:	f3bf 8f6f 	isb	sy
  4024d8:	bd10      	pop	{r4, pc}
  4024da:	bf00      	nop
  4024dc:	20400adc 	.word	0x20400adc
  4024e0:	0040220d 	.word	0x0040220d
  4024e4:	00401dd1 	.word	0x00401dd1
  4024e8:	0040237d 	.word	0x0040237d
  4024ec:	e000ed04 	.word	0xe000ed04

004024f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4024f0:	4b2d      	ldr	r3, [pc, #180]	; (4025a8 <vTaskSwitchContext+0xb8>)
  4024f2:	681b      	ldr	r3, [r3, #0]
  4024f4:	2b00      	cmp	r3, #0
  4024f6:	d12c      	bne.n	402552 <vTaskSwitchContext+0x62>
{
  4024f8:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4024fa:	2200      	movs	r2, #0
  4024fc:	4b2b      	ldr	r3, [pc, #172]	; (4025ac <vTaskSwitchContext+0xbc>)
  4024fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402500:	4b2b      	ldr	r3, [pc, #172]	; (4025b0 <vTaskSwitchContext+0xc0>)
  402502:	681b      	ldr	r3, [r3, #0]
  402504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402506:	681a      	ldr	r2, [r3, #0]
  402508:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40250c:	d103      	bne.n	402516 <vTaskSwitchContext+0x26>
  40250e:	685a      	ldr	r2, [r3, #4]
  402510:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402514:	d021      	beq.n	40255a <vTaskSwitchContext+0x6a>
  402516:	4b26      	ldr	r3, [pc, #152]	; (4025b0 <vTaskSwitchContext+0xc0>)
  402518:	6818      	ldr	r0, [r3, #0]
  40251a:	6819      	ldr	r1, [r3, #0]
  40251c:	3134      	adds	r1, #52	; 0x34
  40251e:	4b25      	ldr	r3, [pc, #148]	; (4025b4 <vTaskSwitchContext+0xc4>)
  402520:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402522:	4b25      	ldr	r3, [pc, #148]	; (4025b8 <vTaskSwitchContext+0xc8>)
  402524:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  402526:	fab3 f383 	clz	r3, r3
  40252a:	b2db      	uxtb	r3, r3
  40252c:	f1c3 031f 	rsb	r3, r3, #31
  402530:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402534:	0092      	lsls	r2, r2, #2
  402536:	4921      	ldr	r1, [pc, #132]	; (4025bc <vTaskSwitchContext+0xcc>)
  402538:	588a      	ldr	r2, [r1, r2]
  40253a:	b9ba      	cbnz	r2, 40256c <vTaskSwitchContext+0x7c>
	__asm volatile
  40253c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402540:	b672      	cpsid	i
  402542:	f383 8811 	msr	BASEPRI, r3
  402546:	f3bf 8f6f 	isb	sy
  40254a:	f3bf 8f4f 	dsb	sy
  40254e:	b662      	cpsie	i
  402550:	e7fe      	b.n	402550 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402552:	2201      	movs	r2, #1
  402554:	4b15      	ldr	r3, [pc, #84]	; (4025ac <vTaskSwitchContext+0xbc>)
  402556:	601a      	str	r2, [r3, #0]
  402558:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40255a:	689a      	ldr	r2, [r3, #8]
  40255c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402560:	d1d9      	bne.n	402516 <vTaskSwitchContext+0x26>
  402562:	68db      	ldr	r3, [r3, #12]
  402564:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402568:	d1d5      	bne.n	402516 <vTaskSwitchContext+0x26>
  40256a:	e7da      	b.n	402522 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40256c:	4a13      	ldr	r2, [pc, #76]	; (4025bc <vTaskSwitchContext+0xcc>)
  40256e:	0099      	lsls	r1, r3, #2
  402570:	18c8      	adds	r0, r1, r3
  402572:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402576:	6844      	ldr	r4, [r0, #4]
  402578:	6864      	ldr	r4, [r4, #4]
  40257a:	6044      	str	r4, [r0, #4]
  40257c:	4419      	add	r1, r3
  40257e:	4602      	mov	r2, r0
  402580:	3208      	adds	r2, #8
  402582:	4294      	cmp	r4, r2
  402584:	d009      	beq.n	40259a <vTaskSwitchContext+0xaa>
  402586:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40258a:	4a0c      	ldr	r2, [pc, #48]	; (4025bc <vTaskSwitchContext+0xcc>)
  40258c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402590:	685b      	ldr	r3, [r3, #4]
  402592:	68da      	ldr	r2, [r3, #12]
  402594:	4b06      	ldr	r3, [pc, #24]	; (4025b0 <vTaskSwitchContext+0xc0>)
  402596:	601a      	str	r2, [r3, #0]
  402598:	bd10      	pop	{r4, pc}
  40259a:	6860      	ldr	r0, [r4, #4]
  40259c:	4a07      	ldr	r2, [pc, #28]	; (4025bc <vTaskSwitchContext+0xcc>)
  40259e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4025a2:	6050      	str	r0, [r2, #4]
  4025a4:	e7ef      	b.n	402586 <vTaskSwitchContext+0x96>
  4025a6:	bf00      	nop
  4025a8:	20400adc 	.word	0x20400adc
  4025ac:	20400b60 	.word	0x20400b60
  4025b0:	20400a60 	.word	0x20400a60
  4025b4:	00403769 	.word	0x00403769
  4025b8:	20400ae4 	.word	0x20400ae4
  4025bc:	20400a6c 	.word	0x20400a6c

004025c0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  4025c0:	b950      	cbnz	r0, 4025d8 <vTaskPlaceOnEventList+0x18>
  4025c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025c6:	b672      	cpsid	i
  4025c8:	f383 8811 	msr	BASEPRI, r3
  4025cc:	f3bf 8f6f 	isb	sy
  4025d0:	f3bf 8f4f 	dsb	sy
  4025d4:	b662      	cpsie	i
  4025d6:	e7fe      	b.n	4025d6 <vTaskPlaceOnEventList+0x16>
{
  4025d8:	b510      	push	{r4, lr}
  4025da:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4025dc:	4b04      	ldr	r3, [pc, #16]	; (4025f0 <vTaskPlaceOnEventList+0x30>)
  4025de:	6819      	ldr	r1, [r3, #0]
  4025e0:	3118      	adds	r1, #24
  4025e2:	4b04      	ldr	r3, [pc, #16]	; (4025f4 <vTaskPlaceOnEventList+0x34>)
  4025e4:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4025e6:	2101      	movs	r1, #1
  4025e8:	4620      	mov	r0, r4
  4025ea:	4b03      	ldr	r3, [pc, #12]	; (4025f8 <vTaskPlaceOnEventList+0x38>)
  4025ec:	4798      	blx	r3
  4025ee:	bd10      	pop	{r4, pc}
  4025f0:	20400a60 	.word	0x20400a60
  4025f4:	00400f81 	.word	0x00400f81
  4025f8:	00401dd1 	.word	0x00401dd1

004025fc <vTaskPlaceOnEventListRestricted>:
	{
  4025fc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  4025fe:	b178      	cbz	r0, 402620 <vTaskPlaceOnEventListRestricted+0x24>
  402600:	4614      	mov	r4, r2
  402602:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402604:	4b0c      	ldr	r3, [pc, #48]	; (402638 <vTaskPlaceOnEventListRestricted+0x3c>)
  402606:	6819      	ldr	r1, [r3, #0]
  402608:	3118      	adds	r1, #24
  40260a:	4b0c      	ldr	r3, [pc, #48]	; (40263c <vTaskPlaceOnEventListRestricted+0x40>)
  40260c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  40260e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  402610:	4621      	mov	r1, r4
  402612:	bf0c      	ite	eq
  402614:	4628      	moveq	r0, r5
  402616:	f04f 30ff 	movne.w	r0, #4294967295
  40261a:	4b09      	ldr	r3, [pc, #36]	; (402640 <vTaskPlaceOnEventListRestricted+0x44>)
  40261c:	4798      	blx	r3
  40261e:	bd38      	pop	{r3, r4, r5, pc}
  402620:	f04f 0380 	mov.w	r3, #128	; 0x80
  402624:	b672      	cpsid	i
  402626:	f383 8811 	msr	BASEPRI, r3
  40262a:	f3bf 8f6f 	isb	sy
  40262e:	f3bf 8f4f 	dsb	sy
  402632:	b662      	cpsie	i
  402634:	e7fe      	b.n	402634 <vTaskPlaceOnEventListRestricted+0x38>
  402636:	bf00      	nop
  402638:	20400a60 	.word	0x20400a60
  40263c:	00400f69 	.word	0x00400f69
  402640:	00401dd1 	.word	0x00401dd1

00402644 <xTaskRemoveFromEventList>:
{
  402644:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402646:	68c3      	ldr	r3, [r0, #12]
  402648:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40264a:	b324      	cbz	r4, 402696 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40264c:	f104 0518 	add.w	r5, r4, #24
  402650:	4628      	mov	r0, r5
  402652:	4b1a      	ldr	r3, [pc, #104]	; (4026bc <xTaskRemoveFromEventList+0x78>)
  402654:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402656:	4b1a      	ldr	r3, [pc, #104]	; (4026c0 <xTaskRemoveFromEventList+0x7c>)
  402658:	681b      	ldr	r3, [r3, #0]
  40265a:	bb3b      	cbnz	r3, 4026ac <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  40265c:	1d25      	adds	r5, r4, #4
  40265e:	4628      	mov	r0, r5
  402660:	4b16      	ldr	r3, [pc, #88]	; (4026bc <xTaskRemoveFromEventList+0x78>)
  402662:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402664:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402666:	4a17      	ldr	r2, [pc, #92]	; (4026c4 <xTaskRemoveFromEventList+0x80>)
  402668:	6811      	ldr	r1, [r2, #0]
  40266a:	2301      	movs	r3, #1
  40266c:	4083      	lsls	r3, r0
  40266e:	430b      	orrs	r3, r1
  402670:	6013      	str	r3, [r2, #0]
  402672:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402676:	4629      	mov	r1, r5
  402678:	4b13      	ldr	r3, [pc, #76]	; (4026c8 <xTaskRemoveFromEventList+0x84>)
  40267a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40267e:	4b13      	ldr	r3, [pc, #76]	; (4026cc <xTaskRemoveFromEventList+0x88>)
  402680:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402682:	4b13      	ldr	r3, [pc, #76]	; (4026d0 <xTaskRemoveFromEventList+0x8c>)
  402684:	681b      	ldr	r3, [r3, #0]
  402686:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40268a:	429a      	cmp	r2, r3
  40268c:	d913      	bls.n	4026b6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40268e:	2001      	movs	r0, #1
  402690:	4b10      	ldr	r3, [pc, #64]	; (4026d4 <xTaskRemoveFromEventList+0x90>)
  402692:	6018      	str	r0, [r3, #0]
  402694:	bd38      	pop	{r3, r4, r5, pc}
  402696:	f04f 0380 	mov.w	r3, #128	; 0x80
  40269a:	b672      	cpsid	i
  40269c:	f383 8811 	msr	BASEPRI, r3
  4026a0:	f3bf 8f6f 	isb	sy
  4026a4:	f3bf 8f4f 	dsb	sy
  4026a8:	b662      	cpsie	i
  4026aa:	e7fe      	b.n	4026aa <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4026ac:	4629      	mov	r1, r5
  4026ae:	480a      	ldr	r0, [pc, #40]	; (4026d8 <xTaskRemoveFromEventList+0x94>)
  4026b0:	4b06      	ldr	r3, [pc, #24]	; (4026cc <xTaskRemoveFromEventList+0x88>)
  4026b2:	4798      	blx	r3
  4026b4:	e7e5      	b.n	402682 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4026b6:	2000      	movs	r0, #0
}
  4026b8:	bd38      	pop	{r3, r4, r5, pc}
  4026ba:	bf00      	nop
  4026bc:	00400fb5 	.word	0x00400fb5
  4026c0:	20400adc 	.word	0x20400adc
  4026c4:	20400ae4 	.word	0x20400ae4
  4026c8:	20400a6c 	.word	0x20400a6c
  4026cc:	00400f69 	.word	0x00400f69
  4026d0:	20400a60 	.word	0x20400a60
  4026d4:	20400b60 	.word	0x20400b60
  4026d8:	20400b1c 	.word	0x20400b1c

004026dc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4026dc:	4b03      	ldr	r3, [pc, #12]	; (4026ec <vTaskInternalSetTimeOutState+0x10>)
  4026de:	681b      	ldr	r3, [r3, #0]
  4026e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4026e2:	4b03      	ldr	r3, [pc, #12]	; (4026f0 <vTaskInternalSetTimeOutState+0x14>)
  4026e4:	681b      	ldr	r3, [r3, #0]
  4026e6:	6043      	str	r3, [r0, #4]
  4026e8:	4770      	bx	lr
  4026ea:	bf00      	nop
  4026ec:	20400b18 	.word	0x20400b18
  4026f0:	20400b5c 	.word	0x20400b5c

004026f4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  4026f4:	b1a8      	cbz	r0, 402722 <xTaskCheckForTimeOut+0x2e>
{
  4026f6:	b570      	push	{r4, r5, r6, lr}
  4026f8:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  4026fa:	b1e9      	cbz	r1, 402738 <xTaskCheckForTimeOut+0x44>
  4026fc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  4026fe:	4b1d      	ldr	r3, [pc, #116]	; (402774 <xTaskCheckForTimeOut+0x80>)
  402700:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402702:	4b1d      	ldr	r3, [pc, #116]	; (402778 <xTaskCheckForTimeOut+0x84>)
  402704:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402706:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  402708:	6823      	ldr	r3, [r4, #0]
  40270a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40270e:	d02f      	beq.n	402770 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402710:	481a      	ldr	r0, [pc, #104]	; (40277c <xTaskCheckForTimeOut+0x88>)
  402712:	6800      	ldr	r0, [r0, #0]
  402714:	682e      	ldr	r6, [r5, #0]
  402716:	4286      	cmp	r6, r0
  402718:	d019      	beq.n	40274e <xTaskCheckForTimeOut+0x5a>
  40271a:	428a      	cmp	r2, r1
  40271c:	d317      	bcc.n	40274e <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  40271e:	2401      	movs	r4, #1
  402720:	e01b      	b.n	40275a <xTaskCheckForTimeOut+0x66>
  402722:	f04f 0380 	mov.w	r3, #128	; 0x80
  402726:	b672      	cpsid	i
  402728:	f383 8811 	msr	BASEPRI, r3
  40272c:	f3bf 8f6f 	isb	sy
  402730:	f3bf 8f4f 	dsb	sy
  402734:	b662      	cpsie	i
  402736:	e7fe      	b.n	402736 <xTaskCheckForTimeOut+0x42>
  402738:	f04f 0380 	mov.w	r3, #128	; 0x80
  40273c:	b672      	cpsid	i
  40273e:	f383 8811 	msr	BASEPRI, r3
  402742:	f3bf 8f6f 	isb	sy
  402746:	f3bf 8f4f 	dsb	sy
  40274a:	b662      	cpsie	i
  40274c:	e7fe      	b.n	40274c <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40274e:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  402750:	429a      	cmp	r2, r3
  402752:	d306      	bcc.n	402762 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  402754:	2300      	movs	r3, #0
  402756:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  402758:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  40275a:	4b09      	ldr	r3, [pc, #36]	; (402780 <xTaskCheckForTimeOut+0x8c>)
  40275c:	4798      	blx	r3
}
  40275e:	4620      	mov	r0, r4
  402760:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  402762:	1a9b      	subs	r3, r3, r2
  402764:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  402766:	4628      	mov	r0, r5
  402768:	4b06      	ldr	r3, [pc, #24]	; (402784 <xTaskCheckForTimeOut+0x90>)
  40276a:	4798      	blx	r3
			xReturn = pdFALSE;
  40276c:	2400      	movs	r4, #0
  40276e:	e7f4      	b.n	40275a <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  402770:	2400      	movs	r4, #0
  402772:	e7f2      	b.n	40275a <xTaskCheckForTimeOut+0x66>
  402774:	004010b5 	.word	0x004010b5
  402778:	20400b5c 	.word	0x20400b5c
  40277c:	20400b18 	.word	0x20400b18
  402780:	00401101 	.word	0x00401101
  402784:	004026dd 	.word	0x004026dd

00402788 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402788:	2201      	movs	r2, #1
  40278a:	4b01      	ldr	r3, [pc, #4]	; (402790 <vTaskMissedYield+0x8>)
  40278c:	601a      	str	r2, [r3, #0]
  40278e:	4770      	bx	lr
  402790:	20400b60 	.word	0x20400b60

00402794 <vTaskGetInfo>:
	{
  402794:	b570      	push	{r4, r5, r6, lr}
  402796:	460d      	mov	r5, r1
  402798:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
  40279a:	4604      	mov	r4, r0
  40279c:	b1d0      	cbz	r0, 4027d4 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
  40279e:	602c      	str	r4, [r5, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
  4027a0:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4027a4:	606a      	str	r2, [r5, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
  4027a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4027a8:	612a      	str	r2, [r5, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
  4027aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
  4027ac:	61ea      	str	r2, [r5, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
  4027ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4027b0:	60aa      	str	r2, [r5, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
  4027b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  4027b4:	616a      	str	r2, [r5, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
  4027b6:	2200      	movs	r2, #0
  4027b8:	61aa      	str	r2, [r5, #24]
		if( eState != eInvalid )
  4027ba:	2b05      	cmp	r3, #5
  4027bc:	d019      	beq.n	4027f2 <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
  4027be:	4a17      	ldr	r2, [pc, #92]	; (40281c <vTaskGetInfo+0x88>)
  4027c0:	6812      	ldr	r2, [r2, #0]
  4027c2:	4294      	cmp	r4, r2
  4027c4:	d009      	beq.n	4027da <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
  4027c6:	732b      	strb	r3, [r5, #12]
					if( eState == eSuspended )
  4027c8:	2b03      	cmp	r3, #3
  4027ca:	d009      	beq.n	4027e0 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
  4027cc:	b9b6      	cbnz	r6, 4027fc <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
  4027ce:	2300      	movs	r3, #0
  4027d0:	842b      	strh	r3, [r5, #32]
  4027d2:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
  4027d4:	4a11      	ldr	r2, [pc, #68]	; (40281c <vTaskGetInfo+0x88>)
  4027d6:	6814      	ldr	r4, [r2, #0]
  4027d8:	e7e1      	b.n	40279e <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
  4027da:	2300      	movs	r3, #0
  4027dc:	732b      	strb	r3, [r5, #12]
  4027de:	e7f5      	b.n	4027cc <vTaskGetInfo+0x38>
						vTaskSuspendAll();
  4027e0:	4b0f      	ldr	r3, [pc, #60]	; (402820 <vTaskGetInfo+0x8c>)
  4027e2:	4798      	blx	r3
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4027e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4027e6:	b10b      	cbz	r3, 4027ec <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
  4027e8:	2302      	movs	r3, #2
  4027ea:	732b      	strb	r3, [r5, #12]
						( void ) xTaskResumeAll();
  4027ec:	4b0d      	ldr	r3, [pc, #52]	; (402824 <vTaskGetInfo+0x90>)
  4027ee:	4798      	blx	r3
  4027f0:	e7ec      	b.n	4027cc <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
  4027f2:	4620      	mov	r0, r4
  4027f4:	4b0c      	ldr	r3, [pc, #48]	; (402828 <vTaskGetInfo+0x94>)
  4027f6:	4798      	blx	r3
  4027f8:	7328      	strb	r0, [r5, #12]
  4027fa:	e7e7      	b.n	4027cc <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
  4027fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  4027fe:	7803      	ldrb	r3, [r0, #0]
  402800:	2ba5      	cmp	r3, #165	; 0xa5
  402802:	d108      	bne.n	402816 <vTaskGetInfo+0x82>
  402804:	1c43      	adds	r3, r0, #1
  402806:	1a19      	subs	r1, r3, r0
  402808:	f813 2b01 	ldrb.w	r2, [r3], #1
  40280c:	2aa5      	cmp	r2, #165	; 0xa5
  40280e:	d0fa      	beq.n	402806 <vTaskGetInfo+0x72>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
  402810:	0889      	lsrs	r1, r1, #2
		return ( uint16_t ) ulCount;
  402812:	8429      	strh	r1, [r5, #32]
  402814:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t ulCount = 0U;
  402816:	2100      	movs	r1, #0
  402818:	e7fa      	b.n	402810 <vTaskGetInfo+0x7c>
  40281a:	bf00      	nop
  40281c:	20400a60 	.word	0x20400a60
  402820:	0040220d 	.word	0x0040220d
  402824:	0040237d 	.word	0x0040237d
  402828:	004020f1 	.word	0x004020f1

0040282c <prvListTasksWithinSingleList>:
	{
  40282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402830:	b083      	sub	sp, #12
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  402832:	680b      	ldr	r3, [r1, #0]
  402834:	b343      	cbz	r3, 402888 <prvListTasksWithinSingleList+0x5c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  402836:	684b      	ldr	r3, [r1, #4]
  402838:	685b      	ldr	r3, [r3, #4]
  40283a:	604b      	str	r3, [r1, #4]
  40283c:	f101 0808 	add.w	r8, r1, #8
  402840:	4543      	cmp	r3, r8
  402842:	d00b      	beq.n	40285c <prvListTasksWithinSingleList+0x30>
  402844:	9201      	str	r2, [sp, #4]
  402846:	460c      	mov	r4, r1
  402848:	684b      	ldr	r3, [r1, #4]
  40284a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  40284e:	4605      	mov	r5, r0
	UBaseType_t uxTask = 0;
  402850:	2700      	movs	r7, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  402852:	f04f 0a01 	mov.w	sl, #1
  402856:	f8df 903c 	ldr.w	r9, [pc, #60]	; 402894 <prvListTasksWithinSingleList+0x68>
  40285a:	e00d      	b.n	402878 <prvListTasksWithinSingleList+0x4c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  40285c:	68cb      	ldr	r3, [r1, #12]
  40285e:	604b      	str	r3, [r1, #4]
  402860:	e7f0      	b.n	402844 <prvListTasksWithinSingleList+0x18>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  402862:	6863      	ldr	r3, [r4, #4]
  402864:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  402866:	9b01      	ldr	r3, [sp, #4]
  402868:	4652      	mov	r2, sl
  40286a:	4629      	mov	r1, r5
  40286c:	4630      	mov	r0, r6
  40286e:	47c8      	blx	r9
				uxTask++;
  402870:	3701      	adds	r7, #1
  402872:	3524      	adds	r5, #36	; 0x24
			} while( pxNextTCB != pxFirstTCB );
  402874:	45b3      	cmp	fp, r6
  402876:	d008      	beq.n	40288a <prvListTasksWithinSingleList+0x5e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  402878:	6863      	ldr	r3, [r4, #4]
  40287a:	685b      	ldr	r3, [r3, #4]
  40287c:	6063      	str	r3, [r4, #4]
  40287e:	4598      	cmp	r8, r3
  402880:	d1ef      	bne.n	402862 <prvListTasksWithinSingleList+0x36>
  402882:	68e3      	ldr	r3, [r4, #12]
  402884:	6063      	str	r3, [r4, #4]
  402886:	e7ec      	b.n	402862 <prvListTasksWithinSingleList+0x36>
	UBaseType_t uxTask = 0;
  402888:	2700      	movs	r7, #0
	}
  40288a:	4638      	mov	r0, r7
  40288c:	b003      	add	sp, #12
  40288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402892:	bf00      	nop
  402894:	00402795 	.word	0x00402795

00402898 <uxTaskGetSystemState>:
	{
  402898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40289c:	4606      	mov	r6, r0
  40289e:	460c      	mov	r4, r1
  4028a0:	4617      	mov	r7, r2
		vTaskSuspendAll();
  4028a2:	4b24      	ldr	r3, [pc, #144]	; (402934 <uxTaskGetSystemState+0x9c>)
  4028a4:	4798      	blx	r3
			if( uxArraySize >= uxCurrentNumberOfTasks )
  4028a6:	4b24      	ldr	r3, [pc, #144]	; (402938 <uxTaskGetSystemState+0xa0>)
  4028a8:	681b      	ldr	r3, [r3, #0]
  4028aa:	42a3      	cmp	r3, r4
  4028ac:	d83f      	bhi.n	40292e <uxTaskGetSystemState+0x96>
  4028ae:	4b23      	ldr	r3, [pc, #140]	; (40293c <uxTaskGetSystemState+0xa4>)
  4028b0:	f103 0550 	add.w	r5, r3, #80	; 0x50
  4028b4:	f1a3 0814 	sub.w	r8, r3, #20
  4028b8:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  4028ba:	f04f 0a01 	mov.w	sl, #1
  4028be:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402944 <uxTaskGetSystemState+0xac>
  4028c2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4028c6:	4652      	mov	r2, sl
  4028c8:	4629      	mov	r1, r5
  4028ca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4028ce:	47c8      	blx	r9
  4028d0:	4404      	add	r4, r0
  4028d2:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4028d4:	4545      	cmp	r5, r8
  4028d6:	d1f4      	bne.n	4028c2 <uxTaskGetSystemState+0x2a>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  4028d8:	4b19      	ldr	r3, [pc, #100]	; (402940 <uxTaskGetSystemState+0xa8>)
  4028da:	6819      	ldr	r1, [r3, #0]
  4028dc:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4028e0:	2202      	movs	r2, #2
  4028e2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4028e6:	4d17      	ldr	r5, [pc, #92]	; (402944 <uxTaskGetSystemState+0xac>)
  4028e8:	47a8      	blx	r5
  4028ea:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  4028ec:	4b16      	ldr	r3, [pc, #88]	; (402948 <uxTaskGetSystemState+0xb0>)
  4028ee:	6819      	ldr	r1, [r3, #0]
  4028f0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4028f4:	2202      	movs	r2, #2
  4028f6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4028fa:	47a8      	blx	r5
  4028fc:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  4028fe:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  402902:	2204      	movs	r2, #4
  402904:	4911      	ldr	r1, [pc, #68]	; (40294c <uxTaskGetSystemState+0xb4>)
  402906:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40290a:	47a8      	blx	r5
  40290c:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  40290e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  402912:	2203      	movs	r2, #3
  402914:	490e      	ldr	r1, [pc, #56]	; (402950 <uxTaskGetSystemState+0xb8>)
  402916:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40291a:	47a8      	blx	r5
  40291c:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
  40291e:	b10f      	cbz	r7, 402924 <uxTaskGetSystemState+0x8c>
						*pulTotalRunTime = 0;
  402920:	2300      	movs	r3, #0
  402922:	603b      	str	r3, [r7, #0]
		( void ) xTaskResumeAll();
  402924:	4b0b      	ldr	r3, [pc, #44]	; (402954 <uxTaskGetSystemState+0xbc>)
  402926:	4798      	blx	r3
	}
  402928:	4620      	mov	r0, r4
  40292a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  40292e:	2400      	movs	r4, #0
  402930:	e7f8      	b.n	402924 <uxTaskGetSystemState+0x8c>
  402932:	bf00      	nop
  402934:	0040220d 	.word	0x0040220d
  402938:	20400ad0 	.word	0x20400ad0
  40293c:	20400a6c 	.word	0x20400a6c
  402940:	20400a64 	.word	0x20400a64
  402944:	0040282d 	.word	0x0040282d
  402948:	20400a68 	.word	0x20400a68
  40294c:	20400b48 	.word	0x20400b48
  402950:	20400b34 	.word	0x20400b34
  402954:	0040237d 	.word	0x0040237d

00402958 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  402958:	4b05      	ldr	r3, [pc, #20]	; (402970 <xTaskGetSchedulerState+0x18>)
  40295a:	681b      	ldr	r3, [r3, #0]
  40295c:	b133      	cbz	r3, 40296c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40295e:	4b05      	ldr	r3, [pc, #20]	; (402974 <xTaskGetSchedulerState+0x1c>)
  402960:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  402962:	2b00      	cmp	r3, #0
  402964:	bf0c      	ite	eq
  402966:	2002      	moveq	r0, #2
  402968:	2000      	movne	r0, #0
  40296a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  40296c:	2001      	movs	r0, #1
	}
  40296e:	4770      	bx	lr
  402970:	20400b30 	.word	0x20400b30
  402974:	20400adc 	.word	0x20400adc

00402978 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  402978:	2800      	cmp	r0, #0
  40297a:	d050      	beq.n	402a1e <xTaskPriorityInherit+0xa6>
	{
  40297c:	b538      	push	{r3, r4, r5, lr}
  40297e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  402980:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402982:	4928      	ldr	r1, [pc, #160]	; (402a24 <xTaskPriorityInherit+0xac>)
  402984:	6809      	ldr	r1, [r1, #0]
  402986:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402988:	428a      	cmp	r2, r1
  40298a:	d23f      	bcs.n	402a0c <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40298c:	6981      	ldr	r1, [r0, #24]
  40298e:	2900      	cmp	r1, #0
  402990:	db05      	blt.n	40299e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402992:	4924      	ldr	r1, [pc, #144]	; (402a24 <xTaskPriorityInherit+0xac>)
  402994:	6809      	ldr	r1, [r1, #0]
  402996:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402998:	f1c1 0105 	rsb	r1, r1, #5
  40299c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  40299e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4029a2:	4921      	ldr	r1, [pc, #132]	; (402a28 <xTaskPriorityInherit+0xb0>)
  4029a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4029a8:	6961      	ldr	r1, [r4, #20]
  4029aa:	4291      	cmp	r1, r2
  4029ac:	d005      	beq.n	4029ba <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  4029ae:	4a1d      	ldr	r2, [pc, #116]	; (402a24 <xTaskPriorityInherit+0xac>)
  4029b0:	6812      	ldr	r2, [r2, #0]
  4029b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4029b4:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  4029b6:	2001      	movs	r0, #1
  4029b8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4029ba:	1d25      	adds	r5, r4, #4
  4029bc:	4628      	mov	r0, r5
  4029be:	4b1b      	ldr	r3, [pc, #108]	; (402a2c <xTaskPriorityInherit+0xb4>)
  4029c0:	4798      	blx	r3
  4029c2:	b970      	cbnz	r0, 4029e2 <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  4029c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4029c6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4029ca:	009b      	lsls	r3, r3, #2
  4029cc:	4916      	ldr	r1, [pc, #88]	; (402a28 <xTaskPriorityInherit+0xb0>)
  4029ce:	58cb      	ldr	r3, [r1, r3]
  4029d0:	b93b      	cbnz	r3, 4029e2 <xTaskPriorityInherit+0x6a>
  4029d2:	4817      	ldr	r0, [pc, #92]	; (402a30 <xTaskPriorityInherit+0xb8>)
  4029d4:	6803      	ldr	r3, [r0, #0]
  4029d6:	2101      	movs	r1, #1
  4029d8:	fa01 f202 	lsl.w	r2, r1, r2
  4029dc:	ea23 0202 	bic.w	r2, r3, r2
  4029e0:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  4029e2:	4b10      	ldr	r3, [pc, #64]	; (402a24 <xTaskPriorityInherit+0xac>)
  4029e4:	681b      	ldr	r3, [r3, #0]
  4029e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4029e8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  4029ea:	4a11      	ldr	r2, [pc, #68]	; (402a30 <xTaskPriorityInherit+0xb8>)
  4029ec:	6811      	ldr	r1, [r2, #0]
  4029ee:	2401      	movs	r4, #1
  4029f0:	fa04 f300 	lsl.w	r3, r4, r0
  4029f4:	430b      	orrs	r3, r1
  4029f6:	6013      	str	r3, [r2, #0]
  4029f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4029fc:	4629      	mov	r1, r5
  4029fe:	4b0a      	ldr	r3, [pc, #40]	; (402a28 <xTaskPriorityInherit+0xb0>)
  402a00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a04:	4b0b      	ldr	r3, [pc, #44]	; (402a34 <xTaskPriorityInherit+0xbc>)
  402a06:	4798      	blx	r3
				xReturn = pdTRUE;
  402a08:	4620      	mov	r0, r4
  402a0a:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  402a0c:	4a05      	ldr	r2, [pc, #20]	; (402a24 <xTaskPriorityInherit+0xac>)
  402a0e:	6812      	ldr	r2, [r2, #0]
  402a10:	6c80      	ldr	r0, [r0, #72]	; 0x48
  402a12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402a14:	4298      	cmp	r0, r3
  402a16:	bf2c      	ite	cs
  402a18:	2000      	movcs	r0, #0
  402a1a:	2001      	movcc	r0, #1
  402a1c:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402a1e:	2000      	movs	r0, #0
		return xReturn;
  402a20:	4770      	bx	lr
  402a22:	bf00      	nop
  402a24:	20400a60 	.word	0x20400a60
  402a28:	20400a6c 	.word	0x20400a6c
  402a2c:	00400fb5 	.word	0x00400fb5
  402a30:	20400ae4 	.word	0x20400ae4
  402a34:	00400f69 	.word	0x00400f69

00402a38 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  402a38:	2800      	cmp	r0, #0
  402a3a:	d04d      	beq.n	402ad8 <xTaskPriorityDisinherit+0xa0>
	{
  402a3c:	b538      	push	{r3, r4, r5, lr}
  402a3e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  402a40:	4a27      	ldr	r2, [pc, #156]	; (402ae0 <xTaskPriorityDisinherit+0xa8>)
  402a42:	6812      	ldr	r2, [r2, #0]
  402a44:	4290      	cmp	r0, r2
  402a46:	d00a      	beq.n	402a5e <xTaskPriorityDisinherit+0x26>
  402a48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a4c:	b672      	cpsid	i
  402a4e:	f383 8811 	msr	BASEPRI, r3
  402a52:	f3bf 8f6f 	isb	sy
  402a56:	f3bf 8f4f 	dsb	sy
  402a5a:	b662      	cpsie	i
  402a5c:	e7fe      	b.n	402a5c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  402a5e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402a60:	b952      	cbnz	r2, 402a78 <xTaskPriorityDisinherit+0x40>
  402a62:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a66:	b672      	cpsid	i
  402a68:	f383 8811 	msr	BASEPRI, r3
  402a6c:	f3bf 8f6f 	isb	sy
  402a70:	f3bf 8f4f 	dsb	sy
  402a74:	b662      	cpsie	i
  402a76:	e7fe      	b.n	402a76 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402a78:	3a01      	subs	r2, #1
  402a7a:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402a7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402a7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402a80:	4288      	cmp	r0, r1
  402a82:	d02b      	beq.n	402adc <xTaskPriorityDisinherit+0xa4>
  402a84:	bb52      	cbnz	r2, 402adc <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402a86:	1d25      	adds	r5, r4, #4
  402a88:	4628      	mov	r0, r5
  402a8a:	4b16      	ldr	r3, [pc, #88]	; (402ae4 <xTaskPriorityDisinherit+0xac>)
  402a8c:	4798      	blx	r3
  402a8e:	b968      	cbnz	r0, 402aac <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402a90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402a92:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402a96:	009b      	lsls	r3, r3, #2
  402a98:	4a13      	ldr	r2, [pc, #76]	; (402ae8 <xTaskPriorityDisinherit+0xb0>)
  402a9a:	58d3      	ldr	r3, [r2, r3]
  402a9c:	b933      	cbnz	r3, 402aac <xTaskPriorityDisinherit+0x74>
  402a9e:	4813      	ldr	r0, [pc, #76]	; (402aec <xTaskPriorityDisinherit+0xb4>)
  402aa0:	6803      	ldr	r3, [r0, #0]
  402aa2:	2201      	movs	r2, #1
  402aa4:	408a      	lsls	r2, r1
  402aa6:	ea23 0302 	bic.w	r3, r3, r2
  402aaa:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402aac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402aae:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402ab0:	f1c0 0305 	rsb	r3, r0, #5
  402ab4:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402ab6:	4a0d      	ldr	r2, [pc, #52]	; (402aec <xTaskPriorityDisinherit+0xb4>)
  402ab8:	6811      	ldr	r1, [r2, #0]
  402aba:	2401      	movs	r4, #1
  402abc:	fa04 f300 	lsl.w	r3, r4, r0
  402ac0:	430b      	orrs	r3, r1
  402ac2:	6013      	str	r3, [r2, #0]
  402ac4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ac8:	4629      	mov	r1, r5
  402aca:	4b07      	ldr	r3, [pc, #28]	; (402ae8 <xTaskPriorityDisinherit+0xb0>)
  402acc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ad0:	4b07      	ldr	r3, [pc, #28]	; (402af0 <xTaskPriorityDisinherit+0xb8>)
  402ad2:	4798      	blx	r3
					xReturn = pdTRUE;
  402ad4:	4620      	mov	r0, r4
  402ad6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402ad8:	2000      	movs	r0, #0
  402ada:	4770      	bx	lr
  402adc:	2000      	movs	r0, #0
	}
  402ade:	bd38      	pop	{r3, r4, r5, pc}
  402ae0:	20400a60 	.word	0x20400a60
  402ae4:	00400fb5 	.word	0x00400fb5
  402ae8:	20400a6c 	.word	0x20400a6c
  402aec:	20400ae4 	.word	0x20400ae4
  402af0:	00400f69 	.word	0x00400f69

00402af4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  402af4:	2800      	cmp	r0, #0
  402af6:	d058      	beq.n	402baa <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  402af8:	b538      	push	{r3, r4, r5, lr}
  402afa:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  402afc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  402afe:	b950      	cbnz	r0, 402b16 <vTaskPriorityDisinheritAfterTimeout+0x22>
  402b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b04:	b672      	cpsid	i
  402b06:	f383 8811 	msr	BASEPRI, r3
  402b0a:	f3bf 8f6f 	isb	sy
  402b0e:	f3bf 8f4f 	dsb	sy
  402b12:	b662      	cpsie	i
  402b14:	e7fe      	b.n	402b14 <vTaskPriorityDisinheritAfterTimeout+0x20>
  402b16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  402b18:	428a      	cmp	r2, r1
  402b1a:	bf38      	it	cc
  402b1c:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  402b1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  402b20:	2801      	cmp	r0, #1
  402b22:	d141      	bne.n	402ba8 <vTaskPriorityDisinheritAfterTimeout+0xb4>
  402b24:	4291      	cmp	r1, r2
  402b26:	d03f      	beq.n	402ba8 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  402b28:	4820      	ldr	r0, [pc, #128]	; (402bac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  402b2a:	6800      	ldr	r0, [r0, #0]
  402b2c:	4284      	cmp	r4, r0
  402b2e:	d10a      	bne.n	402b46 <vTaskPriorityDisinheritAfterTimeout+0x52>
  402b30:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b34:	b672      	cpsid	i
  402b36:	f383 8811 	msr	BASEPRI, r3
  402b3a:	f3bf 8f6f 	isb	sy
  402b3e:	f3bf 8f4f 	dsb	sy
  402b42:	b662      	cpsie	i
  402b44:	e7fe      	b.n	402b44 <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  402b46:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402b48:	69a0      	ldr	r0, [r4, #24]
  402b4a:	2800      	cmp	r0, #0
  402b4c:	db02      	blt.n	402b54 <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b4e:	f1c2 0205 	rsb	r2, r2, #5
  402b52:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  402b54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402b58:	4a15      	ldr	r2, [pc, #84]	; (402bb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402b5a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  402b5e:	6962      	ldr	r2, [r4, #20]
  402b60:	428a      	cmp	r2, r1
  402b62:	d121      	bne.n	402ba8 <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402b64:	1d25      	adds	r5, r4, #4
  402b66:	4628      	mov	r0, r5
  402b68:	4b12      	ldr	r3, [pc, #72]	; (402bb4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  402b6a:	4798      	blx	r3
  402b6c:	b968      	cbnz	r0, 402b8a <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402b70:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402b74:	009b      	lsls	r3, r3, #2
  402b76:	4a0e      	ldr	r2, [pc, #56]	; (402bb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402b78:	58d3      	ldr	r3, [r2, r3]
  402b7a:	b933      	cbnz	r3, 402b8a <vTaskPriorityDisinheritAfterTimeout+0x96>
  402b7c:	480e      	ldr	r0, [pc, #56]	; (402bb8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402b7e:	6803      	ldr	r3, [r0, #0]
  402b80:	2201      	movs	r2, #1
  402b82:	408a      	lsls	r2, r1
  402b84:	ea23 0302 	bic.w	r3, r3, r2
  402b88:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  402b8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402b8c:	4a0a      	ldr	r2, [pc, #40]	; (402bb8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402b8e:	6811      	ldr	r1, [r2, #0]
  402b90:	2301      	movs	r3, #1
  402b92:	4083      	lsls	r3, r0
  402b94:	430b      	orrs	r3, r1
  402b96:	6013      	str	r3, [r2, #0]
  402b98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402b9c:	4629      	mov	r1, r5
  402b9e:	4b04      	ldr	r3, [pc, #16]	; (402bb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ba4:	4b05      	ldr	r3, [pc, #20]	; (402bbc <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  402ba6:	4798      	blx	r3
  402ba8:	bd38      	pop	{r3, r4, r5, pc}
  402baa:	4770      	bx	lr
  402bac:	20400a60 	.word	0x20400a60
  402bb0:	20400a6c 	.word	0x20400a6c
  402bb4:	00400fb5 	.word	0x00400fb5
  402bb8:	20400ae4 	.word	0x20400ae4
  402bbc:	00400f69 	.word	0x00400f69

00402bc0 <vTaskList>:
	{
  402bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402bc4:	b084      	sub	sp, #16
  402bc6:	4604      	mov	r4, r0
		*pcWriteBuffer = 0x00;
  402bc8:	2300      	movs	r3, #0
  402bca:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
  402bcc:	4b3e      	ldr	r3, [pc, #248]	; (402cc8 <vTaskList+0x108>)
  402bce:	681a      	ldr	r2, [r3, #0]
  402bd0:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  402bd2:	6818      	ldr	r0, [r3, #0]
  402bd4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  402bd8:	0080      	lsls	r0, r0, #2
  402bda:	4b3c      	ldr	r3, [pc, #240]	; (402ccc <vTaskList+0x10c>)
  402bdc:	4798      	blx	r3
		if( pxTaskStatusArray != NULL )
  402bde:	2800      	cmp	r0, #0
  402be0:	d06f      	beq.n	402cc2 <vTaskList+0x102>
  402be2:	4605      	mov	r5, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  402be4:	9903      	ldr	r1, [sp, #12]
  402be6:	2200      	movs	r2, #0
  402be8:	4b39      	ldr	r3, [pc, #228]	; (402cd0 <vTaskList+0x110>)
  402bea:	4798      	blx	r3
  402bec:	9003      	str	r0, [sp, #12]
			for( x = 0; x < uxArraySize; x++ )
  402bee:	2300      	movs	r3, #0
  402bf0:	9302      	str	r3, [sp, #8]
  402bf2:	9a02      	ldr	r2, [sp, #8]
  402bf4:	9b03      	ldr	r3, [sp, #12]
  402bf6:	429a      	cmp	r2, r3
  402bf8:	d260      	bcs.n	402cbc <vTaskList+0xfc>
										cStatus = 0x00;
  402bfa:	f04f 0800 	mov.w	r8, #0
		strcpy( pcBuffer, pcTaskName );
  402bfe:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 402ce4 <vTaskList+0x124>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402c02:	4e34      	ldr	r6, [pc, #208]	; (402cd4 <vTaskList+0x114>)
  402c04:	e045      	b.n	402c92 <vTaskList+0xd2>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
  402c06:	2742      	movs	r7, #66	; 0x42
  402c08:	e006      	b.n	402c18 <vTaskList+0x58>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
  402c0a:	2753      	movs	r7, #83	; 0x53
										break;
  402c0c:	e004      	b.n	402c18 <vTaskList+0x58>
					case eDeleted:		cStatus = tskDELETED_CHAR;
  402c0e:	2744      	movs	r7, #68	; 0x44
										break;
  402c10:	e002      	b.n	402c18 <vTaskList+0x58>
										cStatus = 0x00;
  402c12:	4647      	mov	r7, r8
										break;
  402c14:	e000      	b.n	402c18 <vTaskList+0x58>
					case eReady:		cStatus = tskREADY_CHAR;
  402c16:	2752      	movs	r7, #82	; 0x52
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  402c18:	9b02      	ldr	r3, [sp, #8]
  402c1a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402c1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		strcpy( pcBuffer, pcTaskName );
  402c22:	6859      	ldr	r1, [r3, #4]
  402c24:	4620      	mov	r0, r4
  402c26:	47c8      	blx	r9
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402c28:	4620      	mov	r0, r4
  402c2a:	47b0      	blx	r6
  402c2c:	2808      	cmp	r0, #8
  402c2e:	d808      	bhi.n	402c42 <vTaskList+0x82>
  402c30:	4420      	add	r0, r4
  402c32:	f104 0209 	add.w	r2, r4, #9
			pcBuffer[ x ] = ' ';
  402c36:	2320      	movs	r3, #32
  402c38:	f800 3b01 	strb.w	r3, [r0], #1
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402c3c:	4282      	cmp	r2, r0
  402c3e:	d1fb      	bne.n	402c38 <vTaskList+0x78>
  402c40:	2009      	movs	r0, #9
		pcBuffer[ x ] = 0x00;
  402c42:	eb04 0a00 	add.w	sl, r4, r0
  402c46:	f804 8000 	strb.w	r8, [r4, r0]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  402c4a:	9b02      	ldr	r3, [sp, #8]
  402c4c:	9a02      	ldr	r2, [sp, #8]
  402c4e:	9902      	ldr	r1, [sp, #8]
  402c50:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402c54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402c58:	691b      	ldr	r3, [r3, #16]
  402c5a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
  402c5e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  402c62:	6889      	ldr	r1, [r1, #8]
  402c64:	9101      	str	r1, [sp, #4]
  402c66:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  402c6a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  402c6e:	8c12      	ldrh	r2, [r2, #32]
  402c70:	9200      	str	r2, [sp, #0]
  402c72:	463a      	mov	r2, r7
  402c74:	4918      	ldr	r1, [pc, #96]	; (402cd8 <vTaskList+0x118>)
  402c76:	4650      	mov	r0, sl
  402c78:	4c18      	ldr	r4, [pc, #96]	; (402cdc <vTaskList+0x11c>)
  402c7a:	47a0      	blx	r4
				pcWriteBuffer += strlen( pcWriteBuffer );
  402c7c:	4650      	mov	r0, sl
  402c7e:	47b0      	blx	r6
  402c80:	eb0a 0400 	add.w	r4, sl, r0
			for( x = 0; x < uxArraySize; x++ )
  402c84:	9b02      	ldr	r3, [sp, #8]
  402c86:	3301      	adds	r3, #1
  402c88:	9302      	str	r3, [sp, #8]
  402c8a:	9a02      	ldr	r2, [sp, #8]
  402c8c:	9b03      	ldr	r3, [sp, #12]
  402c8e:	429a      	cmp	r2, r3
  402c90:	d214      	bcs.n	402cbc <vTaskList+0xfc>
				switch( pxTaskStatusArray[ x ].eCurrentState )
  402c92:	9b02      	ldr	r3, [sp, #8]
  402c94:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402c98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402c9c:	7b1b      	ldrb	r3, [r3, #12]
  402c9e:	3b01      	subs	r3, #1
  402ca0:	2b03      	cmp	r3, #3
  402ca2:	d8b6      	bhi.n	402c12 <vTaskList+0x52>
  402ca4:	a201      	add	r2, pc, #4	; (adr r2, 402cac <vTaskList+0xec>)
  402ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402caa:	bf00      	nop
  402cac:	00402c17 	.word	0x00402c17
  402cb0:	00402c07 	.word	0x00402c07
  402cb4:	00402c0b 	.word	0x00402c0b
  402cb8:	00402c0f 	.word	0x00402c0f
			vPortFree( pxTaskStatusArray );
  402cbc:	4628      	mov	r0, r5
  402cbe:	4b08      	ldr	r3, [pc, #32]	; (402ce0 <vTaskList+0x120>)
  402cc0:	4798      	blx	r3
	}
  402cc2:	b004      	add	sp, #16
  402cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cc8:	20400ad0 	.word	0x20400ad0
  402ccc:	00401341 	.word	0x00401341
  402cd0:	00402899 	.word	0x00402899
  402cd4:	004047c1 	.word	0x004047c1
  402cd8:	0040a208 	.word	0x0040a208
  402cdc:	004043ad 	.word	0x004043ad
  402ce0:	00401371 	.word	0x00401371
  402ce4:	004046dd 	.word	0x004046dd

00402ce8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  402ce8:	4b05      	ldr	r3, [pc, #20]	; (402d00 <pvTaskIncrementMutexHeldCount+0x18>)
  402cea:	681b      	ldr	r3, [r3, #0]
  402cec:	b123      	cbz	r3, 402cf8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  402cee:	4b04      	ldr	r3, [pc, #16]	; (402d00 <pvTaskIncrementMutexHeldCount+0x18>)
  402cf0:	681a      	ldr	r2, [r3, #0]
  402cf2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402cf4:	3301      	adds	r3, #1
  402cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  402cf8:	4b01      	ldr	r3, [pc, #4]	; (402d00 <pvTaskIncrementMutexHeldCount+0x18>)
  402cfa:	6818      	ldr	r0, [r3, #0]
	}
  402cfc:	4770      	bx	lr
  402cfe:	bf00      	nop
  402d00:	20400a60 	.word	0x20400a60

00402d04 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402d04:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402d06:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402d08:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402d0a:	4291      	cmp	r1, r2
  402d0c:	d80c      	bhi.n	402d28 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402d0e:	1ad2      	subs	r2, r2, r3
  402d10:	6983      	ldr	r3, [r0, #24]
  402d12:	429a      	cmp	r2, r3
  402d14:	d301      	bcc.n	402d1a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402d16:	2001      	movs	r0, #1
  402d18:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402d1a:	1d01      	adds	r1, r0, #4
  402d1c:	4b09      	ldr	r3, [pc, #36]	; (402d44 <prvInsertTimerInActiveList+0x40>)
  402d1e:	6818      	ldr	r0, [r3, #0]
  402d20:	4b09      	ldr	r3, [pc, #36]	; (402d48 <prvInsertTimerInActiveList+0x44>)
  402d22:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d24:	2000      	movs	r0, #0
  402d26:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402d28:	429a      	cmp	r2, r3
  402d2a:	d203      	bcs.n	402d34 <prvInsertTimerInActiveList+0x30>
  402d2c:	4299      	cmp	r1, r3
  402d2e:	d301      	bcc.n	402d34 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402d30:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402d32:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d34:	1d01      	adds	r1, r0, #4
  402d36:	4b05      	ldr	r3, [pc, #20]	; (402d4c <prvInsertTimerInActiveList+0x48>)
  402d38:	6818      	ldr	r0, [r3, #0]
  402d3a:	4b03      	ldr	r3, [pc, #12]	; (402d48 <prvInsertTimerInActiveList+0x44>)
  402d3c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d3e:	2000      	movs	r0, #0
  402d40:	bd08      	pop	{r3, pc}
  402d42:	bf00      	nop
  402d44:	20400b68 	.word	0x20400b68
  402d48:	00400f81 	.word	0x00400f81
  402d4c:	20400b64 	.word	0x20400b64

00402d50 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402d50:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402d52:	4b10      	ldr	r3, [pc, #64]	; (402d94 <prvCheckForValidListAndQueue+0x44>)
  402d54:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402d56:	4b10      	ldr	r3, [pc, #64]	; (402d98 <prvCheckForValidListAndQueue+0x48>)
  402d58:	681b      	ldr	r3, [r3, #0]
  402d5a:	b113      	cbz	r3, 402d62 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402d5c:	4b0f      	ldr	r3, [pc, #60]	; (402d9c <prvCheckForValidListAndQueue+0x4c>)
  402d5e:	4798      	blx	r3
  402d60:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402d62:	4d0f      	ldr	r5, [pc, #60]	; (402da0 <prvCheckForValidListAndQueue+0x50>)
  402d64:	4628      	mov	r0, r5
  402d66:	4e0f      	ldr	r6, [pc, #60]	; (402da4 <prvCheckForValidListAndQueue+0x54>)
  402d68:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402d6a:	4c0f      	ldr	r4, [pc, #60]	; (402da8 <prvCheckForValidListAndQueue+0x58>)
  402d6c:	4620      	mov	r0, r4
  402d6e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402d70:	4b0e      	ldr	r3, [pc, #56]	; (402dac <prvCheckForValidListAndQueue+0x5c>)
  402d72:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402d74:	4b0e      	ldr	r3, [pc, #56]	; (402db0 <prvCheckForValidListAndQueue+0x60>)
  402d76:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402d78:	2200      	movs	r2, #0
  402d7a:	2110      	movs	r1, #16
  402d7c:	2005      	movs	r0, #5
  402d7e:	4b0d      	ldr	r3, [pc, #52]	; (402db4 <prvCheckForValidListAndQueue+0x64>)
  402d80:	4798      	blx	r3
  402d82:	4b05      	ldr	r3, [pc, #20]	; (402d98 <prvCheckForValidListAndQueue+0x48>)
  402d84:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  402d86:	2800      	cmp	r0, #0
  402d88:	d0e8      	beq.n	402d5c <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402d8a:	490b      	ldr	r1, [pc, #44]	; (402db8 <prvCheckForValidListAndQueue+0x68>)
  402d8c:	4b0b      	ldr	r3, [pc, #44]	; (402dbc <prvCheckForValidListAndQueue+0x6c>)
  402d8e:	4798      	blx	r3
  402d90:	e7e4      	b.n	402d5c <prvCheckForValidListAndQueue+0xc>
  402d92:	bf00      	nop
  402d94:	004010b5 	.word	0x004010b5
  402d98:	20400b98 	.word	0x20400b98
  402d9c:	00401101 	.word	0x00401101
  402da0:	20400b6c 	.word	0x20400b6c
  402da4:	00400f4d 	.word	0x00400f4d
  402da8:	20400b80 	.word	0x20400b80
  402dac:	20400b64 	.word	0x20400b64
  402db0:	20400b68 	.word	0x20400b68
  402db4:	00401621 	.word	0x00401621
  402db8:	0040a220 	.word	0x0040a220
  402dbc:	00401d0d 	.word	0x00401d0d

00402dc0 <xTimerCreateTimerTask>:
{
  402dc0:	b510      	push	{r4, lr}
  402dc2:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  402dc4:	4b0e      	ldr	r3, [pc, #56]	; (402e00 <xTimerCreateTimerTask+0x40>)
  402dc6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402dc8:	4b0e      	ldr	r3, [pc, #56]	; (402e04 <xTimerCreateTimerTask+0x44>)
  402dca:	681b      	ldr	r3, [r3, #0]
  402dcc:	b16b      	cbz	r3, 402dea <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  402dce:	4b0e      	ldr	r3, [pc, #56]	; (402e08 <xTimerCreateTimerTask+0x48>)
  402dd0:	9301      	str	r3, [sp, #4]
  402dd2:	2304      	movs	r3, #4
  402dd4:	9300      	str	r3, [sp, #0]
  402dd6:	2300      	movs	r3, #0
  402dd8:	f44f 7282 	mov.w	r2, #260	; 0x104
  402ddc:	490b      	ldr	r1, [pc, #44]	; (402e0c <xTimerCreateTimerTask+0x4c>)
  402dde:	480c      	ldr	r0, [pc, #48]	; (402e10 <xTimerCreateTimerTask+0x50>)
  402de0:	4c0c      	ldr	r4, [pc, #48]	; (402e14 <xTimerCreateTimerTask+0x54>)
  402de2:	47a0      	blx	r4
	configASSERT( xReturn );
  402de4:	b108      	cbz	r0, 402dea <xTimerCreateTimerTask+0x2a>
}
  402de6:	b002      	add	sp, #8
  402de8:	bd10      	pop	{r4, pc}
  402dea:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dee:	b672      	cpsid	i
  402df0:	f383 8811 	msr	BASEPRI, r3
  402df4:	f3bf 8f6f 	isb	sy
  402df8:	f3bf 8f4f 	dsb	sy
  402dfc:	b662      	cpsie	i
  402dfe:	e7fe      	b.n	402dfe <xTimerCreateTimerTask+0x3e>
  402e00:	00402d51 	.word	0x00402d51
  402e04:	20400b98 	.word	0x20400b98
  402e08:	20400b9c 	.word	0x20400b9c
  402e0c:	0040a228 	.word	0x0040a228
  402e10:	00402f41 	.word	0x00402f41
  402e14:	00401efd 	.word	0x00401efd

00402e18 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402e18:	b1d8      	cbz	r0, 402e52 <xTimerGenericCommand+0x3a>
{
  402e1a:	b530      	push	{r4, r5, lr}
  402e1c:	b085      	sub	sp, #20
  402e1e:	4615      	mov	r5, r2
  402e20:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402e22:	4a15      	ldr	r2, [pc, #84]	; (402e78 <xTimerGenericCommand+0x60>)
  402e24:	6810      	ldr	r0, [r2, #0]
  402e26:	b320      	cbz	r0, 402e72 <xTimerGenericCommand+0x5a>
  402e28:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402e2a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402e2c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402e2e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402e30:	2905      	cmp	r1, #5
  402e32:	dc19      	bgt.n	402e68 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402e34:	4b11      	ldr	r3, [pc, #68]	; (402e7c <xTimerGenericCommand+0x64>)
  402e36:	4798      	blx	r3
  402e38:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402e3a:	f04f 0300 	mov.w	r3, #0
  402e3e:	bf0c      	ite	eq
  402e40:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402e42:	461a      	movne	r2, r3
  402e44:	4669      	mov	r1, sp
  402e46:	480c      	ldr	r0, [pc, #48]	; (402e78 <xTimerGenericCommand+0x60>)
  402e48:	6800      	ldr	r0, [r0, #0]
  402e4a:	4c0d      	ldr	r4, [pc, #52]	; (402e80 <xTimerGenericCommand+0x68>)
  402e4c:	47a0      	blx	r4
}
  402e4e:	b005      	add	sp, #20
  402e50:	bd30      	pop	{r4, r5, pc}
  402e52:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e56:	b672      	cpsid	i
  402e58:	f383 8811 	msr	BASEPRI, r3
  402e5c:	f3bf 8f6f 	isb	sy
  402e60:	f3bf 8f4f 	dsb	sy
  402e64:	b662      	cpsie	i
  402e66:	e7fe      	b.n	402e66 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402e68:	2300      	movs	r3, #0
  402e6a:	4669      	mov	r1, sp
  402e6c:	4c05      	ldr	r4, [pc, #20]	; (402e84 <xTimerGenericCommand+0x6c>)
  402e6e:	47a0      	blx	r4
  402e70:	e7ed      	b.n	402e4e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402e72:	2000      	movs	r0, #0
	return xReturn;
  402e74:	e7eb      	b.n	402e4e <xTimerGenericCommand+0x36>
  402e76:	bf00      	nop
  402e78:	20400b98 	.word	0x20400b98
  402e7c:	00402959 	.word	0x00402959
  402e80:	0040167d 	.word	0x0040167d
  402e84:	0040186d 	.word	0x0040186d

00402e88 <prvSampleTimeNow>:
{
  402e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402e8c:	b082      	sub	sp, #8
  402e8e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402e90:	4b24      	ldr	r3, [pc, #144]	; (402f24 <prvSampleTimeNow+0x9c>)
  402e92:	4798      	blx	r3
  402e94:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402e96:	4b24      	ldr	r3, [pc, #144]	; (402f28 <prvSampleTimeNow+0xa0>)
  402e98:	681b      	ldr	r3, [r3, #0]
  402e9a:	4298      	cmp	r0, r3
  402e9c:	d31b      	bcc.n	402ed6 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402e9e:	2300      	movs	r3, #0
  402ea0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402ea4:	4b20      	ldr	r3, [pc, #128]	; (402f28 <prvSampleTimeNow+0xa0>)
  402ea6:	601f      	str	r7, [r3, #0]
}
  402ea8:	4638      	mov	r0, r7
  402eaa:	b002      	add	sp, #8
  402eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402eb0:	2100      	movs	r1, #0
  402eb2:	9100      	str	r1, [sp, #0]
  402eb4:	460b      	mov	r3, r1
  402eb6:	4652      	mov	r2, sl
  402eb8:	4620      	mov	r0, r4
  402eba:	4c1c      	ldr	r4, [pc, #112]	; (402f2c <prvSampleTimeNow+0xa4>)
  402ebc:	47a0      	blx	r4
				configASSERT( xResult );
  402ebe:	b960      	cbnz	r0, 402eda <prvSampleTimeNow+0x52>
  402ec0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ec4:	b672      	cpsid	i
  402ec6:	f383 8811 	msr	BASEPRI, r3
  402eca:	f3bf 8f6f 	isb	sy
  402ece:	f3bf 8f4f 	dsb	sy
  402ed2:	b662      	cpsie	i
  402ed4:	e7fe      	b.n	402ed4 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402ed6:	4d16      	ldr	r5, [pc, #88]	; (402f30 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ed8:	4e16      	ldr	r6, [pc, #88]	; (402f34 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402eda:	682b      	ldr	r3, [r5, #0]
  402edc:	681a      	ldr	r2, [r3, #0]
  402ede:	b1c2      	cbz	r2, 402f12 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ee0:	68db      	ldr	r3, [r3, #12]
  402ee2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ee6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ee8:	f104 0904 	add.w	r9, r4, #4
  402eec:	4648      	mov	r0, r9
  402eee:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402ef2:	4620      	mov	r0, r4
  402ef4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402ef6:	69e3      	ldr	r3, [r4, #28]
  402ef8:	2b01      	cmp	r3, #1
  402efa:	d1ee      	bne.n	402eda <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402efc:	69a3      	ldr	r3, [r4, #24]
  402efe:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402f00:	459a      	cmp	sl, r3
  402f02:	d2d5      	bcs.n	402eb0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402f04:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f06:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f08:	4649      	mov	r1, r9
  402f0a:	6828      	ldr	r0, [r5, #0]
  402f0c:	4b0a      	ldr	r3, [pc, #40]	; (402f38 <prvSampleTimeNow+0xb0>)
  402f0e:	4798      	blx	r3
  402f10:	e7e3      	b.n	402eda <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402f12:	4a0a      	ldr	r2, [pc, #40]	; (402f3c <prvSampleTimeNow+0xb4>)
  402f14:	6810      	ldr	r0, [r2, #0]
  402f16:	4906      	ldr	r1, [pc, #24]	; (402f30 <prvSampleTimeNow+0xa8>)
  402f18:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402f1a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402f1c:	2301      	movs	r3, #1
  402f1e:	f8c8 3000 	str.w	r3, [r8]
  402f22:	e7bf      	b.n	402ea4 <prvSampleTimeNow+0x1c>
  402f24:	0040221d 	.word	0x0040221d
  402f28:	20400b94 	.word	0x20400b94
  402f2c:	00402e19 	.word	0x00402e19
  402f30:	20400b64 	.word	0x20400b64
  402f34:	00400fb5 	.word	0x00400fb5
  402f38:	00400f81 	.word	0x00400f81
  402f3c:	20400b68 	.word	0x20400b68

00402f40 <prvTimerTask>:
{
  402f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f44:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f46:	4e75      	ldr	r6, [pc, #468]	; (40311c <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402f48:	4f75      	ldr	r7, [pc, #468]	; (403120 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402f4a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403148 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f4e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 40314c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f52:	6833      	ldr	r3, [r6, #0]
  402f54:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402f56:	2a00      	cmp	r2, #0
  402f58:	f000 80ce 	beq.w	4030f8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f5c:	68db      	ldr	r3, [r3, #12]
  402f5e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402f60:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402f62:	a804      	add	r0, sp, #16
  402f64:	4b6f      	ldr	r3, [pc, #444]	; (403124 <prvTimerTask+0x1e4>)
  402f66:	4798      	blx	r3
  402f68:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402f6a:	9b04      	ldr	r3, [sp, #16]
  402f6c:	2b00      	cmp	r3, #0
  402f6e:	d144      	bne.n	402ffa <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402f70:	42a0      	cmp	r0, r4
  402f72:	d212      	bcs.n	402f9a <prvTimerTask+0x5a>
  402f74:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402f76:	1b61      	subs	r1, r4, r5
  402f78:	4b6b      	ldr	r3, [pc, #428]	; (403128 <prvTimerTask+0x1e8>)
  402f7a:	6818      	ldr	r0, [r3, #0]
  402f7c:	4b6b      	ldr	r3, [pc, #428]	; (40312c <prvTimerTask+0x1ec>)
  402f7e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402f80:	4b6b      	ldr	r3, [pc, #428]	; (403130 <prvTimerTask+0x1f0>)
  402f82:	4798      	blx	r3
  402f84:	2800      	cmp	r0, #0
  402f86:	d13a      	bne.n	402ffe <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402f88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402f8c:	f8c9 3000 	str.w	r3, [r9]
  402f90:	f3bf 8f4f 	dsb	sy
  402f94:	f3bf 8f6f 	isb	sy
  402f98:	e031      	b.n	402ffe <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402f9a:	4b65      	ldr	r3, [pc, #404]	; (403130 <prvTimerTask+0x1f0>)
  402f9c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f9e:	6833      	ldr	r3, [r6, #0]
  402fa0:	68db      	ldr	r3, [r3, #12]
  402fa2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fa6:	f10a 0004 	add.w	r0, sl, #4
  402faa:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402fac:	f8da 301c 	ldr.w	r3, [sl, #28]
  402fb0:	2b01      	cmp	r3, #1
  402fb2:	d004      	beq.n	402fbe <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402fb4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402fb8:	4650      	mov	r0, sl
  402fba:	4798      	blx	r3
  402fbc:	e01f      	b.n	402ffe <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  402fbe:	f8da 1018 	ldr.w	r1, [sl, #24]
  402fc2:	4623      	mov	r3, r4
  402fc4:	462a      	mov	r2, r5
  402fc6:	4421      	add	r1, r4
  402fc8:	4650      	mov	r0, sl
  402fca:	4d5a      	ldr	r5, [pc, #360]	; (403134 <prvTimerTask+0x1f4>)
  402fcc:	47a8      	blx	r5
  402fce:	2800      	cmp	r0, #0
  402fd0:	d0f0      	beq.n	402fb4 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402fd2:	2100      	movs	r1, #0
  402fd4:	9100      	str	r1, [sp, #0]
  402fd6:	460b      	mov	r3, r1
  402fd8:	4622      	mov	r2, r4
  402fda:	4650      	mov	r0, sl
  402fdc:	4c56      	ldr	r4, [pc, #344]	; (403138 <prvTimerTask+0x1f8>)
  402fde:	47a0      	blx	r4
			configASSERT( xResult );
  402fe0:	2800      	cmp	r0, #0
  402fe2:	d1e7      	bne.n	402fb4 <prvTimerTask+0x74>
  402fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fe8:	b672      	cpsid	i
  402fea:	f383 8811 	msr	BASEPRI, r3
  402fee:	f3bf 8f6f 	isb	sy
  402ff2:	f3bf 8f4f 	dsb	sy
  402ff6:	b662      	cpsie	i
  402ff8:	e7fe      	b.n	402ff8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402ffa:	4b4d      	ldr	r3, [pc, #308]	; (403130 <prvTimerTask+0x1f0>)
  402ffc:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402ffe:	4d4a      	ldr	r5, [pc, #296]	; (403128 <prvTimerTask+0x1e8>)
  403000:	4c4e      	ldr	r4, [pc, #312]	; (40313c <prvTimerTask+0x1fc>)
  403002:	e006      	b.n	403012 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403004:	9907      	ldr	r1, [sp, #28]
  403006:	9806      	ldr	r0, [sp, #24]
  403008:	9b05      	ldr	r3, [sp, #20]
  40300a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40300c:	9b04      	ldr	r3, [sp, #16]
  40300e:	2b00      	cmp	r3, #0
  403010:	da08      	bge.n	403024 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403012:	2200      	movs	r2, #0
  403014:	a904      	add	r1, sp, #16
  403016:	6828      	ldr	r0, [r5, #0]
  403018:	47a0      	blx	r4
  40301a:	2800      	cmp	r0, #0
  40301c:	d099      	beq.n	402f52 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40301e:	9b04      	ldr	r3, [sp, #16]
  403020:	2b00      	cmp	r3, #0
  403022:	dbef      	blt.n	403004 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403024:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  403028:	f8da 3014 	ldr.w	r3, [sl, #20]
  40302c:	b113      	cbz	r3, 403034 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40302e:	f10a 0004 	add.w	r0, sl, #4
  403032:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403034:	a803      	add	r0, sp, #12
  403036:	4b3b      	ldr	r3, [pc, #236]	; (403124 <prvTimerTask+0x1e4>)
  403038:	4798      	blx	r3
			switch( xMessage.xMessageID )
  40303a:	9b04      	ldr	r3, [sp, #16]
  40303c:	2b09      	cmp	r3, #9
  40303e:	d8e8      	bhi.n	403012 <prvTimerTask+0xd2>
  403040:	a201      	add	r2, pc, #4	; (adr r2, 403048 <prvTimerTask+0x108>)
  403042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403046:	bf00      	nop
  403048:	00403071 	.word	0x00403071
  40304c:	00403071 	.word	0x00403071
  403050:	00403071 	.word	0x00403071
  403054:	00403013 	.word	0x00403013
  403058:	004030c5 	.word	0x004030c5
  40305c:	004030f1 	.word	0x004030f1
  403060:	00403071 	.word	0x00403071
  403064:	00403071 	.word	0x00403071
  403068:	00403013 	.word	0x00403013
  40306c:	004030c5 	.word	0x004030c5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  403070:	9c05      	ldr	r4, [sp, #20]
  403072:	f8da 1018 	ldr.w	r1, [sl, #24]
  403076:	4623      	mov	r3, r4
  403078:	4602      	mov	r2, r0
  40307a:	4421      	add	r1, r4
  40307c:	4650      	mov	r0, sl
  40307e:	4c2d      	ldr	r4, [pc, #180]	; (403134 <prvTimerTask+0x1f4>)
  403080:	47a0      	blx	r4
  403082:	2800      	cmp	r0, #0
  403084:	d0bc      	beq.n	403000 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403086:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40308a:	4650      	mov	r0, sl
  40308c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40308e:	f8da 301c 	ldr.w	r3, [sl, #28]
  403092:	2b01      	cmp	r3, #1
  403094:	d1b4      	bne.n	403000 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403096:	f8da 2018 	ldr.w	r2, [sl, #24]
  40309a:	2100      	movs	r1, #0
  40309c:	9100      	str	r1, [sp, #0]
  40309e:	460b      	mov	r3, r1
  4030a0:	9805      	ldr	r0, [sp, #20]
  4030a2:	4402      	add	r2, r0
  4030a4:	4650      	mov	r0, sl
  4030a6:	4c24      	ldr	r4, [pc, #144]	; (403138 <prvTimerTask+0x1f8>)
  4030a8:	47a0      	blx	r4
							configASSERT( xResult );
  4030aa:	2800      	cmp	r0, #0
  4030ac:	d1a8      	bne.n	403000 <prvTimerTask+0xc0>
  4030ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030b2:	b672      	cpsid	i
  4030b4:	f383 8811 	msr	BASEPRI, r3
  4030b8:	f3bf 8f6f 	isb	sy
  4030bc:	f3bf 8f4f 	dsb	sy
  4030c0:	b662      	cpsie	i
  4030c2:	e7fe      	b.n	4030c2 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4030c4:	9905      	ldr	r1, [sp, #20]
  4030c6:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4030ca:	b131      	cbz	r1, 4030da <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4030cc:	4603      	mov	r3, r0
  4030ce:	4602      	mov	r2, r0
  4030d0:	4401      	add	r1, r0
  4030d2:	4650      	mov	r0, sl
  4030d4:	4c17      	ldr	r4, [pc, #92]	; (403134 <prvTimerTask+0x1f4>)
  4030d6:	47a0      	blx	r4
  4030d8:	e792      	b.n	403000 <prvTimerTask+0xc0>
  4030da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030de:	b672      	cpsid	i
  4030e0:	f383 8811 	msr	BASEPRI, r3
  4030e4:	f3bf 8f6f 	isb	sy
  4030e8:	f3bf 8f4f 	dsb	sy
  4030ec:	b662      	cpsie	i
  4030ee:	e7fe      	b.n	4030ee <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  4030f0:	4650      	mov	r0, sl
  4030f2:	4b13      	ldr	r3, [pc, #76]	; (403140 <prvTimerTask+0x200>)
  4030f4:	4798      	blx	r3
  4030f6:	e783      	b.n	403000 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4030f8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4030fa:	a804      	add	r0, sp, #16
  4030fc:	4b09      	ldr	r3, [pc, #36]	; (403124 <prvTimerTask+0x1e4>)
  4030fe:	4798      	blx	r3
  403100:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403102:	9b04      	ldr	r3, [sp, #16]
  403104:	2b00      	cmp	r3, #0
  403106:	f47f af78 	bne.w	402ffa <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40310a:	4b0e      	ldr	r3, [pc, #56]	; (403144 <prvTimerTask+0x204>)
  40310c:	681b      	ldr	r3, [r3, #0]
  40310e:	681a      	ldr	r2, [r3, #0]
  403110:	fab2 f282 	clz	r2, r2
  403114:	0952      	lsrs	r2, r2, #5
  403116:	2400      	movs	r4, #0
  403118:	e72d      	b.n	402f76 <prvTimerTask+0x36>
  40311a:	bf00      	nop
  40311c:	20400b64 	.word	0x20400b64
  403120:	0040220d 	.word	0x0040220d
  403124:	00402e89 	.word	0x00402e89
  403128:	20400b98 	.word	0x20400b98
  40312c:	00401d41 	.word	0x00401d41
  403130:	0040237d 	.word	0x0040237d
  403134:	00402d05 	.word	0x00402d05
  403138:	00402e19 	.word	0x00402e19
  40313c:	00401981 	.word	0x00401981
  403140:	00401371 	.word	0x00401371
  403144:	20400b68 	.word	0x20400b68
  403148:	e000ed04 	.word	0xe000ed04
  40314c:	00400fb5 	.word	0x00400fb5

00403150 <but1_callback>:
extern void vApplicationTickHook(void);
extern void vApplicationMallocFailedHook(void);
extern void xPortSysTickHandler(void);

void but1_callback(void)
{
  403150:	b510      	push	{r4, lr}
    xQueueSendFromISR(xQueueCommand, "toggle led 1", 0);
  403152:	2300      	movs	r3, #0
  403154:	461a      	mov	r2, r3
  403156:	4903      	ldr	r1, [pc, #12]	; (403164 <but1_callback+0x14>)
  403158:	4803      	ldr	r0, [pc, #12]	; (403168 <but1_callback+0x18>)
  40315a:	6800      	ldr	r0, [r0, #0]
  40315c:	4c03      	ldr	r4, [pc, #12]	; (40316c <but1_callback+0x1c>)
  40315e:	47a0      	blx	r4
  403160:	bd10      	pop	{r4, pc}
  403162:	bf00      	nop
  403164:	0040a230 	.word	0x0040a230
  403168:	20400d30 	.word	0x20400d30
  40316c:	0040186d 	.word	0x0040186d

00403170 <but2_callback>:
}

void but2_callback(void)
{
  403170:	b510      	push	{r4, lr}
    xQueueSendFromISR(xQueueCommand, "toggle led 2", 0);
  403172:	2300      	movs	r3, #0
  403174:	461a      	mov	r2, r3
  403176:	4903      	ldr	r1, [pc, #12]	; (403184 <but2_callback+0x14>)
  403178:	4803      	ldr	r0, [pc, #12]	; (403188 <but2_callback+0x18>)
  40317a:	6800      	ldr	r0, [r0, #0]
  40317c:	4c03      	ldr	r4, [pc, #12]	; (40318c <but2_callback+0x1c>)
  40317e:	47a0      	blx	r4
  403180:	bd10      	pop	{r4, pc}
  403182:	bf00      	nop
  403184:	0040a240 	.word	0x0040a240
  403188:	20400d30 	.word	0x20400d30
  40318c:	0040186d 	.word	0x0040186d

00403190 <but3_callback>:
}

void but3_callback(void)
{
  403190:	b510      	push	{r4, lr}
    xQueueSendFromISR(xQueueCommand, "toggle led 3", 0);
  403192:	2300      	movs	r3, #0
  403194:	461a      	mov	r2, r3
  403196:	4903      	ldr	r1, [pc, #12]	; (4031a4 <but3_callback+0x14>)
  403198:	4803      	ldr	r0, [pc, #12]	; (4031a8 <but3_callback+0x18>)
  40319a:	6800      	ldr	r0, [r0, #0]
  40319c:	4c03      	ldr	r4, [pc, #12]	; (4031ac <but3_callback+0x1c>)
  40319e:	47a0      	blx	r4
  4031a0:	bd10      	pop	{r4, pc}
  4031a2:	bf00      	nop
  4031a4:	0040a250 	.word	0x0040a250
  4031a8:	20400d30 	.word	0x20400d30
  4031ac:	0040186d 	.word	0x0040186d

004031b0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031b2:	b083      	sub	sp, #12
  4031b4:	4605      	mov	r5, r0
  4031b6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4031b8:	2300      	movs	r3, #0
  4031ba:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4031bc:	4b2a      	ldr	r3, [pc, #168]	; (403268 <usart_serial_getchar+0xb8>)
  4031be:	4298      	cmp	r0, r3
  4031c0:	d013      	beq.n	4031ea <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4031c2:	4b2a      	ldr	r3, [pc, #168]	; (40326c <usart_serial_getchar+0xbc>)
  4031c4:	4298      	cmp	r0, r3
  4031c6:	d018      	beq.n	4031fa <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4031c8:	4b29      	ldr	r3, [pc, #164]	; (403270 <usart_serial_getchar+0xc0>)
  4031ca:	4298      	cmp	r0, r3
  4031cc:	d01d      	beq.n	40320a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4031ce:	4b29      	ldr	r3, [pc, #164]	; (403274 <usart_serial_getchar+0xc4>)
  4031d0:	429d      	cmp	r5, r3
  4031d2:	d022      	beq.n	40321a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4031d4:	4b28      	ldr	r3, [pc, #160]	; (403278 <usart_serial_getchar+0xc8>)
  4031d6:	429d      	cmp	r5, r3
  4031d8:	d027      	beq.n	40322a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4031da:	4b28      	ldr	r3, [pc, #160]	; (40327c <usart_serial_getchar+0xcc>)
  4031dc:	429d      	cmp	r5, r3
  4031de:	d02e      	beq.n	40323e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4031e0:	4b27      	ldr	r3, [pc, #156]	; (403280 <usart_serial_getchar+0xd0>)
  4031e2:	429d      	cmp	r5, r3
  4031e4:	d035      	beq.n	403252 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4031e6:	b003      	add	sp, #12
  4031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4031ea:	461f      	mov	r7, r3
  4031ec:	4e25      	ldr	r6, [pc, #148]	; (403284 <usart_serial_getchar+0xd4>)
  4031ee:	4621      	mov	r1, r4
  4031f0:	4638      	mov	r0, r7
  4031f2:	47b0      	blx	r6
  4031f4:	2800      	cmp	r0, #0
  4031f6:	d1fa      	bne.n	4031ee <usart_serial_getchar+0x3e>
  4031f8:	e7e9      	b.n	4031ce <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4031fa:	461f      	mov	r7, r3
  4031fc:	4e21      	ldr	r6, [pc, #132]	; (403284 <usart_serial_getchar+0xd4>)
  4031fe:	4621      	mov	r1, r4
  403200:	4638      	mov	r0, r7
  403202:	47b0      	blx	r6
  403204:	2800      	cmp	r0, #0
  403206:	d1fa      	bne.n	4031fe <usart_serial_getchar+0x4e>
  403208:	e7e4      	b.n	4031d4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40320a:	461f      	mov	r7, r3
  40320c:	4e1d      	ldr	r6, [pc, #116]	; (403284 <usart_serial_getchar+0xd4>)
  40320e:	4621      	mov	r1, r4
  403210:	4638      	mov	r0, r7
  403212:	47b0      	blx	r6
  403214:	2800      	cmp	r0, #0
  403216:	d1fa      	bne.n	40320e <usart_serial_getchar+0x5e>
  403218:	e7df      	b.n	4031da <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40321a:	461f      	mov	r7, r3
  40321c:	4e19      	ldr	r6, [pc, #100]	; (403284 <usart_serial_getchar+0xd4>)
  40321e:	4621      	mov	r1, r4
  403220:	4638      	mov	r0, r7
  403222:	47b0      	blx	r6
  403224:	2800      	cmp	r0, #0
  403226:	d1fa      	bne.n	40321e <usart_serial_getchar+0x6e>
  403228:	e7da      	b.n	4031e0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40322a:	461e      	mov	r6, r3
  40322c:	4d16      	ldr	r5, [pc, #88]	; (403288 <usart_serial_getchar+0xd8>)
  40322e:	a901      	add	r1, sp, #4
  403230:	4630      	mov	r0, r6
  403232:	47a8      	blx	r5
  403234:	2800      	cmp	r0, #0
  403236:	d1fa      	bne.n	40322e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403238:	9b01      	ldr	r3, [sp, #4]
  40323a:	7023      	strb	r3, [r4, #0]
  40323c:	e7d3      	b.n	4031e6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40323e:	461e      	mov	r6, r3
  403240:	4d11      	ldr	r5, [pc, #68]	; (403288 <usart_serial_getchar+0xd8>)
  403242:	a901      	add	r1, sp, #4
  403244:	4630      	mov	r0, r6
  403246:	47a8      	blx	r5
  403248:	2800      	cmp	r0, #0
  40324a:	d1fa      	bne.n	403242 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40324c:	9b01      	ldr	r3, [sp, #4]
  40324e:	7023      	strb	r3, [r4, #0]
  403250:	e7c9      	b.n	4031e6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403252:	461e      	mov	r6, r3
  403254:	4d0c      	ldr	r5, [pc, #48]	; (403288 <usart_serial_getchar+0xd8>)
  403256:	a901      	add	r1, sp, #4
  403258:	4630      	mov	r0, r6
  40325a:	47a8      	blx	r5
  40325c:	2800      	cmp	r0, #0
  40325e:	d1fa      	bne.n	403256 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403260:	9b01      	ldr	r3, [sp, #4]
  403262:	7023      	strb	r3, [r4, #0]
}
  403264:	e7bf      	b.n	4031e6 <usart_serial_getchar+0x36>
  403266:	bf00      	nop
  403268:	400e0800 	.word	0x400e0800
  40326c:	400e0a00 	.word	0x400e0a00
  403270:	400e1a00 	.word	0x400e1a00
  403274:	400e1c00 	.word	0x400e1c00
  403278:	40024000 	.word	0x40024000
  40327c:	40028000 	.word	0x40028000
  403280:	4002c000 	.word	0x4002c000
  403284:	00400b73 	.word	0x00400b73
  403288:	00400c83 	.word	0x00400c83

0040328c <usart_serial_putchar>:
{
  40328c:	b570      	push	{r4, r5, r6, lr}
  40328e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403290:	4b2a      	ldr	r3, [pc, #168]	; (40333c <usart_serial_putchar+0xb0>)
  403292:	4298      	cmp	r0, r3
  403294:	d013      	beq.n	4032be <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403296:	4b2a      	ldr	r3, [pc, #168]	; (403340 <usart_serial_putchar+0xb4>)
  403298:	4298      	cmp	r0, r3
  40329a:	d019      	beq.n	4032d0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40329c:	4b29      	ldr	r3, [pc, #164]	; (403344 <usart_serial_putchar+0xb8>)
  40329e:	4298      	cmp	r0, r3
  4032a0:	d01f      	beq.n	4032e2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4032a2:	4b29      	ldr	r3, [pc, #164]	; (403348 <usart_serial_putchar+0xbc>)
  4032a4:	4298      	cmp	r0, r3
  4032a6:	d025      	beq.n	4032f4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4032a8:	4b28      	ldr	r3, [pc, #160]	; (40334c <usart_serial_putchar+0xc0>)
  4032aa:	4298      	cmp	r0, r3
  4032ac:	d02b      	beq.n	403306 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4032ae:	4b28      	ldr	r3, [pc, #160]	; (403350 <usart_serial_putchar+0xc4>)
  4032b0:	4298      	cmp	r0, r3
  4032b2:	d031      	beq.n	403318 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4032b4:	4b27      	ldr	r3, [pc, #156]	; (403354 <usart_serial_putchar+0xc8>)
  4032b6:	4298      	cmp	r0, r3
  4032b8:	d037      	beq.n	40332a <usart_serial_putchar+0x9e>
	return 0;
  4032ba:	2000      	movs	r0, #0
}
  4032bc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4032be:	461e      	mov	r6, r3
  4032c0:	4d25      	ldr	r5, [pc, #148]	; (403358 <usart_serial_putchar+0xcc>)
  4032c2:	4621      	mov	r1, r4
  4032c4:	4630      	mov	r0, r6
  4032c6:	47a8      	blx	r5
  4032c8:	2800      	cmp	r0, #0
  4032ca:	d1fa      	bne.n	4032c2 <usart_serial_putchar+0x36>
		return 1;
  4032cc:	2001      	movs	r0, #1
  4032ce:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4032d0:	461e      	mov	r6, r3
  4032d2:	4d21      	ldr	r5, [pc, #132]	; (403358 <usart_serial_putchar+0xcc>)
  4032d4:	4621      	mov	r1, r4
  4032d6:	4630      	mov	r0, r6
  4032d8:	47a8      	blx	r5
  4032da:	2800      	cmp	r0, #0
  4032dc:	d1fa      	bne.n	4032d4 <usart_serial_putchar+0x48>
		return 1;
  4032de:	2001      	movs	r0, #1
  4032e0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4032e2:	461e      	mov	r6, r3
  4032e4:	4d1c      	ldr	r5, [pc, #112]	; (403358 <usart_serial_putchar+0xcc>)
  4032e6:	4621      	mov	r1, r4
  4032e8:	4630      	mov	r0, r6
  4032ea:	47a8      	blx	r5
  4032ec:	2800      	cmp	r0, #0
  4032ee:	d1fa      	bne.n	4032e6 <usart_serial_putchar+0x5a>
		return 1;
  4032f0:	2001      	movs	r0, #1
  4032f2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4032f4:	461e      	mov	r6, r3
  4032f6:	4d18      	ldr	r5, [pc, #96]	; (403358 <usart_serial_putchar+0xcc>)
  4032f8:	4621      	mov	r1, r4
  4032fa:	4630      	mov	r0, r6
  4032fc:	47a8      	blx	r5
  4032fe:	2800      	cmp	r0, #0
  403300:	d1fa      	bne.n	4032f8 <usart_serial_putchar+0x6c>
		return 1;
  403302:	2001      	movs	r0, #1
  403304:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403306:	461e      	mov	r6, r3
  403308:	4d14      	ldr	r5, [pc, #80]	; (40335c <usart_serial_putchar+0xd0>)
  40330a:	4621      	mov	r1, r4
  40330c:	4630      	mov	r0, r6
  40330e:	47a8      	blx	r5
  403310:	2800      	cmp	r0, #0
  403312:	d1fa      	bne.n	40330a <usart_serial_putchar+0x7e>
		return 1;
  403314:	2001      	movs	r0, #1
  403316:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403318:	461e      	mov	r6, r3
  40331a:	4d10      	ldr	r5, [pc, #64]	; (40335c <usart_serial_putchar+0xd0>)
  40331c:	4621      	mov	r1, r4
  40331e:	4630      	mov	r0, r6
  403320:	47a8      	blx	r5
  403322:	2800      	cmp	r0, #0
  403324:	d1fa      	bne.n	40331c <usart_serial_putchar+0x90>
		return 1;
  403326:	2001      	movs	r0, #1
  403328:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40332a:	461e      	mov	r6, r3
  40332c:	4d0b      	ldr	r5, [pc, #44]	; (40335c <usart_serial_putchar+0xd0>)
  40332e:	4621      	mov	r1, r4
  403330:	4630      	mov	r0, r6
  403332:	47a8      	blx	r5
  403334:	2800      	cmp	r0, #0
  403336:	d1fa      	bne.n	40332e <usart_serial_putchar+0xa2>
		return 1;
  403338:	2001      	movs	r0, #1
  40333a:	bd70      	pop	{r4, r5, r6, pc}
  40333c:	400e0800 	.word	0x400e0800
  403340:	400e0a00 	.word	0x400e0a00
  403344:	400e1a00 	.word	0x400e1a00
  403348:	400e1c00 	.word	0x400e1c00
  40334c:	40024000 	.word	0x40024000
  403350:	40028000 	.word	0x40028000
  403354:	4002c000 	.word	0x4002c000
  403358:	00400b61 	.word	0x00400b61
  40335c:	00400c6d 	.word	0x00400c6d

00403360 <task_uartRX>:
        vTaskDelay(xDelay);
    }
}

static void task_uartRX(void *pvParameters)
{
  403360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403364:	b086      	sub	sp, #24

    int n = 0;
  403366:	2600      	movs	r6, #0
    char command[15], c;
    while (1)
    {
        if (xQueueReceive(xQueueChar, &(c), (TickType_t)500 / portTICK_PERIOD_MS))
  403368:	4d11      	ldr	r5, [pc, #68]	; (4033b0 <task_uartRX+0x50>)
  40336a:	4c12      	ldr	r4, [pc, #72]	; (4033b4 <task_uartRX+0x54>)
            if (c == '\n')
            {
                command[n] = NULL;
                n = 0;
                //push command queu
                xQueueSend(xQueueCommand, &command, 0); /* send mesage to queue */
  40336c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4033bc <task_uartRX+0x5c>
  403370:	e00b      	b.n	40338a <task_uartRX+0x2a>
                command[n] = NULL;
  403372:	ab06      	add	r3, sp, #24
  403374:	4433      	add	r3, r6
  403376:	2600      	movs	r6, #0
  403378:	f803 6c10 	strb.w	r6, [r3, #-16]
                xQueueSend(xQueueCommand, &command, 0); /* send mesage to queue */
  40337c:	4633      	mov	r3, r6
  40337e:	4632      	mov	r2, r6
  403380:	a902      	add	r1, sp, #8
  403382:	f8d8 0000 	ldr.w	r0, [r8]
  403386:	4f0c      	ldr	r7, [pc, #48]	; (4033b8 <task_uartRX+0x58>)
  403388:	47b8      	blx	r7
        if (xQueueReceive(xQueueChar, &(c), (TickType_t)500 / portTICK_PERIOD_MS))
  40338a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40338e:	f10d 0107 	add.w	r1, sp, #7
  403392:	6828      	ldr	r0, [r5, #0]
  403394:	47a0      	blx	r4
  403396:	2800      	cmp	r0, #0
  403398:	d0f7      	beq.n	40338a <task_uartRX+0x2a>
            if (c == '\n')
  40339a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40339e:	2b0a      	cmp	r3, #10
  4033a0:	d0e7      	beq.n	403372 <task_uartRX+0x12>
            }
            else
            {
                command[n] = c;
  4033a2:	aa06      	add	r2, sp, #24
  4033a4:	4432      	add	r2, r6
  4033a6:	f802 3c10 	strb.w	r3, [r2, #-16]
                n++;
  4033aa:	3601      	adds	r6, #1
  4033ac:	e7ed      	b.n	40338a <task_uartRX+0x2a>
  4033ae:	bf00      	nop
  4033b0:	20400d28 	.word	0x20400d28
  4033b4:	00401981 	.word	0x00401981
  4033b8:	0040167d 	.word	0x0040167d
  4033bc:	20400d30 	.word	0x20400d30

004033c0 <task_execute>:
        }
    }
}

static void task_execute(void *pvParameters)
{
  4033c0:	b580      	push	{r7, lr}
  4033c2:	b084      	sub	sp, #16

    char command[15];
    while (1)
    {
        if (xQueueReceive(xQueueCommand, &(command), (TickType_t)500 / portTICK_PERIOD_MS))
  4033c4:	4d19      	ldr	r5, [pc, #100]	; (40342c <task_execute+0x6c>)
  4033c6:	4c1a      	ldr	r4, [pc, #104]	; (403430 <task_execute+0x70>)
        {
            if (strcmp(command, "toggle led 1") == 0)
  4033c8:	4e1a      	ldr	r6, [pc, #104]	; (403434 <task_execute+0x74>)
  4033ca:	e006      	b.n	4033da <task_execute+0x1a>
            {
                xSemaphoreGive(xSemaphore1);
  4033cc:	2300      	movs	r3, #0
  4033ce:	461a      	mov	r2, r3
  4033d0:	4619      	mov	r1, r3
  4033d2:	4819      	ldr	r0, [pc, #100]	; (403438 <task_execute+0x78>)
  4033d4:	6800      	ldr	r0, [r0, #0]
  4033d6:	4f19      	ldr	r7, [pc, #100]	; (40343c <task_execute+0x7c>)
  4033d8:	47b8      	blx	r7
        if (xQueueReceive(xQueueCommand, &(command), (TickType_t)500 / portTICK_PERIOD_MS))
  4033da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4033de:	4669      	mov	r1, sp
  4033e0:	6828      	ldr	r0, [r5, #0]
  4033e2:	47a0      	blx	r4
  4033e4:	2800      	cmp	r0, #0
  4033e6:	d0f8      	beq.n	4033da <task_execute+0x1a>
            if (strcmp(command, "toggle led 1") == 0)
  4033e8:	4631      	mov	r1, r6
  4033ea:	4668      	mov	r0, sp
  4033ec:	4b14      	ldr	r3, [pc, #80]	; (403440 <task_execute+0x80>)
  4033ee:	4798      	blx	r3
  4033f0:	2800      	cmp	r0, #0
  4033f2:	d0eb      	beq.n	4033cc <task_execute+0xc>
            }
            else if (strcmp(command, "toggle led 2") == 0)
  4033f4:	4913      	ldr	r1, [pc, #76]	; (403444 <task_execute+0x84>)
  4033f6:	4668      	mov	r0, sp
  4033f8:	4b11      	ldr	r3, [pc, #68]	; (403440 <task_execute+0x80>)
  4033fa:	4798      	blx	r3
  4033fc:	b168      	cbz	r0, 40341a <task_execute+0x5a>
            {
                xSemaphoreGive(xSemaphore2);
            }
            else if (strcmp(command, "toggle led 3") == 0)
  4033fe:	4912      	ldr	r1, [pc, #72]	; (403448 <task_execute+0x88>)
  403400:	4668      	mov	r0, sp
  403402:	4b0f      	ldr	r3, [pc, #60]	; (403440 <task_execute+0x80>)
  403404:	4798      	blx	r3
  403406:	2800      	cmp	r0, #0
  403408:	d1e7      	bne.n	4033da <task_execute+0x1a>
            {
                xSemaphoreGive(xSemaphore3);
  40340a:	2300      	movs	r3, #0
  40340c:	461a      	mov	r2, r3
  40340e:	4619      	mov	r1, r3
  403410:	480e      	ldr	r0, [pc, #56]	; (40344c <task_execute+0x8c>)
  403412:	6800      	ldr	r0, [r0, #0]
  403414:	4f09      	ldr	r7, [pc, #36]	; (40343c <task_execute+0x7c>)
  403416:	47b8      	blx	r7
  403418:	e7df      	b.n	4033da <task_execute+0x1a>
                xSemaphoreGive(xSemaphore2);
  40341a:	2300      	movs	r3, #0
  40341c:	461a      	mov	r2, r3
  40341e:	4619      	mov	r1, r3
  403420:	480b      	ldr	r0, [pc, #44]	; (403450 <task_execute+0x90>)
  403422:	6800      	ldr	r0, [r0, #0]
  403424:	4f05      	ldr	r7, [pc, #20]	; (40343c <task_execute+0x7c>)
  403426:	47b8      	blx	r7
  403428:	e7d7      	b.n	4033da <task_execute+0x1a>
  40342a:	bf00      	nop
  40342c:	20400d30 	.word	0x20400d30
  403430:	00401981 	.word	0x00401981
  403434:	0040a230 	.word	0x0040a230
  403438:	20400d24 	.word	0x20400d24
  40343c:	0040167d 	.word	0x0040167d
  403440:	00404409 	.word	0x00404409
  403444:	0040a240 	.word	0x0040a240
  403448:	0040a250 	.word	0x0040a250
  40344c:	20400d20 	.word	0x20400d20
  403450:	20400d2c 	.word	0x20400d2c

00403454 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
  403454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  403456:	4d0b      	ldr	r5, [pc, #44]	; (403484 <task_led+0x30>)
    for (;;)
    {
        for (int i = 0; i < 5; i++)
        {
            LED_Toggle(LED0);
            vTaskDelay(1000);
  403458:	4e0b      	ldr	r6, [pc, #44]	; (403488 <task_led+0x34>)
  40345a:	e00e      	b.n	40347a <task_led+0x26>
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  40345c:	632f      	str	r7, [r5, #48]	; 0x30
  40345e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  403462:	47b0      	blx	r6
        for (int i = 0; i < 5; i++)
  403464:	3c01      	subs	r4, #1
  403466:	d005      	beq.n	403474 <task_led+0x20>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  403468:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40346a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40346e:	d0f5      	beq.n	40345c <task_led+0x8>
		port->PIO_CODR = mask;
  403470:	636f      	str	r7, [r5, #52]	; 0x34
  403472:	e7f4      	b.n	40345e <task_led+0xa>
        }
        vTaskDelay(tempo);
  403474:	f640 30b8 	movw	r0, #3000	; 0xbb8
  403478:	47b0      	blx	r6
{
  40347a:	2405      	movs	r4, #5
		port->PIO_SODR = mask;
  40347c:	f44f 7780 	mov.w	r7, #256	; 0x100
  403480:	e7f2      	b.n	403468 <task_led+0x14>
  403482:	bf00      	nop
  403484:	400e1200 	.word	0x400e1200
  403488:	00402495 	.word	0x00402495

0040348c <task_monitor>:
{
  40348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        printf("--- task ## %u\n", (unsigned int)uxTaskGetNumberOfTasks());
  40348e:	4f09      	ldr	r7, [pc, #36]	; (4034b4 <task_monitor+0x28>)
  403490:	4e09      	ldr	r6, [pc, #36]	; (4034b8 <task_monitor+0x2c>)
  403492:	4d0a      	ldr	r5, [pc, #40]	; (4034bc <task_monitor+0x30>)
  403494:	47b8      	blx	r7
  403496:	4601      	mov	r1, r0
  403498:	4630      	mov	r0, r6
  40349a:	47a8      	blx	r5
        vTaskList((signed portCHAR *)szList);
  40349c:	4c08      	ldr	r4, [pc, #32]	; (4034c0 <task_monitor+0x34>)
  40349e:	4620      	mov	r0, r4
  4034a0:	4b08      	ldr	r3, [pc, #32]	; (4034c4 <task_monitor+0x38>)
  4034a2:	4798      	blx	r3
        printf(szList);
  4034a4:	4620      	mov	r0, r4
  4034a6:	47a8      	blx	r5
        vTaskDelay(xDelay);
  4034a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4034ac:	4b06      	ldr	r3, [pc, #24]	; (4034c8 <task_monitor+0x3c>)
  4034ae:	4798      	blx	r3
  4034b0:	e7f0      	b.n	403494 <task_monitor+0x8>
  4034b2:	bf00      	nop
  4034b4:	00402229 	.word	0x00402229
  4034b8:	0040a3a0 	.word	0x0040a3a0
  4034bc:	00403a59 	.word	0x00403a59
  4034c0:	20400ba0 	.word	0x20400ba0
  4034c4:	00402bc1 	.word	0x00402bc1
  4034c8:	00402495 	.word	0x00402495

004034cc <pin_toggle>:
{
  4034cc:	b538      	push	{r3, r4, r5, lr}
  4034ce:	4604      	mov	r4, r0
  4034d0:	460d      	mov	r5, r1
    if (pio_get_output_data_status(pio, mask))
  4034d2:	4b06      	ldr	r3, [pc, #24]	; (4034ec <pin_toggle+0x20>)
  4034d4:	4798      	blx	r3
  4034d6:	b920      	cbnz	r0, 4034e2 <pin_toggle+0x16>
        pio_set(pio, mask);
  4034d8:	4629      	mov	r1, r5
  4034da:	4620      	mov	r0, r4
  4034dc:	4b04      	ldr	r3, [pc, #16]	; (4034f0 <pin_toggle+0x24>)
  4034de:	4798      	blx	r3
  4034e0:	bd38      	pop	{r3, r4, r5, pc}
        pio_clear(pio, mask);
  4034e2:	4629      	mov	r1, r5
  4034e4:	4620      	mov	r0, r4
  4034e6:	4b03      	ldr	r3, [pc, #12]	; (4034f4 <pin_toggle+0x28>)
  4034e8:	4798      	blx	r3
  4034ea:	bd38      	pop	{r3, r4, r5, pc}
  4034ec:	004005ed 	.word	0x004005ed
  4034f0:	00400465 	.word	0x00400465
  4034f4:	00400469 	.word	0x00400469

004034f8 <task_led3>:
{
  4034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034fa:	b083      	sub	sp, #12
    xSemaphore3 = xSemaphoreCreateBinary();
  4034fc:	2203      	movs	r2, #3
  4034fe:	2100      	movs	r1, #0
  403500:	2001      	movs	r0, #1
  403502:	4b1c      	ldr	r3, [pc, #112]	; (403574 <task_led3+0x7c>)
  403504:	4798      	blx	r3
  403506:	4d1c      	ldr	r5, [pc, #112]	; (403578 <task_led3+0x80>)
  403508:	6028      	str	r0, [r5, #0]
    pmc_enable_periph_clk(BUT3_PIO_ID);
  40350a:	200a      	movs	r0, #10
  40350c:	4b1b      	ldr	r3, [pc, #108]	; (40357c <task_led3+0x84>)
  40350e:	4798      	blx	r3
    pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403510:	4c1b      	ldr	r4, [pc, #108]	; (403580 <task_led3+0x88>)
  403512:	2309      	movs	r3, #9
  403514:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403518:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40351c:	4620      	mov	r0, r4
  40351e:	4e19      	ldr	r6, [pc, #100]	; (403584 <task_led3+0x8c>)
  403520:	47b0      	blx	r6
    pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but3_callback);
  403522:	4b19      	ldr	r3, [pc, #100]	; (403588 <task_led3+0x90>)
  403524:	9300      	str	r3, [sp, #0]
  403526:	2350      	movs	r3, #80	; 0x50
  403528:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40352c:	210a      	movs	r1, #10
  40352e:	4620      	mov	r0, r4
  403530:	4e16      	ldr	r6, [pc, #88]	; (40358c <task_led3+0x94>)
  403532:	47b0      	blx	r6
    pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  403534:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403538:	4620      	mov	r0, r4
  40353a:	4b15      	ldr	r3, [pc, #84]	; (403590 <task_led3+0x98>)
  40353c:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40353e:	4b15      	ldr	r3, [pc, #84]	; (403594 <task_led3+0x9c>)
  403540:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403544:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403546:	2280      	movs	r2, #128	; 0x80
  403548:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    if (xSemaphore3 == NULL)
  40354c:	682b      	ldr	r3, [r5, #0]
  40354e:	b913      	cbnz	r3, 403556 <task_led3+0x5e>
        printf("falha em criar o semaforo \n");
  403550:	4811      	ldr	r0, [pc, #68]	; (403598 <task_led3+0xa0>)
  403552:	4b12      	ldr	r3, [pc, #72]	; (40359c <task_led3+0xa4>)
  403554:	4798      	blx	r3
        if (xSemaphoreTake(xSemaphore3, (TickType_t)500) == pdTRUE)
  403556:	4e08      	ldr	r6, [pc, #32]	; (403578 <task_led3+0x80>)
  403558:	4d11      	ldr	r5, [pc, #68]	; (4035a0 <task_led3+0xa8>)
            pin_toggle(LED3_OLED_PIO, LED3_OLED_IDX_MASK);
  40355a:	4f12      	ldr	r7, [pc, #72]	; (4035a4 <task_led3+0xac>)
        if (xSemaphoreTake(xSemaphore3, (TickType_t)500) == pdTRUE)
  40355c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  403560:	4621      	mov	r1, r4
  403562:	6830      	ldr	r0, [r6, #0]
  403564:	47a8      	blx	r5
  403566:	2801      	cmp	r0, #1
  403568:	d1fa      	bne.n	403560 <task_led3+0x68>
            pin_toggle(LED3_OLED_PIO, LED3_OLED_IDX_MASK);
  40356a:	2104      	movs	r1, #4
  40356c:	4638      	mov	r0, r7
  40356e:	4b0e      	ldr	r3, [pc, #56]	; (4035a8 <task_led3+0xb0>)
  403570:	4798      	blx	r3
  403572:	e7f3      	b.n	40355c <task_led3+0x64>
  403574:	00401621 	.word	0x00401621
  403578:	20400d20 	.word	0x20400d20
  40357c:	0040087d 	.word	0x0040087d
  403580:	400e0e00 	.word	0x400e0e00
  403584:	0040055d 	.word	0x0040055d
  403588:	00403191 	.word	0x00403191
  40358c:	00400689 	.word	0x00400689
  403590:	0040062b 	.word	0x0040062b
  403594:	e000e100 	.word	0xe000e100
  403598:	0040a384 	.word	0x0040a384
  40359c:	00403a59 	.word	0x00403a59
  4035a0:	00401b19 	.word	0x00401b19
  4035a4:	400e1000 	.word	0x400e1000
  4035a8:	004034cd 	.word	0x004034cd

004035ac <task_led2>:
{
  4035ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035ae:	b083      	sub	sp, #12
    xSemaphore2 = xSemaphoreCreateBinary();
  4035b0:	2203      	movs	r2, #3
  4035b2:	2100      	movs	r1, #0
  4035b4:	2001      	movs	r0, #1
  4035b6:	4b1d      	ldr	r3, [pc, #116]	; (40362c <task_led2+0x80>)
  4035b8:	4798      	blx	r3
  4035ba:	4d1d      	ldr	r5, [pc, #116]	; (403630 <task_led2+0x84>)
  4035bc:	6028      	str	r0, [r5, #0]
    pmc_enable_periph_clk(BUT2_PIO_ID);
  4035be:	200c      	movs	r0, #12
  4035c0:	4b1c      	ldr	r3, [pc, #112]	; (403634 <task_led2+0x88>)
  4035c2:	4798      	blx	r3
    pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4035c4:	4c1c      	ldr	r4, [pc, #112]	; (403638 <task_led2+0x8c>)
  4035c6:	2309      	movs	r3, #9
  4035c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4035cc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4035d0:	4620      	mov	r0, r4
  4035d2:	4e1a      	ldr	r6, [pc, #104]	; (40363c <task_led2+0x90>)
  4035d4:	47b0      	blx	r6
    pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);
  4035d6:	4b1a      	ldr	r3, [pc, #104]	; (403640 <task_led2+0x94>)
  4035d8:	9300      	str	r3, [sp, #0]
  4035da:	2350      	movs	r3, #80	; 0x50
  4035dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4035e0:	210c      	movs	r1, #12
  4035e2:	4620      	mov	r0, r4
  4035e4:	4e17      	ldr	r6, [pc, #92]	; (403644 <task_led2+0x98>)
  4035e6:	47b0      	blx	r6
    pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  4035e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4035ec:	4620      	mov	r0, r4
  4035ee:	4b16      	ldr	r3, [pc, #88]	; (403648 <task_led2+0x9c>)
  4035f0:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4035f2:	4b16      	ldr	r3, [pc, #88]	; (40364c <task_led2+0xa0>)
  4035f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4035f8:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4035fa:	2280      	movs	r2, #128	; 0x80
  4035fc:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    if (xSemaphore2 == NULL)
  403600:	682b      	ldr	r3, [r5, #0]
  403602:	b913      	cbnz	r3, 40360a <task_led2+0x5e>
        printf("falha em criar o semaforo \n");
  403604:	4812      	ldr	r0, [pc, #72]	; (403650 <task_led2+0xa4>)
  403606:	4b13      	ldr	r3, [pc, #76]	; (403654 <task_led2+0xa8>)
  403608:	4798      	blx	r3
        if (xSemaphoreTake(xSemaphore2, (TickType_t)500) == pdTRUE)
  40360a:	4e09      	ldr	r6, [pc, #36]	; (403630 <task_led2+0x84>)
  40360c:	4d12      	ldr	r5, [pc, #72]	; (403658 <task_led2+0xac>)
            pin_toggle(LED2_OLED_PIO, LED2_OLED_IDX_MASK);
  40360e:	4f0a      	ldr	r7, [pc, #40]	; (403638 <task_led2+0x8c>)
        if (xSemaphoreTake(xSemaphore2, (TickType_t)500) == pdTRUE)
  403610:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  403614:	4621      	mov	r1, r4
  403616:	6830      	ldr	r0, [r6, #0]
  403618:	47a8      	blx	r5
  40361a:	2801      	cmp	r0, #1
  40361c:	d1fa      	bne.n	403614 <task_led2+0x68>
            pin_toggle(LED2_OLED_PIO, LED2_OLED_IDX_MASK);
  40361e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403622:	4638      	mov	r0, r7
  403624:	4b0d      	ldr	r3, [pc, #52]	; (40365c <task_led2+0xb0>)
  403626:	4798      	blx	r3
  403628:	e7f2      	b.n	403610 <task_led2+0x64>
  40362a:	bf00      	nop
  40362c:	00401621 	.word	0x00401621
  403630:	20400d2c 	.word	0x20400d2c
  403634:	0040087d 	.word	0x0040087d
  403638:	400e1200 	.word	0x400e1200
  40363c:	0040055d 	.word	0x0040055d
  403640:	00403171 	.word	0x00403171
  403644:	00400689 	.word	0x00400689
  403648:	0040062b 	.word	0x0040062b
  40364c:	e000e100 	.word	0xe000e100
  403650:	0040a384 	.word	0x0040a384
  403654:	00403a59 	.word	0x00403a59
  403658:	00401b19 	.word	0x00401b19
  40365c:	004034cd 	.word	0x004034cd

00403660 <task_led1>:
{
  403660:	b5f0      	push	{r4, r5, r6, r7, lr}
  403662:	b083      	sub	sp, #12
    xSemaphore1 = xSemaphoreCreateBinary();
  403664:	2203      	movs	r2, #3
  403666:	2100      	movs	r1, #0
  403668:	2001      	movs	r0, #1
  40366a:	4b1c      	ldr	r3, [pc, #112]	; (4036dc <task_led1+0x7c>)
  40366c:	4798      	blx	r3
  40366e:	4d1c      	ldr	r5, [pc, #112]	; (4036e0 <task_led1+0x80>)
  403670:	6028      	str	r0, [r5, #0]
    pmc_enable_periph_clk(BUT1_PIO_ID);
  403672:	2010      	movs	r0, #16
  403674:	4b1b      	ldr	r3, [pc, #108]	; (4036e4 <task_led1+0x84>)
  403676:	4798      	blx	r3
    pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403678:	4c1b      	ldr	r4, [pc, #108]	; (4036e8 <task_led1+0x88>)
  40367a:	2309      	movs	r3, #9
  40367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403680:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403684:	4620      	mov	r0, r4
  403686:	4e19      	ldr	r6, [pc, #100]	; (4036ec <task_led1+0x8c>)
  403688:	47b0      	blx	r6
    pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but1_callback);
  40368a:	4b19      	ldr	r3, [pc, #100]	; (4036f0 <task_led1+0x90>)
  40368c:	9300      	str	r3, [sp, #0]
  40368e:	2350      	movs	r3, #80	; 0x50
  403690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403694:	2110      	movs	r1, #16
  403696:	4620      	mov	r0, r4
  403698:	4e16      	ldr	r6, [pc, #88]	; (4036f4 <task_led1+0x94>)
  40369a:	47b0      	blx	r6
    pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  40369c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4036a0:	4620      	mov	r0, r4
  4036a2:	4b15      	ldr	r3, [pc, #84]	; (4036f8 <task_led1+0x98>)
  4036a4:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4036a6:	4b15      	ldr	r3, [pc, #84]	; (4036fc <task_led1+0x9c>)
  4036a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4036ac:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4036ae:	2280      	movs	r2, #128	; 0x80
  4036b0:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    if (xSemaphore1 == NULL)
  4036b4:	682b      	ldr	r3, [r5, #0]
  4036b6:	b913      	cbnz	r3, 4036be <task_led1+0x5e>
        printf("falha em criar o semaforo \n");
  4036b8:	4811      	ldr	r0, [pc, #68]	; (403700 <task_led1+0xa0>)
  4036ba:	4b12      	ldr	r3, [pc, #72]	; (403704 <task_led1+0xa4>)
  4036bc:	4798      	blx	r3
        if (xSemaphoreTake(xSemaphore1, (TickType_t)500) == pdTRUE)
  4036be:	4e08      	ldr	r6, [pc, #32]	; (4036e0 <task_led1+0x80>)
  4036c0:	4d11      	ldr	r5, [pc, #68]	; (403708 <task_led1+0xa8>)
            pin_toggle(LED1_OLED_PIO, LED1_OLED_IDX_MASK);
  4036c2:	4f12      	ldr	r7, [pc, #72]	; (40370c <task_led1+0xac>)
        if (xSemaphoreTake(xSemaphore1, (TickType_t)500) == pdTRUE)
  4036c4:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  4036c8:	4621      	mov	r1, r4
  4036ca:	6830      	ldr	r0, [r6, #0]
  4036cc:	47a8      	blx	r5
  4036ce:	2801      	cmp	r0, #1
  4036d0:	d1fa      	bne.n	4036c8 <task_led1+0x68>
            pin_toggle(LED1_OLED_PIO, LED1_OLED_IDX_MASK);
  4036d2:	2101      	movs	r1, #1
  4036d4:	4638      	mov	r0, r7
  4036d6:	4b0e      	ldr	r3, [pc, #56]	; (403710 <task_led1+0xb0>)
  4036d8:	4798      	blx	r3
  4036da:	e7f3      	b.n	4036c4 <task_led1+0x64>
  4036dc:	00401621 	.word	0x00401621
  4036e0:	20400d24 	.word	0x20400d24
  4036e4:	0040087d 	.word	0x0040087d
  4036e8:	400e1400 	.word	0x400e1400
  4036ec:	0040055d 	.word	0x0040055d
  4036f0:	00403151 	.word	0x00403151
  4036f4:	00400689 	.word	0x00400689
  4036f8:	0040062b 	.word	0x0040062b
  4036fc:	e000e100 	.word	0xe000e100
  403700:	0040a384 	.word	0x0040a384
  403704:	00403a59 	.word	0x00403a59
  403708:	00401b19 	.word	0x00401b19
  40370c:	400e0e00 	.word	0x400e0e00
  403710:	004034cd 	.word	0x004034cd

00403714 <USART1_Handler>:
{
  403714:	b570      	push	{r4, r5, r6, lr}
  403716:	b082      	sub	sp, #8
    uint32_t ret = usart_get_status(USART1);
  403718:	480e      	ldr	r0, [pc, #56]	; (403754 <USART1_Handler+0x40>)
  40371a:	4b0f      	ldr	r3, [pc, #60]	; (403758 <USART1_Handler+0x44>)
  40371c:	4798      	blx	r3
    if (ret & US_IER_RXRDY)
  40371e:	f010 0f01 	tst.w	r0, #1
  403722:	d101      	bne.n	403728 <USART1_Handler+0x14>
}
  403724:	b002      	add	sp, #8
  403726:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t val = 0;
  403728:	ac02      	add	r4, sp, #8
  40372a:	2300      	movs	r3, #0
  40372c:	f844 3d08 	str.w	r3, [r4, #-8]!
		while (usart_read(p_usart, &val));
  403730:	4e08      	ldr	r6, [pc, #32]	; (403754 <USART1_Handler+0x40>)
  403732:	4d0a      	ldr	r5, [pc, #40]	; (40375c <USART1_Handler+0x48>)
  403734:	4621      	mov	r1, r4
  403736:	4630      	mov	r0, r6
  403738:	47a8      	blx	r5
  40373a:	2800      	cmp	r0, #0
  40373c:	d1fa      	bne.n	403734 <USART1_Handler+0x20>
		*data = (uint8_t)(val & 0xFF);
  40373e:	a902      	add	r1, sp, #8
  403740:	9b00      	ldr	r3, [sp, #0]
  403742:	f801 3d01 	strb.w	r3, [r1, #-1]!
        xQueueSendFromISR(xQueueChar, &c, 0); /* send mesage to queue */
  403746:	2300      	movs	r3, #0
  403748:	461a      	mov	r2, r3
  40374a:	4805      	ldr	r0, [pc, #20]	; (403760 <USART1_Handler+0x4c>)
  40374c:	6800      	ldr	r0, [r0, #0]
  40374e:	4c05      	ldr	r4, [pc, #20]	; (403764 <USART1_Handler+0x50>)
  403750:	47a0      	blx	r4
}
  403752:	e7e7      	b.n	403724 <USART1_Handler+0x10>
  403754:	40028000 	.word	0x40028000
  403758:	00400c69 	.word	0x00400c69
  40375c:	00400c83 	.word	0x00400c83
  403760:	20400d28 	.word	0x20400d28
  403764:	0040186d 	.word	0x0040186d

00403768 <vApplicationStackOverflowHook>:
{
  403768:	b508      	push	{r3, lr}
    printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40376a:	460a      	mov	r2, r1
  40376c:	4601      	mov	r1, r0
  40376e:	4802      	ldr	r0, [pc, #8]	; (403778 <vApplicationStackOverflowHook+0x10>)
  403770:	4b02      	ldr	r3, [pc, #8]	; (40377c <vApplicationStackOverflowHook+0x14>)
  403772:	4798      	blx	r3
  403774:	e7fe      	b.n	403774 <vApplicationStackOverflowHook+0xc>
  403776:	bf00      	nop
  403778:	0040a3b0 	.word	0x0040a3b0
  40377c:	00403a59 	.word	0x00403a59

00403780 <vApplicationIdleHook>:
{
  403780:	b508      	push	{r3, lr}
    pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  403782:	2002      	movs	r0, #2
  403784:	4b01      	ldr	r3, [pc, #4]	; (40378c <vApplicationIdleHook+0xc>)
  403786:	4798      	blx	r3
  403788:	bd08      	pop	{r3, pc}
  40378a:	bf00      	nop
  40378c:	004008ed 	.word	0x004008ed

00403790 <vApplicationTickHook>:
{
  403790:	4770      	bx	lr

00403792 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  403792:	f04f 0380 	mov.w	r3, #128	; 0x80
  403796:	b672      	cpsid	i
  403798:	f383 8811 	msr	BASEPRI, r3
  40379c:	f3bf 8f6f 	isb	sy
  4037a0:	f3bf 8f4f 	dsb	sy
  4037a4:	b662      	cpsie	i
  4037a6:	e7fe      	b.n	4037a6 <vApplicationMallocFailedHook+0x14>

004037a8 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  4037a8:	b570      	push	{r4, r5, r6, lr}
  4037aa:	b088      	sub	sp, #32
    /* Initialize the SAM system */
    sysclk_init();
  4037ac:	4b65      	ldr	r3, [pc, #404]	; (403944 <main+0x19c>)
  4037ae:	4798      	blx	r3
    board_init();
  4037b0:	4b65      	ldr	r3, [pc, #404]	; (403948 <main+0x1a0>)
  4037b2:	4798      	blx	r3

    xQueueChar = xQueueCreate(15, sizeof(char));
  4037b4:	2200      	movs	r2, #0
  4037b6:	2101      	movs	r1, #1
  4037b8:	200f      	movs	r0, #15
  4037ba:	4c64      	ldr	r4, [pc, #400]	; (40394c <main+0x1a4>)
  4037bc:	47a0      	blx	r4
  4037be:	4b64      	ldr	r3, [pc, #400]	; (403950 <main+0x1a8>)
  4037c0:	6018      	str	r0, [r3, #0]
    xQueueCommand = xQueueCreate(15, sizeof(char[15]));
  4037c2:	2200      	movs	r2, #0
  4037c4:	210f      	movs	r1, #15
  4037c6:	4608      	mov	r0, r1
  4037c8:	47a0      	blx	r4
  4037ca:	4b62      	ldr	r3, [pc, #392]	; (403954 <main+0x1ac>)
  4037cc:	6018      	str	r0, [r3, #0]

    pmc_enable_periph_clk(LED1_OLED_PIO_ID);
  4037ce:	200a      	movs	r0, #10
  4037d0:	4e61      	ldr	r6, [pc, #388]	; (403958 <main+0x1b0>)
  4037d2:	47b0      	blx	r6
    pio_set_output(LED1_OLED_PIO, LED1_OLED_IDX_MASK, 0, 0, 0);
  4037d4:	2400      	movs	r4, #0
  4037d6:	9400      	str	r4, [sp, #0]
  4037d8:	4623      	mov	r3, r4
  4037da:	4622      	mov	r2, r4
  4037dc:	2101      	movs	r1, #1
  4037de:	485f      	ldr	r0, [pc, #380]	; (40395c <main+0x1b4>)
  4037e0:	4d5f      	ldr	r5, [pc, #380]	; (403960 <main+0x1b8>)
  4037e2:	47a8      	blx	r5

    pmc_enable_periph_clk(LED2_OLED_PIO_ID);
  4037e4:	200c      	movs	r0, #12
  4037e6:	47b0      	blx	r6
    pio_set_output(LED2_OLED_PIO, LED2_OLED_IDX_MASK, 0, 0, 0);
  4037e8:	9400      	str	r4, [sp, #0]
  4037ea:	4623      	mov	r3, r4
  4037ec:	4622      	mov	r2, r4
  4037ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4037f2:	485c      	ldr	r0, [pc, #368]	; (403964 <main+0x1bc>)
  4037f4:	47a8      	blx	r5

    pmc_enable_periph_clk(LED3_OLED_PIO_ID);
  4037f6:	200b      	movs	r0, #11
  4037f8:	47b0      	blx	r6
    pio_set_output(LED3_OLED_PIO, LED3_OLED_IDX_MASK, 0, 0, 0);
  4037fa:	9400      	str	r4, [sp, #0]
  4037fc:	4623      	mov	r3, r4
  4037fe:	4622      	mov	r2, r4
  403800:	2104      	movs	r1, #4
  403802:	4859      	ldr	r0, [pc, #356]	; (403968 <main+0x1c0>)
  403804:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403806:	4d59      	ldr	r5, [pc, #356]	; (40396c <main+0x1c4>)
  403808:	4b59      	ldr	r3, [pc, #356]	; (403970 <main+0x1c8>)
  40380a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40380c:	4a59      	ldr	r2, [pc, #356]	; (403974 <main+0x1cc>)
  40380e:	4b5a      	ldr	r3, [pc, #360]	; (403978 <main+0x1d0>)
  403810:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403812:	4a5a      	ldr	r2, [pc, #360]	; (40397c <main+0x1d4>)
  403814:	4b5a      	ldr	r3, [pc, #360]	; (403980 <main+0x1d8>)
  403816:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403818:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40381c:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  40381e:	23c0      	movs	r3, #192	; 0xc0
  403820:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403822:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403826:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403828:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40382a:	9406      	str	r4, [sp, #24]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40382c:	200e      	movs	r0, #14
  40382e:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  403830:	4a54      	ldr	r2, [pc, #336]	; (403984 <main+0x1dc>)
  403832:	a902      	add	r1, sp, #8
  403834:	4628      	mov	r0, r5
  403836:	4b54      	ldr	r3, [pc, #336]	; (403988 <main+0x1e0>)
  403838:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40383a:	4628      	mov	r0, r5
  40383c:	4b53      	ldr	r3, [pc, #332]	; (40398c <main+0x1e4>)
  40383e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403840:	4628      	mov	r0, r5
  403842:	4b53      	ldr	r3, [pc, #332]	; (403990 <main+0x1e8>)
  403844:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403846:	4e53      	ldr	r6, [pc, #332]	; (403994 <main+0x1ec>)
  403848:	6833      	ldr	r3, [r6, #0]
  40384a:	4621      	mov	r1, r4
  40384c:	6898      	ldr	r0, [r3, #8]
  40384e:	4d52      	ldr	r5, [pc, #328]	; (403998 <main+0x1f0>)
  403850:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403852:	6833      	ldr	r3, [r6, #0]
  403854:	4621      	mov	r1, r4
  403856:	6858      	ldr	r0, [r3, #4]
  403858:	47a8      	blx	r5
    setbuf(stdout, NULL);
  40385a:	6833      	ldr	r3, [r6, #0]
  40385c:	4621      	mov	r1, r4
  40385e:	6898      	ldr	r0, [r3, #8]
  403860:	47a8      	blx	r5

    /* Initialize the console uart */
    configure_console();

    /* Output demo information. */
    printf("-- Freertos Example --\n\r");
  403862:	484e      	ldr	r0, [pc, #312]	; (40399c <main+0x1f4>)
  403864:	4d4e      	ldr	r5, [pc, #312]	; (4039a0 <main+0x1f8>)
  403866:	47a8      	blx	r5
    printf("-- %s\n\r", BOARD_NAME);
  403868:	494e      	ldr	r1, [pc, #312]	; (4039a4 <main+0x1fc>)
  40386a:	484f      	ldr	r0, [pc, #316]	; (4039a8 <main+0x200>)
  40386c:	47a8      	blx	r5
    printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  40386e:	4a4f      	ldr	r2, [pc, #316]	; (4039ac <main+0x204>)
  403870:	494f      	ldr	r1, [pc, #316]	; (4039b0 <main+0x208>)
  403872:	4850      	ldr	r0, [pc, #320]	; (4039b4 <main+0x20c>)
  403874:	47a8      	blx	r5

    /* Create task to monitor processor activity */
    if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
  403876:	9401      	str	r4, [sp, #4]
  403878:	9400      	str	r4, [sp, #0]
  40387a:	4623      	mov	r3, r4
  40387c:	f44f 7200 	mov.w	r2, #512	; 0x200
  403880:	494d      	ldr	r1, [pc, #308]	; (4039b8 <main+0x210>)
  403882:	484e      	ldr	r0, [pc, #312]	; (4039bc <main+0x214>)
  403884:	4c4e      	ldr	r4, [pc, #312]	; (4039c0 <main+0x218>)
  403886:	47a0      	blx	r4
  403888:	2801      	cmp	r0, #1
  40388a:	d001      	beq.n	403890 <main+0xe8>
                    TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS)
    {
        printf("Failed to create Monitor task\r\n");
  40388c:	484d      	ldr	r0, [pc, #308]	; (4039c4 <main+0x21c>)
  40388e:	47a8      	blx	r5
    }

    /* Create task to make led blink */
    if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  403890:	2300      	movs	r3, #0
  403892:	9301      	str	r3, [sp, #4]
  403894:	9300      	str	r3, [sp, #0]
  403896:	f44f 7280 	mov.w	r2, #256	; 0x100
  40389a:	494b      	ldr	r1, [pc, #300]	; (4039c8 <main+0x220>)
  40389c:	484b      	ldr	r0, [pc, #300]	; (4039cc <main+0x224>)
  40389e:	4c48      	ldr	r4, [pc, #288]	; (4039c0 <main+0x218>)
  4038a0:	47a0      	blx	r4
  4038a2:	2801      	cmp	r0, #1
  4038a4:	d002      	beq.n	4038ac <main+0x104>
                    TASK_LED_STACK_PRIORITY, NULL) != pdPASS)
    {
        printf("Failed to create test led task\r\n");
  4038a6:	484a      	ldr	r0, [pc, #296]	; (4039d0 <main+0x228>)
  4038a8:	4b3d      	ldr	r3, [pc, #244]	; (4039a0 <main+0x1f8>)
  4038aa:	4798      	blx	r3
    }

    if (xTaskCreate(task_led1, "Led1", TASK_LED1_STACK_SIZE, NULL,
  4038ac:	2300      	movs	r3, #0
  4038ae:	9301      	str	r3, [sp, #4]
  4038b0:	9300      	str	r3, [sp, #0]
  4038b2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038b6:	4947      	ldr	r1, [pc, #284]	; (4039d4 <main+0x22c>)
  4038b8:	4847      	ldr	r0, [pc, #284]	; (4039d8 <main+0x230>)
  4038ba:	4c41      	ldr	r4, [pc, #260]	; (4039c0 <main+0x218>)
  4038bc:	47a0      	blx	r4
  4038be:	2801      	cmp	r0, #1
  4038c0:	d002      	beq.n	4038c8 <main+0x120>
                    TASK_LED1_STACK_PRIORITY, NULL) != pdPASS)
    {
        printf("Failed to create test led task\r\n");
  4038c2:	4843      	ldr	r0, [pc, #268]	; (4039d0 <main+0x228>)
  4038c4:	4b36      	ldr	r3, [pc, #216]	; (4039a0 <main+0x1f8>)
  4038c6:	4798      	blx	r3
    }

    if (xTaskCreate(task_led2, "Led2", TASK_LED2_STACK_SIZE, NULL,
  4038c8:	2300      	movs	r3, #0
  4038ca:	9301      	str	r3, [sp, #4]
  4038cc:	9300      	str	r3, [sp, #0]
  4038ce:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038d2:	4942      	ldr	r1, [pc, #264]	; (4039dc <main+0x234>)
  4038d4:	4842      	ldr	r0, [pc, #264]	; (4039e0 <main+0x238>)
  4038d6:	4c3a      	ldr	r4, [pc, #232]	; (4039c0 <main+0x218>)
  4038d8:	47a0      	blx	r4
  4038da:	2801      	cmp	r0, #1
  4038dc:	d002      	beq.n	4038e4 <main+0x13c>
                    TASK_LED2_STACK_PRIORITY, NULL) != pdPASS)
    {
        printf("Failed to create test led task\r\n");
  4038de:	483c      	ldr	r0, [pc, #240]	; (4039d0 <main+0x228>)
  4038e0:	4b2f      	ldr	r3, [pc, #188]	; (4039a0 <main+0x1f8>)
  4038e2:	4798      	blx	r3
    }

    if (xTaskCreate(task_led3, "Led3", TASK_LED3_STACK_SIZE, NULL,
  4038e4:	2300      	movs	r3, #0
  4038e6:	9301      	str	r3, [sp, #4]
  4038e8:	9300      	str	r3, [sp, #0]
  4038ea:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038ee:	493d      	ldr	r1, [pc, #244]	; (4039e4 <main+0x23c>)
  4038f0:	483d      	ldr	r0, [pc, #244]	; (4039e8 <main+0x240>)
  4038f2:	4c33      	ldr	r4, [pc, #204]	; (4039c0 <main+0x218>)
  4038f4:	47a0      	blx	r4
  4038f6:	2801      	cmp	r0, #1
  4038f8:	d002      	beq.n	403900 <main+0x158>
                    TASK_LED3_STACK_PRIORITY, NULL) != pdPASS)
    {
        printf("Failed to create test led task\r\n");
  4038fa:	4835      	ldr	r0, [pc, #212]	; (4039d0 <main+0x228>)
  4038fc:	4b28      	ldr	r3, [pc, #160]	; (4039a0 <main+0x1f8>)
  4038fe:	4798      	blx	r3
    }

    if (xTaskCreate(task_execute, "Execute", TASK_EXECUTE_STACK_SIZE, NULL,
  403900:	2300      	movs	r3, #0
  403902:	9301      	str	r3, [sp, #4]
  403904:	9300      	str	r3, [sp, #0]
  403906:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40390a:	4938      	ldr	r1, [pc, #224]	; (4039ec <main+0x244>)
  40390c:	4838      	ldr	r0, [pc, #224]	; (4039f0 <main+0x248>)
  40390e:	4c2c      	ldr	r4, [pc, #176]	; (4039c0 <main+0x218>)
  403910:	47a0      	blx	r4
  403912:	2801      	cmp	r0, #1
  403914:	d002      	beq.n	40391c <main+0x174>
                    TASK_EXECUTE_STACK_PRIORITY, NULL) != pdPASS)
    {
        printf("Failed to create test execute task\r\n");
  403916:	4837      	ldr	r0, [pc, #220]	; (4039f4 <main+0x24c>)
  403918:	4b21      	ldr	r3, [pc, #132]	; (4039a0 <main+0x1f8>)
  40391a:	4798      	blx	r3
    }

    if (xTaskCreate(task_uartRX, "UartRX", TASK_UARTRX_STACK_SIZE, NULL,
  40391c:	2300      	movs	r3, #0
  40391e:	9301      	str	r3, [sp, #4]
  403920:	9300      	str	r3, [sp, #0]
  403922:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403926:	4934      	ldr	r1, [pc, #208]	; (4039f8 <main+0x250>)
  403928:	4834      	ldr	r0, [pc, #208]	; (4039fc <main+0x254>)
  40392a:	4c25      	ldr	r4, [pc, #148]	; (4039c0 <main+0x218>)
  40392c:	47a0      	blx	r4
  40392e:	2801      	cmp	r0, #1
  403930:	d002      	beq.n	403938 <main+0x190>
                    TASK_UARTRX_STACK_PRIORITY, NULL) != pdPASS)
    {
        printf("Failed to create test uartRX task\r\n");
  403932:	4833      	ldr	r0, [pc, #204]	; (403a00 <main+0x258>)
  403934:	4b1a      	ldr	r3, [pc, #104]	; (4039a0 <main+0x1f8>)
  403936:	4798      	blx	r3
    }

    /* Start the scheduler. */
    vTaskStartScheduler();
  403938:	4b32      	ldr	r3, [pc, #200]	; (403a04 <main+0x25c>)
  40393a:	4798      	blx	r3

    /* Will only get here if there was insufficient memory to create the idle task. */
    return 0;
}
  40393c:	2000      	movs	r0, #0
  40393e:	b008      	add	sp, #32
  403940:	bd70      	pop	{r4, r5, r6, pc}
  403942:	bf00      	nop
  403944:	004001d5 	.word	0x004001d5
  403948:	004002d1 	.word	0x004002d1
  40394c:	00401621 	.word	0x00401621
  403950:	20400d28 	.word	0x20400d28
  403954:	20400d30 	.word	0x20400d30
  403958:	0040087d 	.word	0x0040087d
  40395c:	400e0e00 	.word	0x400e0e00
  403960:	00400535 	.word	0x00400535
  403964:	400e1200 	.word	0x400e1200
  403968:	400e1000 	.word	0x400e1000
  40396c:	40028000 	.word	0x40028000
  403970:	20400cdc 	.word	0x20400cdc
  403974:	0040328d 	.word	0x0040328d
  403978:	20400cd8 	.word	0x20400cd8
  40397c:	004031b1 	.word	0x004031b1
  403980:	20400cd4 	.word	0x20400cd4
  403984:	08f0d180 	.word	0x08f0d180
  403988:	00400c09 	.word	0x00400c09
  40398c:	00400c5d 	.word	0x00400c5d
  403990:	00400c63 	.word	0x00400c63
  403994:	2040000c 	.word	0x2040000c
  403998:	0040420d 	.word	0x0040420d
  40399c:	0040a260 	.word	0x0040a260
  4039a0:	00403a59 	.word	0x00403a59
  4039a4:	0040a27c 	.word	0x0040a27c
  4039a8:	0040a288 	.word	0x0040a288
  4039ac:	0040a290 	.word	0x0040a290
  4039b0:	0040a29c 	.word	0x0040a29c
  4039b4:	0040a2a8 	.word	0x0040a2a8
  4039b8:	0040a2c0 	.word	0x0040a2c0
  4039bc:	0040348d 	.word	0x0040348d
  4039c0:	00401efd 	.word	0x00401efd
  4039c4:	0040a2c8 	.word	0x0040a2c8
  4039c8:	0040a2e8 	.word	0x0040a2e8
  4039cc:	00403455 	.word	0x00403455
  4039d0:	0040a2ec 	.word	0x0040a2ec
  4039d4:	0040a310 	.word	0x0040a310
  4039d8:	00403661 	.word	0x00403661
  4039dc:	0040a318 	.word	0x0040a318
  4039e0:	004035ad 	.word	0x004035ad
  4039e4:	0040a320 	.word	0x0040a320
  4039e8:	004034f9 	.word	0x004034f9
  4039ec:	0040a328 	.word	0x0040a328
  4039f0:	004033c1 	.word	0x004033c1
  4039f4:	0040a330 	.word	0x0040a330
  4039f8:	0040a358 	.word	0x0040a358
  4039fc:	00403361 	.word	0x00403361
  403a00:	0040a360 	.word	0x0040a360
  403a04:	00402179 	.word	0x00402179

00403a08 <__libc_init_array>:
  403a08:	b570      	push	{r4, r5, r6, lr}
  403a0a:	4e0f      	ldr	r6, [pc, #60]	; (403a48 <__libc_init_array+0x40>)
  403a0c:	4d0f      	ldr	r5, [pc, #60]	; (403a4c <__libc_init_array+0x44>)
  403a0e:	1b76      	subs	r6, r6, r5
  403a10:	10b6      	asrs	r6, r6, #2
  403a12:	bf18      	it	ne
  403a14:	2400      	movne	r4, #0
  403a16:	d005      	beq.n	403a24 <__libc_init_array+0x1c>
  403a18:	3401      	adds	r4, #1
  403a1a:	f855 3b04 	ldr.w	r3, [r5], #4
  403a1e:	4798      	blx	r3
  403a20:	42a6      	cmp	r6, r4
  403a22:	d1f9      	bne.n	403a18 <__libc_init_array+0x10>
  403a24:	4e0a      	ldr	r6, [pc, #40]	; (403a50 <__libc_init_array+0x48>)
  403a26:	4d0b      	ldr	r5, [pc, #44]	; (403a54 <__libc_init_array+0x4c>)
  403a28:	1b76      	subs	r6, r6, r5
  403a2a:	f006 fe21 	bl	40a670 <_init>
  403a2e:	10b6      	asrs	r6, r6, #2
  403a30:	bf18      	it	ne
  403a32:	2400      	movne	r4, #0
  403a34:	d006      	beq.n	403a44 <__libc_init_array+0x3c>
  403a36:	3401      	adds	r4, #1
  403a38:	f855 3b04 	ldr.w	r3, [r5], #4
  403a3c:	4798      	blx	r3
  403a3e:	42a6      	cmp	r6, r4
  403a40:	d1f9      	bne.n	403a36 <__libc_init_array+0x2e>
  403a42:	bd70      	pop	{r4, r5, r6, pc}
  403a44:	bd70      	pop	{r4, r5, r6, pc}
  403a46:	bf00      	nop
  403a48:	0040a67c 	.word	0x0040a67c
  403a4c:	0040a67c 	.word	0x0040a67c
  403a50:	0040a684 	.word	0x0040a684
  403a54:	0040a67c 	.word	0x0040a67c

00403a58 <iprintf>:
  403a58:	b40f      	push	{r0, r1, r2, r3}
  403a5a:	b500      	push	{lr}
  403a5c:	4907      	ldr	r1, [pc, #28]	; (403a7c <iprintf+0x24>)
  403a5e:	b083      	sub	sp, #12
  403a60:	ab04      	add	r3, sp, #16
  403a62:	6808      	ldr	r0, [r1, #0]
  403a64:	f853 2b04 	ldr.w	r2, [r3], #4
  403a68:	6881      	ldr	r1, [r0, #8]
  403a6a:	9301      	str	r3, [sp, #4]
  403a6c:	f002 f984 	bl	405d78 <_vfiprintf_r>
  403a70:	b003      	add	sp, #12
  403a72:	f85d eb04 	ldr.w	lr, [sp], #4
  403a76:	b004      	add	sp, #16
  403a78:	4770      	bx	lr
  403a7a:	bf00      	nop
  403a7c:	2040000c 	.word	0x2040000c

00403a80 <malloc>:
  403a80:	4b02      	ldr	r3, [pc, #8]	; (403a8c <malloc+0xc>)
  403a82:	4601      	mov	r1, r0
  403a84:	6818      	ldr	r0, [r3, #0]
  403a86:	f000 b80b 	b.w	403aa0 <_malloc_r>
  403a8a:	bf00      	nop
  403a8c:	2040000c 	.word	0x2040000c

00403a90 <free>:
  403a90:	4b02      	ldr	r3, [pc, #8]	; (403a9c <free+0xc>)
  403a92:	4601      	mov	r1, r0
  403a94:	6818      	ldr	r0, [r3, #0]
  403a96:	f004 ba4b 	b.w	407f30 <_free_r>
  403a9a:	bf00      	nop
  403a9c:	2040000c 	.word	0x2040000c

00403aa0 <_malloc_r>:
  403aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403aa4:	f101 060b 	add.w	r6, r1, #11
  403aa8:	2e16      	cmp	r6, #22
  403aaa:	b083      	sub	sp, #12
  403aac:	4605      	mov	r5, r0
  403aae:	f240 809e 	bls.w	403bee <_malloc_r+0x14e>
  403ab2:	f036 0607 	bics.w	r6, r6, #7
  403ab6:	f100 80bd 	bmi.w	403c34 <_malloc_r+0x194>
  403aba:	42b1      	cmp	r1, r6
  403abc:	f200 80ba 	bhi.w	403c34 <_malloc_r+0x194>
  403ac0:	f000 fb86 	bl	4041d0 <__malloc_lock>
  403ac4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403ac8:	f0c0 8293 	bcc.w	403ff2 <_malloc_r+0x552>
  403acc:	0a73      	lsrs	r3, r6, #9
  403ace:	f000 80b8 	beq.w	403c42 <_malloc_r+0x1a2>
  403ad2:	2b04      	cmp	r3, #4
  403ad4:	f200 8179 	bhi.w	403dca <_malloc_r+0x32a>
  403ad8:	09b3      	lsrs	r3, r6, #6
  403ada:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403ade:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403ae2:	00c3      	lsls	r3, r0, #3
  403ae4:	4fbf      	ldr	r7, [pc, #764]	; (403de4 <_malloc_r+0x344>)
  403ae6:	443b      	add	r3, r7
  403ae8:	f1a3 0108 	sub.w	r1, r3, #8
  403aec:	685c      	ldr	r4, [r3, #4]
  403aee:	42a1      	cmp	r1, r4
  403af0:	d106      	bne.n	403b00 <_malloc_r+0x60>
  403af2:	e00c      	b.n	403b0e <_malloc_r+0x6e>
  403af4:	2a00      	cmp	r2, #0
  403af6:	f280 80aa 	bge.w	403c4e <_malloc_r+0x1ae>
  403afa:	68e4      	ldr	r4, [r4, #12]
  403afc:	42a1      	cmp	r1, r4
  403afe:	d006      	beq.n	403b0e <_malloc_r+0x6e>
  403b00:	6863      	ldr	r3, [r4, #4]
  403b02:	f023 0303 	bic.w	r3, r3, #3
  403b06:	1b9a      	subs	r2, r3, r6
  403b08:	2a0f      	cmp	r2, #15
  403b0a:	ddf3      	ble.n	403af4 <_malloc_r+0x54>
  403b0c:	4670      	mov	r0, lr
  403b0e:	693c      	ldr	r4, [r7, #16]
  403b10:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403df8 <_malloc_r+0x358>
  403b14:	4574      	cmp	r4, lr
  403b16:	f000 81ab 	beq.w	403e70 <_malloc_r+0x3d0>
  403b1a:	6863      	ldr	r3, [r4, #4]
  403b1c:	f023 0303 	bic.w	r3, r3, #3
  403b20:	1b9a      	subs	r2, r3, r6
  403b22:	2a0f      	cmp	r2, #15
  403b24:	f300 8190 	bgt.w	403e48 <_malloc_r+0x3a8>
  403b28:	2a00      	cmp	r2, #0
  403b2a:	f8c7 e014 	str.w	lr, [r7, #20]
  403b2e:	f8c7 e010 	str.w	lr, [r7, #16]
  403b32:	f280 809d 	bge.w	403c70 <_malloc_r+0x1d0>
  403b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403b3a:	f080 8161 	bcs.w	403e00 <_malloc_r+0x360>
  403b3e:	08db      	lsrs	r3, r3, #3
  403b40:	f103 0c01 	add.w	ip, r3, #1
  403b44:	1099      	asrs	r1, r3, #2
  403b46:	687a      	ldr	r2, [r7, #4]
  403b48:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403b4c:	f8c4 8008 	str.w	r8, [r4, #8]
  403b50:	2301      	movs	r3, #1
  403b52:	408b      	lsls	r3, r1
  403b54:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403b58:	4313      	orrs	r3, r2
  403b5a:	3908      	subs	r1, #8
  403b5c:	60e1      	str	r1, [r4, #12]
  403b5e:	607b      	str	r3, [r7, #4]
  403b60:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403b64:	f8c8 400c 	str.w	r4, [r8, #12]
  403b68:	1082      	asrs	r2, r0, #2
  403b6a:	2401      	movs	r4, #1
  403b6c:	4094      	lsls	r4, r2
  403b6e:	429c      	cmp	r4, r3
  403b70:	f200 808b 	bhi.w	403c8a <_malloc_r+0x1ea>
  403b74:	421c      	tst	r4, r3
  403b76:	d106      	bne.n	403b86 <_malloc_r+0xe6>
  403b78:	f020 0003 	bic.w	r0, r0, #3
  403b7c:	0064      	lsls	r4, r4, #1
  403b7e:	421c      	tst	r4, r3
  403b80:	f100 0004 	add.w	r0, r0, #4
  403b84:	d0fa      	beq.n	403b7c <_malloc_r+0xdc>
  403b86:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403b8a:	46cc      	mov	ip, r9
  403b8c:	4680      	mov	r8, r0
  403b8e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403b92:	459c      	cmp	ip, r3
  403b94:	d107      	bne.n	403ba6 <_malloc_r+0x106>
  403b96:	e16d      	b.n	403e74 <_malloc_r+0x3d4>
  403b98:	2a00      	cmp	r2, #0
  403b9a:	f280 817b 	bge.w	403e94 <_malloc_r+0x3f4>
  403b9e:	68db      	ldr	r3, [r3, #12]
  403ba0:	459c      	cmp	ip, r3
  403ba2:	f000 8167 	beq.w	403e74 <_malloc_r+0x3d4>
  403ba6:	6859      	ldr	r1, [r3, #4]
  403ba8:	f021 0103 	bic.w	r1, r1, #3
  403bac:	1b8a      	subs	r2, r1, r6
  403bae:	2a0f      	cmp	r2, #15
  403bb0:	ddf2      	ble.n	403b98 <_malloc_r+0xf8>
  403bb2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403bb6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403bba:	9300      	str	r3, [sp, #0]
  403bbc:	199c      	adds	r4, r3, r6
  403bbe:	4628      	mov	r0, r5
  403bc0:	f046 0601 	orr.w	r6, r6, #1
  403bc4:	f042 0501 	orr.w	r5, r2, #1
  403bc8:	605e      	str	r6, [r3, #4]
  403bca:	f8c8 c00c 	str.w	ip, [r8, #12]
  403bce:	f8cc 8008 	str.w	r8, [ip, #8]
  403bd2:	617c      	str	r4, [r7, #20]
  403bd4:	613c      	str	r4, [r7, #16]
  403bd6:	f8c4 e00c 	str.w	lr, [r4, #12]
  403bda:	f8c4 e008 	str.w	lr, [r4, #8]
  403bde:	6065      	str	r5, [r4, #4]
  403be0:	505a      	str	r2, [r3, r1]
  403be2:	f000 fafb 	bl	4041dc <__malloc_unlock>
  403be6:	9b00      	ldr	r3, [sp, #0]
  403be8:	f103 0408 	add.w	r4, r3, #8
  403bec:	e01e      	b.n	403c2c <_malloc_r+0x18c>
  403bee:	2910      	cmp	r1, #16
  403bf0:	d820      	bhi.n	403c34 <_malloc_r+0x194>
  403bf2:	f000 faed 	bl	4041d0 <__malloc_lock>
  403bf6:	2610      	movs	r6, #16
  403bf8:	2318      	movs	r3, #24
  403bfa:	2002      	movs	r0, #2
  403bfc:	4f79      	ldr	r7, [pc, #484]	; (403de4 <_malloc_r+0x344>)
  403bfe:	443b      	add	r3, r7
  403c00:	f1a3 0208 	sub.w	r2, r3, #8
  403c04:	685c      	ldr	r4, [r3, #4]
  403c06:	4294      	cmp	r4, r2
  403c08:	f000 813d 	beq.w	403e86 <_malloc_r+0x3e6>
  403c0c:	6863      	ldr	r3, [r4, #4]
  403c0e:	68e1      	ldr	r1, [r4, #12]
  403c10:	68a6      	ldr	r6, [r4, #8]
  403c12:	f023 0303 	bic.w	r3, r3, #3
  403c16:	4423      	add	r3, r4
  403c18:	4628      	mov	r0, r5
  403c1a:	685a      	ldr	r2, [r3, #4]
  403c1c:	60f1      	str	r1, [r6, #12]
  403c1e:	f042 0201 	orr.w	r2, r2, #1
  403c22:	608e      	str	r6, [r1, #8]
  403c24:	605a      	str	r2, [r3, #4]
  403c26:	f000 fad9 	bl	4041dc <__malloc_unlock>
  403c2a:	3408      	adds	r4, #8
  403c2c:	4620      	mov	r0, r4
  403c2e:	b003      	add	sp, #12
  403c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c34:	2400      	movs	r4, #0
  403c36:	230c      	movs	r3, #12
  403c38:	4620      	mov	r0, r4
  403c3a:	602b      	str	r3, [r5, #0]
  403c3c:	b003      	add	sp, #12
  403c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c42:	2040      	movs	r0, #64	; 0x40
  403c44:	f44f 7300 	mov.w	r3, #512	; 0x200
  403c48:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403c4c:	e74a      	b.n	403ae4 <_malloc_r+0x44>
  403c4e:	4423      	add	r3, r4
  403c50:	68e1      	ldr	r1, [r4, #12]
  403c52:	685a      	ldr	r2, [r3, #4]
  403c54:	68a6      	ldr	r6, [r4, #8]
  403c56:	f042 0201 	orr.w	r2, r2, #1
  403c5a:	60f1      	str	r1, [r6, #12]
  403c5c:	4628      	mov	r0, r5
  403c5e:	608e      	str	r6, [r1, #8]
  403c60:	605a      	str	r2, [r3, #4]
  403c62:	f000 fabb 	bl	4041dc <__malloc_unlock>
  403c66:	3408      	adds	r4, #8
  403c68:	4620      	mov	r0, r4
  403c6a:	b003      	add	sp, #12
  403c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c70:	4423      	add	r3, r4
  403c72:	4628      	mov	r0, r5
  403c74:	685a      	ldr	r2, [r3, #4]
  403c76:	f042 0201 	orr.w	r2, r2, #1
  403c7a:	605a      	str	r2, [r3, #4]
  403c7c:	f000 faae 	bl	4041dc <__malloc_unlock>
  403c80:	3408      	adds	r4, #8
  403c82:	4620      	mov	r0, r4
  403c84:	b003      	add	sp, #12
  403c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c8a:	68bc      	ldr	r4, [r7, #8]
  403c8c:	6863      	ldr	r3, [r4, #4]
  403c8e:	f023 0803 	bic.w	r8, r3, #3
  403c92:	45b0      	cmp	r8, r6
  403c94:	d304      	bcc.n	403ca0 <_malloc_r+0x200>
  403c96:	eba8 0306 	sub.w	r3, r8, r6
  403c9a:	2b0f      	cmp	r3, #15
  403c9c:	f300 8085 	bgt.w	403daa <_malloc_r+0x30a>
  403ca0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403dfc <_malloc_r+0x35c>
  403ca4:	4b50      	ldr	r3, [pc, #320]	; (403de8 <_malloc_r+0x348>)
  403ca6:	f8d9 2000 	ldr.w	r2, [r9]
  403caa:	681b      	ldr	r3, [r3, #0]
  403cac:	3201      	adds	r2, #1
  403cae:	4433      	add	r3, r6
  403cb0:	eb04 0a08 	add.w	sl, r4, r8
  403cb4:	f000 8155 	beq.w	403f62 <_malloc_r+0x4c2>
  403cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403cbc:	330f      	adds	r3, #15
  403cbe:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403cc2:	f02b 0b0f 	bic.w	fp, fp, #15
  403cc6:	4659      	mov	r1, fp
  403cc8:	4628      	mov	r0, r5
  403cca:	f000 fa8d 	bl	4041e8 <_sbrk_r>
  403cce:	1c41      	adds	r1, r0, #1
  403cd0:	4602      	mov	r2, r0
  403cd2:	f000 80fc 	beq.w	403ece <_malloc_r+0x42e>
  403cd6:	4582      	cmp	sl, r0
  403cd8:	f200 80f7 	bhi.w	403eca <_malloc_r+0x42a>
  403cdc:	4b43      	ldr	r3, [pc, #268]	; (403dec <_malloc_r+0x34c>)
  403cde:	6819      	ldr	r1, [r3, #0]
  403ce0:	4459      	add	r1, fp
  403ce2:	6019      	str	r1, [r3, #0]
  403ce4:	f000 814d 	beq.w	403f82 <_malloc_r+0x4e2>
  403ce8:	f8d9 0000 	ldr.w	r0, [r9]
  403cec:	3001      	adds	r0, #1
  403cee:	bf1b      	ittet	ne
  403cf0:	eba2 0a0a 	subne.w	sl, r2, sl
  403cf4:	4451      	addne	r1, sl
  403cf6:	f8c9 2000 	streq.w	r2, [r9]
  403cfa:	6019      	strne	r1, [r3, #0]
  403cfc:	f012 0107 	ands.w	r1, r2, #7
  403d00:	f000 8115 	beq.w	403f2e <_malloc_r+0x48e>
  403d04:	f1c1 0008 	rsb	r0, r1, #8
  403d08:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403d0c:	4402      	add	r2, r0
  403d0e:	3108      	adds	r1, #8
  403d10:	eb02 090b 	add.w	r9, r2, fp
  403d14:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403d18:	eba1 0909 	sub.w	r9, r1, r9
  403d1c:	4649      	mov	r1, r9
  403d1e:	4628      	mov	r0, r5
  403d20:	9301      	str	r3, [sp, #4]
  403d22:	9200      	str	r2, [sp, #0]
  403d24:	f000 fa60 	bl	4041e8 <_sbrk_r>
  403d28:	1c43      	adds	r3, r0, #1
  403d2a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403d2e:	f000 8143 	beq.w	403fb8 <_malloc_r+0x518>
  403d32:	1a80      	subs	r0, r0, r2
  403d34:	4448      	add	r0, r9
  403d36:	f040 0001 	orr.w	r0, r0, #1
  403d3a:	6819      	ldr	r1, [r3, #0]
  403d3c:	60ba      	str	r2, [r7, #8]
  403d3e:	4449      	add	r1, r9
  403d40:	42bc      	cmp	r4, r7
  403d42:	6050      	str	r0, [r2, #4]
  403d44:	6019      	str	r1, [r3, #0]
  403d46:	d017      	beq.n	403d78 <_malloc_r+0x2d8>
  403d48:	f1b8 0f0f 	cmp.w	r8, #15
  403d4c:	f240 80fb 	bls.w	403f46 <_malloc_r+0x4a6>
  403d50:	6860      	ldr	r0, [r4, #4]
  403d52:	f1a8 020c 	sub.w	r2, r8, #12
  403d56:	f022 0207 	bic.w	r2, r2, #7
  403d5a:	eb04 0e02 	add.w	lr, r4, r2
  403d5e:	f000 0001 	and.w	r0, r0, #1
  403d62:	f04f 0c05 	mov.w	ip, #5
  403d66:	4310      	orrs	r0, r2
  403d68:	2a0f      	cmp	r2, #15
  403d6a:	6060      	str	r0, [r4, #4]
  403d6c:	f8ce c004 	str.w	ip, [lr, #4]
  403d70:	f8ce c008 	str.w	ip, [lr, #8]
  403d74:	f200 8117 	bhi.w	403fa6 <_malloc_r+0x506>
  403d78:	4b1d      	ldr	r3, [pc, #116]	; (403df0 <_malloc_r+0x350>)
  403d7a:	68bc      	ldr	r4, [r7, #8]
  403d7c:	681a      	ldr	r2, [r3, #0]
  403d7e:	4291      	cmp	r1, r2
  403d80:	bf88      	it	hi
  403d82:	6019      	strhi	r1, [r3, #0]
  403d84:	4b1b      	ldr	r3, [pc, #108]	; (403df4 <_malloc_r+0x354>)
  403d86:	681a      	ldr	r2, [r3, #0]
  403d88:	4291      	cmp	r1, r2
  403d8a:	6862      	ldr	r2, [r4, #4]
  403d8c:	bf88      	it	hi
  403d8e:	6019      	strhi	r1, [r3, #0]
  403d90:	f022 0203 	bic.w	r2, r2, #3
  403d94:	4296      	cmp	r6, r2
  403d96:	eba2 0306 	sub.w	r3, r2, r6
  403d9a:	d801      	bhi.n	403da0 <_malloc_r+0x300>
  403d9c:	2b0f      	cmp	r3, #15
  403d9e:	dc04      	bgt.n	403daa <_malloc_r+0x30a>
  403da0:	4628      	mov	r0, r5
  403da2:	f000 fa1b 	bl	4041dc <__malloc_unlock>
  403da6:	2400      	movs	r4, #0
  403da8:	e740      	b.n	403c2c <_malloc_r+0x18c>
  403daa:	19a2      	adds	r2, r4, r6
  403dac:	f043 0301 	orr.w	r3, r3, #1
  403db0:	f046 0601 	orr.w	r6, r6, #1
  403db4:	6066      	str	r6, [r4, #4]
  403db6:	4628      	mov	r0, r5
  403db8:	60ba      	str	r2, [r7, #8]
  403dba:	6053      	str	r3, [r2, #4]
  403dbc:	f000 fa0e 	bl	4041dc <__malloc_unlock>
  403dc0:	3408      	adds	r4, #8
  403dc2:	4620      	mov	r0, r4
  403dc4:	b003      	add	sp, #12
  403dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dca:	2b14      	cmp	r3, #20
  403dcc:	d971      	bls.n	403eb2 <_malloc_r+0x412>
  403dce:	2b54      	cmp	r3, #84	; 0x54
  403dd0:	f200 80a3 	bhi.w	403f1a <_malloc_r+0x47a>
  403dd4:	0b33      	lsrs	r3, r6, #12
  403dd6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403dda:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403dde:	00c3      	lsls	r3, r0, #3
  403de0:	e680      	b.n	403ae4 <_malloc_r+0x44>
  403de2:	bf00      	nop
  403de4:	20400438 	.word	0x20400438
  403de8:	20400cd0 	.word	0x20400cd0
  403dec:	20400ca0 	.word	0x20400ca0
  403df0:	20400cc8 	.word	0x20400cc8
  403df4:	20400ccc 	.word	0x20400ccc
  403df8:	20400440 	.word	0x20400440
  403dfc:	20400840 	.word	0x20400840
  403e00:	0a5a      	lsrs	r2, r3, #9
  403e02:	2a04      	cmp	r2, #4
  403e04:	d95b      	bls.n	403ebe <_malloc_r+0x41e>
  403e06:	2a14      	cmp	r2, #20
  403e08:	f200 80ae 	bhi.w	403f68 <_malloc_r+0x4c8>
  403e0c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403e10:	00c9      	lsls	r1, r1, #3
  403e12:	325b      	adds	r2, #91	; 0x5b
  403e14:	eb07 0c01 	add.w	ip, r7, r1
  403e18:	5879      	ldr	r1, [r7, r1]
  403e1a:	f1ac 0c08 	sub.w	ip, ip, #8
  403e1e:	458c      	cmp	ip, r1
  403e20:	f000 8088 	beq.w	403f34 <_malloc_r+0x494>
  403e24:	684a      	ldr	r2, [r1, #4]
  403e26:	f022 0203 	bic.w	r2, r2, #3
  403e2a:	4293      	cmp	r3, r2
  403e2c:	d273      	bcs.n	403f16 <_malloc_r+0x476>
  403e2e:	6889      	ldr	r1, [r1, #8]
  403e30:	458c      	cmp	ip, r1
  403e32:	d1f7      	bne.n	403e24 <_malloc_r+0x384>
  403e34:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403e38:	687b      	ldr	r3, [r7, #4]
  403e3a:	60e2      	str	r2, [r4, #12]
  403e3c:	f8c4 c008 	str.w	ip, [r4, #8]
  403e40:	6094      	str	r4, [r2, #8]
  403e42:	f8cc 400c 	str.w	r4, [ip, #12]
  403e46:	e68f      	b.n	403b68 <_malloc_r+0xc8>
  403e48:	19a1      	adds	r1, r4, r6
  403e4a:	f046 0c01 	orr.w	ip, r6, #1
  403e4e:	f042 0601 	orr.w	r6, r2, #1
  403e52:	f8c4 c004 	str.w	ip, [r4, #4]
  403e56:	4628      	mov	r0, r5
  403e58:	6179      	str	r1, [r7, #20]
  403e5a:	6139      	str	r1, [r7, #16]
  403e5c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403e60:	f8c1 e008 	str.w	lr, [r1, #8]
  403e64:	604e      	str	r6, [r1, #4]
  403e66:	50e2      	str	r2, [r4, r3]
  403e68:	f000 f9b8 	bl	4041dc <__malloc_unlock>
  403e6c:	3408      	adds	r4, #8
  403e6e:	e6dd      	b.n	403c2c <_malloc_r+0x18c>
  403e70:	687b      	ldr	r3, [r7, #4]
  403e72:	e679      	b.n	403b68 <_malloc_r+0xc8>
  403e74:	f108 0801 	add.w	r8, r8, #1
  403e78:	f018 0f03 	tst.w	r8, #3
  403e7c:	f10c 0c08 	add.w	ip, ip, #8
  403e80:	f47f ae85 	bne.w	403b8e <_malloc_r+0xee>
  403e84:	e02d      	b.n	403ee2 <_malloc_r+0x442>
  403e86:	68dc      	ldr	r4, [r3, #12]
  403e88:	42a3      	cmp	r3, r4
  403e8a:	bf08      	it	eq
  403e8c:	3002      	addeq	r0, #2
  403e8e:	f43f ae3e 	beq.w	403b0e <_malloc_r+0x6e>
  403e92:	e6bb      	b.n	403c0c <_malloc_r+0x16c>
  403e94:	4419      	add	r1, r3
  403e96:	461c      	mov	r4, r3
  403e98:	684a      	ldr	r2, [r1, #4]
  403e9a:	68db      	ldr	r3, [r3, #12]
  403e9c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403ea0:	f042 0201 	orr.w	r2, r2, #1
  403ea4:	604a      	str	r2, [r1, #4]
  403ea6:	4628      	mov	r0, r5
  403ea8:	60f3      	str	r3, [r6, #12]
  403eaa:	609e      	str	r6, [r3, #8]
  403eac:	f000 f996 	bl	4041dc <__malloc_unlock>
  403eb0:	e6bc      	b.n	403c2c <_malloc_r+0x18c>
  403eb2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403eb6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403eba:	00c3      	lsls	r3, r0, #3
  403ebc:	e612      	b.n	403ae4 <_malloc_r+0x44>
  403ebe:	099a      	lsrs	r2, r3, #6
  403ec0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403ec4:	00c9      	lsls	r1, r1, #3
  403ec6:	3238      	adds	r2, #56	; 0x38
  403ec8:	e7a4      	b.n	403e14 <_malloc_r+0x374>
  403eca:	42bc      	cmp	r4, r7
  403ecc:	d054      	beq.n	403f78 <_malloc_r+0x4d8>
  403ece:	68bc      	ldr	r4, [r7, #8]
  403ed0:	6862      	ldr	r2, [r4, #4]
  403ed2:	f022 0203 	bic.w	r2, r2, #3
  403ed6:	e75d      	b.n	403d94 <_malloc_r+0x2f4>
  403ed8:	f859 3908 	ldr.w	r3, [r9], #-8
  403edc:	4599      	cmp	r9, r3
  403ede:	f040 8086 	bne.w	403fee <_malloc_r+0x54e>
  403ee2:	f010 0f03 	tst.w	r0, #3
  403ee6:	f100 30ff 	add.w	r0, r0, #4294967295
  403eea:	d1f5      	bne.n	403ed8 <_malloc_r+0x438>
  403eec:	687b      	ldr	r3, [r7, #4]
  403eee:	ea23 0304 	bic.w	r3, r3, r4
  403ef2:	607b      	str	r3, [r7, #4]
  403ef4:	0064      	lsls	r4, r4, #1
  403ef6:	429c      	cmp	r4, r3
  403ef8:	f63f aec7 	bhi.w	403c8a <_malloc_r+0x1ea>
  403efc:	2c00      	cmp	r4, #0
  403efe:	f43f aec4 	beq.w	403c8a <_malloc_r+0x1ea>
  403f02:	421c      	tst	r4, r3
  403f04:	4640      	mov	r0, r8
  403f06:	f47f ae3e 	bne.w	403b86 <_malloc_r+0xe6>
  403f0a:	0064      	lsls	r4, r4, #1
  403f0c:	421c      	tst	r4, r3
  403f0e:	f100 0004 	add.w	r0, r0, #4
  403f12:	d0fa      	beq.n	403f0a <_malloc_r+0x46a>
  403f14:	e637      	b.n	403b86 <_malloc_r+0xe6>
  403f16:	468c      	mov	ip, r1
  403f18:	e78c      	b.n	403e34 <_malloc_r+0x394>
  403f1a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403f1e:	d815      	bhi.n	403f4c <_malloc_r+0x4ac>
  403f20:	0bf3      	lsrs	r3, r6, #15
  403f22:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403f26:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403f2a:	00c3      	lsls	r3, r0, #3
  403f2c:	e5da      	b.n	403ae4 <_malloc_r+0x44>
  403f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403f32:	e6ed      	b.n	403d10 <_malloc_r+0x270>
  403f34:	687b      	ldr	r3, [r7, #4]
  403f36:	1092      	asrs	r2, r2, #2
  403f38:	2101      	movs	r1, #1
  403f3a:	fa01 f202 	lsl.w	r2, r1, r2
  403f3e:	4313      	orrs	r3, r2
  403f40:	607b      	str	r3, [r7, #4]
  403f42:	4662      	mov	r2, ip
  403f44:	e779      	b.n	403e3a <_malloc_r+0x39a>
  403f46:	2301      	movs	r3, #1
  403f48:	6053      	str	r3, [r2, #4]
  403f4a:	e729      	b.n	403da0 <_malloc_r+0x300>
  403f4c:	f240 5254 	movw	r2, #1364	; 0x554
  403f50:	4293      	cmp	r3, r2
  403f52:	d822      	bhi.n	403f9a <_malloc_r+0x4fa>
  403f54:	0cb3      	lsrs	r3, r6, #18
  403f56:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403f5a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403f5e:	00c3      	lsls	r3, r0, #3
  403f60:	e5c0      	b.n	403ae4 <_malloc_r+0x44>
  403f62:	f103 0b10 	add.w	fp, r3, #16
  403f66:	e6ae      	b.n	403cc6 <_malloc_r+0x226>
  403f68:	2a54      	cmp	r2, #84	; 0x54
  403f6a:	d829      	bhi.n	403fc0 <_malloc_r+0x520>
  403f6c:	0b1a      	lsrs	r2, r3, #12
  403f6e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403f72:	00c9      	lsls	r1, r1, #3
  403f74:	326e      	adds	r2, #110	; 0x6e
  403f76:	e74d      	b.n	403e14 <_malloc_r+0x374>
  403f78:	4b20      	ldr	r3, [pc, #128]	; (403ffc <_malloc_r+0x55c>)
  403f7a:	6819      	ldr	r1, [r3, #0]
  403f7c:	4459      	add	r1, fp
  403f7e:	6019      	str	r1, [r3, #0]
  403f80:	e6b2      	b.n	403ce8 <_malloc_r+0x248>
  403f82:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403f86:	2800      	cmp	r0, #0
  403f88:	f47f aeae 	bne.w	403ce8 <_malloc_r+0x248>
  403f8c:	eb08 030b 	add.w	r3, r8, fp
  403f90:	68ba      	ldr	r2, [r7, #8]
  403f92:	f043 0301 	orr.w	r3, r3, #1
  403f96:	6053      	str	r3, [r2, #4]
  403f98:	e6ee      	b.n	403d78 <_malloc_r+0x2d8>
  403f9a:	207f      	movs	r0, #127	; 0x7f
  403f9c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403fa0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403fa4:	e59e      	b.n	403ae4 <_malloc_r+0x44>
  403fa6:	f104 0108 	add.w	r1, r4, #8
  403faa:	4628      	mov	r0, r5
  403fac:	9300      	str	r3, [sp, #0]
  403fae:	f003 ffbf 	bl	407f30 <_free_r>
  403fb2:	9b00      	ldr	r3, [sp, #0]
  403fb4:	6819      	ldr	r1, [r3, #0]
  403fb6:	e6df      	b.n	403d78 <_malloc_r+0x2d8>
  403fb8:	2001      	movs	r0, #1
  403fba:	f04f 0900 	mov.w	r9, #0
  403fbe:	e6bc      	b.n	403d3a <_malloc_r+0x29a>
  403fc0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403fc4:	d805      	bhi.n	403fd2 <_malloc_r+0x532>
  403fc6:	0bda      	lsrs	r2, r3, #15
  403fc8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403fcc:	00c9      	lsls	r1, r1, #3
  403fce:	3277      	adds	r2, #119	; 0x77
  403fd0:	e720      	b.n	403e14 <_malloc_r+0x374>
  403fd2:	f240 5154 	movw	r1, #1364	; 0x554
  403fd6:	428a      	cmp	r2, r1
  403fd8:	d805      	bhi.n	403fe6 <_malloc_r+0x546>
  403fda:	0c9a      	lsrs	r2, r3, #18
  403fdc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403fe0:	00c9      	lsls	r1, r1, #3
  403fe2:	327c      	adds	r2, #124	; 0x7c
  403fe4:	e716      	b.n	403e14 <_malloc_r+0x374>
  403fe6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403fea:	227e      	movs	r2, #126	; 0x7e
  403fec:	e712      	b.n	403e14 <_malloc_r+0x374>
  403fee:	687b      	ldr	r3, [r7, #4]
  403ff0:	e780      	b.n	403ef4 <_malloc_r+0x454>
  403ff2:	08f0      	lsrs	r0, r6, #3
  403ff4:	f106 0308 	add.w	r3, r6, #8
  403ff8:	e600      	b.n	403bfc <_malloc_r+0x15c>
  403ffa:	bf00      	nop
  403ffc:	20400ca0 	.word	0x20400ca0

00404000 <memcpy>:
  404000:	4684      	mov	ip, r0
  404002:	ea41 0300 	orr.w	r3, r1, r0
  404006:	f013 0303 	ands.w	r3, r3, #3
  40400a:	d16d      	bne.n	4040e8 <memcpy+0xe8>
  40400c:	3a40      	subs	r2, #64	; 0x40
  40400e:	d341      	bcc.n	404094 <memcpy+0x94>
  404010:	f851 3b04 	ldr.w	r3, [r1], #4
  404014:	f840 3b04 	str.w	r3, [r0], #4
  404018:	f851 3b04 	ldr.w	r3, [r1], #4
  40401c:	f840 3b04 	str.w	r3, [r0], #4
  404020:	f851 3b04 	ldr.w	r3, [r1], #4
  404024:	f840 3b04 	str.w	r3, [r0], #4
  404028:	f851 3b04 	ldr.w	r3, [r1], #4
  40402c:	f840 3b04 	str.w	r3, [r0], #4
  404030:	f851 3b04 	ldr.w	r3, [r1], #4
  404034:	f840 3b04 	str.w	r3, [r0], #4
  404038:	f851 3b04 	ldr.w	r3, [r1], #4
  40403c:	f840 3b04 	str.w	r3, [r0], #4
  404040:	f851 3b04 	ldr.w	r3, [r1], #4
  404044:	f840 3b04 	str.w	r3, [r0], #4
  404048:	f851 3b04 	ldr.w	r3, [r1], #4
  40404c:	f840 3b04 	str.w	r3, [r0], #4
  404050:	f851 3b04 	ldr.w	r3, [r1], #4
  404054:	f840 3b04 	str.w	r3, [r0], #4
  404058:	f851 3b04 	ldr.w	r3, [r1], #4
  40405c:	f840 3b04 	str.w	r3, [r0], #4
  404060:	f851 3b04 	ldr.w	r3, [r1], #4
  404064:	f840 3b04 	str.w	r3, [r0], #4
  404068:	f851 3b04 	ldr.w	r3, [r1], #4
  40406c:	f840 3b04 	str.w	r3, [r0], #4
  404070:	f851 3b04 	ldr.w	r3, [r1], #4
  404074:	f840 3b04 	str.w	r3, [r0], #4
  404078:	f851 3b04 	ldr.w	r3, [r1], #4
  40407c:	f840 3b04 	str.w	r3, [r0], #4
  404080:	f851 3b04 	ldr.w	r3, [r1], #4
  404084:	f840 3b04 	str.w	r3, [r0], #4
  404088:	f851 3b04 	ldr.w	r3, [r1], #4
  40408c:	f840 3b04 	str.w	r3, [r0], #4
  404090:	3a40      	subs	r2, #64	; 0x40
  404092:	d2bd      	bcs.n	404010 <memcpy+0x10>
  404094:	3230      	adds	r2, #48	; 0x30
  404096:	d311      	bcc.n	4040bc <memcpy+0xbc>
  404098:	f851 3b04 	ldr.w	r3, [r1], #4
  40409c:	f840 3b04 	str.w	r3, [r0], #4
  4040a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040a4:	f840 3b04 	str.w	r3, [r0], #4
  4040a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040ac:	f840 3b04 	str.w	r3, [r0], #4
  4040b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040b4:	f840 3b04 	str.w	r3, [r0], #4
  4040b8:	3a10      	subs	r2, #16
  4040ba:	d2ed      	bcs.n	404098 <memcpy+0x98>
  4040bc:	320c      	adds	r2, #12
  4040be:	d305      	bcc.n	4040cc <memcpy+0xcc>
  4040c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c4:	f840 3b04 	str.w	r3, [r0], #4
  4040c8:	3a04      	subs	r2, #4
  4040ca:	d2f9      	bcs.n	4040c0 <memcpy+0xc0>
  4040cc:	3204      	adds	r2, #4
  4040ce:	d008      	beq.n	4040e2 <memcpy+0xe2>
  4040d0:	07d2      	lsls	r2, r2, #31
  4040d2:	bf1c      	itt	ne
  4040d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4040d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4040dc:	d301      	bcc.n	4040e2 <memcpy+0xe2>
  4040de:	880b      	ldrh	r3, [r1, #0]
  4040e0:	8003      	strh	r3, [r0, #0]
  4040e2:	4660      	mov	r0, ip
  4040e4:	4770      	bx	lr
  4040e6:	bf00      	nop
  4040e8:	2a08      	cmp	r2, #8
  4040ea:	d313      	bcc.n	404114 <memcpy+0x114>
  4040ec:	078b      	lsls	r3, r1, #30
  4040ee:	d08d      	beq.n	40400c <memcpy+0xc>
  4040f0:	f010 0303 	ands.w	r3, r0, #3
  4040f4:	d08a      	beq.n	40400c <memcpy+0xc>
  4040f6:	f1c3 0304 	rsb	r3, r3, #4
  4040fa:	1ad2      	subs	r2, r2, r3
  4040fc:	07db      	lsls	r3, r3, #31
  4040fe:	bf1c      	itt	ne
  404100:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404104:	f800 3b01 	strbne.w	r3, [r0], #1
  404108:	d380      	bcc.n	40400c <memcpy+0xc>
  40410a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40410e:	f820 3b02 	strh.w	r3, [r0], #2
  404112:	e77b      	b.n	40400c <memcpy+0xc>
  404114:	3a04      	subs	r2, #4
  404116:	d3d9      	bcc.n	4040cc <memcpy+0xcc>
  404118:	3a01      	subs	r2, #1
  40411a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40411e:	f800 3b01 	strb.w	r3, [r0], #1
  404122:	d2f9      	bcs.n	404118 <memcpy+0x118>
  404124:	780b      	ldrb	r3, [r1, #0]
  404126:	7003      	strb	r3, [r0, #0]
  404128:	784b      	ldrb	r3, [r1, #1]
  40412a:	7043      	strb	r3, [r0, #1]
  40412c:	788b      	ldrb	r3, [r1, #2]
  40412e:	7083      	strb	r3, [r0, #2]
  404130:	4660      	mov	r0, ip
  404132:	4770      	bx	lr

00404134 <memset>:
  404134:	b470      	push	{r4, r5, r6}
  404136:	0786      	lsls	r6, r0, #30
  404138:	d046      	beq.n	4041c8 <memset+0x94>
  40413a:	1e54      	subs	r4, r2, #1
  40413c:	2a00      	cmp	r2, #0
  40413e:	d041      	beq.n	4041c4 <memset+0x90>
  404140:	b2ca      	uxtb	r2, r1
  404142:	4603      	mov	r3, r0
  404144:	e002      	b.n	40414c <memset+0x18>
  404146:	f114 34ff 	adds.w	r4, r4, #4294967295
  40414a:	d33b      	bcc.n	4041c4 <memset+0x90>
  40414c:	f803 2b01 	strb.w	r2, [r3], #1
  404150:	079d      	lsls	r5, r3, #30
  404152:	d1f8      	bne.n	404146 <memset+0x12>
  404154:	2c03      	cmp	r4, #3
  404156:	d92e      	bls.n	4041b6 <memset+0x82>
  404158:	b2cd      	uxtb	r5, r1
  40415a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40415e:	2c0f      	cmp	r4, #15
  404160:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404164:	d919      	bls.n	40419a <memset+0x66>
  404166:	f103 0210 	add.w	r2, r3, #16
  40416a:	4626      	mov	r6, r4
  40416c:	3e10      	subs	r6, #16
  40416e:	2e0f      	cmp	r6, #15
  404170:	f842 5c10 	str.w	r5, [r2, #-16]
  404174:	f842 5c0c 	str.w	r5, [r2, #-12]
  404178:	f842 5c08 	str.w	r5, [r2, #-8]
  40417c:	f842 5c04 	str.w	r5, [r2, #-4]
  404180:	f102 0210 	add.w	r2, r2, #16
  404184:	d8f2      	bhi.n	40416c <memset+0x38>
  404186:	f1a4 0210 	sub.w	r2, r4, #16
  40418a:	f022 020f 	bic.w	r2, r2, #15
  40418e:	f004 040f 	and.w	r4, r4, #15
  404192:	3210      	adds	r2, #16
  404194:	2c03      	cmp	r4, #3
  404196:	4413      	add	r3, r2
  404198:	d90d      	bls.n	4041b6 <memset+0x82>
  40419a:	461e      	mov	r6, r3
  40419c:	4622      	mov	r2, r4
  40419e:	3a04      	subs	r2, #4
  4041a0:	2a03      	cmp	r2, #3
  4041a2:	f846 5b04 	str.w	r5, [r6], #4
  4041a6:	d8fa      	bhi.n	40419e <memset+0x6a>
  4041a8:	1f22      	subs	r2, r4, #4
  4041aa:	f022 0203 	bic.w	r2, r2, #3
  4041ae:	3204      	adds	r2, #4
  4041b0:	4413      	add	r3, r2
  4041b2:	f004 0403 	and.w	r4, r4, #3
  4041b6:	b12c      	cbz	r4, 4041c4 <memset+0x90>
  4041b8:	b2c9      	uxtb	r1, r1
  4041ba:	441c      	add	r4, r3
  4041bc:	f803 1b01 	strb.w	r1, [r3], #1
  4041c0:	429c      	cmp	r4, r3
  4041c2:	d1fb      	bne.n	4041bc <memset+0x88>
  4041c4:	bc70      	pop	{r4, r5, r6}
  4041c6:	4770      	bx	lr
  4041c8:	4614      	mov	r4, r2
  4041ca:	4603      	mov	r3, r0
  4041cc:	e7c2      	b.n	404154 <memset+0x20>
  4041ce:	bf00      	nop

004041d0 <__malloc_lock>:
  4041d0:	4801      	ldr	r0, [pc, #4]	; (4041d8 <__malloc_lock+0x8>)
  4041d2:	f004 b955 	b.w	408480 <__retarget_lock_acquire_recursive>
  4041d6:	bf00      	nop
  4041d8:	20400d44 	.word	0x20400d44

004041dc <__malloc_unlock>:
  4041dc:	4801      	ldr	r0, [pc, #4]	; (4041e4 <__malloc_unlock+0x8>)
  4041de:	f004 b951 	b.w	408484 <__retarget_lock_release_recursive>
  4041e2:	bf00      	nop
  4041e4:	20400d44 	.word	0x20400d44

004041e8 <_sbrk_r>:
  4041e8:	b538      	push	{r3, r4, r5, lr}
  4041ea:	4c07      	ldr	r4, [pc, #28]	; (404208 <_sbrk_r+0x20>)
  4041ec:	2300      	movs	r3, #0
  4041ee:	4605      	mov	r5, r0
  4041f0:	4608      	mov	r0, r1
  4041f2:	6023      	str	r3, [r4, #0]
  4041f4:	f7fc fe82 	bl	400efc <_sbrk>
  4041f8:	1c43      	adds	r3, r0, #1
  4041fa:	d000      	beq.n	4041fe <_sbrk_r+0x16>
  4041fc:	bd38      	pop	{r3, r4, r5, pc}
  4041fe:	6823      	ldr	r3, [r4, #0]
  404200:	2b00      	cmp	r3, #0
  404202:	d0fb      	beq.n	4041fc <_sbrk_r+0x14>
  404204:	602b      	str	r3, [r5, #0]
  404206:	bd38      	pop	{r3, r4, r5, pc}
  404208:	20400d58 	.word	0x20400d58

0040420c <setbuf>:
  40420c:	2900      	cmp	r1, #0
  40420e:	bf0c      	ite	eq
  404210:	2202      	moveq	r2, #2
  404212:	2200      	movne	r2, #0
  404214:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404218:	f000 b800 	b.w	40421c <setvbuf>

0040421c <setvbuf>:
  40421c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404220:	4c61      	ldr	r4, [pc, #388]	; (4043a8 <setvbuf+0x18c>)
  404222:	6825      	ldr	r5, [r4, #0]
  404224:	b083      	sub	sp, #12
  404226:	4604      	mov	r4, r0
  404228:	460f      	mov	r7, r1
  40422a:	4690      	mov	r8, r2
  40422c:	461e      	mov	r6, r3
  40422e:	b115      	cbz	r5, 404236 <setvbuf+0x1a>
  404230:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404232:	2b00      	cmp	r3, #0
  404234:	d064      	beq.n	404300 <setvbuf+0xe4>
  404236:	f1b8 0f02 	cmp.w	r8, #2
  40423a:	d006      	beq.n	40424a <setvbuf+0x2e>
  40423c:	f1b8 0f01 	cmp.w	r8, #1
  404240:	f200 809f 	bhi.w	404382 <setvbuf+0x166>
  404244:	2e00      	cmp	r6, #0
  404246:	f2c0 809c 	blt.w	404382 <setvbuf+0x166>
  40424a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40424c:	07d8      	lsls	r0, r3, #31
  40424e:	d534      	bpl.n	4042ba <setvbuf+0x9e>
  404250:	4621      	mov	r1, r4
  404252:	4628      	mov	r0, r5
  404254:	f003 fcee 	bl	407c34 <_fflush_r>
  404258:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40425a:	b141      	cbz	r1, 40426e <setvbuf+0x52>
  40425c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404260:	4299      	cmp	r1, r3
  404262:	d002      	beq.n	40426a <setvbuf+0x4e>
  404264:	4628      	mov	r0, r5
  404266:	f003 fe63 	bl	407f30 <_free_r>
  40426a:	2300      	movs	r3, #0
  40426c:	6323      	str	r3, [r4, #48]	; 0x30
  40426e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404272:	2200      	movs	r2, #0
  404274:	61a2      	str	r2, [r4, #24]
  404276:	6062      	str	r2, [r4, #4]
  404278:	061a      	lsls	r2, r3, #24
  40427a:	d43a      	bmi.n	4042f2 <setvbuf+0xd6>
  40427c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404280:	f023 0303 	bic.w	r3, r3, #3
  404284:	f1b8 0f02 	cmp.w	r8, #2
  404288:	81a3      	strh	r3, [r4, #12]
  40428a:	d01d      	beq.n	4042c8 <setvbuf+0xac>
  40428c:	ab01      	add	r3, sp, #4
  40428e:	466a      	mov	r2, sp
  404290:	4621      	mov	r1, r4
  404292:	4628      	mov	r0, r5
  404294:	f004 f8f8 	bl	408488 <__swhatbuf_r>
  404298:	89a3      	ldrh	r3, [r4, #12]
  40429a:	4318      	orrs	r0, r3
  40429c:	81a0      	strh	r0, [r4, #12]
  40429e:	2e00      	cmp	r6, #0
  4042a0:	d132      	bne.n	404308 <setvbuf+0xec>
  4042a2:	9e00      	ldr	r6, [sp, #0]
  4042a4:	4630      	mov	r0, r6
  4042a6:	f7ff fbeb 	bl	403a80 <malloc>
  4042aa:	4607      	mov	r7, r0
  4042ac:	2800      	cmp	r0, #0
  4042ae:	d06b      	beq.n	404388 <setvbuf+0x16c>
  4042b0:	89a3      	ldrh	r3, [r4, #12]
  4042b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042b6:	81a3      	strh	r3, [r4, #12]
  4042b8:	e028      	b.n	40430c <setvbuf+0xf0>
  4042ba:	89a3      	ldrh	r3, [r4, #12]
  4042bc:	0599      	lsls	r1, r3, #22
  4042be:	d4c7      	bmi.n	404250 <setvbuf+0x34>
  4042c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4042c2:	f004 f8dd 	bl	408480 <__retarget_lock_acquire_recursive>
  4042c6:	e7c3      	b.n	404250 <setvbuf+0x34>
  4042c8:	2500      	movs	r5, #0
  4042ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4042cc:	2600      	movs	r6, #0
  4042ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4042d2:	f043 0302 	orr.w	r3, r3, #2
  4042d6:	2001      	movs	r0, #1
  4042d8:	60a6      	str	r6, [r4, #8]
  4042da:	07ce      	lsls	r6, r1, #31
  4042dc:	81a3      	strh	r3, [r4, #12]
  4042de:	6022      	str	r2, [r4, #0]
  4042e0:	6122      	str	r2, [r4, #16]
  4042e2:	6160      	str	r0, [r4, #20]
  4042e4:	d401      	bmi.n	4042ea <setvbuf+0xce>
  4042e6:	0598      	lsls	r0, r3, #22
  4042e8:	d53e      	bpl.n	404368 <setvbuf+0x14c>
  4042ea:	4628      	mov	r0, r5
  4042ec:	b003      	add	sp, #12
  4042ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042f2:	6921      	ldr	r1, [r4, #16]
  4042f4:	4628      	mov	r0, r5
  4042f6:	f003 fe1b 	bl	407f30 <_free_r>
  4042fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042fe:	e7bd      	b.n	40427c <setvbuf+0x60>
  404300:	4628      	mov	r0, r5
  404302:	f003 fcef 	bl	407ce4 <__sinit>
  404306:	e796      	b.n	404236 <setvbuf+0x1a>
  404308:	2f00      	cmp	r7, #0
  40430a:	d0cb      	beq.n	4042a4 <setvbuf+0x88>
  40430c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40430e:	2b00      	cmp	r3, #0
  404310:	d033      	beq.n	40437a <setvbuf+0x15e>
  404312:	9b00      	ldr	r3, [sp, #0]
  404314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404318:	6027      	str	r7, [r4, #0]
  40431a:	429e      	cmp	r6, r3
  40431c:	bf1c      	itt	ne
  40431e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404322:	81a2      	strhne	r2, [r4, #12]
  404324:	f1b8 0f01 	cmp.w	r8, #1
  404328:	bf04      	itt	eq
  40432a:	f042 0201 	orreq.w	r2, r2, #1
  40432e:	81a2      	strheq	r2, [r4, #12]
  404330:	b292      	uxth	r2, r2
  404332:	f012 0308 	ands.w	r3, r2, #8
  404336:	6127      	str	r7, [r4, #16]
  404338:	6166      	str	r6, [r4, #20]
  40433a:	d00e      	beq.n	40435a <setvbuf+0x13e>
  40433c:	07d1      	lsls	r1, r2, #31
  40433e:	d51a      	bpl.n	404376 <setvbuf+0x15a>
  404340:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404342:	4276      	negs	r6, r6
  404344:	2300      	movs	r3, #0
  404346:	f015 0501 	ands.w	r5, r5, #1
  40434a:	61a6      	str	r6, [r4, #24]
  40434c:	60a3      	str	r3, [r4, #8]
  40434e:	d009      	beq.n	404364 <setvbuf+0x148>
  404350:	2500      	movs	r5, #0
  404352:	4628      	mov	r0, r5
  404354:	b003      	add	sp, #12
  404356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40435a:	60a3      	str	r3, [r4, #8]
  40435c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40435e:	f015 0501 	ands.w	r5, r5, #1
  404362:	d1f5      	bne.n	404350 <setvbuf+0x134>
  404364:	0593      	lsls	r3, r2, #22
  404366:	d4c0      	bmi.n	4042ea <setvbuf+0xce>
  404368:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40436a:	f004 f88b 	bl	408484 <__retarget_lock_release_recursive>
  40436e:	4628      	mov	r0, r5
  404370:	b003      	add	sp, #12
  404372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404376:	60a6      	str	r6, [r4, #8]
  404378:	e7f0      	b.n	40435c <setvbuf+0x140>
  40437a:	4628      	mov	r0, r5
  40437c:	f003 fcb2 	bl	407ce4 <__sinit>
  404380:	e7c7      	b.n	404312 <setvbuf+0xf6>
  404382:	f04f 35ff 	mov.w	r5, #4294967295
  404386:	e7b0      	b.n	4042ea <setvbuf+0xce>
  404388:	f8dd 9000 	ldr.w	r9, [sp]
  40438c:	45b1      	cmp	r9, r6
  40438e:	d004      	beq.n	40439a <setvbuf+0x17e>
  404390:	4648      	mov	r0, r9
  404392:	f7ff fb75 	bl	403a80 <malloc>
  404396:	4607      	mov	r7, r0
  404398:	b920      	cbnz	r0, 4043a4 <setvbuf+0x188>
  40439a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40439e:	f04f 35ff 	mov.w	r5, #4294967295
  4043a2:	e792      	b.n	4042ca <setvbuf+0xae>
  4043a4:	464e      	mov	r6, r9
  4043a6:	e783      	b.n	4042b0 <setvbuf+0x94>
  4043a8:	2040000c 	.word	0x2040000c

004043ac <sprintf>:
  4043ac:	b40e      	push	{r1, r2, r3}
  4043ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  4043b0:	b09c      	sub	sp, #112	; 0x70
  4043b2:	ab21      	add	r3, sp, #132	; 0x84
  4043b4:	490f      	ldr	r1, [pc, #60]	; (4043f4 <sprintf+0x48>)
  4043b6:	f853 2b04 	ldr.w	r2, [r3], #4
  4043ba:	9301      	str	r3, [sp, #4]
  4043bc:	4605      	mov	r5, r0
  4043be:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4043c2:	6808      	ldr	r0, [r1, #0]
  4043c4:	9502      	str	r5, [sp, #8]
  4043c6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4043ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4043ce:	a902      	add	r1, sp, #8
  4043d0:	9506      	str	r5, [sp, #24]
  4043d2:	f8ad 7014 	strh.w	r7, [sp, #20]
  4043d6:	9404      	str	r4, [sp, #16]
  4043d8:	9407      	str	r4, [sp, #28]
  4043da:	f8ad 6016 	strh.w	r6, [sp, #22]
  4043de:	f000 fa5d 	bl	40489c <_svfprintf_r>
  4043e2:	9b02      	ldr	r3, [sp, #8]
  4043e4:	2200      	movs	r2, #0
  4043e6:	701a      	strb	r2, [r3, #0]
  4043e8:	b01c      	add	sp, #112	; 0x70
  4043ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4043ee:	b003      	add	sp, #12
  4043f0:	4770      	bx	lr
  4043f2:	bf00      	nop
  4043f4:	2040000c 	.word	0x2040000c
	...
  404400:	eba2 0003 	sub.w	r0, r2, r3
  404404:	4770      	bx	lr
  404406:	bf00      	nop

00404408 <strcmp>:
  404408:	7802      	ldrb	r2, [r0, #0]
  40440a:	780b      	ldrb	r3, [r1, #0]
  40440c:	2a01      	cmp	r2, #1
  40440e:	bf28      	it	cs
  404410:	429a      	cmpcs	r2, r3
  404412:	d1f5      	bne.n	404400 <sprintf+0x54>
  404414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  404418:	ea40 0401 	orr.w	r4, r0, r1
  40441c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404420:	f06f 0c00 	mvn.w	ip, #0
  404424:	ea4f 7244 	mov.w	r2, r4, lsl #29
  404428:	b312      	cbz	r2, 404470 <strcmp+0x68>
  40442a:	ea80 0401 	eor.w	r4, r0, r1
  40442e:	f014 0f07 	tst.w	r4, #7
  404432:	d16a      	bne.n	40450a <strcmp+0x102>
  404434:	f000 0407 	and.w	r4, r0, #7
  404438:	f020 0007 	bic.w	r0, r0, #7
  40443c:	f004 0503 	and.w	r5, r4, #3
  404440:	f021 0107 	bic.w	r1, r1, #7
  404444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40444c:	f014 0f04 	tst.w	r4, #4
  404450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404454:	fa0c f405 	lsl.w	r4, ip, r5
  404458:	ea62 0204 	orn	r2, r2, r4
  40445c:	ea66 0604 	orn	r6, r6, r4
  404460:	d00a      	beq.n	404478 <strcmp+0x70>
  404462:	ea63 0304 	orn	r3, r3, r4
  404466:	4662      	mov	r2, ip
  404468:	ea67 0704 	orn	r7, r7, r4
  40446c:	4666      	mov	r6, ip
  40446e:	e003      	b.n	404478 <strcmp+0x70>
  404470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  404474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404478:	fa82 f54c 	uadd8	r5, r2, ip
  40447c:	ea82 0406 	eor.w	r4, r2, r6
  404480:	faa4 f48c 	sel	r4, r4, ip
  404484:	bb6c      	cbnz	r4, 4044e2 <strcmp+0xda>
  404486:	fa83 f54c 	uadd8	r5, r3, ip
  40448a:	ea83 0507 	eor.w	r5, r3, r7
  40448e:	faa5 f58c 	sel	r5, r5, ip
  404492:	b995      	cbnz	r5, 4044ba <strcmp+0xb2>
  404494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  404498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40449c:	fa82 f54c 	uadd8	r5, r2, ip
  4044a0:	ea82 0406 	eor.w	r4, r2, r6
  4044a4:	faa4 f48c 	sel	r4, r4, ip
  4044a8:	fa83 f54c 	uadd8	r5, r3, ip
  4044ac:	ea83 0507 	eor.w	r5, r3, r7
  4044b0:	faa5 f58c 	sel	r5, r5, ip
  4044b4:	4325      	orrs	r5, r4
  4044b6:	d0db      	beq.n	404470 <strcmp+0x68>
  4044b8:	b99c      	cbnz	r4, 4044e2 <strcmp+0xda>
  4044ba:	ba2d      	rev	r5, r5
  4044bc:	fab5 f485 	clz	r4, r5
  4044c0:	f024 0407 	bic.w	r4, r4, #7
  4044c4:	fa27 f104 	lsr.w	r1, r7, r4
  4044c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4044cc:	fa23 f304 	lsr.w	r3, r3, r4
  4044d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4044d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4044d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4044dc:	eba0 0001 	sub.w	r0, r0, r1
  4044e0:	4770      	bx	lr
  4044e2:	ba24      	rev	r4, r4
  4044e4:	fab4 f484 	clz	r4, r4
  4044e8:	f024 0407 	bic.w	r4, r4, #7
  4044ec:	fa26 f104 	lsr.w	r1, r6, r4
  4044f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4044f4:	fa22 f204 	lsr.w	r2, r2, r4
  4044f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4044fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404504:	eba0 0001 	sub.w	r0, r0, r1
  404508:	4770      	bx	lr
  40450a:	f014 0f03 	tst.w	r4, #3
  40450e:	d13c      	bne.n	40458a <strcmp+0x182>
  404510:	f010 0403 	ands.w	r4, r0, #3
  404514:	d128      	bne.n	404568 <strcmp+0x160>
  404516:	f850 2b08 	ldr.w	r2, [r0], #8
  40451a:	f851 3b08 	ldr.w	r3, [r1], #8
  40451e:	fa82 f54c 	uadd8	r5, r2, ip
  404522:	ea82 0503 	eor.w	r5, r2, r3
  404526:	faa5 f58c 	sel	r5, r5, ip
  40452a:	b95d      	cbnz	r5, 404544 <strcmp+0x13c>
  40452c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  404530:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404534:	fa82 f54c 	uadd8	r5, r2, ip
  404538:	ea82 0503 	eor.w	r5, r2, r3
  40453c:	faa5 f58c 	sel	r5, r5, ip
  404540:	2d00      	cmp	r5, #0
  404542:	d0e8      	beq.n	404516 <strcmp+0x10e>
  404544:	ba2d      	rev	r5, r5
  404546:	fab5 f485 	clz	r4, r5
  40454a:	f024 0407 	bic.w	r4, r4, #7
  40454e:	fa23 f104 	lsr.w	r1, r3, r4
  404552:	fa22 f204 	lsr.w	r2, r2, r4
  404556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40455a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40455e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404562:	eba0 0001 	sub.w	r0, r0, r1
  404566:	4770      	bx	lr
  404568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40456c:	f020 0003 	bic.w	r0, r0, #3
  404570:	f850 2b08 	ldr.w	r2, [r0], #8
  404574:	f021 0103 	bic.w	r1, r1, #3
  404578:	f851 3b08 	ldr.w	r3, [r1], #8
  40457c:	fa0c f404 	lsl.w	r4, ip, r4
  404580:	ea62 0204 	orn	r2, r2, r4
  404584:	ea63 0304 	orn	r3, r3, r4
  404588:	e7c9      	b.n	40451e <strcmp+0x116>
  40458a:	f010 0403 	ands.w	r4, r0, #3
  40458e:	d01a      	beq.n	4045c6 <strcmp+0x1be>
  404590:	eba1 0104 	sub.w	r1, r1, r4
  404594:	f020 0003 	bic.w	r0, r0, #3
  404598:	07e4      	lsls	r4, r4, #31
  40459a:	f850 2b04 	ldr.w	r2, [r0], #4
  40459e:	d006      	beq.n	4045ae <strcmp+0x1a6>
  4045a0:	d20f      	bcs.n	4045c2 <strcmp+0x1ba>
  4045a2:	788b      	ldrb	r3, [r1, #2]
  4045a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4045a8:	1ae4      	subs	r4, r4, r3
  4045aa:	d106      	bne.n	4045ba <strcmp+0x1b2>
  4045ac:	b12b      	cbz	r3, 4045ba <strcmp+0x1b2>
  4045ae:	78cb      	ldrb	r3, [r1, #3]
  4045b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4045b4:	1ae4      	subs	r4, r4, r3
  4045b6:	d100      	bne.n	4045ba <strcmp+0x1b2>
  4045b8:	b91b      	cbnz	r3, 4045c2 <strcmp+0x1ba>
  4045ba:	4620      	mov	r0, r4
  4045bc:	f85d 4b10 	ldr.w	r4, [sp], #16
  4045c0:	4770      	bx	lr
  4045c2:	f101 0104 	add.w	r1, r1, #4
  4045c6:	f850 2b04 	ldr.w	r2, [r0], #4
  4045ca:	07cc      	lsls	r4, r1, #31
  4045cc:	f021 0103 	bic.w	r1, r1, #3
  4045d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d4:	d848      	bhi.n	404668 <strcmp+0x260>
  4045d6:	d224      	bcs.n	404622 <strcmp+0x21a>
  4045d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4045dc:	fa82 f54c 	uadd8	r5, r2, ip
  4045e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  4045e4:	faa5 f58c 	sel	r5, r5, ip
  4045e8:	d10a      	bne.n	404600 <strcmp+0x1f8>
  4045ea:	b965      	cbnz	r5, 404606 <strcmp+0x1fe>
  4045ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f0:	ea84 0402 	eor.w	r4, r4, r2
  4045f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  4045f8:	d10e      	bne.n	404618 <strcmp+0x210>
  4045fa:	f850 2b04 	ldr.w	r2, [r0], #4
  4045fe:	e7eb      	b.n	4045d8 <strcmp+0x1d0>
  404600:	ea4f 2313 	mov.w	r3, r3, lsr #8
  404604:	e055      	b.n	4046b2 <strcmp+0x2aa>
  404606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40460a:	d14d      	bne.n	4046a8 <strcmp+0x2a0>
  40460c:	7808      	ldrb	r0, [r1, #0]
  40460e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404612:	f1c0 0000 	rsb	r0, r0, #0
  404616:	4770      	bx	lr
  404618:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40461c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  404620:	e047      	b.n	4046b2 <strcmp+0x2aa>
  404622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  404626:	fa82 f54c 	uadd8	r5, r2, ip
  40462a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40462e:	faa5 f58c 	sel	r5, r5, ip
  404632:	d10a      	bne.n	40464a <strcmp+0x242>
  404634:	b965      	cbnz	r5, 404650 <strcmp+0x248>
  404636:	f851 3b04 	ldr.w	r3, [r1], #4
  40463a:	ea84 0402 	eor.w	r4, r4, r2
  40463e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  404642:	d10c      	bne.n	40465e <strcmp+0x256>
  404644:	f850 2b04 	ldr.w	r2, [r0], #4
  404648:	e7eb      	b.n	404622 <strcmp+0x21a>
  40464a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40464e:	e030      	b.n	4046b2 <strcmp+0x2aa>
  404650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  404654:	d128      	bne.n	4046a8 <strcmp+0x2a0>
  404656:	880b      	ldrh	r3, [r1, #0]
  404658:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40465c:	e029      	b.n	4046b2 <strcmp+0x2aa>
  40465e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  404662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  404666:	e024      	b.n	4046b2 <strcmp+0x2aa>
  404668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40466c:	fa82 f54c 	uadd8	r5, r2, ip
  404670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  404674:	faa5 f58c 	sel	r5, r5, ip
  404678:	d10a      	bne.n	404690 <strcmp+0x288>
  40467a:	b965      	cbnz	r5, 404696 <strcmp+0x28e>
  40467c:	f851 3b04 	ldr.w	r3, [r1], #4
  404680:	ea84 0402 	eor.w	r4, r4, r2
  404684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  404688:	d109      	bne.n	40469e <strcmp+0x296>
  40468a:	f850 2b04 	ldr.w	r2, [r0], #4
  40468e:	e7eb      	b.n	404668 <strcmp+0x260>
  404690:	ea4f 6313 	mov.w	r3, r3, lsr #24
  404694:	e00d      	b.n	4046b2 <strcmp+0x2aa>
  404696:	f015 0fff 	tst.w	r5, #255	; 0xff
  40469a:	d105      	bne.n	4046a8 <strcmp+0x2a0>
  40469c:	680b      	ldr	r3, [r1, #0]
  40469e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4046a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4046a6:	e004      	b.n	4046b2 <strcmp+0x2aa>
  4046a8:	f04f 0000 	mov.w	r0, #0
  4046ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4046b0:	4770      	bx	lr
  4046b2:	ba12      	rev	r2, r2
  4046b4:	ba1b      	rev	r3, r3
  4046b6:	fa82 f44c 	uadd8	r4, r2, ip
  4046ba:	ea82 0403 	eor.w	r4, r2, r3
  4046be:	faa4 f58c 	sel	r5, r4, ip
  4046c2:	fab5 f485 	clz	r4, r5
  4046c6:	fa02 f204 	lsl.w	r2, r2, r4
  4046ca:	fa03 f304 	lsl.w	r3, r3, r4
  4046ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4046d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4046d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4046da:	4770      	bx	lr

004046dc <strcpy>:
  4046dc:	ea80 0201 	eor.w	r2, r0, r1
  4046e0:	4684      	mov	ip, r0
  4046e2:	f012 0f03 	tst.w	r2, #3
  4046e6:	d14f      	bne.n	404788 <strcpy+0xac>
  4046e8:	f011 0f03 	tst.w	r1, #3
  4046ec:	d132      	bne.n	404754 <strcpy+0x78>
  4046ee:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4046f2:	f011 0f04 	tst.w	r1, #4
  4046f6:	f851 3b04 	ldr.w	r3, [r1], #4
  4046fa:	d00b      	beq.n	404714 <strcpy+0x38>
  4046fc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404700:	439a      	bics	r2, r3
  404702:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404706:	bf04      	itt	eq
  404708:	f84c 3b04 	streq.w	r3, [ip], #4
  40470c:	f851 3b04 	ldreq.w	r3, [r1], #4
  404710:	d116      	bne.n	404740 <strcpy+0x64>
  404712:	bf00      	nop
  404714:	f851 4b04 	ldr.w	r4, [r1], #4
  404718:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40471c:	439a      	bics	r2, r3
  40471e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404722:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  404726:	d10b      	bne.n	404740 <strcpy+0x64>
  404728:	f84c 3b04 	str.w	r3, [ip], #4
  40472c:	43a2      	bics	r2, r4
  40472e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404732:	bf04      	itt	eq
  404734:	f851 3b04 	ldreq.w	r3, [r1], #4
  404738:	f84c 4b04 	streq.w	r4, [ip], #4
  40473c:	d0ea      	beq.n	404714 <strcpy+0x38>
  40473e:	4623      	mov	r3, r4
  404740:	f80c 3b01 	strb.w	r3, [ip], #1
  404744:	f013 0fff 	tst.w	r3, #255	; 0xff
  404748:	ea4f 2333 	mov.w	r3, r3, ror #8
  40474c:	d1f8      	bne.n	404740 <strcpy+0x64>
  40474e:	f85d 4b04 	ldr.w	r4, [sp], #4
  404752:	4770      	bx	lr
  404754:	f011 0f01 	tst.w	r1, #1
  404758:	d006      	beq.n	404768 <strcpy+0x8c>
  40475a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40475e:	f80c 2b01 	strb.w	r2, [ip], #1
  404762:	2a00      	cmp	r2, #0
  404764:	bf08      	it	eq
  404766:	4770      	bxeq	lr
  404768:	f011 0f02 	tst.w	r1, #2
  40476c:	d0bf      	beq.n	4046ee <strcpy+0x12>
  40476e:	f831 2b02 	ldrh.w	r2, [r1], #2
  404772:	f012 0fff 	tst.w	r2, #255	; 0xff
  404776:	bf16      	itet	ne
  404778:	f82c 2b02 	strhne.w	r2, [ip], #2
  40477c:	f88c 2000 	strbeq.w	r2, [ip]
  404780:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  404784:	d1b3      	bne.n	4046ee <strcpy+0x12>
  404786:	4770      	bx	lr
  404788:	f811 2b01 	ldrb.w	r2, [r1], #1
  40478c:	f80c 2b01 	strb.w	r2, [ip], #1
  404790:	2a00      	cmp	r2, #0
  404792:	d1f9      	bne.n	404788 <strcpy+0xac>
  404794:	4770      	bx	lr
  404796:	bf00      	nop
	...

004047c0 <strlen>:
  4047c0:	f890 f000 	pld	[r0]
  4047c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4047c8:	f020 0107 	bic.w	r1, r0, #7
  4047cc:	f06f 0c00 	mvn.w	ip, #0
  4047d0:	f010 0407 	ands.w	r4, r0, #7
  4047d4:	f891 f020 	pld	[r1, #32]
  4047d8:	f040 8049 	bne.w	40486e <strlen+0xae>
  4047dc:	f04f 0400 	mov.w	r4, #0
  4047e0:	f06f 0007 	mvn.w	r0, #7
  4047e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4047e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4047ec:	f100 0008 	add.w	r0, r0, #8
  4047f0:	fa82 f24c 	uadd8	r2, r2, ip
  4047f4:	faa4 f28c 	sel	r2, r4, ip
  4047f8:	fa83 f34c 	uadd8	r3, r3, ip
  4047fc:	faa2 f38c 	sel	r3, r2, ip
  404800:	bb4b      	cbnz	r3, 404856 <strlen+0x96>
  404802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404806:	fa82 f24c 	uadd8	r2, r2, ip
  40480a:	f100 0008 	add.w	r0, r0, #8
  40480e:	faa4 f28c 	sel	r2, r4, ip
  404812:	fa83 f34c 	uadd8	r3, r3, ip
  404816:	faa2 f38c 	sel	r3, r2, ip
  40481a:	b9e3      	cbnz	r3, 404856 <strlen+0x96>
  40481c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404820:	fa82 f24c 	uadd8	r2, r2, ip
  404824:	f100 0008 	add.w	r0, r0, #8
  404828:	faa4 f28c 	sel	r2, r4, ip
  40482c:	fa83 f34c 	uadd8	r3, r3, ip
  404830:	faa2 f38c 	sel	r3, r2, ip
  404834:	b97b      	cbnz	r3, 404856 <strlen+0x96>
  404836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40483a:	f101 0120 	add.w	r1, r1, #32
  40483e:	fa82 f24c 	uadd8	r2, r2, ip
  404842:	f100 0008 	add.w	r0, r0, #8
  404846:	faa4 f28c 	sel	r2, r4, ip
  40484a:	fa83 f34c 	uadd8	r3, r3, ip
  40484e:	faa2 f38c 	sel	r3, r2, ip
  404852:	2b00      	cmp	r3, #0
  404854:	d0c6      	beq.n	4047e4 <strlen+0x24>
  404856:	2a00      	cmp	r2, #0
  404858:	bf04      	itt	eq
  40485a:	3004      	addeq	r0, #4
  40485c:	461a      	moveq	r2, r3
  40485e:	ba12      	rev	r2, r2
  404860:	fab2 f282 	clz	r2, r2
  404864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40486c:	4770      	bx	lr
  40486e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404872:	f004 0503 	and.w	r5, r4, #3
  404876:	f1c4 0000 	rsb	r0, r4, #0
  40487a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40487e:	f014 0f04 	tst.w	r4, #4
  404882:	f891 f040 	pld	[r1, #64]	; 0x40
  404886:	fa0c f505 	lsl.w	r5, ip, r5
  40488a:	ea62 0205 	orn	r2, r2, r5
  40488e:	bf1c      	itt	ne
  404890:	ea63 0305 	ornne	r3, r3, r5
  404894:	4662      	movne	r2, ip
  404896:	f04f 0400 	mov.w	r4, #0
  40489a:	e7a9      	b.n	4047f0 <strlen+0x30>

0040489c <_svfprintf_r>:
  40489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048a0:	b0c3      	sub	sp, #268	; 0x10c
  4048a2:	460c      	mov	r4, r1
  4048a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4048a6:	4692      	mov	sl, r2
  4048a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4048aa:	900c      	str	r0, [sp, #48]	; 0x30
  4048ac:	f003 fdd6 	bl	40845c <_localeconv_r>
  4048b0:	6803      	ldr	r3, [r0, #0]
  4048b2:	931a      	str	r3, [sp, #104]	; 0x68
  4048b4:	4618      	mov	r0, r3
  4048b6:	f7ff ff83 	bl	4047c0 <strlen>
  4048ba:	89a3      	ldrh	r3, [r4, #12]
  4048bc:	9019      	str	r0, [sp, #100]	; 0x64
  4048be:	0619      	lsls	r1, r3, #24
  4048c0:	d503      	bpl.n	4048ca <_svfprintf_r+0x2e>
  4048c2:	6923      	ldr	r3, [r4, #16]
  4048c4:	2b00      	cmp	r3, #0
  4048c6:	f001 8003 	beq.w	4058d0 <_svfprintf_r+0x1034>
  4048ca:	2300      	movs	r3, #0
  4048cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4048d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4048d2:	9315      	str	r3, [sp, #84]	; 0x54
  4048d4:	9314      	str	r3, [sp, #80]	; 0x50
  4048d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4048d8:	9326      	str	r3, [sp, #152]	; 0x98
  4048da:	9318      	str	r3, [sp, #96]	; 0x60
  4048dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4048de:	9309      	str	r3, [sp, #36]	; 0x24
  4048e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4048e4:	46c8      	mov	r8, r9
  4048e6:	9316      	str	r3, [sp, #88]	; 0x58
  4048e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4048ea:	f89a 3000 	ldrb.w	r3, [sl]
  4048ee:	4654      	mov	r4, sl
  4048f0:	b1e3      	cbz	r3, 40492c <_svfprintf_r+0x90>
  4048f2:	2b25      	cmp	r3, #37	; 0x25
  4048f4:	d102      	bne.n	4048fc <_svfprintf_r+0x60>
  4048f6:	e019      	b.n	40492c <_svfprintf_r+0x90>
  4048f8:	2b25      	cmp	r3, #37	; 0x25
  4048fa:	d003      	beq.n	404904 <_svfprintf_r+0x68>
  4048fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404900:	2b00      	cmp	r3, #0
  404902:	d1f9      	bne.n	4048f8 <_svfprintf_r+0x5c>
  404904:	eba4 050a 	sub.w	r5, r4, sl
  404908:	b185      	cbz	r5, 40492c <_svfprintf_r+0x90>
  40490a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40490c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40490e:	f8c8 a000 	str.w	sl, [r8]
  404912:	3301      	adds	r3, #1
  404914:	442a      	add	r2, r5
  404916:	2b07      	cmp	r3, #7
  404918:	f8c8 5004 	str.w	r5, [r8, #4]
  40491c:	9227      	str	r2, [sp, #156]	; 0x9c
  40491e:	9326      	str	r3, [sp, #152]	; 0x98
  404920:	dc7f      	bgt.n	404a22 <_svfprintf_r+0x186>
  404922:	f108 0808 	add.w	r8, r8, #8
  404926:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404928:	442b      	add	r3, r5
  40492a:	9309      	str	r3, [sp, #36]	; 0x24
  40492c:	7823      	ldrb	r3, [r4, #0]
  40492e:	2b00      	cmp	r3, #0
  404930:	d07f      	beq.n	404a32 <_svfprintf_r+0x196>
  404932:	2300      	movs	r3, #0
  404934:	461a      	mov	r2, r3
  404936:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40493a:	4619      	mov	r1, r3
  40493c:	930d      	str	r3, [sp, #52]	; 0x34
  40493e:	469b      	mov	fp, r3
  404940:	f04f 30ff 	mov.w	r0, #4294967295
  404944:	7863      	ldrb	r3, [r4, #1]
  404946:	900a      	str	r0, [sp, #40]	; 0x28
  404948:	f104 0a01 	add.w	sl, r4, #1
  40494c:	f10a 0a01 	add.w	sl, sl, #1
  404950:	f1a3 0020 	sub.w	r0, r3, #32
  404954:	2858      	cmp	r0, #88	; 0x58
  404956:	f200 83c1 	bhi.w	4050dc <_svfprintf_r+0x840>
  40495a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40495e:	0238      	.short	0x0238
  404960:	03bf03bf 	.word	0x03bf03bf
  404964:	03bf0240 	.word	0x03bf0240
  404968:	03bf03bf 	.word	0x03bf03bf
  40496c:	03bf03bf 	.word	0x03bf03bf
  404970:	024503bf 	.word	0x024503bf
  404974:	03bf0203 	.word	0x03bf0203
  404978:	026b005d 	.word	0x026b005d
  40497c:	028603bf 	.word	0x028603bf
  404980:	039d039d 	.word	0x039d039d
  404984:	039d039d 	.word	0x039d039d
  404988:	039d039d 	.word	0x039d039d
  40498c:	039d039d 	.word	0x039d039d
  404990:	03bf039d 	.word	0x03bf039d
  404994:	03bf03bf 	.word	0x03bf03bf
  404998:	03bf03bf 	.word	0x03bf03bf
  40499c:	03bf03bf 	.word	0x03bf03bf
  4049a0:	03bf03bf 	.word	0x03bf03bf
  4049a4:	033703bf 	.word	0x033703bf
  4049a8:	03bf0357 	.word	0x03bf0357
  4049ac:	03bf0357 	.word	0x03bf0357
  4049b0:	03bf03bf 	.word	0x03bf03bf
  4049b4:	039803bf 	.word	0x039803bf
  4049b8:	03bf03bf 	.word	0x03bf03bf
  4049bc:	03bf03ad 	.word	0x03bf03ad
  4049c0:	03bf03bf 	.word	0x03bf03bf
  4049c4:	03bf03bf 	.word	0x03bf03bf
  4049c8:	03bf0259 	.word	0x03bf0259
  4049cc:	031e03bf 	.word	0x031e03bf
  4049d0:	03bf03bf 	.word	0x03bf03bf
  4049d4:	03bf03bf 	.word	0x03bf03bf
  4049d8:	03bf03bf 	.word	0x03bf03bf
  4049dc:	03bf03bf 	.word	0x03bf03bf
  4049e0:	03bf03bf 	.word	0x03bf03bf
  4049e4:	02db02c6 	.word	0x02db02c6
  4049e8:	03570357 	.word	0x03570357
  4049ec:	028b0357 	.word	0x028b0357
  4049f0:	03bf02db 	.word	0x03bf02db
  4049f4:	029003bf 	.word	0x029003bf
  4049f8:	029d03bf 	.word	0x029d03bf
  4049fc:	02b401cc 	.word	0x02b401cc
  404a00:	03bf0208 	.word	0x03bf0208
  404a04:	03bf01e1 	.word	0x03bf01e1
  404a08:	03bf007e 	.word	0x03bf007e
  404a0c:	020d03bf 	.word	0x020d03bf
  404a10:	980d      	ldr	r0, [sp, #52]	; 0x34
  404a12:	930f      	str	r3, [sp, #60]	; 0x3c
  404a14:	4240      	negs	r0, r0
  404a16:	900d      	str	r0, [sp, #52]	; 0x34
  404a18:	f04b 0b04 	orr.w	fp, fp, #4
  404a1c:	f89a 3000 	ldrb.w	r3, [sl]
  404a20:	e794      	b.n	40494c <_svfprintf_r+0xb0>
  404a22:	aa25      	add	r2, sp, #148	; 0x94
  404a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a26:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a28:	f004 fb5a 	bl	4090e0 <__ssprint_r>
  404a2c:	b940      	cbnz	r0, 404a40 <_svfprintf_r+0x1a4>
  404a2e:	46c8      	mov	r8, r9
  404a30:	e779      	b.n	404926 <_svfprintf_r+0x8a>
  404a32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404a34:	b123      	cbz	r3, 404a40 <_svfprintf_r+0x1a4>
  404a36:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a3a:	aa25      	add	r2, sp, #148	; 0x94
  404a3c:	f004 fb50 	bl	4090e0 <__ssprint_r>
  404a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404a42:	899b      	ldrh	r3, [r3, #12]
  404a44:	f013 0f40 	tst.w	r3, #64	; 0x40
  404a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a4a:	bf18      	it	ne
  404a4c:	f04f 33ff 	movne.w	r3, #4294967295
  404a50:	9309      	str	r3, [sp, #36]	; 0x24
  404a52:	9809      	ldr	r0, [sp, #36]	; 0x24
  404a54:	b043      	add	sp, #268	; 0x10c
  404a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a5a:	f01b 0f20 	tst.w	fp, #32
  404a5e:	9311      	str	r3, [sp, #68]	; 0x44
  404a60:	f040 81dd 	bne.w	404e1e <_svfprintf_r+0x582>
  404a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a66:	f01b 0f10 	tst.w	fp, #16
  404a6a:	4613      	mov	r3, r2
  404a6c:	f040 856e 	bne.w	40554c <_svfprintf_r+0xcb0>
  404a70:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404a74:	f000 856a 	beq.w	40554c <_svfprintf_r+0xcb0>
  404a78:	8814      	ldrh	r4, [r2, #0]
  404a7a:	3204      	adds	r2, #4
  404a7c:	2500      	movs	r5, #0
  404a7e:	2301      	movs	r3, #1
  404a80:	920f      	str	r2, [sp, #60]	; 0x3c
  404a82:	2700      	movs	r7, #0
  404a84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404a88:	990a      	ldr	r1, [sp, #40]	; 0x28
  404a8a:	1c4a      	adds	r2, r1, #1
  404a8c:	f000 8265 	beq.w	404f5a <_svfprintf_r+0x6be>
  404a90:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404a94:	9207      	str	r2, [sp, #28]
  404a96:	ea54 0205 	orrs.w	r2, r4, r5
  404a9a:	f040 8264 	bne.w	404f66 <_svfprintf_r+0x6ca>
  404a9e:	2900      	cmp	r1, #0
  404aa0:	f040 843c 	bne.w	40531c <_svfprintf_r+0xa80>
  404aa4:	2b00      	cmp	r3, #0
  404aa6:	f040 84d7 	bne.w	405458 <_svfprintf_r+0xbbc>
  404aaa:	f01b 0301 	ands.w	r3, fp, #1
  404aae:	930e      	str	r3, [sp, #56]	; 0x38
  404ab0:	f000 8604 	beq.w	4056bc <_svfprintf_r+0xe20>
  404ab4:	ae42      	add	r6, sp, #264	; 0x108
  404ab6:	2330      	movs	r3, #48	; 0x30
  404ab8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404ac0:	4293      	cmp	r3, r2
  404ac2:	bfb8      	it	lt
  404ac4:	4613      	movlt	r3, r2
  404ac6:	9308      	str	r3, [sp, #32]
  404ac8:	2300      	movs	r3, #0
  404aca:	9312      	str	r3, [sp, #72]	; 0x48
  404acc:	b117      	cbz	r7, 404ad4 <_svfprintf_r+0x238>
  404ace:	9b08      	ldr	r3, [sp, #32]
  404ad0:	3301      	adds	r3, #1
  404ad2:	9308      	str	r3, [sp, #32]
  404ad4:	9b07      	ldr	r3, [sp, #28]
  404ad6:	f013 0302 	ands.w	r3, r3, #2
  404ada:	9310      	str	r3, [sp, #64]	; 0x40
  404adc:	d002      	beq.n	404ae4 <_svfprintf_r+0x248>
  404ade:	9b08      	ldr	r3, [sp, #32]
  404ae0:	3302      	adds	r3, #2
  404ae2:	9308      	str	r3, [sp, #32]
  404ae4:	9b07      	ldr	r3, [sp, #28]
  404ae6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404aea:	f040 830e 	bne.w	40510a <_svfprintf_r+0x86e>
  404aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404af0:	9a08      	ldr	r2, [sp, #32]
  404af2:	eba3 0b02 	sub.w	fp, r3, r2
  404af6:	f1bb 0f00 	cmp.w	fp, #0
  404afa:	f340 8306 	ble.w	40510a <_svfprintf_r+0x86e>
  404afe:	f1bb 0f10 	cmp.w	fp, #16
  404b02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b04:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b06:	dd29      	ble.n	404b5c <_svfprintf_r+0x2c0>
  404b08:	4643      	mov	r3, r8
  404b0a:	4621      	mov	r1, r4
  404b0c:	46a8      	mov	r8, r5
  404b0e:	2710      	movs	r7, #16
  404b10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404b12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404b14:	e006      	b.n	404b24 <_svfprintf_r+0x288>
  404b16:	f1ab 0b10 	sub.w	fp, fp, #16
  404b1a:	f1bb 0f10 	cmp.w	fp, #16
  404b1e:	f103 0308 	add.w	r3, r3, #8
  404b22:	dd18      	ble.n	404b56 <_svfprintf_r+0x2ba>
  404b24:	3201      	adds	r2, #1
  404b26:	48b7      	ldr	r0, [pc, #732]	; (404e04 <_svfprintf_r+0x568>)
  404b28:	9226      	str	r2, [sp, #152]	; 0x98
  404b2a:	3110      	adds	r1, #16
  404b2c:	2a07      	cmp	r2, #7
  404b2e:	9127      	str	r1, [sp, #156]	; 0x9c
  404b30:	e883 0081 	stmia.w	r3, {r0, r7}
  404b34:	ddef      	ble.n	404b16 <_svfprintf_r+0x27a>
  404b36:	aa25      	add	r2, sp, #148	; 0x94
  404b38:	4629      	mov	r1, r5
  404b3a:	4620      	mov	r0, r4
  404b3c:	f004 fad0 	bl	4090e0 <__ssprint_r>
  404b40:	2800      	cmp	r0, #0
  404b42:	f47f af7d 	bne.w	404a40 <_svfprintf_r+0x1a4>
  404b46:	f1ab 0b10 	sub.w	fp, fp, #16
  404b4a:	f1bb 0f10 	cmp.w	fp, #16
  404b4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404b50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b52:	464b      	mov	r3, r9
  404b54:	dce6      	bgt.n	404b24 <_svfprintf_r+0x288>
  404b56:	4645      	mov	r5, r8
  404b58:	460c      	mov	r4, r1
  404b5a:	4698      	mov	r8, r3
  404b5c:	3201      	adds	r2, #1
  404b5e:	4ba9      	ldr	r3, [pc, #676]	; (404e04 <_svfprintf_r+0x568>)
  404b60:	9226      	str	r2, [sp, #152]	; 0x98
  404b62:	445c      	add	r4, fp
  404b64:	2a07      	cmp	r2, #7
  404b66:	9427      	str	r4, [sp, #156]	; 0x9c
  404b68:	e888 0808 	stmia.w	r8, {r3, fp}
  404b6c:	f300 8498 	bgt.w	4054a0 <_svfprintf_r+0xc04>
  404b70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404b74:	f108 0808 	add.w	r8, r8, #8
  404b78:	b177      	cbz	r7, 404b98 <_svfprintf_r+0x2fc>
  404b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b7c:	3301      	adds	r3, #1
  404b7e:	3401      	adds	r4, #1
  404b80:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404b84:	2201      	movs	r2, #1
  404b86:	2b07      	cmp	r3, #7
  404b88:	9427      	str	r4, [sp, #156]	; 0x9c
  404b8a:	9326      	str	r3, [sp, #152]	; 0x98
  404b8c:	e888 0006 	stmia.w	r8, {r1, r2}
  404b90:	f300 83db 	bgt.w	40534a <_svfprintf_r+0xaae>
  404b94:	f108 0808 	add.w	r8, r8, #8
  404b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404b9a:	b16b      	cbz	r3, 404bb8 <_svfprintf_r+0x31c>
  404b9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b9e:	3301      	adds	r3, #1
  404ba0:	3402      	adds	r4, #2
  404ba2:	a91e      	add	r1, sp, #120	; 0x78
  404ba4:	2202      	movs	r2, #2
  404ba6:	2b07      	cmp	r3, #7
  404ba8:	9427      	str	r4, [sp, #156]	; 0x9c
  404baa:	9326      	str	r3, [sp, #152]	; 0x98
  404bac:	e888 0006 	stmia.w	r8, {r1, r2}
  404bb0:	f300 83d6 	bgt.w	405360 <_svfprintf_r+0xac4>
  404bb4:	f108 0808 	add.w	r8, r8, #8
  404bb8:	2d80      	cmp	r5, #128	; 0x80
  404bba:	f000 8315 	beq.w	4051e8 <_svfprintf_r+0x94c>
  404bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404bc2:	1a9f      	subs	r7, r3, r2
  404bc4:	2f00      	cmp	r7, #0
  404bc6:	dd36      	ble.n	404c36 <_svfprintf_r+0x39a>
  404bc8:	2f10      	cmp	r7, #16
  404bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bcc:	4d8e      	ldr	r5, [pc, #568]	; (404e08 <_svfprintf_r+0x56c>)
  404bce:	dd27      	ble.n	404c20 <_svfprintf_r+0x384>
  404bd0:	4642      	mov	r2, r8
  404bd2:	4621      	mov	r1, r4
  404bd4:	46b0      	mov	r8, r6
  404bd6:	f04f 0b10 	mov.w	fp, #16
  404bda:	462e      	mov	r6, r5
  404bdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404bde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404be0:	e004      	b.n	404bec <_svfprintf_r+0x350>
  404be2:	3f10      	subs	r7, #16
  404be4:	2f10      	cmp	r7, #16
  404be6:	f102 0208 	add.w	r2, r2, #8
  404bea:	dd15      	ble.n	404c18 <_svfprintf_r+0x37c>
  404bec:	3301      	adds	r3, #1
  404bee:	3110      	adds	r1, #16
  404bf0:	2b07      	cmp	r3, #7
  404bf2:	9127      	str	r1, [sp, #156]	; 0x9c
  404bf4:	9326      	str	r3, [sp, #152]	; 0x98
  404bf6:	e882 0840 	stmia.w	r2, {r6, fp}
  404bfa:	ddf2      	ble.n	404be2 <_svfprintf_r+0x346>
  404bfc:	aa25      	add	r2, sp, #148	; 0x94
  404bfe:	4629      	mov	r1, r5
  404c00:	4620      	mov	r0, r4
  404c02:	f004 fa6d 	bl	4090e0 <__ssprint_r>
  404c06:	2800      	cmp	r0, #0
  404c08:	f47f af1a 	bne.w	404a40 <_svfprintf_r+0x1a4>
  404c0c:	3f10      	subs	r7, #16
  404c0e:	2f10      	cmp	r7, #16
  404c10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404c12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c14:	464a      	mov	r2, r9
  404c16:	dce9      	bgt.n	404bec <_svfprintf_r+0x350>
  404c18:	4635      	mov	r5, r6
  404c1a:	460c      	mov	r4, r1
  404c1c:	4646      	mov	r6, r8
  404c1e:	4690      	mov	r8, r2
  404c20:	3301      	adds	r3, #1
  404c22:	443c      	add	r4, r7
  404c24:	2b07      	cmp	r3, #7
  404c26:	9427      	str	r4, [sp, #156]	; 0x9c
  404c28:	9326      	str	r3, [sp, #152]	; 0x98
  404c2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c2e:	f300 8381 	bgt.w	405334 <_svfprintf_r+0xa98>
  404c32:	f108 0808 	add.w	r8, r8, #8
  404c36:	9b07      	ldr	r3, [sp, #28]
  404c38:	05df      	lsls	r7, r3, #23
  404c3a:	f100 8268 	bmi.w	40510e <_svfprintf_r+0x872>
  404c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c40:	990e      	ldr	r1, [sp, #56]	; 0x38
  404c42:	f8c8 6000 	str.w	r6, [r8]
  404c46:	3301      	adds	r3, #1
  404c48:	440c      	add	r4, r1
  404c4a:	2b07      	cmp	r3, #7
  404c4c:	9427      	str	r4, [sp, #156]	; 0x9c
  404c4e:	f8c8 1004 	str.w	r1, [r8, #4]
  404c52:	9326      	str	r3, [sp, #152]	; 0x98
  404c54:	f300 834d 	bgt.w	4052f2 <_svfprintf_r+0xa56>
  404c58:	f108 0808 	add.w	r8, r8, #8
  404c5c:	9b07      	ldr	r3, [sp, #28]
  404c5e:	075b      	lsls	r3, r3, #29
  404c60:	d53a      	bpl.n	404cd8 <_svfprintf_r+0x43c>
  404c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404c64:	9a08      	ldr	r2, [sp, #32]
  404c66:	1a9d      	subs	r5, r3, r2
  404c68:	2d00      	cmp	r5, #0
  404c6a:	dd35      	ble.n	404cd8 <_svfprintf_r+0x43c>
  404c6c:	2d10      	cmp	r5, #16
  404c6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c70:	dd20      	ble.n	404cb4 <_svfprintf_r+0x418>
  404c72:	2610      	movs	r6, #16
  404c74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404c76:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404c7a:	e004      	b.n	404c86 <_svfprintf_r+0x3ea>
  404c7c:	3d10      	subs	r5, #16
  404c7e:	2d10      	cmp	r5, #16
  404c80:	f108 0808 	add.w	r8, r8, #8
  404c84:	dd16      	ble.n	404cb4 <_svfprintf_r+0x418>
  404c86:	3301      	adds	r3, #1
  404c88:	4a5e      	ldr	r2, [pc, #376]	; (404e04 <_svfprintf_r+0x568>)
  404c8a:	9326      	str	r3, [sp, #152]	; 0x98
  404c8c:	3410      	adds	r4, #16
  404c8e:	2b07      	cmp	r3, #7
  404c90:	9427      	str	r4, [sp, #156]	; 0x9c
  404c92:	e888 0044 	stmia.w	r8, {r2, r6}
  404c96:	ddf1      	ble.n	404c7c <_svfprintf_r+0x3e0>
  404c98:	aa25      	add	r2, sp, #148	; 0x94
  404c9a:	4659      	mov	r1, fp
  404c9c:	4638      	mov	r0, r7
  404c9e:	f004 fa1f 	bl	4090e0 <__ssprint_r>
  404ca2:	2800      	cmp	r0, #0
  404ca4:	f47f aecc 	bne.w	404a40 <_svfprintf_r+0x1a4>
  404ca8:	3d10      	subs	r5, #16
  404caa:	2d10      	cmp	r5, #16
  404cac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cb0:	46c8      	mov	r8, r9
  404cb2:	dce8      	bgt.n	404c86 <_svfprintf_r+0x3ea>
  404cb4:	3301      	adds	r3, #1
  404cb6:	4a53      	ldr	r2, [pc, #332]	; (404e04 <_svfprintf_r+0x568>)
  404cb8:	9326      	str	r3, [sp, #152]	; 0x98
  404cba:	442c      	add	r4, r5
  404cbc:	2b07      	cmp	r3, #7
  404cbe:	9427      	str	r4, [sp, #156]	; 0x9c
  404cc0:	e888 0024 	stmia.w	r8, {r2, r5}
  404cc4:	dd08      	ble.n	404cd8 <_svfprintf_r+0x43c>
  404cc6:	aa25      	add	r2, sp, #148	; 0x94
  404cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cca:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ccc:	f004 fa08 	bl	4090e0 <__ssprint_r>
  404cd0:	2800      	cmp	r0, #0
  404cd2:	f47f aeb5 	bne.w	404a40 <_svfprintf_r+0x1a4>
  404cd6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404cdc:	9908      	ldr	r1, [sp, #32]
  404cde:	428a      	cmp	r2, r1
  404ce0:	bfac      	ite	ge
  404ce2:	189b      	addge	r3, r3, r2
  404ce4:	185b      	addlt	r3, r3, r1
  404ce6:	9309      	str	r3, [sp, #36]	; 0x24
  404ce8:	2c00      	cmp	r4, #0
  404cea:	f040 830d 	bne.w	405308 <_svfprintf_r+0xa6c>
  404cee:	2300      	movs	r3, #0
  404cf0:	9326      	str	r3, [sp, #152]	; 0x98
  404cf2:	46c8      	mov	r8, r9
  404cf4:	e5f9      	b.n	4048ea <_svfprintf_r+0x4e>
  404cf6:	9311      	str	r3, [sp, #68]	; 0x44
  404cf8:	f01b 0320 	ands.w	r3, fp, #32
  404cfc:	f040 81e3 	bne.w	4050c6 <_svfprintf_r+0x82a>
  404d00:	f01b 0210 	ands.w	r2, fp, #16
  404d04:	f040 842e 	bne.w	405564 <_svfprintf_r+0xcc8>
  404d08:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404d0c:	f000 842a 	beq.w	405564 <_svfprintf_r+0xcc8>
  404d10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d12:	4613      	mov	r3, r2
  404d14:	460a      	mov	r2, r1
  404d16:	3204      	adds	r2, #4
  404d18:	880c      	ldrh	r4, [r1, #0]
  404d1a:	920f      	str	r2, [sp, #60]	; 0x3c
  404d1c:	2500      	movs	r5, #0
  404d1e:	e6b0      	b.n	404a82 <_svfprintf_r+0x1e6>
  404d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d22:	9311      	str	r3, [sp, #68]	; 0x44
  404d24:	6816      	ldr	r6, [r2, #0]
  404d26:	2400      	movs	r4, #0
  404d28:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404d2c:	1d15      	adds	r5, r2, #4
  404d2e:	2e00      	cmp	r6, #0
  404d30:	f000 86a7 	beq.w	405a82 <_svfprintf_r+0x11e6>
  404d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404d36:	1c53      	adds	r3, r2, #1
  404d38:	f000 8609 	beq.w	40594e <_svfprintf_r+0x10b2>
  404d3c:	4621      	mov	r1, r4
  404d3e:	4630      	mov	r0, r6
  404d40:	f003 fc36 	bl	4085b0 <memchr>
  404d44:	2800      	cmp	r0, #0
  404d46:	f000 86e1 	beq.w	405b0c <_svfprintf_r+0x1270>
  404d4a:	1b83      	subs	r3, r0, r6
  404d4c:	930e      	str	r3, [sp, #56]	; 0x38
  404d4e:	940a      	str	r4, [sp, #40]	; 0x28
  404d50:	950f      	str	r5, [sp, #60]	; 0x3c
  404d52:	f8cd b01c 	str.w	fp, [sp, #28]
  404d56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d5a:	9308      	str	r3, [sp, #32]
  404d5c:	9412      	str	r4, [sp, #72]	; 0x48
  404d5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404d62:	e6b3      	b.n	404acc <_svfprintf_r+0x230>
  404d64:	f89a 3000 	ldrb.w	r3, [sl]
  404d68:	2201      	movs	r2, #1
  404d6a:	212b      	movs	r1, #43	; 0x2b
  404d6c:	e5ee      	b.n	40494c <_svfprintf_r+0xb0>
  404d6e:	f04b 0b20 	orr.w	fp, fp, #32
  404d72:	f89a 3000 	ldrb.w	r3, [sl]
  404d76:	e5e9      	b.n	40494c <_svfprintf_r+0xb0>
  404d78:	9311      	str	r3, [sp, #68]	; 0x44
  404d7a:	2a00      	cmp	r2, #0
  404d7c:	f040 8795 	bne.w	405caa <_svfprintf_r+0x140e>
  404d80:	4b22      	ldr	r3, [pc, #136]	; (404e0c <_svfprintf_r+0x570>)
  404d82:	9318      	str	r3, [sp, #96]	; 0x60
  404d84:	f01b 0f20 	tst.w	fp, #32
  404d88:	f040 8111 	bne.w	404fae <_svfprintf_r+0x712>
  404d8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d8e:	f01b 0f10 	tst.w	fp, #16
  404d92:	4613      	mov	r3, r2
  404d94:	f040 83e1 	bne.w	40555a <_svfprintf_r+0xcbe>
  404d98:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404d9c:	f000 83dd 	beq.w	40555a <_svfprintf_r+0xcbe>
  404da0:	3304      	adds	r3, #4
  404da2:	8814      	ldrh	r4, [r2, #0]
  404da4:	930f      	str	r3, [sp, #60]	; 0x3c
  404da6:	2500      	movs	r5, #0
  404da8:	f01b 0f01 	tst.w	fp, #1
  404dac:	f000 810c 	beq.w	404fc8 <_svfprintf_r+0x72c>
  404db0:	ea54 0305 	orrs.w	r3, r4, r5
  404db4:	f000 8108 	beq.w	404fc8 <_svfprintf_r+0x72c>
  404db8:	2330      	movs	r3, #48	; 0x30
  404dba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404dbe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404dc2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404dc6:	f04b 0b02 	orr.w	fp, fp, #2
  404dca:	2302      	movs	r3, #2
  404dcc:	e659      	b.n	404a82 <_svfprintf_r+0x1e6>
  404dce:	f89a 3000 	ldrb.w	r3, [sl]
  404dd2:	2900      	cmp	r1, #0
  404dd4:	f47f adba 	bne.w	40494c <_svfprintf_r+0xb0>
  404dd8:	2201      	movs	r2, #1
  404dda:	2120      	movs	r1, #32
  404ddc:	e5b6      	b.n	40494c <_svfprintf_r+0xb0>
  404dde:	f04b 0b01 	orr.w	fp, fp, #1
  404de2:	f89a 3000 	ldrb.w	r3, [sl]
  404de6:	e5b1      	b.n	40494c <_svfprintf_r+0xb0>
  404de8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404dea:	6823      	ldr	r3, [r4, #0]
  404dec:	930d      	str	r3, [sp, #52]	; 0x34
  404dee:	4618      	mov	r0, r3
  404df0:	2800      	cmp	r0, #0
  404df2:	4623      	mov	r3, r4
  404df4:	f103 0304 	add.w	r3, r3, #4
  404df8:	f6ff ae0a 	blt.w	404a10 <_svfprintf_r+0x174>
  404dfc:	930f      	str	r3, [sp, #60]	; 0x3c
  404dfe:	f89a 3000 	ldrb.w	r3, [sl]
  404e02:	e5a3      	b.n	40494c <_svfprintf_r+0xb0>
  404e04:	0040a410 	.word	0x0040a410
  404e08:	0040a420 	.word	0x0040a420
  404e0c:	0040a3f0 	.word	0x0040a3f0
  404e10:	f04b 0b10 	orr.w	fp, fp, #16
  404e14:	f01b 0f20 	tst.w	fp, #32
  404e18:	9311      	str	r3, [sp, #68]	; 0x44
  404e1a:	f43f ae23 	beq.w	404a64 <_svfprintf_r+0x1c8>
  404e1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404e20:	3507      	adds	r5, #7
  404e22:	f025 0307 	bic.w	r3, r5, #7
  404e26:	f103 0208 	add.w	r2, r3, #8
  404e2a:	e9d3 4500 	ldrd	r4, r5, [r3]
  404e2e:	920f      	str	r2, [sp, #60]	; 0x3c
  404e30:	2301      	movs	r3, #1
  404e32:	e626      	b.n	404a82 <_svfprintf_r+0x1e6>
  404e34:	f89a 3000 	ldrb.w	r3, [sl]
  404e38:	2b2a      	cmp	r3, #42	; 0x2a
  404e3a:	f10a 0401 	add.w	r4, sl, #1
  404e3e:	f000 8727 	beq.w	405c90 <_svfprintf_r+0x13f4>
  404e42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404e46:	2809      	cmp	r0, #9
  404e48:	46a2      	mov	sl, r4
  404e4a:	f200 86ad 	bhi.w	405ba8 <_svfprintf_r+0x130c>
  404e4e:	2300      	movs	r3, #0
  404e50:	461c      	mov	r4, r3
  404e52:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404e56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404e5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404e5e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404e62:	2809      	cmp	r0, #9
  404e64:	d9f5      	bls.n	404e52 <_svfprintf_r+0x5b6>
  404e66:	940a      	str	r4, [sp, #40]	; 0x28
  404e68:	e572      	b.n	404950 <_svfprintf_r+0xb4>
  404e6a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404e6e:	f89a 3000 	ldrb.w	r3, [sl]
  404e72:	e56b      	b.n	40494c <_svfprintf_r+0xb0>
  404e74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404e78:	f89a 3000 	ldrb.w	r3, [sl]
  404e7c:	e566      	b.n	40494c <_svfprintf_r+0xb0>
  404e7e:	f89a 3000 	ldrb.w	r3, [sl]
  404e82:	2b6c      	cmp	r3, #108	; 0x6c
  404e84:	bf03      	ittte	eq
  404e86:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404e8a:	f04b 0b20 	orreq.w	fp, fp, #32
  404e8e:	f10a 0a01 	addeq.w	sl, sl, #1
  404e92:	f04b 0b10 	orrne.w	fp, fp, #16
  404e96:	e559      	b.n	40494c <_svfprintf_r+0xb0>
  404e98:	2a00      	cmp	r2, #0
  404e9a:	f040 8711 	bne.w	405cc0 <_svfprintf_r+0x1424>
  404e9e:	f01b 0f20 	tst.w	fp, #32
  404ea2:	f040 84f9 	bne.w	405898 <_svfprintf_r+0xffc>
  404ea6:	f01b 0f10 	tst.w	fp, #16
  404eaa:	f040 84ac 	bne.w	405806 <_svfprintf_r+0xf6a>
  404eae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404eb2:	f000 84a8 	beq.w	405806 <_svfprintf_r+0xf6a>
  404eb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404eb8:	6813      	ldr	r3, [r2, #0]
  404eba:	3204      	adds	r2, #4
  404ebc:	920f      	str	r2, [sp, #60]	; 0x3c
  404ebe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404ec2:	801a      	strh	r2, [r3, #0]
  404ec4:	e511      	b.n	4048ea <_svfprintf_r+0x4e>
  404ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404ec8:	4bb3      	ldr	r3, [pc, #716]	; (405198 <_svfprintf_r+0x8fc>)
  404eca:	680c      	ldr	r4, [r1, #0]
  404ecc:	9318      	str	r3, [sp, #96]	; 0x60
  404ece:	2230      	movs	r2, #48	; 0x30
  404ed0:	2378      	movs	r3, #120	; 0x78
  404ed2:	3104      	adds	r1, #4
  404ed4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404ed8:	9311      	str	r3, [sp, #68]	; 0x44
  404eda:	f04b 0b02 	orr.w	fp, fp, #2
  404ede:	910f      	str	r1, [sp, #60]	; 0x3c
  404ee0:	2500      	movs	r5, #0
  404ee2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404ee6:	2302      	movs	r3, #2
  404ee8:	e5cb      	b.n	404a82 <_svfprintf_r+0x1e6>
  404eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404eec:	9311      	str	r3, [sp, #68]	; 0x44
  404eee:	680a      	ldr	r2, [r1, #0]
  404ef0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404ef4:	2300      	movs	r3, #0
  404ef6:	460a      	mov	r2, r1
  404ef8:	461f      	mov	r7, r3
  404efa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404efe:	3204      	adds	r2, #4
  404f00:	2301      	movs	r3, #1
  404f02:	9308      	str	r3, [sp, #32]
  404f04:	f8cd b01c 	str.w	fp, [sp, #28]
  404f08:	970a      	str	r7, [sp, #40]	; 0x28
  404f0a:	9712      	str	r7, [sp, #72]	; 0x48
  404f0c:	920f      	str	r2, [sp, #60]	; 0x3c
  404f0e:	930e      	str	r3, [sp, #56]	; 0x38
  404f10:	ae28      	add	r6, sp, #160	; 0xa0
  404f12:	e5df      	b.n	404ad4 <_svfprintf_r+0x238>
  404f14:	9311      	str	r3, [sp, #68]	; 0x44
  404f16:	2a00      	cmp	r2, #0
  404f18:	f040 86ea 	bne.w	405cf0 <_svfprintf_r+0x1454>
  404f1c:	f01b 0f20 	tst.w	fp, #32
  404f20:	d15d      	bne.n	404fde <_svfprintf_r+0x742>
  404f22:	f01b 0f10 	tst.w	fp, #16
  404f26:	f040 8308 	bne.w	40553a <_svfprintf_r+0xc9e>
  404f2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404f2e:	f000 8304 	beq.w	40553a <_svfprintf_r+0xc9e>
  404f32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404f34:	f9b1 4000 	ldrsh.w	r4, [r1]
  404f38:	3104      	adds	r1, #4
  404f3a:	17e5      	asrs	r5, r4, #31
  404f3c:	4622      	mov	r2, r4
  404f3e:	462b      	mov	r3, r5
  404f40:	910f      	str	r1, [sp, #60]	; 0x3c
  404f42:	2a00      	cmp	r2, #0
  404f44:	f173 0300 	sbcs.w	r3, r3, #0
  404f48:	db58      	blt.n	404ffc <_svfprintf_r+0x760>
  404f4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404f50:	1c4a      	adds	r2, r1, #1
  404f52:	f04f 0301 	mov.w	r3, #1
  404f56:	f47f ad9b 	bne.w	404a90 <_svfprintf_r+0x1f4>
  404f5a:	ea54 0205 	orrs.w	r2, r4, r5
  404f5e:	f000 81df 	beq.w	405320 <_svfprintf_r+0xa84>
  404f62:	f8cd b01c 	str.w	fp, [sp, #28]
  404f66:	2b01      	cmp	r3, #1
  404f68:	f000 827b 	beq.w	405462 <_svfprintf_r+0xbc6>
  404f6c:	2b02      	cmp	r3, #2
  404f6e:	f040 8206 	bne.w	40537e <_svfprintf_r+0xae2>
  404f72:	9818      	ldr	r0, [sp, #96]	; 0x60
  404f74:	464e      	mov	r6, r9
  404f76:	0923      	lsrs	r3, r4, #4
  404f78:	f004 010f 	and.w	r1, r4, #15
  404f7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404f80:	092a      	lsrs	r2, r5, #4
  404f82:	461c      	mov	r4, r3
  404f84:	4615      	mov	r5, r2
  404f86:	5c43      	ldrb	r3, [r0, r1]
  404f88:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404f8c:	ea54 0305 	orrs.w	r3, r4, r5
  404f90:	d1f1      	bne.n	404f76 <_svfprintf_r+0x6da>
  404f92:	eba9 0306 	sub.w	r3, r9, r6
  404f96:	930e      	str	r3, [sp, #56]	; 0x38
  404f98:	e590      	b.n	404abc <_svfprintf_r+0x220>
  404f9a:	9311      	str	r3, [sp, #68]	; 0x44
  404f9c:	2a00      	cmp	r2, #0
  404f9e:	f040 86a3 	bne.w	405ce8 <_svfprintf_r+0x144c>
  404fa2:	4b7e      	ldr	r3, [pc, #504]	; (40519c <_svfprintf_r+0x900>)
  404fa4:	9318      	str	r3, [sp, #96]	; 0x60
  404fa6:	f01b 0f20 	tst.w	fp, #32
  404faa:	f43f aeef 	beq.w	404d8c <_svfprintf_r+0x4f0>
  404fae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404fb0:	3507      	adds	r5, #7
  404fb2:	f025 0307 	bic.w	r3, r5, #7
  404fb6:	f103 0208 	add.w	r2, r3, #8
  404fba:	f01b 0f01 	tst.w	fp, #1
  404fbe:	920f      	str	r2, [sp, #60]	; 0x3c
  404fc0:	e9d3 4500 	ldrd	r4, r5, [r3]
  404fc4:	f47f aef4 	bne.w	404db0 <_svfprintf_r+0x514>
  404fc8:	2302      	movs	r3, #2
  404fca:	e55a      	b.n	404a82 <_svfprintf_r+0x1e6>
  404fcc:	9311      	str	r3, [sp, #68]	; 0x44
  404fce:	2a00      	cmp	r2, #0
  404fd0:	f040 8686 	bne.w	405ce0 <_svfprintf_r+0x1444>
  404fd4:	f04b 0b10 	orr.w	fp, fp, #16
  404fd8:	f01b 0f20 	tst.w	fp, #32
  404fdc:	d0a1      	beq.n	404f22 <_svfprintf_r+0x686>
  404fde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404fe0:	3507      	adds	r5, #7
  404fe2:	f025 0507 	bic.w	r5, r5, #7
  404fe6:	e9d5 2300 	ldrd	r2, r3, [r5]
  404fea:	2a00      	cmp	r2, #0
  404fec:	f105 0108 	add.w	r1, r5, #8
  404ff0:	461d      	mov	r5, r3
  404ff2:	f173 0300 	sbcs.w	r3, r3, #0
  404ff6:	910f      	str	r1, [sp, #60]	; 0x3c
  404ff8:	4614      	mov	r4, r2
  404ffa:	daa6      	bge.n	404f4a <_svfprintf_r+0x6ae>
  404ffc:	272d      	movs	r7, #45	; 0x2d
  404ffe:	4264      	negs	r4, r4
  405000:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405004:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405008:	2301      	movs	r3, #1
  40500a:	e53d      	b.n	404a88 <_svfprintf_r+0x1ec>
  40500c:	9311      	str	r3, [sp, #68]	; 0x44
  40500e:	2a00      	cmp	r2, #0
  405010:	f040 8662 	bne.w	405cd8 <_svfprintf_r+0x143c>
  405014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405016:	3507      	adds	r5, #7
  405018:	f025 0307 	bic.w	r3, r5, #7
  40501c:	f103 0208 	add.w	r2, r3, #8
  405020:	920f      	str	r2, [sp, #60]	; 0x3c
  405022:	681a      	ldr	r2, [r3, #0]
  405024:	9215      	str	r2, [sp, #84]	; 0x54
  405026:	685b      	ldr	r3, [r3, #4]
  405028:	9314      	str	r3, [sp, #80]	; 0x50
  40502a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40502c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40502e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405032:	4628      	mov	r0, r5
  405034:	4621      	mov	r1, r4
  405036:	f04f 32ff 	mov.w	r2, #4294967295
  40503a:	4b59      	ldr	r3, [pc, #356]	; (4051a0 <_svfprintf_r+0x904>)
  40503c:	f004 ff1e 	bl	409e7c <__aeabi_dcmpun>
  405040:	2800      	cmp	r0, #0
  405042:	f040 834a 	bne.w	4056da <_svfprintf_r+0xe3e>
  405046:	4628      	mov	r0, r5
  405048:	4621      	mov	r1, r4
  40504a:	f04f 32ff 	mov.w	r2, #4294967295
  40504e:	4b54      	ldr	r3, [pc, #336]	; (4051a0 <_svfprintf_r+0x904>)
  405050:	f004 fef6 	bl	409e40 <__aeabi_dcmple>
  405054:	2800      	cmp	r0, #0
  405056:	f040 8340 	bne.w	4056da <_svfprintf_r+0xe3e>
  40505a:	a815      	add	r0, sp, #84	; 0x54
  40505c:	c80d      	ldmia	r0, {r0, r2, r3}
  40505e:	9914      	ldr	r1, [sp, #80]	; 0x50
  405060:	f004 fee4 	bl	409e2c <__aeabi_dcmplt>
  405064:	2800      	cmp	r0, #0
  405066:	f040 8530 	bne.w	405aca <_svfprintf_r+0x122e>
  40506a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40506e:	4e4d      	ldr	r6, [pc, #308]	; (4051a4 <_svfprintf_r+0x908>)
  405070:	4b4d      	ldr	r3, [pc, #308]	; (4051a8 <_svfprintf_r+0x90c>)
  405072:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  405076:	9007      	str	r0, [sp, #28]
  405078:	9811      	ldr	r0, [sp, #68]	; 0x44
  40507a:	2203      	movs	r2, #3
  40507c:	2100      	movs	r1, #0
  40507e:	9208      	str	r2, [sp, #32]
  405080:	910a      	str	r1, [sp, #40]	; 0x28
  405082:	2847      	cmp	r0, #71	; 0x47
  405084:	bfd8      	it	le
  405086:	461e      	movle	r6, r3
  405088:	920e      	str	r2, [sp, #56]	; 0x38
  40508a:	9112      	str	r1, [sp, #72]	; 0x48
  40508c:	e51e      	b.n	404acc <_svfprintf_r+0x230>
  40508e:	f04b 0b08 	orr.w	fp, fp, #8
  405092:	f89a 3000 	ldrb.w	r3, [sl]
  405096:	e459      	b.n	40494c <_svfprintf_r+0xb0>
  405098:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40509c:	2300      	movs	r3, #0
  40509e:	461c      	mov	r4, r3
  4050a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4050a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4050a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4050ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4050b0:	2809      	cmp	r0, #9
  4050b2:	d9f5      	bls.n	4050a0 <_svfprintf_r+0x804>
  4050b4:	940d      	str	r4, [sp, #52]	; 0x34
  4050b6:	e44b      	b.n	404950 <_svfprintf_r+0xb4>
  4050b8:	f04b 0b10 	orr.w	fp, fp, #16
  4050bc:	9311      	str	r3, [sp, #68]	; 0x44
  4050be:	f01b 0320 	ands.w	r3, fp, #32
  4050c2:	f43f ae1d 	beq.w	404d00 <_svfprintf_r+0x464>
  4050c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4050c8:	3507      	adds	r5, #7
  4050ca:	f025 0307 	bic.w	r3, r5, #7
  4050ce:	f103 0208 	add.w	r2, r3, #8
  4050d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4050d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4050d8:	2300      	movs	r3, #0
  4050da:	e4d2      	b.n	404a82 <_svfprintf_r+0x1e6>
  4050dc:	9311      	str	r3, [sp, #68]	; 0x44
  4050de:	2a00      	cmp	r2, #0
  4050e0:	f040 85e7 	bne.w	405cb2 <_svfprintf_r+0x1416>
  4050e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050e6:	2a00      	cmp	r2, #0
  4050e8:	f43f aca3 	beq.w	404a32 <_svfprintf_r+0x196>
  4050ec:	2300      	movs	r3, #0
  4050ee:	2101      	movs	r1, #1
  4050f0:	461f      	mov	r7, r3
  4050f2:	9108      	str	r1, [sp, #32]
  4050f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4050f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4050fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405100:	930a      	str	r3, [sp, #40]	; 0x28
  405102:	9312      	str	r3, [sp, #72]	; 0x48
  405104:	910e      	str	r1, [sp, #56]	; 0x38
  405106:	ae28      	add	r6, sp, #160	; 0xa0
  405108:	e4e4      	b.n	404ad4 <_svfprintf_r+0x238>
  40510a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40510c:	e534      	b.n	404b78 <_svfprintf_r+0x2dc>
  40510e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405110:	2b65      	cmp	r3, #101	; 0x65
  405112:	f340 80a7 	ble.w	405264 <_svfprintf_r+0x9c8>
  405116:	a815      	add	r0, sp, #84	; 0x54
  405118:	c80d      	ldmia	r0, {r0, r2, r3}
  40511a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40511c:	f004 fe7c 	bl	409e18 <__aeabi_dcmpeq>
  405120:	2800      	cmp	r0, #0
  405122:	f000 8150 	beq.w	4053c6 <_svfprintf_r+0xb2a>
  405126:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405128:	4a20      	ldr	r2, [pc, #128]	; (4051ac <_svfprintf_r+0x910>)
  40512a:	f8c8 2000 	str.w	r2, [r8]
  40512e:	3301      	adds	r3, #1
  405130:	3401      	adds	r4, #1
  405132:	2201      	movs	r2, #1
  405134:	2b07      	cmp	r3, #7
  405136:	9427      	str	r4, [sp, #156]	; 0x9c
  405138:	9326      	str	r3, [sp, #152]	; 0x98
  40513a:	f8c8 2004 	str.w	r2, [r8, #4]
  40513e:	f300 836a 	bgt.w	405816 <_svfprintf_r+0xf7a>
  405142:	f108 0808 	add.w	r8, r8, #8
  405146:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40514a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40514c:	4293      	cmp	r3, r2
  40514e:	db03      	blt.n	405158 <_svfprintf_r+0x8bc>
  405150:	9b07      	ldr	r3, [sp, #28]
  405152:	07dd      	lsls	r5, r3, #31
  405154:	f57f ad82 	bpl.w	404c5c <_svfprintf_r+0x3c0>
  405158:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40515a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40515c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40515e:	f8c8 2000 	str.w	r2, [r8]
  405162:	3301      	adds	r3, #1
  405164:	440c      	add	r4, r1
  405166:	2b07      	cmp	r3, #7
  405168:	f8c8 1004 	str.w	r1, [r8, #4]
  40516c:	9427      	str	r4, [sp, #156]	; 0x9c
  40516e:	9326      	str	r3, [sp, #152]	; 0x98
  405170:	f300 839e 	bgt.w	4058b0 <_svfprintf_r+0x1014>
  405174:	f108 0808 	add.w	r8, r8, #8
  405178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40517a:	1e5e      	subs	r6, r3, #1
  40517c:	2e00      	cmp	r6, #0
  40517e:	f77f ad6d 	ble.w	404c5c <_svfprintf_r+0x3c0>
  405182:	2e10      	cmp	r6, #16
  405184:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405186:	4d0a      	ldr	r5, [pc, #40]	; (4051b0 <_svfprintf_r+0x914>)
  405188:	f340 81f5 	ble.w	405576 <_svfprintf_r+0xcda>
  40518c:	4622      	mov	r2, r4
  40518e:	2710      	movs	r7, #16
  405190:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405194:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405196:	e013      	b.n	4051c0 <_svfprintf_r+0x924>
  405198:	0040a3f0 	.word	0x0040a3f0
  40519c:	0040a3dc 	.word	0x0040a3dc
  4051a0:	7fefffff 	.word	0x7fefffff
  4051a4:	0040a3d0 	.word	0x0040a3d0
  4051a8:	0040a3cc 	.word	0x0040a3cc
  4051ac:	0040a40c 	.word	0x0040a40c
  4051b0:	0040a420 	.word	0x0040a420
  4051b4:	f108 0808 	add.w	r8, r8, #8
  4051b8:	3e10      	subs	r6, #16
  4051ba:	2e10      	cmp	r6, #16
  4051bc:	f340 81da 	ble.w	405574 <_svfprintf_r+0xcd8>
  4051c0:	3301      	adds	r3, #1
  4051c2:	3210      	adds	r2, #16
  4051c4:	2b07      	cmp	r3, #7
  4051c6:	9227      	str	r2, [sp, #156]	; 0x9c
  4051c8:	9326      	str	r3, [sp, #152]	; 0x98
  4051ca:	e888 00a0 	stmia.w	r8, {r5, r7}
  4051ce:	ddf1      	ble.n	4051b4 <_svfprintf_r+0x918>
  4051d0:	aa25      	add	r2, sp, #148	; 0x94
  4051d2:	4621      	mov	r1, r4
  4051d4:	4658      	mov	r0, fp
  4051d6:	f003 ff83 	bl	4090e0 <__ssprint_r>
  4051da:	2800      	cmp	r0, #0
  4051dc:	f47f ac30 	bne.w	404a40 <_svfprintf_r+0x1a4>
  4051e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4051e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051e4:	46c8      	mov	r8, r9
  4051e6:	e7e7      	b.n	4051b8 <_svfprintf_r+0x91c>
  4051e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4051ea:	9a08      	ldr	r2, [sp, #32]
  4051ec:	1a9f      	subs	r7, r3, r2
  4051ee:	2f00      	cmp	r7, #0
  4051f0:	f77f ace5 	ble.w	404bbe <_svfprintf_r+0x322>
  4051f4:	2f10      	cmp	r7, #16
  4051f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051f8:	4db6      	ldr	r5, [pc, #728]	; (4054d4 <_svfprintf_r+0xc38>)
  4051fa:	dd27      	ble.n	40524c <_svfprintf_r+0x9b0>
  4051fc:	4642      	mov	r2, r8
  4051fe:	4621      	mov	r1, r4
  405200:	46b0      	mov	r8, r6
  405202:	f04f 0b10 	mov.w	fp, #16
  405206:	462e      	mov	r6, r5
  405208:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40520a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40520c:	e004      	b.n	405218 <_svfprintf_r+0x97c>
  40520e:	3f10      	subs	r7, #16
  405210:	2f10      	cmp	r7, #16
  405212:	f102 0208 	add.w	r2, r2, #8
  405216:	dd15      	ble.n	405244 <_svfprintf_r+0x9a8>
  405218:	3301      	adds	r3, #1
  40521a:	3110      	adds	r1, #16
  40521c:	2b07      	cmp	r3, #7
  40521e:	9127      	str	r1, [sp, #156]	; 0x9c
  405220:	9326      	str	r3, [sp, #152]	; 0x98
  405222:	e882 0840 	stmia.w	r2, {r6, fp}
  405226:	ddf2      	ble.n	40520e <_svfprintf_r+0x972>
  405228:	aa25      	add	r2, sp, #148	; 0x94
  40522a:	4629      	mov	r1, r5
  40522c:	4620      	mov	r0, r4
  40522e:	f003 ff57 	bl	4090e0 <__ssprint_r>
  405232:	2800      	cmp	r0, #0
  405234:	f47f ac04 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405238:	3f10      	subs	r7, #16
  40523a:	2f10      	cmp	r7, #16
  40523c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40523e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405240:	464a      	mov	r2, r9
  405242:	dce9      	bgt.n	405218 <_svfprintf_r+0x97c>
  405244:	4635      	mov	r5, r6
  405246:	460c      	mov	r4, r1
  405248:	4646      	mov	r6, r8
  40524a:	4690      	mov	r8, r2
  40524c:	3301      	adds	r3, #1
  40524e:	443c      	add	r4, r7
  405250:	2b07      	cmp	r3, #7
  405252:	9427      	str	r4, [sp, #156]	; 0x9c
  405254:	9326      	str	r3, [sp, #152]	; 0x98
  405256:	e888 00a0 	stmia.w	r8, {r5, r7}
  40525a:	f300 8232 	bgt.w	4056c2 <_svfprintf_r+0xe26>
  40525e:	f108 0808 	add.w	r8, r8, #8
  405262:	e4ac      	b.n	404bbe <_svfprintf_r+0x322>
  405264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405266:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405268:	2b01      	cmp	r3, #1
  40526a:	f340 81fe 	ble.w	40566a <_svfprintf_r+0xdce>
  40526e:	3701      	adds	r7, #1
  405270:	3401      	adds	r4, #1
  405272:	2301      	movs	r3, #1
  405274:	2f07      	cmp	r7, #7
  405276:	9427      	str	r4, [sp, #156]	; 0x9c
  405278:	9726      	str	r7, [sp, #152]	; 0x98
  40527a:	f8c8 6000 	str.w	r6, [r8]
  40527e:	f8c8 3004 	str.w	r3, [r8, #4]
  405282:	f300 8203 	bgt.w	40568c <_svfprintf_r+0xdf0>
  405286:	f108 0808 	add.w	r8, r8, #8
  40528a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40528c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40528e:	f8c8 3000 	str.w	r3, [r8]
  405292:	3701      	adds	r7, #1
  405294:	4414      	add	r4, r2
  405296:	2f07      	cmp	r7, #7
  405298:	9427      	str	r4, [sp, #156]	; 0x9c
  40529a:	9726      	str	r7, [sp, #152]	; 0x98
  40529c:	f8c8 2004 	str.w	r2, [r8, #4]
  4052a0:	f300 8200 	bgt.w	4056a4 <_svfprintf_r+0xe08>
  4052a4:	f108 0808 	add.w	r8, r8, #8
  4052a8:	a815      	add	r0, sp, #84	; 0x54
  4052aa:	c80d      	ldmia	r0, {r0, r2, r3}
  4052ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  4052ae:	f004 fdb3 	bl	409e18 <__aeabi_dcmpeq>
  4052b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4052b4:	2800      	cmp	r0, #0
  4052b6:	f040 8101 	bne.w	4054bc <_svfprintf_r+0xc20>
  4052ba:	3b01      	subs	r3, #1
  4052bc:	3701      	adds	r7, #1
  4052be:	3601      	adds	r6, #1
  4052c0:	441c      	add	r4, r3
  4052c2:	2f07      	cmp	r7, #7
  4052c4:	9726      	str	r7, [sp, #152]	; 0x98
  4052c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4052c8:	f8c8 6000 	str.w	r6, [r8]
  4052cc:	f8c8 3004 	str.w	r3, [r8, #4]
  4052d0:	f300 8127 	bgt.w	405522 <_svfprintf_r+0xc86>
  4052d4:	f108 0808 	add.w	r8, r8, #8
  4052d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4052da:	f8c8 2004 	str.w	r2, [r8, #4]
  4052de:	3701      	adds	r7, #1
  4052e0:	4414      	add	r4, r2
  4052e2:	ab21      	add	r3, sp, #132	; 0x84
  4052e4:	2f07      	cmp	r7, #7
  4052e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4052e8:	9726      	str	r7, [sp, #152]	; 0x98
  4052ea:	f8c8 3000 	str.w	r3, [r8]
  4052ee:	f77f acb3 	ble.w	404c58 <_svfprintf_r+0x3bc>
  4052f2:	aa25      	add	r2, sp, #148	; 0x94
  4052f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052f8:	f003 fef2 	bl	4090e0 <__ssprint_r>
  4052fc:	2800      	cmp	r0, #0
  4052fe:	f47f ab9f 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405302:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405304:	46c8      	mov	r8, r9
  405306:	e4a9      	b.n	404c5c <_svfprintf_r+0x3c0>
  405308:	aa25      	add	r2, sp, #148	; 0x94
  40530a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40530c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40530e:	f003 fee7 	bl	4090e0 <__ssprint_r>
  405312:	2800      	cmp	r0, #0
  405314:	f43f aceb 	beq.w	404cee <_svfprintf_r+0x452>
  405318:	f7ff bb92 	b.w	404a40 <_svfprintf_r+0x1a4>
  40531c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405320:	2b01      	cmp	r3, #1
  405322:	f000 8134 	beq.w	40558e <_svfprintf_r+0xcf2>
  405326:	2b02      	cmp	r3, #2
  405328:	d125      	bne.n	405376 <_svfprintf_r+0xada>
  40532a:	f8cd b01c 	str.w	fp, [sp, #28]
  40532e:	2400      	movs	r4, #0
  405330:	2500      	movs	r5, #0
  405332:	e61e      	b.n	404f72 <_svfprintf_r+0x6d6>
  405334:	aa25      	add	r2, sp, #148	; 0x94
  405336:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405338:	980c      	ldr	r0, [sp, #48]	; 0x30
  40533a:	f003 fed1 	bl	4090e0 <__ssprint_r>
  40533e:	2800      	cmp	r0, #0
  405340:	f47f ab7e 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405344:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405346:	46c8      	mov	r8, r9
  405348:	e475      	b.n	404c36 <_svfprintf_r+0x39a>
  40534a:	aa25      	add	r2, sp, #148	; 0x94
  40534c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40534e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405350:	f003 fec6 	bl	4090e0 <__ssprint_r>
  405354:	2800      	cmp	r0, #0
  405356:	f47f ab73 	bne.w	404a40 <_svfprintf_r+0x1a4>
  40535a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40535c:	46c8      	mov	r8, r9
  40535e:	e41b      	b.n	404b98 <_svfprintf_r+0x2fc>
  405360:	aa25      	add	r2, sp, #148	; 0x94
  405362:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405364:	980c      	ldr	r0, [sp, #48]	; 0x30
  405366:	f003 febb 	bl	4090e0 <__ssprint_r>
  40536a:	2800      	cmp	r0, #0
  40536c:	f47f ab68 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405370:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405372:	46c8      	mov	r8, r9
  405374:	e420      	b.n	404bb8 <_svfprintf_r+0x31c>
  405376:	f8cd b01c 	str.w	fp, [sp, #28]
  40537a:	2400      	movs	r4, #0
  40537c:	2500      	movs	r5, #0
  40537e:	4649      	mov	r1, r9
  405380:	e000      	b.n	405384 <_svfprintf_r+0xae8>
  405382:	4631      	mov	r1, r6
  405384:	08e2      	lsrs	r2, r4, #3
  405386:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40538a:	08e8      	lsrs	r0, r5, #3
  40538c:	f004 0307 	and.w	r3, r4, #7
  405390:	4605      	mov	r5, r0
  405392:	4614      	mov	r4, r2
  405394:	3330      	adds	r3, #48	; 0x30
  405396:	ea54 0205 	orrs.w	r2, r4, r5
  40539a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40539e:	f101 36ff 	add.w	r6, r1, #4294967295
  4053a2:	d1ee      	bne.n	405382 <_svfprintf_r+0xae6>
  4053a4:	9a07      	ldr	r2, [sp, #28]
  4053a6:	07d2      	lsls	r2, r2, #31
  4053a8:	f57f adf3 	bpl.w	404f92 <_svfprintf_r+0x6f6>
  4053ac:	2b30      	cmp	r3, #48	; 0x30
  4053ae:	f43f adf0 	beq.w	404f92 <_svfprintf_r+0x6f6>
  4053b2:	3902      	subs	r1, #2
  4053b4:	2330      	movs	r3, #48	; 0x30
  4053b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4053ba:	eba9 0301 	sub.w	r3, r9, r1
  4053be:	930e      	str	r3, [sp, #56]	; 0x38
  4053c0:	460e      	mov	r6, r1
  4053c2:	f7ff bb7b 	b.w	404abc <_svfprintf_r+0x220>
  4053c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4053c8:	2900      	cmp	r1, #0
  4053ca:	f340 822e 	ble.w	40582a <_svfprintf_r+0xf8e>
  4053ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4053d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4053d2:	4293      	cmp	r3, r2
  4053d4:	bfa8      	it	ge
  4053d6:	4613      	movge	r3, r2
  4053d8:	2b00      	cmp	r3, #0
  4053da:	461f      	mov	r7, r3
  4053dc:	dd0d      	ble.n	4053fa <_svfprintf_r+0xb5e>
  4053de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053e0:	f8c8 6000 	str.w	r6, [r8]
  4053e4:	3301      	adds	r3, #1
  4053e6:	443c      	add	r4, r7
  4053e8:	2b07      	cmp	r3, #7
  4053ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4053ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4053f0:	9326      	str	r3, [sp, #152]	; 0x98
  4053f2:	f300 831f 	bgt.w	405a34 <_svfprintf_r+0x1198>
  4053f6:	f108 0808 	add.w	r8, r8, #8
  4053fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4053fc:	2f00      	cmp	r7, #0
  4053fe:	bfa8      	it	ge
  405400:	1bdb      	subge	r3, r3, r7
  405402:	2b00      	cmp	r3, #0
  405404:	461f      	mov	r7, r3
  405406:	f340 80d6 	ble.w	4055b6 <_svfprintf_r+0xd1a>
  40540a:	2f10      	cmp	r7, #16
  40540c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40540e:	4d31      	ldr	r5, [pc, #196]	; (4054d4 <_svfprintf_r+0xc38>)
  405410:	f340 81ed 	ble.w	4057ee <_svfprintf_r+0xf52>
  405414:	4642      	mov	r2, r8
  405416:	4621      	mov	r1, r4
  405418:	46b0      	mov	r8, r6
  40541a:	f04f 0b10 	mov.w	fp, #16
  40541e:	462e      	mov	r6, r5
  405420:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405422:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405424:	e004      	b.n	405430 <_svfprintf_r+0xb94>
  405426:	3208      	adds	r2, #8
  405428:	3f10      	subs	r7, #16
  40542a:	2f10      	cmp	r7, #16
  40542c:	f340 81db 	ble.w	4057e6 <_svfprintf_r+0xf4a>
  405430:	3301      	adds	r3, #1
  405432:	3110      	adds	r1, #16
  405434:	2b07      	cmp	r3, #7
  405436:	9127      	str	r1, [sp, #156]	; 0x9c
  405438:	9326      	str	r3, [sp, #152]	; 0x98
  40543a:	e882 0840 	stmia.w	r2, {r6, fp}
  40543e:	ddf2      	ble.n	405426 <_svfprintf_r+0xb8a>
  405440:	aa25      	add	r2, sp, #148	; 0x94
  405442:	4629      	mov	r1, r5
  405444:	4620      	mov	r0, r4
  405446:	f003 fe4b 	bl	4090e0 <__ssprint_r>
  40544a:	2800      	cmp	r0, #0
  40544c:	f47f aaf8 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405450:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405452:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405454:	464a      	mov	r2, r9
  405456:	e7e7      	b.n	405428 <_svfprintf_r+0xb8c>
  405458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40545a:	930e      	str	r3, [sp, #56]	; 0x38
  40545c:	464e      	mov	r6, r9
  40545e:	f7ff bb2d 	b.w	404abc <_svfprintf_r+0x220>
  405462:	2d00      	cmp	r5, #0
  405464:	bf08      	it	eq
  405466:	2c0a      	cmpeq	r4, #10
  405468:	f0c0 808f 	bcc.w	40558a <_svfprintf_r+0xcee>
  40546c:	464e      	mov	r6, r9
  40546e:	4620      	mov	r0, r4
  405470:	4629      	mov	r1, r5
  405472:	220a      	movs	r2, #10
  405474:	2300      	movs	r3, #0
  405476:	f004 fd3f 	bl	409ef8 <__aeabi_uldivmod>
  40547a:	3230      	adds	r2, #48	; 0x30
  40547c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405480:	4620      	mov	r0, r4
  405482:	4629      	mov	r1, r5
  405484:	2300      	movs	r3, #0
  405486:	220a      	movs	r2, #10
  405488:	f004 fd36 	bl	409ef8 <__aeabi_uldivmod>
  40548c:	4604      	mov	r4, r0
  40548e:	460d      	mov	r5, r1
  405490:	ea54 0305 	orrs.w	r3, r4, r5
  405494:	d1eb      	bne.n	40546e <_svfprintf_r+0xbd2>
  405496:	eba9 0306 	sub.w	r3, r9, r6
  40549a:	930e      	str	r3, [sp, #56]	; 0x38
  40549c:	f7ff bb0e 	b.w	404abc <_svfprintf_r+0x220>
  4054a0:	aa25      	add	r2, sp, #148	; 0x94
  4054a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054a6:	f003 fe1b 	bl	4090e0 <__ssprint_r>
  4054aa:	2800      	cmp	r0, #0
  4054ac:	f47f aac8 	bne.w	404a40 <_svfprintf_r+0x1a4>
  4054b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4054b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054b6:	46c8      	mov	r8, r9
  4054b8:	f7ff bb5e 	b.w	404b78 <_svfprintf_r+0x2dc>
  4054bc:	1e5e      	subs	r6, r3, #1
  4054be:	2e00      	cmp	r6, #0
  4054c0:	f77f af0a 	ble.w	4052d8 <_svfprintf_r+0xa3c>
  4054c4:	2e10      	cmp	r6, #16
  4054c6:	4d03      	ldr	r5, [pc, #12]	; (4054d4 <_svfprintf_r+0xc38>)
  4054c8:	dd22      	ble.n	405510 <_svfprintf_r+0xc74>
  4054ca:	4622      	mov	r2, r4
  4054cc:	f04f 0b10 	mov.w	fp, #16
  4054d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4054d2:	e006      	b.n	4054e2 <_svfprintf_r+0xc46>
  4054d4:	0040a420 	.word	0x0040a420
  4054d8:	3e10      	subs	r6, #16
  4054da:	2e10      	cmp	r6, #16
  4054dc:	f108 0808 	add.w	r8, r8, #8
  4054e0:	dd15      	ble.n	40550e <_svfprintf_r+0xc72>
  4054e2:	3701      	adds	r7, #1
  4054e4:	3210      	adds	r2, #16
  4054e6:	2f07      	cmp	r7, #7
  4054e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4054ea:	9726      	str	r7, [sp, #152]	; 0x98
  4054ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4054f0:	ddf2      	ble.n	4054d8 <_svfprintf_r+0xc3c>
  4054f2:	aa25      	add	r2, sp, #148	; 0x94
  4054f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054f6:	4620      	mov	r0, r4
  4054f8:	f003 fdf2 	bl	4090e0 <__ssprint_r>
  4054fc:	2800      	cmp	r0, #0
  4054fe:	f47f aa9f 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405502:	3e10      	subs	r6, #16
  405504:	2e10      	cmp	r6, #16
  405506:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405508:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40550a:	46c8      	mov	r8, r9
  40550c:	dce9      	bgt.n	4054e2 <_svfprintf_r+0xc46>
  40550e:	4614      	mov	r4, r2
  405510:	3701      	adds	r7, #1
  405512:	4434      	add	r4, r6
  405514:	2f07      	cmp	r7, #7
  405516:	9427      	str	r4, [sp, #156]	; 0x9c
  405518:	9726      	str	r7, [sp, #152]	; 0x98
  40551a:	e888 0060 	stmia.w	r8, {r5, r6}
  40551e:	f77f aed9 	ble.w	4052d4 <_svfprintf_r+0xa38>
  405522:	aa25      	add	r2, sp, #148	; 0x94
  405524:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405526:	980c      	ldr	r0, [sp, #48]	; 0x30
  405528:	f003 fdda 	bl	4090e0 <__ssprint_r>
  40552c:	2800      	cmp	r0, #0
  40552e:	f47f aa87 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405532:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405534:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405536:	46c8      	mov	r8, r9
  405538:	e6ce      	b.n	4052d8 <_svfprintf_r+0xa3c>
  40553a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40553c:	6814      	ldr	r4, [r2, #0]
  40553e:	4613      	mov	r3, r2
  405540:	3304      	adds	r3, #4
  405542:	17e5      	asrs	r5, r4, #31
  405544:	930f      	str	r3, [sp, #60]	; 0x3c
  405546:	4622      	mov	r2, r4
  405548:	462b      	mov	r3, r5
  40554a:	e4fa      	b.n	404f42 <_svfprintf_r+0x6a6>
  40554c:	3204      	adds	r2, #4
  40554e:	681c      	ldr	r4, [r3, #0]
  405550:	920f      	str	r2, [sp, #60]	; 0x3c
  405552:	2301      	movs	r3, #1
  405554:	2500      	movs	r5, #0
  405556:	f7ff ba94 	b.w	404a82 <_svfprintf_r+0x1e6>
  40555a:	681c      	ldr	r4, [r3, #0]
  40555c:	3304      	adds	r3, #4
  40555e:	930f      	str	r3, [sp, #60]	; 0x3c
  405560:	2500      	movs	r5, #0
  405562:	e421      	b.n	404da8 <_svfprintf_r+0x50c>
  405564:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405566:	460a      	mov	r2, r1
  405568:	3204      	adds	r2, #4
  40556a:	680c      	ldr	r4, [r1, #0]
  40556c:	920f      	str	r2, [sp, #60]	; 0x3c
  40556e:	2500      	movs	r5, #0
  405570:	f7ff ba87 	b.w	404a82 <_svfprintf_r+0x1e6>
  405574:	4614      	mov	r4, r2
  405576:	3301      	adds	r3, #1
  405578:	4434      	add	r4, r6
  40557a:	2b07      	cmp	r3, #7
  40557c:	9427      	str	r4, [sp, #156]	; 0x9c
  40557e:	9326      	str	r3, [sp, #152]	; 0x98
  405580:	e888 0060 	stmia.w	r8, {r5, r6}
  405584:	f77f ab68 	ble.w	404c58 <_svfprintf_r+0x3bc>
  405588:	e6b3      	b.n	4052f2 <_svfprintf_r+0xa56>
  40558a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40558e:	f8cd b01c 	str.w	fp, [sp, #28]
  405592:	ae42      	add	r6, sp, #264	; 0x108
  405594:	3430      	adds	r4, #48	; 0x30
  405596:	2301      	movs	r3, #1
  405598:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40559c:	930e      	str	r3, [sp, #56]	; 0x38
  40559e:	f7ff ba8d 	b.w	404abc <_svfprintf_r+0x220>
  4055a2:	aa25      	add	r2, sp, #148	; 0x94
  4055a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055a8:	f003 fd9a 	bl	4090e0 <__ssprint_r>
  4055ac:	2800      	cmp	r0, #0
  4055ae:	f47f aa47 	bne.w	404a40 <_svfprintf_r+0x1a4>
  4055b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055b4:	46c8      	mov	r8, r9
  4055b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4055b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4055ba:	429a      	cmp	r2, r3
  4055bc:	db44      	blt.n	405648 <_svfprintf_r+0xdac>
  4055be:	9b07      	ldr	r3, [sp, #28]
  4055c0:	07d9      	lsls	r1, r3, #31
  4055c2:	d441      	bmi.n	405648 <_svfprintf_r+0xdac>
  4055c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4055c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4055c8:	1a9a      	subs	r2, r3, r2
  4055ca:	1a1d      	subs	r5, r3, r0
  4055cc:	4295      	cmp	r5, r2
  4055ce:	bfa8      	it	ge
  4055d0:	4615      	movge	r5, r2
  4055d2:	2d00      	cmp	r5, #0
  4055d4:	dd0e      	ble.n	4055f4 <_svfprintf_r+0xd58>
  4055d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4055d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4055dc:	3101      	adds	r1, #1
  4055de:	4406      	add	r6, r0
  4055e0:	442c      	add	r4, r5
  4055e2:	2907      	cmp	r1, #7
  4055e4:	f8c8 6000 	str.w	r6, [r8]
  4055e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4055ea:	9126      	str	r1, [sp, #152]	; 0x98
  4055ec:	f300 823b 	bgt.w	405a66 <_svfprintf_r+0x11ca>
  4055f0:	f108 0808 	add.w	r8, r8, #8
  4055f4:	2d00      	cmp	r5, #0
  4055f6:	bfac      	ite	ge
  4055f8:	1b56      	subge	r6, r2, r5
  4055fa:	4616      	movlt	r6, r2
  4055fc:	2e00      	cmp	r6, #0
  4055fe:	f77f ab2d 	ble.w	404c5c <_svfprintf_r+0x3c0>
  405602:	2e10      	cmp	r6, #16
  405604:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405606:	4db0      	ldr	r5, [pc, #704]	; (4058c8 <_svfprintf_r+0x102c>)
  405608:	ddb5      	ble.n	405576 <_svfprintf_r+0xcda>
  40560a:	4622      	mov	r2, r4
  40560c:	2710      	movs	r7, #16
  40560e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405612:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405614:	e004      	b.n	405620 <_svfprintf_r+0xd84>
  405616:	f108 0808 	add.w	r8, r8, #8
  40561a:	3e10      	subs	r6, #16
  40561c:	2e10      	cmp	r6, #16
  40561e:	dda9      	ble.n	405574 <_svfprintf_r+0xcd8>
  405620:	3301      	adds	r3, #1
  405622:	3210      	adds	r2, #16
  405624:	2b07      	cmp	r3, #7
  405626:	9227      	str	r2, [sp, #156]	; 0x9c
  405628:	9326      	str	r3, [sp, #152]	; 0x98
  40562a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40562e:	ddf2      	ble.n	405616 <_svfprintf_r+0xd7a>
  405630:	aa25      	add	r2, sp, #148	; 0x94
  405632:	4621      	mov	r1, r4
  405634:	4658      	mov	r0, fp
  405636:	f003 fd53 	bl	4090e0 <__ssprint_r>
  40563a:	2800      	cmp	r0, #0
  40563c:	f47f aa00 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405640:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405642:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405644:	46c8      	mov	r8, r9
  405646:	e7e8      	b.n	40561a <_svfprintf_r+0xd7e>
  405648:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40564a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40564c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40564e:	f8c8 1000 	str.w	r1, [r8]
  405652:	3301      	adds	r3, #1
  405654:	4404      	add	r4, r0
  405656:	2b07      	cmp	r3, #7
  405658:	9427      	str	r4, [sp, #156]	; 0x9c
  40565a:	f8c8 0004 	str.w	r0, [r8, #4]
  40565e:	9326      	str	r3, [sp, #152]	; 0x98
  405660:	f300 81f5 	bgt.w	405a4e <_svfprintf_r+0x11b2>
  405664:	f108 0808 	add.w	r8, r8, #8
  405668:	e7ac      	b.n	4055c4 <_svfprintf_r+0xd28>
  40566a:	9b07      	ldr	r3, [sp, #28]
  40566c:	07da      	lsls	r2, r3, #31
  40566e:	f53f adfe 	bmi.w	40526e <_svfprintf_r+0x9d2>
  405672:	3701      	adds	r7, #1
  405674:	3401      	adds	r4, #1
  405676:	2301      	movs	r3, #1
  405678:	2f07      	cmp	r7, #7
  40567a:	9427      	str	r4, [sp, #156]	; 0x9c
  40567c:	9726      	str	r7, [sp, #152]	; 0x98
  40567e:	f8c8 6000 	str.w	r6, [r8]
  405682:	f8c8 3004 	str.w	r3, [r8, #4]
  405686:	f77f ae25 	ble.w	4052d4 <_svfprintf_r+0xa38>
  40568a:	e74a      	b.n	405522 <_svfprintf_r+0xc86>
  40568c:	aa25      	add	r2, sp, #148	; 0x94
  40568e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405690:	980c      	ldr	r0, [sp, #48]	; 0x30
  405692:	f003 fd25 	bl	4090e0 <__ssprint_r>
  405696:	2800      	cmp	r0, #0
  405698:	f47f a9d2 	bne.w	404a40 <_svfprintf_r+0x1a4>
  40569c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40569e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4056a0:	46c8      	mov	r8, r9
  4056a2:	e5f2      	b.n	40528a <_svfprintf_r+0x9ee>
  4056a4:	aa25      	add	r2, sp, #148	; 0x94
  4056a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056aa:	f003 fd19 	bl	4090e0 <__ssprint_r>
  4056ae:	2800      	cmp	r0, #0
  4056b0:	f47f a9c6 	bne.w	404a40 <_svfprintf_r+0x1a4>
  4056b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4056b8:	46c8      	mov	r8, r9
  4056ba:	e5f5      	b.n	4052a8 <_svfprintf_r+0xa0c>
  4056bc:	464e      	mov	r6, r9
  4056be:	f7ff b9fd 	b.w	404abc <_svfprintf_r+0x220>
  4056c2:	aa25      	add	r2, sp, #148	; 0x94
  4056c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056c8:	f003 fd0a 	bl	4090e0 <__ssprint_r>
  4056cc:	2800      	cmp	r0, #0
  4056ce:	f47f a9b7 	bne.w	404a40 <_svfprintf_r+0x1a4>
  4056d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056d4:	46c8      	mov	r8, r9
  4056d6:	f7ff ba72 	b.w	404bbe <_svfprintf_r+0x322>
  4056da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4056dc:	4622      	mov	r2, r4
  4056de:	4620      	mov	r0, r4
  4056e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4056e2:	4623      	mov	r3, r4
  4056e4:	4621      	mov	r1, r4
  4056e6:	f004 fbc9 	bl	409e7c <__aeabi_dcmpun>
  4056ea:	2800      	cmp	r0, #0
  4056ec:	f040 8286 	bne.w	405bfc <_svfprintf_r+0x1360>
  4056f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056f2:	3301      	adds	r3, #1
  4056f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056f6:	f023 0320 	bic.w	r3, r3, #32
  4056fa:	930e      	str	r3, [sp, #56]	; 0x38
  4056fc:	f000 81e2 	beq.w	405ac4 <_svfprintf_r+0x1228>
  405700:	2b47      	cmp	r3, #71	; 0x47
  405702:	f000 811e 	beq.w	405942 <_svfprintf_r+0x10a6>
  405706:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40570a:	9307      	str	r3, [sp, #28]
  40570c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40570e:	1e1f      	subs	r7, r3, #0
  405710:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405712:	9308      	str	r3, [sp, #32]
  405714:	bfbb      	ittet	lt
  405716:	463b      	movlt	r3, r7
  405718:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40571c:	2300      	movge	r3, #0
  40571e:	232d      	movlt	r3, #45	; 0x2d
  405720:	9310      	str	r3, [sp, #64]	; 0x40
  405722:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405724:	2b66      	cmp	r3, #102	; 0x66
  405726:	f000 81bb 	beq.w	405aa0 <_svfprintf_r+0x1204>
  40572a:	2b46      	cmp	r3, #70	; 0x46
  40572c:	f000 80df 	beq.w	4058ee <_svfprintf_r+0x1052>
  405730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405732:	9a08      	ldr	r2, [sp, #32]
  405734:	2b45      	cmp	r3, #69	; 0x45
  405736:	bf0c      	ite	eq
  405738:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40573a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40573c:	a823      	add	r0, sp, #140	; 0x8c
  40573e:	a920      	add	r1, sp, #128	; 0x80
  405740:	bf08      	it	eq
  405742:	1c5d      	addeq	r5, r3, #1
  405744:	9004      	str	r0, [sp, #16]
  405746:	9103      	str	r1, [sp, #12]
  405748:	a81f      	add	r0, sp, #124	; 0x7c
  40574a:	2102      	movs	r1, #2
  40574c:	463b      	mov	r3, r7
  40574e:	9002      	str	r0, [sp, #8]
  405750:	9501      	str	r5, [sp, #4]
  405752:	9100      	str	r1, [sp, #0]
  405754:	980c      	ldr	r0, [sp, #48]	; 0x30
  405756:	f001 faa3 	bl	406ca0 <_dtoa_r>
  40575a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40575c:	2b67      	cmp	r3, #103	; 0x67
  40575e:	4606      	mov	r6, r0
  405760:	f040 81e0 	bne.w	405b24 <_svfprintf_r+0x1288>
  405764:	f01b 0f01 	tst.w	fp, #1
  405768:	f000 8246 	beq.w	405bf8 <_svfprintf_r+0x135c>
  40576c:	1974      	adds	r4, r6, r5
  40576e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405770:	9808      	ldr	r0, [sp, #32]
  405772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405774:	4639      	mov	r1, r7
  405776:	f004 fb4f 	bl	409e18 <__aeabi_dcmpeq>
  40577a:	2800      	cmp	r0, #0
  40577c:	f040 8165 	bne.w	405a4a <_svfprintf_r+0x11ae>
  405780:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405782:	42a3      	cmp	r3, r4
  405784:	d206      	bcs.n	405794 <_svfprintf_r+0xef8>
  405786:	2130      	movs	r1, #48	; 0x30
  405788:	1c5a      	adds	r2, r3, #1
  40578a:	9223      	str	r2, [sp, #140]	; 0x8c
  40578c:	7019      	strb	r1, [r3, #0]
  40578e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405790:	429c      	cmp	r4, r3
  405792:	d8f9      	bhi.n	405788 <_svfprintf_r+0xeec>
  405794:	1b9b      	subs	r3, r3, r6
  405796:	9313      	str	r3, [sp, #76]	; 0x4c
  405798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40579a:	2b47      	cmp	r3, #71	; 0x47
  40579c:	f000 80e9 	beq.w	405972 <_svfprintf_r+0x10d6>
  4057a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057a2:	2b65      	cmp	r3, #101	; 0x65
  4057a4:	f340 81cd 	ble.w	405b42 <_svfprintf_r+0x12a6>
  4057a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057aa:	2b66      	cmp	r3, #102	; 0x66
  4057ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4057ae:	9312      	str	r3, [sp, #72]	; 0x48
  4057b0:	f000 819e 	beq.w	405af0 <_svfprintf_r+0x1254>
  4057b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4057b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4057b8:	4619      	mov	r1, r3
  4057ba:	4291      	cmp	r1, r2
  4057bc:	f300 818a 	bgt.w	405ad4 <_svfprintf_r+0x1238>
  4057c0:	f01b 0f01 	tst.w	fp, #1
  4057c4:	f040 8213 	bne.w	405bee <_svfprintf_r+0x1352>
  4057c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4057cc:	9308      	str	r3, [sp, #32]
  4057ce:	2367      	movs	r3, #103	; 0x67
  4057d0:	920e      	str	r2, [sp, #56]	; 0x38
  4057d2:	9311      	str	r3, [sp, #68]	; 0x44
  4057d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4057d6:	2b00      	cmp	r3, #0
  4057d8:	f040 80c4 	bne.w	405964 <_svfprintf_r+0x10c8>
  4057dc:	930a      	str	r3, [sp, #40]	; 0x28
  4057de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4057e2:	f7ff b973 	b.w	404acc <_svfprintf_r+0x230>
  4057e6:	4635      	mov	r5, r6
  4057e8:	460c      	mov	r4, r1
  4057ea:	4646      	mov	r6, r8
  4057ec:	4690      	mov	r8, r2
  4057ee:	3301      	adds	r3, #1
  4057f0:	443c      	add	r4, r7
  4057f2:	2b07      	cmp	r3, #7
  4057f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4057f6:	9326      	str	r3, [sp, #152]	; 0x98
  4057f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4057fc:	f73f aed1 	bgt.w	4055a2 <_svfprintf_r+0xd06>
  405800:	f108 0808 	add.w	r8, r8, #8
  405804:	e6d7      	b.n	4055b6 <_svfprintf_r+0xd1a>
  405806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405808:	6813      	ldr	r3, [r2, #0]
  40580a:	3204      	adds	r2, #4
  40580c:	920f      	str	r2, [sp, #60]	; 0x3c
  40580e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405810:	601a      	str	r2, [r3, #0]
  405812:	f7ff b86a 	b.w	4048ea <_svfprintf_r+0x4e>
  405816:	aa25      	add	r2, sp, #148	; 0x94
  405818:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40581a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40581c:	f003 fc60 	bl	4090e0 <__ssprint_r>
  405820:	2800      	cmp	r0, #0
  405822:	f47f a90d 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405826:	46c8      	mov	r8, r9
  405828:	e48d      	b.n	405146 <_svfprintf_r+0x8aa>
  40582a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40582c:	4a27      	ldr	r2, [pc, #156]	; (4058cc <_svfprintf_r+0x1030>)
  40582e:	f8c8 2000 	str.w	r2, [r8]
  405832:	3301      	adds	r3, #1
  405834:	3401      	adds	r4, #1
  405836:	2201      	movs	r2, #1
  405838:	2b07      	cmp	r3, #7
  40583a:	9427      	str	r4, [sp, #156]	; 0x9c
  40583c:	9326      	str	r3, [sp, #152]	; 0x98
  40583e:	f8c8 2004 	str.w	r2, [r8, #4]
  405842:	dc72      	bgt.n	40592a <_svfprintf_r+0x108e>
  405844:	f108 0808 	add.w	r8, r8, #8
  405848:	b929      	cbnz	r1, 405856 <_svfprintf_r+0xfba>
  40584a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40584c:	b91b      	cbnz	r3, 405856 <_svfprintf_r+0xfba>
  40584e:	9b07      	ldr	r3, [sp, #28]
  405850:	07d8      	lsls	r0, r3, #31
  405852:	f57f aa03 	bpl.w	404c5c <_svfprintf_r+0x3c0>
  405856:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405858:	9819      	ldr	r0, [sp, #100]	; 0x64
  40585a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40585c:	f8c8 2000 	str.w	r2, [r8]
  405860:	3301      	adds	r3, #1
  405862:	4602      	mov	r2, r0
  405864:	4422      	add	r2, r4
  405866:	2b07      	cmp	r3, #7
  405868:	9227      	str	r2, [sp, #156]	; 0x9c
  40586a:	f8c8 0004 	str.w	r0, [r8, #4]
  40586e:	9326      	str	r3, [sp, #152]	; 0x98
  405870:	f300 818d 	bgt.w	405b8e <_svfprintf_r+0x12f2>
  405874:	f108 0808 	add.w	r8, r8, #8
  405878:	2900      	cmp	r1, #0
  40587a:	f2c0 8165 	blt.w	405b48 <_svfprintf_r+0x12ac>
  40587e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405880:	f8c8 6000 	str.w	r6, [r8]
  405884:	3301      	adds	r3, #1
  405886:	188c      	adds	r4, r1, r2
  405888:	2b07      	cmp	r3, #7
  40588a:	9427      	str	r4, [sp, #156]	; 0x9c
  40588c:	9326      	str	r3, [sp, #152]	; 0x98
  40588e:	f8c8 1004 	str.w	r1, [r8, #4]
  405892:	f77f a9e1 	ble.w	404c58 <_svfprintf_r+0x3bc>
  405896:	e52c      	b.n	4052f2 <_svfprintf_r+0xa56>
  405898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40589a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40589c:	6813      	ldr	r3, [r2, #0]
  40589e:	17cd      	asrs	r5, r1, #31
  4058a0:	4608      	mov	r0, r1
  4058a2:	3204      	adds	r2, #4
  4058a4:	4629      	mov	r1, r5
  4058a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4058a8:	e9c3 0100 	strd	r0, r1, [r3]
  4058ac:	f7ff b81d 	b.w	4048ea <_svfprintf_r+0x4e>
  4058b0:	aa25      	add	r2, sp, #148	; 0x94
  4058b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058b6:	f003 fc13 	bl	4090e0 <__ssprint_r>
  4058ba:	2800      	cmp	r0, #0
  4058bc:	f47f a8c0 	bne.w	404a40 <_svfprintf_r+0x1a4>
  4058c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058c2:	46c8      	mov	r8, r9
  4058c4:	e458      	b.n	405178 <_svfprintf_r+0x8dc>
  4058c6:	bf00      	nop
  4058c8:	0040a420 	.word	0x0040a420
  4058cc:	0040a40c 	.word	0x0040a40c
  4058d0:	2140      	movs	r1, #64	; 0x40
  4058d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058d4:	f7fe f8e4 	bl	403aa0 <_malloc_r>
  4058d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4058da:	6010      	str	r0, [r2, #0]
  4058dc:	6110      	str	r0, [r2, #16]
  4058de:	2800      	cmp	r0, #0
  4058e0:	f000 81f2 	beq.w	405cc8 <_svfprintf_r+0x142c>
  4058e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4058e6:	2340      	movs	r3, #64	; 0x40
  4058e8:	6153      	str	r3, [r2, #20]
  4058ea:	f7fe bfee 	b.w	4048ca <_svfprintf_r+0x2e>
  4058ee:	a823      	add	r0, sp, #140	; 0x8c
  4058f0:	a920      	add	r1, sp, #128	; 0x80
  4058f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4058f4:	9004      	str	r0, [sp, #16]
  4058f6:	9103      	str	r1, [sp, #12]
  4058f8:	a81f      	add	r0, sp, #124	; 0x7c
  4058fa:	2103      	movs	r1, #3
  4058fc:	9002      	str	r0, [sp, #8]
  4058fe:	9a08      	ldr	r2, [sp, #32]
  405900:	9401      	str	r4, [sp, #4]
  405902:	463b      	mov	r3, r7
  405904:	9100      	str	r1, [sp, #0]
  405906:	980c      	ldr	r0, [sp, #48]	; 0x30
  405908:	f001 f9ca 	bl	406ca0 <_dtoa_r>
  40590c:	4625      	mov	r5, r4
  40590e:	4606      	mov	r6, r0
  405910:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405912:	2b46      	cmp	r3, #70	; 0x46
  405914:	eb06 0405 	add.w	r4, r6, r5
  405918:	f47f af29 	bne.w	40576e <_svfprintf_r+0xed2>
  40591c:	7833      	ldrb	r3, [r6, #0]
  40591e:	2b30      	cmp	r3, #48	; 0x30
  405920:	f000 8178 	beq.w	405c14 <_svfprintf_r+0x1378>
  405924:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405926:	442c      	add	r4, r5
  405928:	e721      	b.n	40576e <_svfprintf_r+0xed2>
  40592a:	aa25      	add	r2, sp, #148	; 0x94
  40592c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40592e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405930:	f003 fbd6 	bl	4090e0 <__ssprint_r>
  405934:	2800      	cmp	r0, #0
  405936:	f47f a883 	bne.w	404a40 <_svfprintf_r+0x1a4>
  40593a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40593c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40593e:	46c8      	mov	r8, r9
  405940:	e782      	b.n	405848 <_svfprintf_r+0xfac>
  405942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405944:	2b00      	cmp	r3, #0
  405946:	bf08      	it	eq
  405948:	2301      	moveq	r3, #1
  40594a:	930a      	str	r3, [sp, #40]	; 0x28
  40594c:	e6db      	b.n	405706 <_svfprintf_r+0xe6a>
  40594e:	4630      	mov	r0, r6
  405950:	940a      	str	r4, [sp, #40]	; 0x28
  405952:	f7fe ff35 	bl	4047c0 <strlen>
  405956:	950f      	str	r5, [sp, #60]	; 0x3c
  405958:	900e      	str	r0, [sp, #56]	; 0x38
  40595a:	f8cd b01c 	str.w	fp, [sp, #28]
  40595e:	4603      	mov	r3, r0
  405960:	f7ff b9f9 	b.w	404d56 <_svfprintf_r+0x4ba>
  405964:	272d      	movs	r7, #45	; 0x2d
  405966:	2300      	movs	r3, #0
  405968:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40596c:	930a      	str	r3, [sp, #40]	; 0x28
  40596e:	f7ff b8ae 	b.w	404ace <_svfprintf_r+0x232>
  405972:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405974:	9312      	str	r3, [sp, #72]	; 0x48
  405976:	461a      	mov	r2, r3
  405978:	3303      	adds	r3, #3
  40597a:	db04      	blt.n	405986 <_svfprintf_r+0x10ea>
  40597c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40597e:	4619      	mov	r1, r3
  405980:	4291      	cmp	r1, r2
  405982:	f6bf af17 	bge.w	4057b4 <_svfprintf_r+0xf18>
  405986:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405988:	3b02      	subs	r3, #2
  40598a:	9311      	str	r3, [sp, #68]	; 0x44
  40598c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405990:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405994:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405996:	3b01      	subs	r3, #1
  405998:	2b00      	cmp	r3, #0
  40599a:	931f      	str	r3, [sp, #124]	; 0x7c
  40599c:	bfbd      	ittte	lt
  40599e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4059a0:	f1c3 0301 	rsblt	r3, r3, #1
  4059a4:	222d      	movlt	r2, #45	; 0x2d
  4059a6:	222b      	movge	r2, #43	; 0x2b
  4059a8:	2b09      	cmp	r3, #9
  4059aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4059ae:	f340 8116 	ble.w	405bde <_svfprintf_r+0x1342>
  4059b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4059b6:	4620      	mov	r0, r4
  4059b8:	4dab      	ldr	r5, [pc, #684]	; (405c68 <_svfprintf_r+0x13cc>)
  4059ba:	e000      	b.n	4059be <_svfprintf_r+0x1122>
  4059bc:	4610      	mov	r0, r2
  4059be:	fb85 1203 	smull	r1, r2, r5, r3
  4059c2:	17d9      	asrs	r1, r3, #31
  4059c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4059c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4059cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4059d0:	3230      	adds	r2, #48	; 0x30
  4059d2:	2909      	cmp	r1, #9
  4059d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4059d8:	460b      	mov	r3, r1
  4059da:	f100 32ff 	add.w	r2, r0, #4294967295
  4059de:	dced      	bgt.n	4059bc <_svfprintf_r+0x1120>
  4059e0:	3330      	adds	r3, #48	; 0x30
  4059e2:	3802      	subs	r0, #2
  4059e4:	b2d9      	uxtb	r1, r3
  4059e6:	4284      	cmp	r4, r0
  4059e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4059ec:	f240 8165 	bls.w	405cba <_svfprintf_r+0x141e>
  4059f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4059f4:	4613      	mov	r3, r2
  4059f6:	e001      	b.n	4059fc <_svfprintf_r+0x1160>
  4059f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4059fc:	f800 1b01 	strb.w	r1, [r0], #1
  405a00:	42a3      	cmp	r3, r4
  405a02:	d1f9      	bne.n	4059f8 <_svfprintf_r+0x115c>
  405a04:	3301      	adds	r3, #1
  405a06:	1a9b      	subs	r3, r3, r2
  405a08:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405a0c:	4413      	add	r3, r2
  405a0e:	aa21      	add	r2, sp, #132	; 0x84
  405a10:	1a9b      	subs	r3, r3, r2
  405a12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405a14:	931b      	str	r3, [sp, #108]	; 0x6c
  405a16:	2a01      	cmp	r2, #1
  405a18:	4413      	add	r3, r2
  405a1a:	930e      	str	r3, [sp, #56]	; 0x38
  405a1c:	f340 8119 	ble.w	405c52 <_svfprintf_r+0x13b6>
  405a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a22:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405a24:	4413      	add	r3, r2
  405a26:	930e      	str	r3, [sp, #56]	; 0x38
  405a28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405a2c:	9308      	str	r3, [sp, #32]
  405a2e:	2300      	movs	r3, #0
  405a30:	9312      	str	r3, [sp, #72]	; 0x48
  405a32:	e6cf      	b.n	4057d4 <_svfprintf_r+0xf38>
  405a34:	aa25      	add	r2, sp, #148	; 0x94
  405a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a38:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a3a:	f003 fb51 	bl	4090e0 <__ssprint_r>
  405a3e:	2800      	cmp	r0, #0
  405a40:	f47e affe 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405a44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a46:	46c8      	mov	r8, r9
  405a48:	e4d7      	b.n	4053fa <_svfprintf_r+0xb5e>
  405a4a:	4623      	mov	r3, r4
  405a4c:	e6a2      	b.n	405794 <_svfprintf_r+0xef8>
  405a4e:	aa25      	add	r2, sp, #148	; 0x94
  405a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a52:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a54:	f003 fb44 	bl	4090e0 <__ssprint_r>
  405a58:	2800      	cmp	r0, #0
  405a5a:	f47e aff1 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405a5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405a60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a62:	46c8      	mov	r8, r9
  405a64:	e5ae      	b.n	4055c4 <_svfprintf_r+0xd28>
  405a66:	aa25      	add	r2, sp, #148	; 0x94
  405a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a6c:	f003 fb38 	bl	4090e0 <__ssprint_r>
  405a70:	2800      	cmp	r0, #0
  405a72:	f47e afe5 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405a76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405a7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a7c:	1a9a      	subs	r2, r3, r2
  405a7e:	46c8      	mov	r8, r9
  405a80:	e5b8      	b.n	4055f4 <_svfprintf_r+0xd58>
  405a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a84:	9612      	str	r6, [sp, #72]	; 0x48
  405a86:	2b06      	cmp	r3, #6
  405a88:	bf28      	it	cs
  405a8a:	2306      	movcs	r3, #6
  405a8c:	960a      	str	r6, [sp, #40]	; 0x28
  405a8e:	4637      	mov	r7, r6
  405a90:	9308      	str	r3, [sp, #32]
  405a92:	950f      	str	r5, [sp, #60]	; 0x3c
  405a94:	f8cd b01c 	str.w	fp, [sp, #28]
  405a98:	930e      	str	r3, [sp, #56]	; 0x38
  405a9a:	4e74      	ldr	r6, [pc, #464]	; (405c6c <_svfprintf_r+0x13d0>)
  405a9c:	f7ff b816 	b.w	404acc <_svfprintf_r+0x230>
  405aa0:	a823      	add	r0, sp, #140	; 0x8c
  405aa2:	a920      	add	r1, sp, #128	; 0x80
  405aa4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405aa6:	9004      	str	r0, [sp, #16]
  405aa8:	9103      	str	r1, [sp, #12]
  405aaa:	a81f      	add	r0, sp, #124	; 0x7c
  405aac:	2103      	movs	r1, #3
  405aae:	9002      	str	r0, [sp, #8]
  405ab0:	9a08      	ldr	r2, [sp, #32]
  405ab2:	9501      	str	r5, [sp, #4]
  405ab4:	463b      	mov	r3, r7
  405ab6:	9100      	str	r1, [sp, #0]
  405ab8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aba:	f001 f8f1 	bl	406ca0 <_dtoa_r>
  405abe:	4606      	mov	r6, r0
  405ac0:	1944      	adds	r4, r0, r5
  405ac2:	e72b      	b.n	40591c <_svfprintf_r+0x1080>
  405ac4:	2306      	movs	r3, #6
  405ac6:	930a      	str	r3, [sp, #40]	; 0x28
  405ac8:	e61d      	b.n	405706 <_svfprintf_r+0xe6a>
  405aca:	272d      	movs	r7, #45	; 0x2d
  405acc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405ad0:	f7ff bacd 	b.w	40506e <_svfprintf_r+0x7d2>
  405ad4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ad8:	4413      	add	r3, r2
  405ada:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405adc:	930e      	str	r3, [sp, #56]	; 0x38
  405ade:	2a00      	cmp	r2, #0
  405ae0:	f340 80b0 	ble.w	405c44 <_svfprintf_r+0x13a8>
  405ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ae8:	9308      	str	r3, [sp, #32]
  405aea:	2367      	movs	r3, #103	; 0x67
  405aec:	9311      	str	r3, [sp, #68]	; 0x44
  405aee:	e671      	b.n	4057d4 <_svfprintf_r+0xf38>
  405af0:	2b00      	cmp	r3, #0
  405af2:	f340 80c3 	ble.w	405c7c <_svfprintf_r+0x13e0>
  405af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405af8:	2a00      	cmp	r2, #0
  405afa:	f040 8099 	bne.w	405c30 <_svfprintf_r+0x1394>
  405afe:	f01b 0f01 	tst.w	fp, #1
  405b02:	f040 8095 	bne.w	405c30 <_svfprintf_r+0x1394>
  405b06:	9308      	str	r3, [sp, #32]
  405b08:	930e      	str	r3, [sp, #56]	; 0x38
  405b0a:	e663      	b.n	4057d4 <_svfprintf_r+0xf38>
  405b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b0e:	9308      	str	r3, [sp, #32]
  405b10:	930e      	str	r3, [sp, #56]	; 0x38
  405b12:	900a      	str	r0, [sp, #40]	; 0x28
  405b14:	950f      	str	r5, [sp, #60]	; 0x3c
  405b16:	f8cd b01c 	str.w	fp, [sp, #28]
  405b1a:	9012      	str	r0, [sp, #72]	; 0x48
  405b1c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405b20:	f7fe bfd4 	b.w	404acc <_svfprintf_r+0x230>
  405b24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405b26:	2b47      	cmp	r3, #71	; 0x47
  405b28:	f47f ae20 	bne.w	40576c <_svfprintf_r+0xed0>
  405b2c:	f01b 0f01 	tst.w	fp, #1
  405b30:	f47f aeee 	bne.w	405910 <_svfprintf_r+0x1074>
  405b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405b36:	1b9b      	subs	r3, r3, r6
  405b38:	9313      	str	r3, [sp, #76]	; 0x4c
  405b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b3c:	2b47      	cmp	r3, #71	; 0x47
  405b3e:	f43f af18 	beq.w	405972 <_svfprintf_r+0x10d6>
  405b42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405b44:	9312      	str	r3, [sp, #72]	; 0x48
  405b46:	e721      	b.n	40598c <_svfprintf_r+0x10f0>
  405b48:	424f      	negs	r7, r1
  405b4a:	3110      	adds	r1, #16
  405b4c:	4d48      	ldr	r5, [pc, #288]	; (405c70 <_svfprintf_r+0x13d4>)
  405b4e:	da2f      	bge.n	405bb0 <_svfprintf_r+0x1314>
  405b50:	2410      	movs	r4, #16
  405b52:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405b56:	e004      	b.n	405b62 <_svfprintf_r+0x12c6>
  405b58:	f108 0808 	add.w	r8, r8, #8
  405b5c:	3f10      	subs	r7, #16
  405b5e:	2f10      	cmp	r7, #16
  405b60:	dd26      	ble.n	405bb0 <_svfprintf_r+0x1314>
  405b62:	3301      	adds	r3, #1
  405b64:	3210      	adds	r2, #16
  405b66:	2b07      	cmp	r3, #7
  405b68:	9227      	str	r2, [sp, #156]	; 0x9c
  405b6a:	9326      	str	r3, [sp, #152]	; 0x98
  405b6c:	f8c8 5000 	str.w	r5, [r8]
  405b70:	f8c8 4004 	str.w	r4, [r8, #4]
  405b74:	ddf0      	ble.n	405b58 <_svfprintf_r+0x12bc>
  405b76:	aa25      	add	r2, sp, #148	; 0x94
  405b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b7a:	4658      	mov	r0, fp
  405b7c:	f003 fab0 	bl	4090e0 <__ssprint_r>
  405b80:	2800      	cmp	r0, #0
  405b82:	f47e af5d 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405b86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405b88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b8a:	46c8      	mov	r8, r9
  405b8c:	e7e6      	b.n	405b5c <_svfprintf_r+0x12c0>
  405b8e:	aa25      	add	r2, sp, #148	; 0x94
  405b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b92:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b94:	f003 faa4 	bl	4090e0 <__ssprint_r>
  405b98:	2800      	cmp	r0, #0
  405b9a:	f47e af51 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405b9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405ba0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405ba4:	46c8      	mov	r8, r9
  405ba6:	e667      	b.n	405878 <_svfprintf_r+0xfdc>
  405ba8:	2000      	movs	r0, #0
  405baa:	900a      	str	r0, [sp, #40]	; 0x28
  405bac:	f7fe bed0 	b.w	404950 <_svfprintf_r+0xb4>
  405bb0:	3301      	adds	r3, #1
  405bb2:	443a      	add	r2, r7
  405bb4:	2b07      	cmp	r3, #7
  405bb6:	e888 00a0 	stmia.w	r8, {r5, r7}
  405bba:	9227      	str	r2, [sp, #156]	; 0x9c
  405bbc:	9326      	str	r3, [sp, #152]	; 0x98
  405bbe:	f108 0808 	add.w	r8, r8, #8
  405bc2:	f77f ae5c 	ble.w	40587e <_svfprintf_r+0xfe2>
  405bc6:	aa25      	add	r2, sp, #148	; 0x94
  405bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405bca:	980c      	ldr	r0, [sp, #48]	; 0x30
  405bcc:	f003 fa88 	bl	4090e0 <__ssprint_r>
  405bd0:	2800      	cmp	r0, #0
  405bd2:	f47e af35 	bne.w	404a40 <_svfprintf_r+0x1a4>
  405bd6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405bd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bda:	46c8      	mov	r8, r9
  405bdc:	e64f      	b.n	40587e <_svfprintf_r+0xfe2>
  405bde:	3330      	adds	r3, #48	; 0x30
  405be0:	2230      	movs	r2, #48	; 0x30
  405be2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405be6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405bea:	ab22      	add	r3, sp, #136	; 0x88
  405bec:	e70f      	b.n	405a0e <_svfprintf_r+0x1172>
  405bee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405bf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405bf2:	4413      	add	r3, r2
  405bf4:	930e      	str	r3, [sp, #56]	; 0x38
  405bf6:	e775      	b.n	405ae4 <_svfprintf_r+0x1248>
  405bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405bfa:	e5cb      	b.n	405794 <_svfprintf_r+0xef8>
  405bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405bfe:	4e1d      	ldr	r6, [pc, #116]	; (405c74 <_svfprintf_r+0x13d8>)
  405c00:	2b00      	cmp	r3, #0
  405c02:	bfb6      	itet	lt
  405c04:	272d      	movlt	r7, #45	; 0x2d
  405c06:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405c0a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  405c0e:	4b1a      	ldr	r3, [pc, #104]	; (405c78 <_svfprintf_r+0x13dc>)
  405c10:	f7ff ba2f 	b.w	405072 <_svfprintf_r+0x7d6>
  405c14:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405c16:	9808      	ldr	r0, [sp, #32]
  405c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405c1a:	4639      	mov	r1, r7
  405c1c:	f004 f8fc 	bl	409e18 <__aeabi_dcmpeq>
  405c20:	2800      	cmp	r0, #0
  405c22:	f47f ae7f 	bne.w	405924 <_svfprintf_r+0x1088>
  405c26:	f1c5 0501 	rsb	r5, r5, #1
  405c2a:	951f      	str	r5, [sp, #124]	; 0x7c
  405c2c:	442c      	add	r4, r5
  405c2e:	e59e      	b.n	40576e <_svfprintf_r+0xed2>
  405c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c32:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405c34:	4413      	add	r3, r2
  405c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405c38:	441a      	add	r2, r3
  405c3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405c3e:	920e      	str	r2, [sp, #56]	; 0x38
  405c40:	9308      	str	r3, [sp, #32]
  405c42:	e5c7      	b.n	4057d4 <_svfprintf_r+0xf38>
  405c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405c48:	f1c3 0301 	rsb	r3, r3, #1
  405c4c:	441a      	add	r2, r3
  405c4e:	4613      	mov	r3, r2
  405c50:	e7d0      	b.n	405bf4 <_svfprintf_r+0x1358>
  405c52:	f01b 0301 	ands.w	r3, fp, #1
  405c56:	9312      	str	r3, [sp, #72]	; 0x48
  405c58:	f47f aee2 	bne.w	405a20 <_svfprintf_r+0x1184>
  405c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405c62:	9308      	str	r3, [sp, #32]
  405c64:	e5b6      	b.n	4057d4 <_svfprintf_r+0xf38>
  405c66:	bf00      	nop
  405c68:	66666667 	.word	0x66666667
  405c6c:	0040a404 	.word	0x0040a404
  405c70:	0040a420 	.word	0x0040a420
  405c74:	0040a3d8 	.word	0x0040a3d8
  405c78:	0040a3d4 	.word	0x0040a3d4
  405c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c7e:	b913      	cbnz	r3, 405c86 <_svfprintf_r+0x13ea>
  405c80:	f01b 0f01 	tst.w	fp, #1
  405c84:	d002      	beq.n	405c8c <_svfprintf_r+0x13f0>
  405c86:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405c88:	3301      	adds	r3, #1
  405c8a:	e7d4      	b.n	405c36 <_svfprintf_r+0x139a>
  405c8c:	2301      	movs	r3, #1
  405c8e:	e73a      	b.n	405b06 <_svfprintf_r+0x126a>
  405c90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405c92:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405c96:	6828      	ldr	r0, [r5, #0]
  405c98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405c9c:	900a      	str	r0, [sp, #40]	; 0x28
  405c9e:	4628      	mov	r0, r5
  405ca0:	3004      	adds	r0, #4
  405ca2:	46a2      	mov	sl, r4
  405ca4:	900f      	str	r0, [sp, #60]	; 0x3c
  405ca6:	f7fe be51 	b.w	40494c <_svfprintf_r+0xb0>
  405caa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405cae:	f7ff b867 	b.w	404d80 <_svfprintf_r+0x4e4>
  405cb2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405cb6:	f7ff ba15 	b.w	4050e4 <_svfprintf_r+0x848>
  405cba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405cbe:	e6a6      	b.n	405a0e <_svfprintf_r+0x1172>
  405cc0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405cc4:	f7ff b8eb 	b.w	404e9e <_svfprintf_r+0x602>
  405cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405cca:	230c      	movs	r3, #12
  405ccc:	6013      	str	r3, [r2, #0]
  405cce:	f04f 33ff 	mov.w	r3, #4294967295
  405cd2:	9309      	str	r3, [sp, #36]	; 0x24
  405cd4:	f7fe bebd 	b.w	404a52 <_svfprintf_r+0x1b6>
  405cd8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405cdc:	f7ff b99a 	b.w	405014 <_svfprintf_r+0x778>
  405ce0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405ce4:	f7ff b976 	b.w	404fd4 <_svfprintf_r+0x738>
  405ce8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405cec:	f7ff b959 	b.w	404fa2 <_svfprintf_r+0x706>
  405cf0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405cf4:	f7ff b912 	b.w	404f1c <_svfprintf_r+0x680>

00405cf8 <__sprint_r.part.0>:
  405cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cfc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405cfe:	049c      	lsls	r4, r3, #18
  405d00:	4693      	mov	fp, r2
  405d02:	d52f      	bpl.n	405d64 <__sprint_r.part.0+0x6c>
  405d04:	6893      	ldr	r3, [r2, #8]
  405d06:	6812      	ldr	r2, [r2, #0]
  405d08:	b353      	cbz	r3, 405d60 <__sprint_r.part.0+0x68>
  405d0a:	460e      	mov	r6, r1
  405d0c:	4607      	mov	r7, r0
  405d0e:	f102 0908 	add.w	r9, r2, #8
  405d12:	e919 0420 	ldmdb	r9, {r5, sl}
  405d16:	ea5f 089a 	movs.w	r8, sl, lsr #2
  405d1a:	d017      	beq.n	405d4c <__sprint_r.part.0+0x54>
  405d1c:	3d04      	subs	r5, #4
  405d1e:	2400      	movs	r4, #0
  405d20:	e001      	b.n	405d26 <__sprint_r.part.0+0x2e>
  405d22:	45a0      	cmp	r8, r4
  405d24:	d010      	beq.n	405d48 <__sprint_r.part.0+0x50>
  405d26:	4632      	mov	r2, r6
  405d28:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405d2c:	4638      	mov	r0, r7
  405d2e:	f002 f87b 	bl	407e28 <_fputwc_r>
  405d32:	1c43      	adds	r3, r0, #1
  405d34:	f104 0401 	add.w	r4, r4, #1
  405d38:	d1f3      	bne.n	405d22 <__sprint_r.part.0+0x2a>
  405d3a:	2300      	movs	r3, #0
  405d3c:	f8cb 3008 	str.w	r3, [fp, #8]
  405d40:	f8cb 3004 	str.w	r3, [fp, #4]
  405d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d48:	f8db 3008 	ldr.w	r3, [fp, #8]
  405d4c:	f02a 0a03 	bic.w	sl, sl, #3
  405d50:	eba3 030a 	sub.w	r3, r3, sl
  405d54:	f8cb 3008 	str.w	r3, [fp, #8]
  405d58:	f109 0908 	add.w	r9, r9, #8
  405d5c:	2b00      	cmp	r3, #0
  405d5e:	d1d8      	bne.n	405d12 <__sprint_r.part.0+0x1a>
  405d60:	2000      	movs	r0, #0
  405d62:	e7ea      	b.n	405d3a <__sprint_r.part.0+0x42>
  405d64:	f002 f9ca 	bl	4080fc <__sfvwrite_r>
  405d68:	2300      	movs	r3, #0
  405d6a:	f8cb 3008 	str.w	r3, [fp, #8]
  405d6e:	f8cb 3004 	str.w	r3, [fp, #4]
  405d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d76:	bf00      	nop

00405d78 <_vfiprintf_r>:
  405d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d7c:	b0ad      	sub	sp, #180	; 0xb4
  405d7e:	461d      	mov	r5, r3
  405d80:	468b      	mov	fp, r1
  405d82:	4690      	mov	r8, r2
  405d84:	9307      	str	r3, [sp, #28]
  405d86:	9006      	str	r0, [sp, #24]
  405d88:	b118      	cbz	r0, 405d92 <_vfiprintf_r+0x1a>
  405d8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405d8c:	2b00      	cmp	r3, #0
  405d8e:	f000 80f3 	beq.w	405f78 <_vfiprintf_r+0x200>
  405d92:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405d96:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405d9a:	07df      	lsls	r7, r3, #31
  405d9c:	b281      	uxth	r1, r0
  405d9e:	d402      	bmi.n	405da6 <_vfiprintf_r+0x2e>
  405da0:	058e      	lsls	r6, r1, #22
  405da2:	f140 80fc 	bpl.w	405f9e <_vfiprintf_r+0x226>
  405da6:	048c      	lsls	r4, r1, #18
  405da8:	d40a      	bmi.n	405dc0 <_vfiprintf_r+0x48>
  405daa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405dae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405db6:	f8ab 100c 	strh.w	r1, [fp, #12]
  405dba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405dbe:	b289      	uxth	r1, r1
  405dc0:	0708      	lsls	r0, r1, #28
  405dc2:	f140 80b3 	bpl.w	405f2c <_vfiprintf_r+0x1b4>
  405dc6:	f8db 3010 	ldr.w	r3, [fp, #16]
  405dca:	2b00      	cmp	r3, #0
  405dcc:	f000 80ae 	beq.w	405f2c <_vfiprintf_r+0x1b4>
  405dd0:	f001 031a 	and.w	r3, r1, #26
  405dd4:	2b0a      	cmp	r3, #10
  405dd6:	f000 80b5 	beq.w	405f44 <_vfiprintf_r+0x1cc>
  405dda:	2300      	movs	r3, #0
  405ddc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405de0:	930b      	str	r3, [sp, #44]	; 0x2c
  405de2:	9311      	str	r3, [sp, #68]	; 0x44
  405de4:	9310      	str	r3, [sp, #64]	; 0x40
  405de6:	9303      	str	r3, [sp, #12]
  405de8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405dec:	46ca      	mov	sl, r9
  405dee:	f8cd b010 	str.w	fp, [sp, #16]
  405df2:	f898 3000 	ldrb.w	r3, [r8]
  405df6:	4644      	mov	r4, r8
  405df8:	b1fb      	cbz	r3, 405e3a <_vfiprintf_r+0xc2>
  405dfa:	2b25      	cmp	r3, #37	; 0x25
  405dfc:	d102      	bne.n	405e04 <_vfiprintf_r+0x8c>
  405dfe:	e01c      	b.n	405e3a <_vfiprintf_r+0xc2>
  405e00:	2b25      	cmp	r3, #37	; 0x25
  405e02:	d003      	beq.n	405e0c <_vfiprintf_r+0x94>
  405e04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405e08:	2b00      	cmp	r3, #0
  405e0a:	d1f9      	bne.n	405e00 <_vfiprintf_r+0x88>
  405e0c:	eba4 0508 	sub.w	r5, r4, r8
  405e10:	b19d      	cbz	r5, 405e3a <_vfiprintf_r+0xc2>
  405e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e16:	f8ca 8000 	str.w	r8, [sl]
  405e1a:	3301      	adds	r3, #1
  405e1c:	442a      	add	r2, r5
  405e1e:	2b07      	cmp	r3, #7
  405e20:	f8ca 5004 	str.w	r5, [sl, #4]
  405e24:	9211      	str	r2, [sp, #68]	; 0x44
  405e26:	9310      	str	r3, [sp, #64]	; 0x40
  405e28:	dd7a      	ble.n	405f20 <_vfiprintf_r+0x1a8>
  405e2a:	2a00      	cmp	r2, #0
  405e2c:	f040 84b0 	bne.w	406790 <_vfiprintf_r+0xa18>
  405e30:	9b03      	ldr	r3, [sp, #12]
  405e32:	9210      	str	r2, [sp, #64]	; 0x40
  405e34:	442b      	add	r3, r5
  405e36:	46ca      	mov	sl, r9
  405e38:	9303      	str	r3, [sp, #12]
  405e3a:	7823      	ldrb	r3, [r4, #0]
  405e3c:	2b00      	cmp	r3, #0
  405e3e:	f000 83e0 	beq.w	406602 <_vfiprintf_r+0x88a>
  405e42:	2000      	movs	r0, #0
  405e44:	f04f 0300 	mov.w	r3, #0
  405e48:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405e4c:	f104 0801 	add.w	r8, r4, #1
  405e50:	7862      	ldrb	r2, [r4, #1]
  405e52:	4605      	mov	r5, r0
  405e54:	4606      	mov	r6, r0
  405e56:	4603      	mov	r3, r0
  405e58:	f04f 34ff 	mov.w	r4, #4294967295
  405e5c:	f108 0801 	add.w	r8, r8, #1
  405e60:	f1a2 0120 	sub.w	r1, r2, #32
  405e64:	2958      	cmp	r1, #88	; 0x58
  405e66:	f200 82de 	bhi.w	406426 <_vfiprintf_r+0x6ae>
  405e6a:	e8df f011 	tbh	[pc, r1, lsl #1]
  405e6e:	0221      	.short	0x0221
  405e70:	02dc02dc 	.word	0x02dc02dc
  405e74:	02dc0229 	.word	0x02dc0229
  405e78:	02dc02dc 	.word	0x02dc02dc
  405e7c:	02dc02dc 	.word	0x02dc02dc
  405e80:	028902dc 	.word	0x028902dc
  405e84:	02dc0295 	.word	0x02dc0295
  405e88:	02bd00a2 	.word	0x02bd00a2
  405e8c:	019f02dc 	.word	0x019f02dc
  405e90:	01a401a4 	.word	0x01a401a4
  405e94:	01a401a4 	.word	0x01a401a4
  405e98:	01a401a4 	.word	0x01a401a4
  405e9c:	01a401a4 	.word	0x01a401a4
  405ea0:	02dc01a4 	.word	0x02dc01a4
  405ea4:	02dc02dc 	.word	0x02dc02dc
  405ea8:	02dc02dc 	.word	0x02dc02dc
  405eac:	02dc02dc 	.word	0x02dc02dc
  405eb0:	02dc02dc 	.word	0x02dc02dc
  405eb4:	01b202dc 	.word	0x01b202dc
  405eb8:	02dc02dc 	.word	0x02dc02dc
  405ebc:	02dc02dc 	.word	0x02dc02dc
  405ec0:	02dc02dc 	.word	0x02dc02dc
  405ec4:	02dc02dc 	.word	0x02dc02dc
  405ec8:	02dc02dc 	.word	0x02dc02dc
  405ecc:	02dc0197 	.word	0x02dc0197
  405ed0:	02dc02dc 	.word	0x02dc02dc
  405ed4:	02dc02dc 	.word	0x02dc02dc
  405ed8:	02dc019b 	.word	0x02dc019b
  405edc:	025302dc 	.word	0x025302dc
  405ee0:	02dc02dc 	.word	0x02dc02dc
  405ee4:	02dc02dc 	.word	0x02dc02dc
  405ee8:	02dc02dc 	.word	0x02dc02dc
  405eec:	02dc02dc 	.word	0x02dc02dc
  405ef0:	02dc02dc 	.word	0x02dc02dc
  405ef4:	021b025a 	.word	0x021b025a
  405ef8:	02dc02dc 	.word	0x02dc02dc
  405efc:	026e02dc 	.word	0x026e02dc
  405f00:	02dc021b 	.word	0x02dc021b
  405f04:	027302dc 	.word	0x027302dc
  405f08:	01f502dc 	.word	0x01f502dc
  405f0c:	02090182 	.word	0x02090182
  405f10:	02dc02d7 	.word	0x02dc02d7
  405f14:	02dc029a 	.word	0x02dc029a
  405f18:	02dc00a7 	.word	0x02dc00a7
  405f1c:	022e02dc 	.word	0x022e02dc
  405f20:	f10a 0a08 	add.w	sl, sl, #8
  405f24:	9b03      	ldr	r3, [sp, #12]
  405f26:	442b      	add	r3, r5
  405f28:	9303      	str	r3, [sp, #12]
  405f2a:	e786      	b.n	405e3a <_vfiprintf_r+0xc2>
  405f2c:	4659      	mov	r1, fp
  405f2e:	9806      	ldr	r0, [sp, #24]
  405f30:	f000 fdac 	bl	406a8c <__swsetup_r>
  405f34:	bb18      	cbnz	r0, 405f7e <_vfiprintf_r+0x206>
  405f36:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405f3a:	f001 031a 	and.w	r3, r1, #26
  405f3e:	2b0a      	cmp	r3, #10
  405f40:	f47f af4b 	bne.w	405dda <_vfiprintf_r+0x62>
  405f44:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405f48:	2b00      	cmp	r3, #0
  405f4a:	f6ff af46 	blt.w	405dda <_vfiprintf_r+0x62>
  405f4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405f52:	07db      	lsls	r3, r3, #31
  405f54:	d405      	bmi.n	405f62 <_vfiprintf_r+0x1ea>
  405f56:	058f      	lsls	r7, r1, #22
  405f58:	d403      	bmi.n	405f62 <_vfiprintf_r+0x1ea>
  405f5a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405f5e:	f002 fa91 	bl	408484 <__retarget_lock_release_recursive>
  405f62:	462b      	mov	r3, r5
  405f64:	4642      	mov	r2, r8
  405f66:	4659      	mov	r1, fp
  405f68:	9806      	ldr	r0, [sp, #24]
  405f6a:	f000 fd4d 	bl	406a08 <__sbprintf>
  405f6e:	9003      	str	r0, [sp, #12]
  405f70:	9803      	ldr	r0, [sp, #12]
  405f72:	b02d      	add	sp, #180	; 0xb4
  405f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f78:	f001 feb4 	bl	407ce4 <__sinit>
  405f7c:	e709      	b.n	405d92 <_vfiprintf_r+0x1a>
  405f7e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405f82:	07d9      	lsls	r1, r3, #31
  405f84:	d404      	bmi.n	405f90 <_vfiprintf_r+0x218>
  405f86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405f8a:	059a      	lsls	r2, r3, #22
  405f8c:	f140 84aa 	bpl.w	4068e4 <_vfiprintf_r+0xb6c>
  405f90:	f04f 33ff 	mov.w	r3, #4294967295
  405f94:	9303      	str	r3, [sp, #12]
  405f96:	9803      	ldr	r0, [sp, #12]
  405f98:	b02d      	add	sp, #180	; 0xb4
  405f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f9e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405fa2:	f002 fa6d 	bl	408480 <__retarget_lock_acquire_recursive>
  405fa6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405faa:	b281      	uxth	r1, r0
  405fac:	e6fb      	b.n	405da6 <_vfiprintf_r+0x2e>
  405fae:	4276      	negs	r6, r6
  405fb0:	9207      	str	r2, [sp, #28]
  405fb2:	f043 0304 	orr.w	r3, r3, #4
  405fb6:	f898 2000 	ldrb.w	r2, [r8]
  405fba:	e74f      	b.n	405e5c <_vfiprintf_r+0xe4>
  405fbc:	9608      	str	r6, [sp, #32]
  405fbe:	069e      	lsls	r6, r3, #26
  405fc0:	f100 8450 	bmi.w	406864 <_vfiprintf_r+0xaec>
  405fc4:	9907      	ldr	r1, [sp, #28]
  405fc6:	06dd      	lsls	r5, r3, #27
  405fc8:	460a      	mov	r2, r1
  405fca:	f100 83ef 	bmi.w	4067ac <_vfiprintf_r+0xa34>
  405fce:	0658      	lsls	r0, r3, #25
  405fd0:	f140 83ec 	bpl.w	4067ac <_vfiprintf_r+0xa34>
  405fd4:	880e      	ldrh	r6, [r1, #0]
  405fd6:	3104      	adds	r1, #4
  405fd8:	2700      	movs	r7, #0
  405fda:	2201      	movs	r2, #1
  405fdc:	9107      	str	r1, [sp, #28]
  405fde:	f04f 0100 	mov.w	r1, #0
  405fe2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405fe6:	2500      	movs	r5, #0
  405fe8:	1c61      	adds	r1, r4, #1
  405fea:	f000 8116 	beq.w	40621a <_vfiprintf_r+0x4a2>
  405fee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405ff2:	9102      	str	r1, [sp, #8]
  405ff4:	ea56 0107 	orrs.w	r1, r6, r7
  405ff8:	f040 8114 	bne.w	406224 <_vfiprintf_r+0x4ac>
  405ffc:	2c00      	cmp	r4, #0
  405ffe:	f040 835c 	bne.w	4066ba <_vfiprintf_r+0x942>
  406002:	2a00      	cmp	r2, #0
  406004:	f040 83b7 	bne.w	406776 <_vfiprintf_r+0x9fe>
  406008:	f013 0301 	ands.w	r3, r3, #1
  40600c:	9305      	str	r3, [sp, #20]
  40600e:	f000 8457 	beq.w	4068c0 <_vfiprintf_r+0xb48>
  406012:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406016:	2330      	movs	r3, #48	; 0x30
  406018:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40601c:	9b05      	ldr	r3, [sp, #20]
  40601e:	42a3      	cmp	r3, r4
  406020:	bfb8      	it	lt
  406022:	4623      	movlt	r3, r4
  406024:	9301      	str	r3, [sp, #4]
  406026:	b10d      	cbz	r5, 40602c <_vfiprintf_r+0x2b4>
  406028:	3301      	adds	r3, #1
  40602a:	9301      	str	r3, [sp, #4]
  40602c:	9b02      	ldr	r3, [sp, #8]
  40602e:	f013 0302 	ands.w	r3, r3, #2
  406032:	9309      	str	r3, [sp, #36]	; 0x24
  406034:	d002      	beq.n	40603c <_vfiprintf_r+0x2c4>
  406036:	9b01      	ldr	r3, [sp, #4]
  406038:	3302      	adds	r3, #2
  40603a:	9301      	str	r3, [sp, #4]
  40603c:	9b02      	ldr	r3, [sp, #8]
  40603e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406042:	930a      	str	r3, [sp, #40]	; 0x28
  406044:	f040 8217 	bne.w	406476 <_vfiprintf_r+0x6fe>
  406048:	9b08      	ldr	r3, [sp, #32]
  40604a:	9a01      	ldr	r2, [sp, #4]
  40604c:	1a9d      	subs	r5, r3, r2
  40604e:	2d00      	cmp	r5, #0
  406050:	f340 8211 	ble.w	406476 <_vfiprintf_r+0x6fe>
  406054:	2d10      	cmp	r5, #16
  406056:	f340 8490 	ble.w	40697a <_vfiprintf_r+0xc02>
  40605a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40605c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40605e:	4ec4      	ldr	r6, [pc, #784]	; (406370 <_vfiprintf_r+0x5f8>)
  406060:	46d6      	mov	lr, sl
  406062:	2710      	movs	r7, #16
  406064:	46a2      	mov	sl, r4
  406066:	4619      	mov	r1, r3
  406068:	9c06      	ldr	r4, [sp, #24]
  40606a:	e007      	b.n	40607c <_vfiprintf_r+0x304>
  40606c:	f101 0c02 	add.w	ip, r1, #2
  406070:	f10e 0e08 	add.w	lr, lr, #8
  406074:	4601      	mov	r1, r0
  406076:	3d10      	subs	r5, #16
  406078:	2d10      	cmp	r5, #16
  40607a:	dd11      	ble.n	4060a0 <_vfiprintf_r+0x328>
  40607c:	1c48      	adds	r0, r1, #1
  40607e:	3210      	adds	r2, #16
  406080:	2807      	cmp	r0, #7
  406082:	9211      	str	r2, [sp, #68]	; 0x44
  406084:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406088:	9010      	str	r0, [sp, #64]	; 0x40
  40608a:	ddef      	ble.n	40606c <_vfiprintf_r+0x2f4>
  40608c:	2a00      	cmp	r2, #0
  40608e:	f040 81e4 	bne.w	40645a <_vfiprintf_r+0x6e2>
  406092:	3d10      	subs	r5, #16
  406094:	2d10      	cmp	r5, #16
  406096:	4611      	mov	r1, r2
  406098:	f04f 0c01 	mov.w	ip, #1
  40609c:	46ce      	mov	lr, r9
  40609e:	dced      	bgt.n	40607c <_vfiprintf_r+0x304>
  4060a0:	4654      	mov	r4, sl
  4060a2:	4661      	mov	r1, ip
  4060a4:	46f2      	mov	sl, lr
  4060a6:	442a      	add	r2, r5
  4060a8:	2907      	cmp	r1, #7
  4060aa:	9211      	str	r2, [sp, #68]	; 0x44
  4060ac:	f8ca 6000 	str.w	r6, [sl]
  4060b0:	f8ca 5004 	str.w	r5, [sl, #4]
  4060b4:	9110      	str	r1, [sp, #64]	; 0x40
  4060b6:	f300 82ec 	bgt.w	406692 <_vfiprintf_r+0x91a>
  4060ba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4060be:	f10a 0a08 	add.w	sl, sl, #8
  4060c2:	1c48      	adds	r0, r1, #1
  4060c4:	2d00      	cmp	r5, #0
  4060c6:	f040 81de 	bne.w	406486 <_vfiprintf_r+0x70e>
  4060ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4060cc:	2b00      	cmp	r3, #0
  4060ce:	f000 81f8 	beq.w	4064c2 <_vfiprintf_r+0x74a>
  4060d2:	3202      	adds	r2, #2
  4060d4:	a90e      	add	r1, sp, #56	; 0x38
  4060d6:	2302      	movs	r3, #2
  4060d8:	2807      	cmp	r0, #7
  4060da:	9211      	str	r2, [sp, #68]	; 0x44
  4060dc:	9010      	str	r0, [sp, #64]	; 0x40
  4060de:	e88a 000a 	stmia.w	sl, {r1, r3}
  4060e2:	f340 81ea 	ble.w	4064ba <_vfiprintf_r+0x742>
  4060e6:	2a00      	cmp	r2, #0
  4060e8:	f040 838c 	bne.w	406804 <_vfiprintf_r+0xa8c>
  4060ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060ee:	2b80      	cmp	r3, #128	; 0x80
  4060f0:	f04f 0001 	mov.w	r0, #1
  4060f4:	4611      	mov	r1, r2
  4060f6:	46ca      	mov	sl, r9
  4060f8:	f040 81e7 	bne.w	4064ca <_vfiprintf_r+0x752>
  4060fc:	9b08      	ldr	r3, [sp, #32]
  4060fe:	9d01      	ldr	r5, [sp, #4]
  406100:	1b5e      	subs	r6, r3, r5
  406102:	2e00      	cmp	r6, #0
  406104:	f340 81e1 	ble.w	4064ca <_vfiprintf_r+0x752>
  406108:	2e10      	cmp	r6, #16
  40610a:	4d9a      	ldr	r5, [pc, #616]	; (406374 <_vfiprintf_r+0x5fc>)
  40610c:	f340 8450 	ble.w	4069b0 <_vfiprintf_r+0xc38>
  406110:	46d4      	mov	ip, sl
  406112:	2710      	movs	r7, #16
  406114:	46a2      	mov	sl, r4
  406116:	9c06      	ldr	r4, [sp, #24]
  406118:	e007      	b.n	40612a <_vfiprintf_r+0x3b2>
  40611a:	f101 0e02 	add.w	lr, r1, #2
  40611e:	f10c 0c08 	add.w	ip, ip, #8
  406122:	4601      	mov	r1, r0
  406124:	3e10      	subs	r6, #16
  406126:	2e10      	cmp	r6, #16
  406128:	dd11      	ble.n	40614e <_vfiprintf_r+0x3d6>
  40612a:	1c48      	adds	r0, r1, #1
  40612c:	3210      	adds	r2, #16
  40612e:	2807      	cmp	r0, #7
  406130:	9211      	str	r2, [sp, #68]	; 0x44
  406132:	e88c 00a0 	stmia.w	ip, {r5, r7}
  406136:	9010      	str	r0, [sp, #64]	; 0x40
  406138:	ddef      	ble.n	40611a <_vfiprintf_r+0x3a2>
  40613a:	2a00      	cmp	r2, #0
  40613c:	f040 829d 	bne.w	40667a <_vfiprintf_r+0x902>
  406140:	3e10      	subs	r6, #16
  406142:	2e10      	cmp	r6, #16
  406144:	f04f 0e01 	mov.w	lr, #1
  406148:	4611      	mov	r1, r2
  40614a:	46cc      	mov	ip, r9
  40614c:	dced      	bgt.n	40612a <_vfiprintf_r+0x3b2>
  40614e:	4654      	mov	r4, sl
  406150:	46e2      	mov	sl, ip
  406152:	4432      	add	r2, r6
  406154:	f1be 0f07 	cmp.w	lr, #7
  406158:	9211      	str	r2, [sp, #68]	; 0x44
  40615a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40615e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406162:	f300 8369 	bgt.w	406838 <_vfiprintf_r+0xac0>
  406166:	f10a 0a08 	add.w	sl, sl, #8
  40616a:	f10e 0001 	add.w	r0, lr, #1
  40616e:	4671      	mov	r1, lr
  406170:	e1ab      	b.n	4064ca <_vfiprintf_r+0x752>
  406172:	9608      	str	r6, [sp, #32]
  406174:	f013 0220 	ands.w	r2, r3, #32
  406178:	f040 838c 	bne.w	406894 <_vfiprintf_r+0xb1c>
  40617c:	f013 0110 	ands.w	r1, r3, #16
  406180:	f040 831a 	bne.w	4067b8 <_vfiprintf_r+0xa40>
  406184:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406188:	f000 8316 	beq.w	4067b8 <_vfiprintf_r+0xa40>
  40618c:	9807      	ldr	r0, [sp, #28]
  40618e:	460a      	mov	r2, r1
  406190:	4601      	mov	r1, r0
  406192:	3104      	adds	r1, #4
  406194:	8806      	ldrh	r6, [r0, #0]
  406196:	9107      	str	r1, [sp, #28]
  406198:	2700      	movs	r7, #0
  40619a:	e720      	b.n	405fde <_vfiprintf_r+0x266>
  40619c:	9608      	str	r6, [sp, #32]
  40619e:	f043 0310 	orr.w	r3, r3, #16
  4061a2:	e7e7      	b.n	406174 <_vfiprintf_r+0x3fc>
  4061a4:	9608      	str	r6, [sp, #32]
  4061a6:	f043 0310 	orr.w	r3, r3, #16
  4061aa:	e708      	b.n	405fbe <_vfiprintf_r+0x246>
  4061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4061b0:	f898 2000 	ldrb.w	r2, [r8]
  4061b4:	e652      	b.n	405e5c <_vfiprintf_r+0xe4>
  4061b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4061ba:	2600      	movs	r6, #0
  4061bc:	f818 2b01 	ldrb.w	r2, [r8], #1
  4061c0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4061c4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4061c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4061cc:	2909      	cmp	r1, #9
  4061ce:	d9f5      	bls.n	4061bc <_vfiprintf_r+0x444>
  4061d0:	e646      	b.n	405e60 <_vfiprintf_r+0xe8>
  4061d2:	9608      	str	r6, [sp, #32]
  4061d4:	2800      	cmp	r0, #0
  4061d6:	f040 8408 	bne.w	4069ea <_vfiprintf_r+0xc72>
  4061da:	f043 0310 	orr.w	r3, r3, #16
  4061de:	069e      	lsls	r6, r3, #26
  4061e0:	f100 834c 	bmi.w	40687c <_vfiprintf_r+0xb04>
  4061e4:	06dd      	lsls	r5, r3, #27
  4061e6:	f100 82f3 	bmi.w	4067d0 <_vfiprintf_r+0xa58>
  4061ea:	0658      	lsls	r0, r3, #25
  4061ec:	f140 82f0 	bpl.w	4067d0 <_vfiprintf_r+0xa58>
  4061f0:	9d07      	ldr	r5, [sp, #28]
  4061f2:	f9b5 6000 	ldrsh.w	r6, [r5]
  4061f6:	462a      	mov	r2, r5
  4061f8:	17f7      	asrs	r7, r6, #31
  4061fa:	3204      	adds	r2, #4
  4061fc:	4630      	mov	r0, r6
  4061fe:	4639      	mov	r1, r7
  406200:	9207      	str	r2, [sp, #28]
  406202:	2800      	cmp	r0, #0
  406204:	f171 0200 	sbcs.w	r2, r1, #0
  406208:	f2c0 835d 	blt.w	4068c6 <_vfiprintf_r+0xb4e>
  40620c:	1c61      	adds	r1, r4, #1
  40620e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406212:	f04f 0201 	mov.w	r2, #1
  406216:	f47f aeea 	bne.w	405fee <_vfiprintf_r+0x276>
  40621a:	ea56 0107 	orrs.w	r1, r6, r7
  40621e:	f000 824d 	beq.w	4066bc <_vfiprintf_r+0x944>
  406222:	9302      	str	r3, [sp, #8]
  406224:	2a01      	cmp	r2, #1
  406226:	f000 828c 	beq.w	406742 <_vfiprintf_r+0x9ca>
  40622a:	2a02      	cmp	r2, #2
  40622c:	f040 825c 	bne.w	4066e8 <_vfiprintf_r+0x970>
  406230:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406232:	46cb      	mov	fp, r9
  406234:	0933      	lsrs	r3, r6, #4
  406236:	f006 010f 	and.w	r1, r6, #15
  40623a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40623e:	093a      	lsrs	r2, r7, #4
  406240:	461e      	mov	r6, r3
  406242:	4617      	mov	r7, r2
  406244:	5c43      	ldrb	r3, [r0, r1]
  406246:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40624a:	ea56 0307 	orrs.w	r3, r6, r7
  40624e:	d1f1      	bne.n	406234 <_vfiprintf_r+0x4bc>
  406250:	eba9 030b 	sub.w	r3, r9, fp
  406254:	9305      	str	r3, [sp, #20]
  406256:	e6e1      	b.n	40601c <_vfiprintf_r+0x2a4>
  406258:	2800      	cmp	r0, #0
  40625a:	f040 83c0 	bne.w	4069de <_vfiprintf_r+0xc66>
  40625e:	0699      	lsls	r1, r3, #26
  406260:	f100 8367 	bmi.w	406932 <_vfiprintf_r+0xbba>
  406264:	06da      	lsls	r2, r3, #27
  406266:	f100 80f1 	bmi.w	40644c <_vfiprintf_r+0x6d4>
  40626a:	065b      	lsls	r3, r3, #25
  40626c:	f140 80ee 	bpl.w	40644c <_vfiprintf_r+0x6d4>
  406270:	9a07      	ldr	r2, [sp, #28]
  406272:	6813      	ldr	r3, [r2, #0]
  406274:	3204      	adds	r2, #4
  406276:	9207      	str	r2, [sp, #28]
  406278:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40627c:	801a      	strh	r2, [r3, #0]
  40627e:	e5b8      	b.n	405df2 <_vfiprintf_r+0x7a>
  406280:	9807      	ldr	r0, [sp, #28]
  406282:	4a3d      	ldr	r2, [pc, #244]	; (406378 <_vfiprintf_r+0x600>)
  406284:	9608      	str	r6, [sp, #32]
  406286:	920b      	str	r2, [sp, #44]	; 0x2c
  406288:	6806      	ldr	r6, [r0, #0]
  40628a:	2278      	movs	r2, #120	; 0x78
  40628c:	2130      	movs	r1, #48	; 0x30
  40628e:	3004      	adds	r0, #4
  406290:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406294:	f043 0302 	orr.w	r3, r3, #2
  406298:	9007      	str	r0, [sp, #28]
  40629a:	2700      	movs	r7, #0
  40629c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4062a0:	2202      	movs	r2, #2
  4062a2:	e69c      	b.n	405fde <_vfiprintf_r+0x266>
  4062a4:	9608      	str	r6, [sp, #32]
  4062a6:	2800      	cmp	r0, #0
  4062a8:	d099      	beq.n	4061de <_vfiprintf_r+0x466>
  4062aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4062ae:	e796      	b.n	4061de <_vfiprintf_r+0x466>
  4062b0:	f898 2000 	ldrb.w	r2, [r8]
  4062b4:	2d00      	cmp	r5, #0
  4062b6:	f47f add1 	bne.w	405e5c <_vfiprintf_r+0xe4>
  4062ba:	2001      	movs	r0, #1
  4062bc:	2520      	movs	r5, #32
  4062be:	e5cd      	b.n	405e5c <_vfiprintf_r+0xe4>
  4062c0:	f043 0301 	orr.w	r3, r3, #1
  4062c4:	f898 2000 	ldrb.w	r2, [r8]
  4062c8:	e5c8      	b.n	405e5c <_vfiprintf_r+0xe4>
  4062ca:	9608      	str	r6, [sp, #32]
  4062cc:	2800      	cmp	r0, #0
  4062ce:	f040 8393 	bne.w	4069f8 <_vfiprintf_r+0xc80>
  4062d2:	4929      	ldr	r1, [pc, #164]	; (406378 <_vfiprintf_r+0x600>)
  4062d4:	910b      	str	r1, [sp, #44]	; 0x2c
  4062d6:	069f      	lsls	r7, r3, #26
  4062d8:	f100 82e8 	bmi.w	4068ac <_vfiprintf_r+0xb34>
  4062dc:	9807      	ldr	r0, [sp, #28]
  4062de:	06de      	lsls	r6, r3, #27
  4062e0:	4601      	mov	r1, r0
  4062e2:	f100 8270 	bmi.w	4067c6 <_vfiprintf_r+0xa4e>
  4062e6:	065d      	lsls	r5, r3, #25
  4062e8:	f140 826d 	bpl.w	4067c6 <_vfiprintf_r+0xa4e>
  4062ec:	3104      	adds	r1, #4
  4062ee:	8806      	ldrh	r6, [r0, #0]
  4062f0:	9107      	str	r1, [sp, #28]
  4062f2:	2700      	movs	r7, #0
  4062f4:	07d8      	lsls	r0, r3, #31
  4062f6:	f140 8222 	bpl.w	40673e <_vfiprintf_r+0x9c6>
  4062fa:	ea56 0107 	orrs.w	r1, r6, r7
  4062fe:	f000 821e 	beq.w	40673e <_vfiprintf_r+0x9c6>
  406302:	2130      	movs	r1, #48	; 0x30
  406304:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406308:	f043 0302 	orr.w	r3, r3, #2
  40630c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406310:	2202      	movs	r2, #2
  406312:	e664      	b.n	405fde <_vfiprintf_r+0x266>
  406314:	9608      	str	r6, [sp, #32]
  406316:	2800      	cmp	r0, #0
  406318:	f040 836b 	bne.w	4069f2 <_vfiprintf_r+0xc7a>
  40631c:	4917      	ldr	r1, [pc, #92]	; (40637c <_vfiprintf_r+0x604>)
  40631e:	910b      	str	r1, [sp, #44]	; 0x2c
  406320:	e7d9      	b.n	4062d6 <_vfiprintf_r+0x55e>
  406322:	9907      	ldr	r1, [sp, #28]
  406324:	9608      	str	r6, [sp, #32]
  406326:	680a      	ldr	r2, [r1, #0]
  406328:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40632c:	f04f 0000 	mov.w	r0, #0
  406330:	460a      	mov	r2, r1
  406332:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406336:	3204      	adds	r2, #4
  406338:	2001      	movs	r0, #1
  40633a:	9001      	str	r0, [sp, #4]
  40633c:	9207      	str	r2, [sp, #28]
  40633e:	9005      	str	r0, [sp, #20]
  406340:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406344:	9302      	str	r3, [sp, #8]
  406346:	2400      	movs	r4, #0
  406348:	e670      	b.n	40602c <_vfiprintf_r+0x2b4>
  40634a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40634e:	f898 2000 	ldrb.w	r2, [r8]
  406352:	e583      	b.n	405e5c <_vfiprintf_r+0xe4>
  406354:	f898 2000 	ldrb.w	r2, [r8]
  406358:	2a6c      	cmp	r2, #108	; 0x6c
  40635a:	bf03      	ittte	eq
  40635c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406360:	f043 0320 	orreq.w	r3, r3, #32
  406364:	f108 0801 	addeq.w	r8, r8, #1
  406368:	f043 0310 	orrne.w	r3, r3, #16
  40636c:	e576      	b.n	405e5c <_vfiprintf_r+0xe4>
  40636e:	bf00      	nop
  406370:	0040a430 	.word	0x0040a430
  406374:	0040a440 	.word	0x0040a440
  406378:	0040a3f0 	.word	0x0040a3f0
  40637c:	0040a3dc 	.word	0x0040a3dc
  406380:	9907      	ldr	r1, [sp, #28]
  406382:	680e      	ldr	r6, [r1, #0]
  406384:	460a      	mov	r2, r1
  406386:	2e00      	cmp	r6, #0
  406388:	f102 0204 	add.w	r2, r2, #4
  40638c:	f6ff ae0f 	blt.w	405fae <_vfiprintf_r+0x236>
  406390:	9207      	str	r2, [sp, #28]
  406392:	f898 2000 	ldrb.w	r2, [r8]
  406396:	e561      	b.n	405e5c <_vfiprintf_r+0xe4>
  406398:	f898 2000 	ldrb.w	r2, [r8]
  40639c:	2001      	movs	r0, #1
  40639e:	252b      	movs	r5, #43	; 0x2b
  4063a0:	e55c      	b.n	405e5c <_vfiprintf_r+0xe4>
  4063a2:	9907      	ldr	r1, [sp, #28]
  4063a4:	9608      	str	r6, [sp, #32]
  4063a6:	f8d1 b000 	ldr.w	fp, [r1]
  4063aa:	f04f 0200 	mov.w	r2, #0
  4063ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4063b2:	1d0e      	adds	r6, r1, #4
  4063b4:	f1bb 0f00 	cmp.w	fp, #0
  4063b8:	f000 82e5 	beq.w	406986 <_vfiprintf_r+0xc0e>
  4063bc:	1c67      	adds	r7, r4, #1
  4063be:	f000 82c4 	beq.w	40694a <_vfiprintf_r+0xbd2>
  4063c2:	4622      	mov	r2, r4
  4063c4:	2100      	movs	r1, #0
  4063c6:	4658      	mov	r0, fp
  4063c8:	9301      	str	r3, [sp, #4]
  4063ca:	f002 f8f1 	bl	4085b0 <memchr>
  4063ce:	9b01      	ldr	r3, [sp, #4]
  4063d0:	2800      	cmp	r0, #0
  4063d2:	f000 82e5 	beq.w	4069a0 <_vfiprintf_r+0xc28>
  4063d6:	eba0 020b 	sub.w	r2, r0, fp
  4063da:	9205      	str	r2, [sp, #20]
  4063dc:	9607      	str	r6, [sp, #28]
  4063de:	9302      	str	r3, [sp, #8]
  4063e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4063e4:	2400      	movs	r4, #0
  4063e6:	e619      	b.n	40601c <_vfiprintf_r+0x2a4>
  4063e8:	f898 2000 	ldrb.w	r2, [r8]
  4063ec:	2a2a      	cmp	r2, #42	; 0x2a
  4063ee:	f108 0701 	add.w	r7, r8, #1
  4063f2:	f000 82e9 	beq.w	4069c8 <_vfiprintf_r+0xc50>
  4063f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4063fa:	2909      	cmp	r1, #9
  4063fc:	46b8      	mov	r8, r7
  4063fe:	f04f 0400 	mov.w	r4, #0
  406402:	f63f ad2d 	bhi.w	405e60 <_vfiprintf_r+0xe8>
  406406:	f818 2b01 	ldrb.w	r2, [r8], #1
  40640a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40640e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406412:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406416:	2909      	cmp	r1, #9
  406418:	d9f5      	bls.n	406406 <_vfiprintf_r+0x68e>
  40641a:	e521      	b.n	405e60 <_vfiprintf_r+0xe8>
  40641c:	f043 0320 	orr.w	r3, r3, #32
  406420:	f898 2000 	ldrb.w	r2, [r8]
  406424:	e51a      	b.n	405e5c <_vfiprintf_r+0xe4>
  406426:	9608      	str	r6, [sp, #32]
  406428:	2800      	cmp	r0, #0
  40642a:	f040 82db 	bne.w	4069e4 <_vfiprintf_r+0xc6c>
  40642e:	2a00      	cmp	r2, #0
  406430:	f000 80e7 	beq.w	406602 <_vfiprintf_r+0x88a>
  406434:	2101      	movs	r1, #1
  406436:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40643a:	f04f 0200 	mov.w	r2, #0
  40643e:	9101      	str	r1, [sp, #4]
  406440:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406444:	9105      	str	r1, [sp, #20]
  406446:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40644a:	e77b      	b.n	406344 <_vfiprintf_r+0x5cc>
  40644c:	9a07      	ldr	r2, [sp, #28]
  40644e:	6813      	ldr	r3, [r2, #0]
  406450:	3204      	adds	r2, #4
  406452:	9207      	str	r2, [sp, #28]
  406454:	9a03      	ldr	r2, [sp, #12]
  406456:	601a      	str	r2, [r3, #0]
  406458:	e4cb      	b.n	405df2 <_vfiprintf_r+0x7a>
  40645a:	aa0f      	add	r2, sp, #60	; 0x3c
  40645c:	9904      	ldr	r1, [sp, #16]
  40645e:	4620      	mov	r0, r4
  406460:	f7ff fc4a 	bl	405cf8 <__sprint_r.part.0>
  406464:	2800      	cmp	r0, #0
  406466:	f040 8139 	bne.w	4066dc <_vfiprintf_r+0x964>
  40646a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40646c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40646e:	f101 0c01 	add.w	ip, r1, #1
  406472:	46ce      	mov	lr, r9
  406474:	e5ff      	b.n	406076 <_vfiprintf_r+0x2fe>
  406476:	9910      	ldr	r1, [sp, #64]	; 0x40
  406478:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40647a:	1c48      	adds	r0, r1, #1
  40647c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406480:	2d00      	cmp	r5, #0
  406482:	f43f ae22 	beq.w	4060ca <_vfiprintf_r+0x352>
  406486:	3201      	adds	r2, #1
  406488:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40648c:	2101      	movs	r1, #1
  40648e:	2807      	cmp	r0, #7
  406490:	9211      	str	r2, [sp, #68]	; 0x44
  406492:	9010      	str	r0, [sp, #64]	; 0x40
  406494:	f8ca 5000 	str.w	r5, [sl]
  406498:	f8ca 1004 	str.w	r1, [sl, #4]
  40649c:	f340 8108 	ble.w	4066b0 <_vfiprintf_r+0x938>
  4064a0:	2a00      	cmp	r2, #0
  4064a2:	f040 81bc 	bne.w	40681e <_vfiprintf_r+0xaa6>
  4064a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4064a8:	2b00      	cmp	r3, #0
  4064aa:	f43f ae1f 	beq.w	4060ec <_vfiprintf_r+0x374>
  4064ae:	ab0e      	add	r3, sp, #56	; 0x38
  4064b0:	2202      	movs	r2, #2
  4064b2:	4608      	mov	r0, r1
  4064b4:	931c      	str	r3, [sp, #112]	; 0x70
  4064b6:	921d      	str	r2, [sp, #116]	; 0x74
  4064b8:	46ca      	mov	sl, r9
  4064ba:	4601      	mov	r1, r0
  4064bc:	f10a 0a08 	add.w	sl, sl, #8
  4064c0:	3001      	adds	r0, #1
  4064c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4064c4:	2b80      	cmp	r3, #128	; 0x80
  4064c6:	f43f ae19 	beq.w	4060fc <_vfiprintf_r+0x384>
  4064ca:	9b05      	ldr	r3, [sp, #20]
  4064cc:	1ae4      	subs	r4, r4, r3
  4064ce:	2c00      	cmp	r4, #0
  4064d0:	dd2e      	ble.n	406530 <_vfiprintf_r+0x7b8>
  4064d2:	2c10      	cmp	r4, #16
  4064d4:	4db3      	ldr	r5, [pc, #716]	; (4067a4 <_vfiprintf_r+0xa2c>)
  4064d6:	dd1e      	ble.n	406516 <_vfiprintf_r+0x79e>
  4064d8:	46d6      	mov	lr, sl
  4064da:	2610      	movs	r6, #16
  4064dc:	9f06      	ldr	r7, [sp, #24]
  4064de:	f8dd a010 	ldr.w	sl, [sp, #16]
  4064e2:	e006      	b.n	4064f2 <_vfiprintf_r+0x77a>
  4064e4:	1c88      	adds	r0, r1, #2
  4064e6:	f10e 0e08 	add.w	lr, lr, #8
  4064ea:	4619      	mov	r1, r3
  4064ec:	3c10      	subs	r4, #16
  4064ee:	2c10      	cmp	r4, #16
  4064f0:	dd10      	ble.n	406514 <_vfiprintf_r+0x79c>
  4064f2:	1c4b      	adds	r3, r1, #1
  4064f4:	3210      	adds	r2, #16
  4064f6:	2b07      	cmp	r3, #7
  4064f8:	9211      	str	r2, [sp, #68]	; 0x44
  4064fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4064fe:	9310      	str	r3, [sp, #64]	; 0x40
  406500:	ddf0      	ble.n	4064e4 <_vfiprintf_r+0x76c>
  406502:	2a00      	cmp	r2, #0
  406504:	d165      	bne.n	4065d2 <_vfiprintf_r+0x85a>
  406506:	3c10      	subs	r4, #16
  406508:	2c10      	cmp	r4, #16
  40650a:	f04f 0001 	mov.w	r0, #1
  40650e:	4611      	mov	r1, r2
  406510:	46ce      	mov	lr, r9
  406512:	dcee      	bgt.n	4064f2 <_vfiprintf_r+0x77a>
  406514:	46f2      	mov	sl, lr
  406516:	4422      	add	r2, r4
  406518:	2807      	cmp	r0, #7
  40651a:	9211      	str	r2, [sp, #68]	; 0x44
  40651c:	f8ca 5000 	str.w	r5, [sl]
  406520:	f8ca 4004 	str.w	r4, [sl, #4]
  406524:	9010      	str	r0, [sp, #64]	; 0x40
  406526:	f300 8085 	bgt.w	406634 <_vfiprintf_r+0x8bc>
  40652a:	f10a 0a08 	add.w	sl, sl, #8
  40652e:	3001      	adds	r0, #1
  406530:	9905      	ldr	r1, [sp, #20]
  406532:	f8ca b000 	str.w	fp, [sl]
  406536:	440a      	add	r2, r1
  406538:	2807      	cmp	r0, #7
  40653a:	9211      	str	r2, [sp, #68]	; 0x44
  40653c:	f8ca 1004 	str.w	r1, [sl, #4]
  406540:	9010      	str	r0, [sp, #64]	; 0x40
  406542:	f340 8082 	ble.w	40664a <_vfiprintf_r+0x8d2>
  406546:	2a00      	cmp	r2, #0
  406548:	f040 8118 	bne.w	40677c <_vfiprintf_r+0xa04>
  40654c:	9b02      	ldr	r3, [sp, #8]
  40654e:	9210      	str	r2, [sp, #64]	; 0x40
  406550:	0758      	lsls	r0, r3, #29
  406552:	d535      	bpl.n	4065c0 <_vfiprintf_r+0x848>
  406554:	9b08      	ldr	r3, [sp, #32]
  406556:	9901      	ldr	r1, [sp, #4]
  406558:	1a5c      	subs	r4, r3, r1
  40655a:	2c00      	cmp	r4, #0
  40655c:	f340 80e7 	ble.w	40672e <_vfiprintf_r+0x9b6>
  406560:	46ca      	mov	sl, r9
  406562:	2c10      	cmp	r4, #16
  406564:	f340 8218 	ble.w	406998 <_vfiprintf_r+0xc20>
  406568:	9910      	ldr	r1, [sp, #64]	; 0x40
  40656a:	4e8f      	ldr	r6, [pc, #572]	; (4067a8 <_vfiprintf_r+0xa30>)
  40656c:	9f06      	ldr	r7, [sp, #24]
  40656e:	f8dd b010 	ldr.w	fp, [sp, #16]
  406572:	2510      	movs	r5, #16
  406574:	e006      	b.n	406584 <_vfiprintf_r+0x80c>
  406576:	1c88      	adds	r0, r1, #2
  406578:	f10a 0a08 	add.w	sl, sl, #8
  40657c:	4619      	mov	r1, r3
  40657e:	3c10      	subs	r4, #16
  406580:	2c10      	cmp	r4, #16
  406582:	dd11      	ble.n	4065a8 <_vfiprintf_r+0x830>
  406584:	1c4b      	adds	r3, r1, #1
  406586:	3210      	adds	r2, #16
  406588:	2b07      	cmp	r3, #7
  40658a:	9211      	str	r2, [sp, #68]	; 0x44
  40658c:	f8ca 6000 	str.w	r6, [sl]
  406590:	f8ca 5004 	str.w	r5, [sl, #4]
  406594:	9310      	str	r3, [sp, #64]	; 0x40
  406596:	ddee      	ble.n	406576 <_vfiprintf_r+0x7fe>
  406598:	bb42      	cbnz	r2, 4065ec <_vfiprintf_r+0x874>
  40659a:	3c10      	subs	r4, #16
  40659c:	2c10      	cmp	r4, #16
  40659e:	f04f 0001 	mov.w	r0, #1
  4065a2:	4611      	mov	r1, r2
  4065a4:	46ca      	mov	sl, r9
  4065a6:	dced      	bgt.n	406584 <_vfiprintf_r+0x80c>
  4065a8:	4422      	add	r2, r4
  4065aa:	2807      	cmp	r0, #7
  4065ac:	9211      	str	r2, [sp, #68]	; 0x44
  4065ae:	f8ca 6000 	str.w	r6, [sl]
  4065b2:	f8ca 4004 	str.w	r4, [sl, #4]
  4065b6:	9010      	str	r0, [sp, #64]	; 0x40
  4065b8:	dd51      	ble.n	40665e <_vfiprintf_r+0x8e6>
  4065ba:	2a00      	cmp	r2, #0
  4065bc:	f040 819b 	bne.w	4068f6 <_vfiprintf_r+0xb7e>
  4065c0:	9b03      	ldr	r3, [sp, #12]
  4065c2:	9a08      	ldr	r2, [sp, #32]
  4065c4:	9901      	ldr	r1, [sp, #4]
  4065c6:	428a      	cmp	r2, r1
  4065c8:	bfac      	ite	ge
  4065ca:	189b      	addge	r3, r3, r2
  4065cc:	185b      	addlt	r3, r3, r1
  4065ce:	9303      	str	r3, [sp, #12]
  4065d0:	e04e      	b.n	406670 <_vfiprintf_r+0x8f8>
  4065d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4065d4:	4651      	mov	r1, sl
  4065d6:	4638      	mov	r0, r7
  4065d8:	f7ff fb8e 	bl	405cf8 <__sprint_r.part.0>
  4065dc:	2800      	cmp	r0, #0
  4065de:	f040 813f 	bne.w	406860 <_vfiprintf_r+0xae8>
  4065e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4065e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4065e6:	1c48      	adds	r0, r1, #1
  4065e8:	46ce      	mov	lr, r9
  4065ea:	e77f      	b.n	4064ec <_vfiprintf_r+0x774>
  4065ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4065ee:	4659      	mov	r1, fp
  4065f0:	4638      	mov	r0, r7
  4065f2:	f7ff fb81 	bl	405cf8 <__sprint_r.part.0>
  4065f6:	b960      	cbnz	r0, 406612 <_vfiprintf_r+0x89a>
  4065f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4065fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4065fc:	1c48      	adds	r0, r1, #1
  4065fe:	46ca      	mov	sl, r9
  406600:	e7bd      	b.n	40657e <_vfiprintf_r+0x806>
  406602:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406604:	f8dd b010 	ldr.w	fp, [sp, #16]
  406608:	2b00      	cmp	r3, #0
  40660a:	f040 81d4 	bne.w	4069b6 <_vfiprintf_r+0xc3e>
  40660e:	2300      	movs	r3, #0
  406610:	9310      	str	r3, [sp, #64]	; 0x40
  406612:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406616:	f013 0f01 	tst.w	r3, #1
  40661a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40661e:	d102      	bne.n	406626 <_vfiprintf_r+0x8ae>
  406620:	059a      	lsls	r2, r3, #22
  406622:	f140 80de 	bpl.w	4067e2 <_vfiprintf_r+0xa6a>
  406626:	065b      	lsls	r3, r3, #25
  406628:	f53f acb2 	bmi.w	405f90 <_vfiprintf_r+0x218>
  40662c:	9803      	ldr	r0, [sp, #12]
  40662e:	b02d      	add	sp, #180	; 0xb4
  406630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406634:	2a00      	cmp	r2, #0
  406636:	f040 8106 	bne.w	406846 <_vfiprintf_r+0xace>
  40663a:	9a05      	ldr	r2, [sp, #20]
  40663c:	921d      	str	r2, [sp, #116]	; 0x74
  40663e:	2301      	movs	r3, #1
  406640:	9211      	str	r2, [sp, #68]	; 0x44
  406642:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406646:	9310      	str	r3, [sp, #64]	; 0x40
  406648:	46ca      	mov	sl, r9
  40664a:	f10a 0a08 	add.w	sl, sl, #8
  40664e:	9b02      	ldr	r3, [sp, #8]
  406650:	0759      	lsls	r1, r3, #29
  406652:	d504      	bpl.n	40665e <_vfiprintf_r+0x8e6>
  406654:	9b08      	ldr	r3, [sp, #32]
  406656:	9901      	ldr	r1, [sp, #4]
  406658:	1a5c      	subs	r4, r3, r1
  40665a:	2c00      	cmp	r4, #0
  40665c:	dc81      	bgt.n	406562 <_vfiprintf_r+0x7ea>
  40665e:	9b03      	ldr	r3, [sp, #12]
  406660:	9908      	ldr	r1, [sp, #32]
  406662:	9801      	ldr	r0, [sp, #4]
  406664:	4281      	cmp	r1, r0
  406666:	bfac      	ite	ge
  406668:	185b      	addge	r3, r3, r1
  40666a:	181b      	addlt	r3, r3, r0
  40666c:	9303      	str	r3, [sp, #12]
  40666e:	bb72      	cbnz	r2, 4066ce <_vfiprintf_r+0x956>
  406670:	2300      	movs	r3, #0
  406672:	9310      	str	r3, [sp, #64]	; 0x40
  406674:	46ca      	mov	sl, r9
  406676:	f7ff bbbc 	b.w	405df2 <_vfiprintf_r+0x7a>
  40667a:	aa0f      	add	r2, sp, #60	; 0x3c
  40667c:	9904      	ldr	r1, [sp, #16]
  40667e:	4620      	mov	r0, r4
  406680:	f7ff fb3a 	bl	405cf8 <__sprint_r.part.0>
  406684:	bb50      	cbnz	r0, 4066dc <_vfiprintf_r+0x964>
  406686:	9910      	ldr	r1, [sp, #64]	; 0x40
  406688:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40668a:	f101 0e01 	add.w	lr, r1, #1
  40668e:	46cc      	mov	ip, r9
  406690:	e548      	b.n	406124 <_vfiprintf_r+0x3ac>
  406692:	2a00      	cmp	r2, #0
  406694:	f040 8140 	bne.w	406918 <_vfiprintf_r+0xba0>
  406698:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40669c:	2900      	cmp	r1, #0
  40669e:	f000 811b 	beq.w	4068d8 <_vfiprintf_r+0xb60>
  4066a2:	2201      	movs	r2, #1
  4066a4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4066a8:	4610      	mov	r0, r2
  4066aa:	921d      	str	r2, [sp, #116]	; 0x74
  4066ac:	911c      	str	r1, [sp, #112]	; 0x70
  4066ae:	46ca      	mov	sl, r9
  4066b0:	4601      	mov	r1, r0
  4066b2:	f10a 0a08 	add.w	sl, sl, #8
  4066b6:	3001      	adds	r0, #1
  4066b8:	e507      	b.n	4060ca <_vfiprintf_r+0x352>
  4066ba:	9b02      	ldr	r3, [sp, #8]
  4066bc:	2a01      	cmp	r2, #1
  4066be:	f000 8098 	beq.w	4067f2 <_vfiprintf_r+0xa7a>
  4066c2:	2a02      	cmp	r2, #2
  4066c4:	d10d      	bne.n	4066e2 <_vfiprintf_r+0x96a>
  4066c6:	9302      	str	r3, [sp, #8]
  4066c8:	2600      	movs	r6, #0
  4066ca:	2700      	movs	r7, #0
  4066cc:	e5b0      	b.n	406230 <_vfiprintf_r+0x4b8>
  4066ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4066d0:	9904      	ldr	r1, [sp, #16]
  4066d2:	9806      	ldr	r0, [sp, #24]
  4066d4:	f7ff fb10 	bl	405cf8 <__sprint_r.part.0>
  4066d8:	2800      	cmp	r0, #0
  4066da:	d0c9      	beq.n	406670 <_vfiprintf_r+0x8f8>
  4066dc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4066e0:	e797      	b.n	406612 <_vfiprintf_r+0x89a>
  4066e2:	9302      	str	r3, [sp, #8]
  4066e4:	2600      	movs	r6, #0
  4066e6:	2700      	movs	r7, #0
  4066e8:	4649      	mov	r1, r9
  4066ea:	e000      	b.n	4066ee <_vfiprintf_r+0x976>
  4066ec:	4659      	mov	r1, fp
  4066ee:	08f2      	lsrs	r2, r6, #3
  4066f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4066f4:	08f8      	lsrs	r0, r7, #3
  4066f6:	f006 0307 	and.w	r3, r6, #7
  4066fa:	4607      	mov	r7, r0
  4066fc:	4616      	mov	r6, r2
  4066fe:	3330      	adds	r3, #48	; 0x30
  406700:	ea56 0207 	orrs.w	r2, r6, r7
  406704:	f801 3c01 	strb.w	r3, [r1, #-1]
  406708:	f101 3bff 	add.w	fp, r1, #4294967295
  40670c:	d1ee      	bne.n	4066ec <_vfiprintf_r+0x974>
  40670e:	9a02      	ldr	r2, [sp, #8]
  406710:	07d6      	lsls	r6, r2, #31
  406712:	f57f ad9d 	bpl.w	406250 <_vfiprintf_r+0x4d8>
  406716:	2b30      	cmp	r3, #48	; 0x30
  406718:	f43f ad9a 	beq.w	406250 <_vfiprintf_r+0x4d8>
  40671c:	3902      	subs	r1, #2
  40671e:	2330      	movs	r3, #48	; 0x30
  406720:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406724:	eba9 0301 	sub.w	r3, r9, r1
  406728:	9305      	str	r3, [sp, #20]
  40672a:	468b      	mov	fp, r1
  40672c:	e476      	b.n	40601c <_vfiprintf_r+0x2a4>
  40672e:	9b03      	ldr	r3, [sp, #12]
  406730:	9a08      	ldr	r2, [sp, #32]
  406732:	428a      	cmp	r2, r1
  406734:	bfac      	ite	ge
  406736:	189b      	addge	r3, r3, r2
  406738:	185b      	addlt	r3, r3, r1
  40673a:	9303      	str	r3, [sp, #12]
  40673c:	e798      	b.n	406670 <_vfiprintf_r+0x8f8>
  40673e:	2202      	movs	r2, #2
  406740:	e44d      	b.n	405fde <_vfiprintf_r+0x266>
  406742:	2f00      	cmp	r7, #0
  406744:	bf08      	it	eq
  406746:	2e0a      	cmpeq	r6, #10
  406748:	d352      	bcc.n	4067f0 <_vfiprintf_r+0xa78>
  40674a:	46cb      	mov	fp, r9
  40674c:	4630      	mov	r0, r6
  40674e:	4639      	mov	r1, r7
  406750:	220a      	movs	r2, #10
  406752:	2300      	movs	r3, #0
  406754:	f003 fbd0 	bl	409ef8 <__aeabi_uldivmod>
  406758:	3230      	adds	r2, #48	; 0x30
  40675a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40675e:	4630      	mov	r0, r6
  406760:	4639      	mov	r1, r7
  406762:	2300      	movs	r3, #0
  406764:	220a      	movs	r2, #10
  406766:	f003 fbc7 	bl	409ef8 <__aeabi_uldivmod>
  40676a:	4606      	mov	r6, r0
  40676c:	460f      	mov	r7, r1
  40676e:	ea56 0307 	orrs.w	r3, r6, r7
  406772:	d1eb      	bne.n	40674c <_vfiprintf_r+0x9d4>
  406774:	e56c      	b.n	406250 <_vfiprintf_r+0x4d8>
  406776:	9405      	str	r4, [sp, #20]
  406778:	46cb      	mov	fp, r9
  40677a:	e44f      	b.n	40601c <_vfiprintf_r+0x2a4>
  40677c:	aa0f      	add	r2, sp, #60	; 0x3c
  40677e:	9904      	ldr	r1, [sp, #16]
  406780:	9806      	ldr	r0, [sp, #24]
  406782:	f7ff fab9 	bl	405cf8 <__sprint_r.part.0>
  406786:	2800      	cmp	r0, #0
  406788:	d1a8      	bne.n	4066dc <_vfiprintf_r+0x964>
  40678a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40678c:	46ca      	mov	sl, r9
  40678e:	e75e      	b.n	40664e <_vfiprintf_r+0x8d6>
  406790:	aa0f      	add	r2, sp, #60	; 0x3c
  406792:	9904      	ldr	r1, [sp, #16]
  406794:	9806      	ldr	r0, [sp, #24]
  406796:	f7ff faaf 	bl	405cf8 <__sprint_r.part.0>
  40679a:	2800      	cmp	r0, #0
  40679c:	d19e      	bne.n	4066dc <_vfiprintf_r+0x964>
  40679e:	46ca      	mov	sl, r9
  4067a0:	f7ff bbc0 	b.w	405f24 <_vfiprintf_r+0x1ac>
  4067a4:	0040a440 	.word	0x0040a440
  4067a8:	0040a430 	.word	0x0040a430
  4067ac:	3104      	adds	r1, #4
  4067ae:	6816      	ldr	r6, [r2, #0]
  4067b0:	9107      	str	r1, [sp, #28]
  4067b2:	2201      	movs	r2, #1
  4067b4:	2700      	movs	r7, #0
  4067b6:	e412      	b.n	405fde <_vfiprintf_r+0x266>
  4067b8:	9807      	ldr	r0, [sp, #28]
  4067ba:	4601      	mov	r1, r0
  4067bc:	3104      	adds	r1, #4
  4067be:	6806      	ldr	r6, [r0, #0]
  4067c0:	9107      	str	r1, [sp, #28]
  4067c2:	2700      	movs	r7, #0
  4067c4:	e40b      	b.n	405fde <_vfiprintf_r+0x266>
  4067c6:	680e      	ldr	r6, [r1, #0]
  4067c8:	3104      	adds	r1, #4
  4067ca:	9107      	str	r1, [sp, #28]
  4067cc:	2700      	movs	r7, #0
  4067ce:	e591      	b.n	4062f4 <_vfiprintf_r+0x57c>
  4067d0:	9907      	ldr	r1, [sp, #28]
  4067d2:	680e      	ldr	r6, [r1, #0]
  4067d4:	460a      	mov	r2, r1
  4067d6:	17f7      	asrs	r7, r6, #31
  4067d8:	3204      	adds	r2, #4
  4067da:	9207      	str	r2, [sp, #28]
  4067dc:	4630      	mov	r0, r6
  4067de:	4639      	mov	r1, r7
  4067e0:	e50f      	b.n	406202 <_vfiprintf_r+0x48a>
  4067e2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4067e6:	f001 fe4d 	bl	408484 <__retarget_lock_release_recursive>
  4067ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4067ee:	e71a      	b.n	406626 <_vfiprintf_r+0x8ae>
  4067f0:	9b02      	ldr	r3, [sp, #8]
  4067f2:	9302      	str	r3, [sp, #8]
  4067f4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4067f8:	3630      	adds	r6, #48	; 0x30
  4067fa:	2301      	movs	r3, #1
  4067fc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406800:	9305      	str	r3, [sp, #20]
  406802:	e40b      	b.n	40601c <_vfiprintf_r+0x2a4>
  406804:	aa0f      	add	r2, sp, #60	; 0x3c
  406806:	9904      	ldr	r1, [sp, #16]
  406808:	9806      	ldr	r0, [sp, #24]
  40680a:	f7ff fa75 	bl	405cf8 <__sprint_r.part.0>
  40680e:	2800      	cmp	r0, #0
  406810:	f47f af64 	bne.w	4066dc <_vfiprintf_r+0x964>
  406814:	9910      	ldr	r1, [sp, #64]	; 0x40
  406816:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406818:	1c48      	adds	r0, r1, #1
  40681a:	46ca      	mov	sl, r9
  40681c:	e651      	b.n	4064c2 <_vfiprintf_r+0x74a>
  40681e:	aa0f      	add	r2, sp, #60	; 0x3c
  406820:	9904      	ldr	r1, [sp, #16]
  406822:	9806      	ldr	r0, [sp, #24]
  406824:	f7ff fa68 	bl	405cf8 <__sprint_r.part.0>
  406828:	2800      	cmp	r0, #0
  40682a:	f47f af57 	bne.w	4066dc <_vfiprintf_r+0x964>
  40682e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406830:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406832:	1c48      	adds	r0, r1, #1
  406834:	46ca      	mov	sl, r9
  406836:	e448      	b.n	4060ca <_vfiprintf_r+0x352>
  406838:	2a00      	cmp	r2, #0
  40683a:	f040 8091 	bne.w	406960 <_vfiprintf_r+0xbe8>
  40683e:	2001      	movs	r0, #1
  406840:	4611      	mov	r1, r2
  406842:	46ca      	mov	sl, r9
  406844:	e641      	b.n	4064ca <_vfiprintf_r+0x752>
  406846:	aa0f      	add	r2, sp, #60	; 0x3c
  406848:	9904      	ldr	r1, [sp, #16]
  40684a:	9806      	ldr	r0, [sp, #24]
  40684c:	f7ff fa54 	bl	405cf8 <__sprint_r.part.0>
  406850:	2800      	cmp	r0, #0
  406852:	f47f af43 	bne.w	4066dc <_vfiprintf_r+0x964>
  406856:	9810      	ldr	r0, [sp, #64]	; 0x40
  406858:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40685a:	3001      	adds	r0, #1
  40685c:	46ca      	mov	sl, r9
  40685e:	e667      	b.n	406530 <_vfiprintf_r+0x7b8>
  406860:	46d3      	mov	fp, sl
  406862:	e6d6      	b.n	406612 <_vfiprintf_r+0x89a>
  406864:	9e07      	ldr	r6, [sp, #28]
  406866:	3607      	adds	r6, #7
  406868:	f026 0207 	bic.w	r2, r6, #7
  40686c:	f102 0108 	add.w	r1, r2, #8
  406870:	e9d2 6700 	ldrd	r6, r7, [r2]
  406874:	9107      	str	r1, [sp, #28]
  406876:	2201      	movs	r2, #1
  406878:	f7ff bbb1 	b.w	405fde <_vfiprintf_r+0x266>
  40687c:	9e07      	ldr	r6, [sp, #28]
  40687e:	3607      	adds	r6, #7
  406880:	f026 0607 	bic.w	r6, r6, #7
  406884:	e9d6 0100 	ldrd	r0, r1, [r6]
  406888:	f106 0208 	add.w	r2, r6, #8
  40688c:	9207      	str	r2, [sp, #28]
  40688e:	4606      	mov	r6, r0
  406890:	460f      	mov	r7, r1
  406892:	e4b6      	b.n	406202 <_vfiprintf_r+0x48a>
  406894:	9e07      	ldr	r6, [sp, #28]
  406896:	3607      	adds	r6, #7
  406898:	f026 0207 	bic.w	r2, r6, #7
  40689c:	f102 0108 	add.w	r1, r2, #8
  4068a0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4068a4:	9107      	str	r1, [sp, #28]
  4068a6:	2200      	movs	r2, #0
  4068a8:	f7ff bb99 	b.w	405fde <_vfiprintf_r+0x266>
  4068ac:	9e07      	ldr	r6, [sp, #28]
  4068ae:	3607      	adds	r6, #7
  4068b0:	f026 0107 	bic.w	r1, r6, #7
  4068b4:	f101 0008 	add.w	r0, r1, #8
  4068b8:	9007      	str	r0, [sp, #28]
  4068ba:	e9d1 6700 	ldrd	r6, r7, [r1]
  4068be:	e519      	b.n	4062f4 <_vfiprintf_r+0x57c>
  4068c0:	46cb      	mov	fp, r9
  4068c2:	f7ff bbab 	b.w	40601c <_vfiprintf_r+0x2a4>
  4068c6:	252d      	movs	r5, #45	; 0x2d
  4068c8:	4276      	negs	r6, r6
  4068ca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4068ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4068d2:	2201      	movs	r2, #1
  4068d4:	f7ff bb88 	b.w	405fe8 <_vfiprintf_r+0x270>
  4068d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4068da:	b9b3      	cbnz	r3, 40690a <_vfiprintf_r+0xb92>
  4068dc:	4611      	mov	r1, r2
  4068de:	2001      	movs	r0, #1
  4068e0:	46ca      	mov	sl, r9
  4068e2:	e5f2      	b.n	4064ca <_vfiprintf_r+0x752>
  4068e4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4068e8:	f001 fdcc 	bl	408484 <__retarget_lock_release_recursive>
  4068ec:	f04f 33ff 	mov.w	r3, #4294967295
  4068f0:	9303      	str	r3, [sp, #12]
  4068f2:	f7ff bb50 	b.w	405f96 <_vfiprintf_r+0x21e>
  4068f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4068f8:	9904      	ldr	r1, [sp, #16]
  4068fa:	9806      	ldr	r0, [sp, #24]
  4068fc:	f7ff f9fc 	bl	405cf8 <__sprint_r.part.0>
  406900:	2800      	cmp	r0, #0
  406902:	f47f aeeb 	bne.w	4066dc <_vfiprintf_r+0x964>
  406906:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406908:	e6a9      	b.n	40665e <_vfiprintf_r+0x8e6>
  40690a:	ab0e      	add	r3, sp, #56	; 0x38
  40690c:	2202      	movs	r2, #2
  40690e:	931c      	str	r3, [sp, #112]	; 0x70
  406910:	921d      	str	r2, [sp, #116]	; 0x74
  406912:	2001      	movs	r0, #1
  406914:	46ca      	mov	sl, r9
  406916:	e5d0      	b.n	4064ba <_vfiprintf_r+0x742>
  406918:	aa0f      	add	r2, sp, #60	; 0x3c
  40691a:	9904      	ldr	r1, [sp, #16]
  40691c:	9806      	ldr	r0, [sp, #24]
  40691e:	f7ff f9eb 	bl	405cf8 <__sprint_r.part.0>
  406922:	2800      	cmp	r0, #0
  406924:	f47f aeda 	bne.w	4066dc <_vfiprintf_r+0x964>
  406928:	9910      	ldr	r1, [sp, #64]	; 0x40
  40692a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40692c:	1c48      	adds	r0, r1, #1
  40692e:	46ca      	mov	sl, r9
  406930:	e5a4      	b.n	40647c <_vfiprintf_r+0x704>
  406932:	9a07      	ldr	r2, [sp, #28]
  406934:	9903      	ldr	r1, [sp, #12]
  406936:	6813      	ldr	r3, [r2, #0]
  406938:	17cd      	asrs	r5, r1, #31
  40693a:	4608      	mov	r0, r1
  40693c:	3204      	adds	r2, #4
  40693e:	4629      	mov	r1, r5
  406940:	9207      	str	r2, [sp, #28]
  406942:	e9c3 0100 	strd	r0, r1, [r3]
  406946:	f7ff ba54 	b.w	405df2 <_vfiprintf_r+0x7a>
  40694a:	4658      	mov	r0, fp
  40694c:	9607      	str	r6, [sp, #28]
  40694e:	9302      	str	r3, [sp, #8]
  406950:	f7fd ff36 	bl	4047c0 <strlen>
  406954:	2400      	movs	r4, #0
  406956:	9005      	str	r0, [sp, #20]
  406958:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40695c:	f7ff bb5e 	b.w	40601c <_vfiprintf_r+0x2a4>
  406960:	aa0f      	add	r2, sp, #60	; 0x3c
  406962:	9904      	ldr	r1, [sp, #16]
  406964:	9806      	ldr	r0, [sp, #24]
  406966:	f7ff f9c7 	bl	405cf8 <__sprint_r.part.0>
  40696a:	2800      	cmp	r0, #0
  40696c:	f47f aeb6 	bne.w	4066dc <_vfiprintf_r+0x964>
  406970:	9910      	ldr	r1, [sp, #64]	; 0x40
  406972:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406974:	1c48      	adds	r0, r1, #1
  406976:	46ca      	mov	sl, r9
  406978:	e5a7      	b.n	4064ca <_vfiprintf_r+0x752>
  40697a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40697c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40697e:	4e20      	ldr	r6, [pc, #128]	; (406a00 <_vfiprintf_r+0xc88>)
  406980:	3101      	adds	r1, #1
  406982:	f7ff bb90 	b.w	4060a6 <_vfiprintf_r+0x32e>
  406986:	2c06      	cmp	r4, #6
  406988:	bf28      	it	cs
  40698a:	2406      	movcs	r4, #6
  40698c:	9405      	str	r4, [sp, #20]
  40698e:	9607      	str	r6, [sp, #28]
  406990:	9401      	str	r4, [sp, #4]
  406992:	f8df b070 	ldr.w	fp, [pc, #112]	; 406a04 <_vfiprintf_r+0xc8c>
  406996:	e4d5      	b.n	406344 <_vfiprintf_r+0x5cc>
  406998:	9810      	ldr	r0, [sp, #64]	; 0x40
  40699a:	4e19      	ldr	r6, [pc, #100]	; (406a00 <_vfiprintf_r+0xc88>)
  40699c:	3001      	adds	r0, #1
  40699e:	e603      	b.n	4065a8 <_vfiprintf_r+0x830>
  4069a0:	9405      	str	r4, [sp, #20]
  4069a2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4069a6:	9607      	str	r6, [sp, #28]
  4069a8:	9302      	str	r3, [sp, #8]
  4069aa:	4604      	mov	r4, r0
  4069ac:	f7ff bb36 	b.w	40601c <_vfiprintf_r+0x2a4>
  4069b0:	4686      	mov	lr, r0
  4069b2:	f7ff bbce 	b.w	406152 <_vfiprintf_r+0x3da>
  4069b6:	9806      	ldr	r0, [sp, #24]
  4069b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4069ba:	4659      	mov	r1, fp
  4069bc:	f7ff f99c 	bl	405cf8 <__sprint_r.part.0>
  4069c0:	2800      	cmp	r0, #0
  4069c2:	f43f ae24 	beq.w	40660e <_vfiprintf_r+0x896>
  4069c6:	e624      	b.n	406612 <_vfiprintf_r+0x89a>
  4069c8:	9907      	ldr	r1, [sp, #28]
  4069ca:	f898 2001 	ldrb.w	r2, [r8, #1]
  4069ce:	680c      	ldr	r4, [r1, #0]
  4069d0:	3104      	adds	r1, #4
  4069d2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4069d6:	46b8      	mov	r8, r7
  4069d8:	9107      	str	r1, [sp, #28]
  4069da:	f7ff ba3f 	b.w	405e5c <_vfiprintf_r+0xe4>
  4069de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4069e2:	e43c      	b.n	40625e <_vfiprintf_r+0x4e6>
  4069e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4069e8:	e521      	b.n	40642e <_vfiprintf_r+0x6b6>
  4069ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4069ee:	f7ff bbf4 	b.w	4061da <_vfiprintf_r+0x462>
  4069f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4069f6:	e491      	b.n	40631c <_vfiprintf_r+0x5a4>
  4069f8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4069fc:	e469      	b.n	4062d2 <_vfiprintf_r+0x55a>
  4069fe:	bf00      	nop
  406a00:	0040a430 	.word	0x0040a430
  406a04:	0040a404 	.word	0x0040a404

00406a08 <__sbprintf>:
  406a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a0c:	460c      	mov	r4, r1
  406a0e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406a12:	8989      	ldrh	r1, [r1, #12]
  406a14:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406a16:	89e5      	ldrh	r5, [r4, #14]
  406a18:	9619      	str	r6, [sp, #100]	; 0x64
  406a1a:	f021 0102 	bic.w	r1, r1, #2
  406a1e:	4606      	mov	r6, r0
  406a20:	69e0      	ldr	r0, [r4, #28]
  406a22:	f8ad 100c 	strh.w	r1, [sp, #12]
  406a26:	4617      	mov	r7, r2
  406a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406a2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406a2e:	f8ad 500e 	strh.w	r5, [sp, #14]
  406a32:	4698      	mov	r8, r3
  406a34:	ad1a      	add	r5, sp, #104	; 0x68
  406a36:	2300      	movs	r3, #0
  406a38:	9007      	str	r0, [sp, #28]
  406a3a:	a816      	add	r0, sp, #88	; 0x58
  406a3c:	9209      	str	r2, [sp, #36]	; 0x24
  406a3e:	9306      	str	r3, [sp, #24]
  406a40:	9500      	str	r5, [sp, #0]
  406a42:	9504      	str	r5, [sp, #16]
  406a44:	9102      	str	r1, [sp, #8]
  406a46:	9105      	str	r1, [sp, #20]
  406a48:	f001 fd16 	bl	408478 <__retarget_lock_init_recursive>
  406a4c:	4643      	mov	r3, r8
  406a4e:	463a      	mov	r2, r7
  406a50:	4669      	mov	r1, sp
  406a52:	4630      	mov	r0, r6
  406a54:	f7ff f990 	bl	405d78 <_vfiprintf_r>
  406a58:	1e05      	subs	r5, r0, #0
  406a5a:	db07      	blt.n	406a6c <__sbprintf+0x64>
  406a5c:	4630      	mov	r0, r6
  406a5e:	4669      	mov	r1, sp
  406a60:	f001 f8e8 	bl	407c34 <_fflush_r>
  406a64:	2800      	cmp	r0, #0
  406a66:	bf18      	it	ne
  406a68:	f04f 35ff 	movne.w	r5, #4294967295
  406a6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406a70:	065b      	lsls	r3, r3, #25
  406a72:	d503      	bpl.n	406a7c <__sbprintf+0x74>
  406a74:	89a3      	ldrh	r3, [r4, #12]
  406a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a7a:	81a3      	strh	r3, [r4, #12]
  406a7c:	9816      	ldr	r0, [sp, #88]	; 0x58
  406a7e:	f001 fcfd 	bl	40847c <__retarget_lock_close_recursive>
  406a82:	4628      	mov	r0, r5
  406a84:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406a8c <__swsetup_r>:
  406a8c:	b538      	push	{r3, r4, r5, lr}
  406a8e:	4b30      	ldr	r3, [pc, #192]	; (406b50 <__swsetup_r+0xc4>)
  406a90:	681b      	ldr	r3, [r3, #0]
  406a92:	4605      	mov	r5, r0
  406a94:	460c      	mov	r4, r1
  406a96:	b113      	cbz	r3, 406a9e <__swsetup_r+0x12>
  406a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406a9a:	2a00      	cmp	r2, #0
  406a9c:	d038      	beq.n	406b10 <__swsetup_r+0x84>
  406a9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406aa2:	b293      	uxth	r3, r2
  406aa4:	0718      	lsls	r0, r3, #28
  406aa6:	d50c      	bpl.n	406ac2 <__swsetup_r+0x36>
  406aa8:	6920      	ldr	r0, [r4, #16]
  406aaa:	b1a8      	cbz	r0, 406ad8 <__swsetup_r+0x4c>
  406aac:	f013 0201 	ands.w	r2, r3, #1
  406ab0:	d01e      	beq.n	406af0 <__swsetup_r+0x64>
  406ab2:	6963      	ldr	r3, [r4, #20]
  406ab4:	2200      	movs	r2, #0
  406ab6:	425b      	negs	r3, r3
  406ab8:	61a3      	str	r3, [r4, #24]
  406aba:	60a2      	str	r2, [r4, #8]
  406abc:	b1f0      	cbz	r0, 406afc <__swsetup_r+0x70>
  406abe:	2000      	movs	r0, #0
  406ac0:	bd38      	pop	{r3, r4, r5, pc}
  406ac2:	06d9      	lsls	r1, r3, #27
  406ac4:	d53c      	bpl.n	406b40 <__swsetup_r+0xb4>
  406ac6:	0758      	lsls	r0, r3, #29
  406ac8:	d426      	bmi.n	406b18 <__swsetup_r+0x8c>
  406aca:	6920      	ldr	r0, [r4, #16]
  406acc:	f042 0308 	orr.w	r3, r2, #8
  406ad0:	81a3      	strh	r3, [r4, #12]
  406ad2:	b29b      	uxth	r3, r3
  406ad4:	2800      	cmp	r0, #0
  406ad6:	d1e9      	bne.n	406aac <__swsetup_r+0x20>
  406ad8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406adc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406ae0:	d0e4      	beq.n	406aac <__swsetup_r+0x20>
  406ae2:	4628      	mov	r0, r5
  406ae4:	4621      	mov	r1, r4
  406ae6:	f001 fcfd 	bl	4084e4 <__smakebuf_r>
  406aea:	89a3      	ldrh	r3, [r4, #12]
  406aec:	6920      	ldr	r0, [r4, #16]
  406aee:	e7dd      	b.n	406aac <__swsetup_r+0x20>
  406af0:	0799      	lsls	r1, r3, #30
  406af2:	bf58      	it	pl
  406af4:	6962      	ldrpl	r2, [r4, #20]
  406af6:	60a2      	str	r2, [r4, #8]
  406af8:	2800      	cmp	r0, #0
  406afa:	d1e0      	bne.n	406abe <__swsetup_r+0x32>
  406afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b00:	061a      	lsls	r2, r3, #24
  406b02:	d5dd      	bpl.n	406ac0 <__swsetup_r+0x34>
  406b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b08:	81a3      	strh	r3, [r4, #12]
  406b0a:	f04f 30ff 	mov.w	r0, #4294967295
  406b0e:	bd38      	pop	{r3, r4, r5, pc}
  406b10:	4618      	mov	r0, r3
  406b12:	f001 f8e7 	bl	407ce4 <__sinit>
  406b16:	e7c2      	b.n	406a9e <__swsetup_r+0x12>
  406b18:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406b1a:	b151      	cbz	r1, 406b32 <__swsetup_r+0xa6>
  406b1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406b20:	4299      	cmp	r1, r3
  406b22:	d004      	beq.n	406b2e <__swsetup_r+0xa2>
  406b24:	4628      	mov	r0, r5
  406b26:	f001 fa03 	bl	407f30 <_free_r>
  406b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b2e:	2300      	movs	r3, #0
  406b30:	6323      	str	r3, [r4, #48]	; 0x30
  406b32:	2300      	movs	r3, #0
  406b34:	6920      	ldr	r0, [r4, #16]
  406b36:	6063      	str	r3, [r4, #4]
  406b38:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406b3c:	6020      	str	r0, [r4, #0]
  406b3e:	e7c5      	b.n	406acc <__swsetup_r+0x40>
  406b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406b44:	2309      	movs	r3, #9
  406b46:	602b      	str	r3, [r5, #0]
  406b48:	f04f 30ff 	mov.w	r0, #4294967295
  406b4c:	81a2      	strh	r2, [r4, #12]
  406b4e:	bd38      	pop	{r3, r4, r5, pc}
  406b50:	2040000c 	.word	0x2040000c

00406b54 <register_fini>:
  406b54:	4b02      	ldr	r3, [pc, #8]	; (406b60 <register_fini+0xc>)
  406b56:	b113      	cbz	r3, 406b5e <register_fini+0xa>
  406b58:	4802      	ldr	r0, [pc, #8]	; (406b64 <register_fini+0x10>)
  406b5a:	f000 b805 	b.w	406b68 <atexit>
  406b5e:	4770      	bx	lr
  406b60:	00000000 	.word	0x00000000
  406b64:	00407d55 	.word	0x00407d55

00406b68 <atexit>:
  406b68:	2300      	movs	r3, #0
  406b6a:	4601      	mov	r1, r0
  406b6c:	461a      	mov	r2, r3
  406b6e:	4618      	mov	r0, r3
  406b70:	f002 bbda 	b.w	409328 <__register_exitproc>

00406b74 <quorem>:
  406b74:	6902      	ldr	r2, [r0, #16]
  406b76:	690b      	ldr	r3, [r1, #16]
  406b78:	4293      	cmp	r3, r2
  406b7a:	f300 808d 	bgt.w	406c98 <quorem+0x124>
  406b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b82:	f103 38ff 	add.w	r8, r3, #4294967295
  406b86:	f101 0714 	add.w	r7, r1, #20
  406b8a:	f100 0b14 	add.w	fp, r0, #20
  406b8e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406b92:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406b96:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406b9a:	b083      	sub	sp, #12
  406b9c:	3201      	adds	r2, #1
  406b9e:	fbb3 f9f2 	udiv	r9, r3, r2
  406ba2:	eb0b 0304 	add.w	r3, fp, r4
  406ba6:	9400      	str	r4, [sp, #0]
  406ba8:	eb07 0a04 	add.w	sl, r7, r4
  406bac:	9301      	str	r3, [sp, #4]
  406bae:	f1b9 0f00 	cmp.w	r9, #0
  406bb2:	d039      	beq.n	406c28 <quorem+0xb4>
  406bb4:	2500      	movs	r5, #0
  406bb6:	462e      	mov	r6, r5
  406bb8:	46bc      	mov	ip, r7
  406bba:	46de      	mov	lr, fp
  406bbc:	f85c 4b04 	ldr.w	r4, [ip], #4
  406bc0:	f8de 3000 	ldr.w	r3, [lr]
  406bc4:	b2a2      	uxth	r2, r4
  406bc6:	fb09 5502 	mla	r5, r9, r2, r5
  406bca:	0c22      	lsrs	r2, r4, #16
  406bcc:	0c2c      	lsrs	r4, r5, #16
  406bce:	fb09 4202 	mla	r2, r9, r2, r4
  406bd2:	b2ad      	uxth	r5, r5
  406bd4:	1b75      	subs	r5, r6, r5
  406bd6:	b296      	uxth	r6, r2
  406bd8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  406bdc:	fa15 f383 	uxtah	r3, r5, r3
  406be0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406be4:	b29b      	uxth	r3, r3
  406be6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406bea:	45e2      	cmp	sl, ip
  406bec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  406bf0:	f84e 3b04 	str.w	r3, [lr], #4
  406bf4:	ea4f 4626 	mov.w	r6, r6, asr #16
  406bf8:	d2e0      	bcs.n	406bbc <quorem+0x48>
  406bfa:	9b00      	ldr	r3, [sp, #0]
  406bfc:	f85b 3003 	ldr.w	r3, [fp, r3]
  406c00:	b993      	cbnz	r3, 406c28 <quorem+0xb4>
  406c02:	9c01      	ldr	r4, [sp, #4]
  406c04:	1f23      	subs	r3, r4, #4
  406c06:	459b      	cmp	fp, r3
  406c08:	d20c      	bcs.n	406c24 <quorem+0xb0>
  406c0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406c0e:	b94b      	cbnz	r3, 406c24 <quorem+0xb0>
  406c10:	f1a4 0308 	sub.w	r3, r4, #8
  406c14:	e002      	b.n	406c1c <quorem+0xa8>
  406c16:	681a      	ldr	r2, [r3, #0]
  406c18:	3b04      	subs	r3, #4
  406c1a:	b91a      	cbnz	r2, 406c24 <quorem+0xb0>
  406c1c:	459b      	cmp	fp, r3
  406c1e:	f108 38ff 	add.w	r8, r8, #4294967295
  406c22:	d3f8      	bcc.n	406c16 <quorem+0xa2>
  406c24:	f8c0 8010 	str.w	r8, [r0, #16]
  406c28:	4604      	mov	r4, r0
  406c2a:	f001 ff73 	bl	408b14 <__mcmp>
  406c2e:	2800      	cmp	r0, #0
  406c30:	db2e      	blt.n	406c90 <quorem+0x11c>
  406c32:	f109 0901 	add.w	r9, r9, #1
  406c36:	465d      	mov	r5, fp
  406c38:	2300      	movs	r3, #0
  406c3a:	f857 1b04 	ldr.w	r1, [r7], #4
  406c3e:	6828      	ldr	r0, [r5, #0]
  406c40:	b28a      	uxth	r2, r1
  406c42:	1a9a      	subs	r2, r3, r2
  406c44:	0c0b      	lsrs	r3, r1, #16
  406c46:	fa12 f280 	uxtah	r2, r2, r0
  406c4a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  406c4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406c52:	b292      	uxth	r2, r2
  406c54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406c58:	45ba      	cmp	sl, r7
  406c5a:	f845 2b04 	str.w	r2, [r5], #4
  406c5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  406c62:	d2ea      	bcs.n	406c3a <quorem+0xc6>
  406c64:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  406c68:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  406c6c:	b982      	cbnz	r2, 406c90 <quorem+0x11c>
  406c6e:	1f1a      	subs	r2, r3, #4
  406c70:	4593      	cmp	fp, r2
  406c72:	d20b      	bcs.n	406c8c <quorem+0x118>
  406c74:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406c78:	b942      	cbnz	r2, 406c8c <quorem+0x118>
  406c7a:	3b08      	subs	r3, #8
  406c7c:	e002      	b.n	406c84 <quorem+0x110>
  406c7e:	681a      	ldr	r2, [r3, #0]
  406c80:	3b04      	subs	r3, #4
  406c82:	b91a      	cbnz	r2, 406c8c <quorem+0x118>
  406c84:	459b      	cmp	fp, r3
  406c86:	f108 38ff 	add.w	r8, r8, #4294967295
  406c8a:	d3f8      	bcc.n	406c7e <quorem+0x10a>
  406c8c:	f8c4 8010 	str.w	r8, [r4, #16]
  406c90:	4648      	mov	r0, r9
  406c92:	b003      	add	sp, #12
  406c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c98:	2000      	movs	r0, #0
  406c9a:	4770      	bx	lr
  406c9c:	0000      	movs	r0, r0
	...

00406ca0 <_dtoa_r>:
  406ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ca4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  406ca6:	b09b      	sub	sp, #108	; 0x6c
  406ca8:	4604      	mov	r4, r0
  406caa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  406cac:	4692      	mov	sl, r2
  406cae:	469b      	mov	fp, r3
  406cb0:	b141      	cbz	r1, 406cc4 <_dtoa_r+0x24>
  406cb2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  406cb4:	604a      	str	r2, [r1, #4]
  406cb6:	2301      	movs	r3, #1
  406cb8:	4093      	lsls	r3, r2
  406cba:	608b      	str	r3, [r1, #8]
  406cbc:	f001 fd52 	bl	408764 <_Bfree>
  406cc0:	2300      	movs	r3, #0
  406cc2:	6423      	str	r3, [r4, #64]	; 0x40
  406cc4:	f1bb 0f00 	cmp.w	fp, #0
  406cc8:	465d      	mov	r5, fp
  406cca:	db35      	blt.n	406d38 <_dtoa_r+0x98>
  406ccc:	2300      	movs	r3, #0
  406cce:	6033      	str	r3, [r6, #0]
  406cd0:	4b9d      	ldr	r3, [pc, #628]	; (406f48 <_dtoa_r+0x2a8>)
  406cd2:	43ab      	bics	r3, r5
  406cd4:	d015      	beq.n	406d02 <_dtoa_r+0x62>
  406cd6:	4650      	mov	r0, sl
  406cd8:	4659      	mov	r1, fp
  406cda:	2200      	movs	r2, #0
  406cdc:	2300      	movs	r3, #0
  406cde:	f003 f89b 	bl	409e18 <__aeabi_dcmpeq>
  406ce2:	4680      	mov	r8, r0
  406ce4:	2800      	cmp	r0, #0
  406ce6:	d02d      	beq.n	406d44 <_dtoa_r+0xa4>
  406ce8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406cea:	2301      	movs	r3, #1
  406cec:	6013      	str	r3, [r2, #0]
  406cee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406cf0:	2b00      	cmp	r3, #0
  406cf2:	f000 80bd 	beq.w	406e70 <_dtoa_r+0x1d0>
  406cf6:	4895      	ldr	r0, [pc, #596]	; (406f4c <_dtoa_r+0x2ac>)
  406cf8:	6018      	str	r0, [r3, #0]
  406cfa:	3801      	subs	r0, #1
  406cfc:	b01b      	add	sp, #108	; 0x6c
  406cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d02:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406d04:	f242 730f 	movw	r3, #9999	; 0x270f
  406d08:	6013      	str	r3, [r2, #0]
  406d0a:	f1ba 0f00 	cmp.w	sl, #0
  406d0e:	d10d      	bne.n	406d2c <_dtoa_r+0x8c>
  406d10:	f3c5 0513 	ubfx	r5, r5, #0, #20
  406d14:	b955      	cbnz	r5, 406d2c <_dtoa_r+0x8c>
  406d16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406d18:	488d      	ldr	r0, [pc, #564]	; (406f50 <_dtoa_r+0x2b0>)
  406d1a:	2b00      	cmp	r3, #0
  406d1c:	d0ee      	beq.n	406cfc <_dtoa_r+0x5c>
  406d1e:	f100 0308 	add.w	r3, r0, #8
  406d22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  406d24:	6013      	str	r3, [r2, #0]
  406d26:	b01b      	add	sp, #108	; 0x6c
  406d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406d2e:	4889      	ldr	r0, [pc, #548]	; (406f54 <_dtoa_r+0x2b4>)
  406d30:	2b00      	cmp	r3, #0
  406d32:	d0e3      	beq.n	406cfc <_dtoa_r+0x5c>
  406d34:	1cc3      	adds	r3, r0, #3
  406d36:	e7f4      	b.n	406d22 <_dtoa_r+0x82>
  406d38:	2301      	movs	r3, #1
  406d3a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  406d3e:	6033      	str	r3, [r6, #0]
  406d40:	46ab      	mov	fp, r5
  406d42:	e7c5      	b.n	406cd0 <_dtoa_r+0x30>
  406d44:	aa18      	add	r2, sp, #96	; 0x60
  406d46:	ab19      	add	r3, sp, #100	; 0x64
  406d48:	9201      	str	r2, [sp, #4]
  406d4a:	9300      	str	r3, [sp, #0]
  406d4c:	4652      	mov	r2, sl
  406d4e:	465b      	mov	r3, fp
  406d50:	4620      	mov	r0, r4
  406d52:	f001 ff7f 	bl	408c54 <__d2b>
  406d56:	0d2b      	lsrs	r3, r5, #20
  406d58:	4681      	mov	r9, r0
  406d5a:	d071      	beq.n	406e40 <_dtoa_r+0x1a0>
  406d5c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  406d60:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  406d64:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406d66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  406d6a:	4650      	mov	r0, sl
  406d6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  406d70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406d74:	2200      	movs	r2, #0
  406d76:	4b78      	ldr	r3, [pc, #480]	; (406f58 <_dtoa_r+0x2b8>)
  406d78:	f002 fc32 	bl	4095e0 <__aeabi_dsub>
  406d7c:	a36c      	add	r3, pc, #432	; (adr r3, 406f30 <_dtoa_r+0x290>)
  406d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406d82:	f002 fde1 	bl	409948 <__aeabi_dmul>
  406d86:	a36c      	add	r3, pc, #432	; (adr r3, 406f38 <_dtoa_r+0x298>)
  406d88:	e9d3 2300 	ldrd	r2, r3, [r3]
  406d8c:	f002 fc2a 	bl	4095e4 <__adddf3>
  406d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406d94:	4630      	mov	r0, r6
  406d96:	f002 fd71 	bl	40987c <__aeabi_i2d>
  406d9a:	a369      	add	r3, pc, #420	; (adr r3, 406f40 <_dtoa_r+0x2a0>)
  406d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406da0:	f002 fdd2 	bl	409948 <__aeabi_dmul>
  406da4:	4602      	mov	r2, r0
  406da6:	460b      	mov	r3, r1
  406da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406dac:	f002 fc1a 	bl	4095e4 <__adddf3>
  406db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406db4:	f003 f878 	bl	409ea8 <__aeabi_d2iz>
  406db8:	2200      	movs	r2, #0
  406dba:	9002      	str	r0, [sp, #8]
  406dbc:	2300      	movs	r3, #0
  406dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406dc2:	f003 f833 	bl	409e2c <__aeabi_dcmplt>
  406dc6:	2800      	cmp	r0, #0
  406dc8:	f040 8173 	bne.w	4070b2 <_dtoa_r+0x412>
  406dcc:	9d02      	ldr	r5, [sp, #8]
  406dce:	2d16      	cmp	r5, #22
  406dd0:	f200 815d 	bhi.w	40708e <_dtoa_r+0x3ee>
  406dd4:	4b61      	ldr	r3, [pc, #388]	; (406f5c <_dtoa_r+0x2bc>)
  406dd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406dda:	e9d3 0100 	ldrd	r0, r1, [r3]
  406dde:	4652      	mov	r2, sl
  406de0:	465b      	mov	r3, fp
  406de2:	f003 f841 	bl	409e68 <__aeabi_dcmpgt>
  406de6:	2800      	cmp	r0, #0
  406de8:	f000 81c5 	beq.w	407176 <_dtoa_r+0x4d6>
  406dec:	1e6b      	subs	r3, r5, #1
  406dee:	9302      	str	r3, [sp, #8]
  406df0:	2300      	movs	r3, #0
  406df2:	930e      	str	r3, [sp, #56]	; 0x38
  406df4:	1bbf      	subs	r7, r7, r6
  406df6:	1e7b      	subs	r3, r7, #1
  406df8:	9306      	str	r3, [sp, #24]
  406dfa:	f100 8154 	bmi.w	4070a6 <_dtoa_r+0x406>
  406dfe:	2300      	movs	r3, #0
  406e00:	9308      	str	r3, [sp, #32]
  406e02:	9b02      	ldr	r3, [sp, #8]
  406e04:	2b00      	cmp	r3, #0
  406e06:	f2c0 8145 	blt.w	407094 <_dtoa_r+0x3f4>
  406e0a:	9a06      	ldr	r2, [sp, #24]
  406e0c:	930d      	str	r3, [sp, #52]	; 0x34
  406e0e:	4611      	mov	r1, r2
  406e10:	4419      	add	r1, r3
  406e12:	2300      	movs	r3, #0
  406e14:	9106      	str	r1, [sp, #24]
  406e16:	930c      	str	r3, [sp, #48]	; 0x30
  406e18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e1a:	2b09      	cmp	r3, #9
  406e1c:	d82a      	bhi.n	406e74 <_dtoa_r+0x1d4>
  406e1e:	2b05      	cmp	r3, #5
  406e20:	f340 865b 	ble.w	407ada <_dtoa_r+0xe3a>
  406e24:	3b04      	subs	r3, #4
  406e26:	9324      	str	r3, [sp, #144]	; 0x90
  406e28:	2500      	movs	r5, #0
  406e2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e2c:	3b02      	subs	r3, #2
  406e2e:	2b03      	cmp	r3, #3
  406e30:	f200 8642 	bhi.w	407ab8 <_dtoa_r+0xe18>
  406e34:	e8df f013 	tbh	[pc, r3, lsl #1]
  406e38:	02c903d4 	.word	0x02c903d4
  406e3c:	046103df 	.word	0x046103df
  406e40:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406e42:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406e44:	443e      	add	r6, r7
  406e46:	f206 4332 	addw	r3, r6, #1074	; 0x432
  406e4a:	2b20      	cmp	r3, #32
  406e4c:	f340 818e 	ble.w	40716c <_dtoa_r+0x4cc>
  406e50:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  406e54:	f206 4012 	addw	r0, r6, #1042	; 0x412
  406e58:	409d      	lsls	r5, r3
  406e5a:	fa2a f000 	lsr.w	r0, sl, r0
  406e5e:	4328      	orrs	r0, r5
  406e60:	f002 fcfc 	bl	40985c <__aeabi_ui2d>
  406e64:	2301      	movs	r3, #1
  406e66:	3e01      	subs	r6, #1
  406e68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406e6c:	9314      	str	r3, [sp, #80]	; 0x50
  406e6e:	e781      	b.n	406d74 <_dtoa_r+0xd4>
  406e70:	483b      	ldr	r0, [pc, #236]	; (406f60 <_dtoa_r+0x2c0>)
  406e72:	e743      	b.n	406cfc <_dtoa_r+0x5c>
  406e74:	2100      	movs	r1, #0
  406e76:	6461      	str	r1, [r4, #68]	; 0x44
  406e78:	4620      	mov	r0, r4
  406e7a:	9125      	str	r1, [sp, #148]	; 0x94
  406e7c:	f001 fc4c 	bl	408718 <_Balloc>
  406e80:	f04f 33ff 	mov.w	r3, #4294967295
  406e84:	930a      	str	r3, [sp, #40]	; 0x28
  406e86:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406e88:	930f      	str	r3, [sp, #60]	; 0x3c
  406e8a:	2301      	movs	r3, #1
  406e8c:	9004      	str	r0, [sp, #16]
  406e8e:	6420      	str	r0, [r4, #64]	; 0x40
  406e90:	9224      	str	r2, [sp, #144]	; 0x90
  406e92:	930b      	str	r3, [sp, #44]	; 0x2c
  406e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406e96:	2b00      	cmp	r3, #0
  406e98:	f2c0 80d9 	blt.w	40704e <_dtoa_r+0x3ae>
  406e9c:	9a02      	ldr	r2, [sp, #8]
  406e9e:	2a0e      	cmp	r2, #14
  406ea0:	f300 80d5 	bgt.w	40704e <_dtoa_r+0x3ae>
  406ea4:	4b2d      	ldr	r3, [pc, #180]	; (406f5c <_dtoa_r+0x2bc>)
  406ea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  406eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406eb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406eb4:	2b00      	cmp	r3, #0
  406eb6:	f2c0 83ba 	blt.w	40762e <_dtoa_r+0x98e>
  406eba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406ebe:	4650      	mov	r0, sl
  406ec0:	462a      	mov	r2, r5
  406ec2:	4633      	mov	r3, r6
  406ec4:	4659      	mov	r1, fp
  406ec6:	f002 fe69 	bl	409b9c <__aeabi_ddiv>
  406eca:	f002 ffed 	bl	409ea8 <__aeabi_d2iz>
  406ece:	4680      	mov	r8, r0
  406ed0:	f002 fcd4 	bl	40987c <__aeabi_i2d>
  406ed4:	462a      	mov	r2, r5
  406ed6:	4633      	mov	r3, r6
  406ed8:	f002 fd36 	bl	409948 <__aeabi_dmul>
  406edc:	460b      	mov	r3, r1
  406ede:	4602      	mov	r2, r0
  406ee0:	4659      	mov	r1, fp
  406ee2:	4650      	mov	r0, sl
  406ee4:	f002 fb7c 	bl	4095e0 <__aeabi_dsub>
  406ee8:	9d04      	ldr	r5, [sp, #16]
  406eea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406eee:	702b      	strb	r3, [r5, #0]
  406ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ef2:	2b01      	cmp	r3, #1
  406ef4:	4606      	mov	r6, r0
  406ef6:	460f      	mov	r7, r1
  406ef8:	f105 0501 	add.w	r5, r5, #1
  406efc:	d068      	beq.n	406fd0 <_dtoa_r+0x330>
  406efe:	2200      	movs	r2, #0
  406f00:	4b18      	ldr	r3, [pc, #96]	; (406f64 <_dtoa_r+0x2c4>)
  406f02:	f002 fd21 	bl	409948 <__aeabi_dmul>
  406f06:	2200      	movs	r2, #0
  406f08:	2300      	movs	r3, #0
  406f0a:	4606      	mov	r6, r0
  406f0c:	460f      	mov	r7, r1
  406f0e:	f002 ff83 	bl	409e18 <__aeabi_dcmpeq>
  406f12:	2800      	cmp	r0, #0
  406f14:	f040 8088 	bne.w	407028 <_dtoa_r+0x388>
  406f18:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406f1c:	f04f 0a00 	mov.w	sl, #0
  406f20:	f8df b040 	ldr.w	fp, [pc, #64]	; 406f64 <_dtoa_r+0x2c4>
  406f24:	940c      	str	r4, [sp, #48]	; 0x30
  406f26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406f2a:	e028      	b.n	406f7e <_dtoa_r+0x2de>
  406f2c:	f3af 8000 	nop.w
  406f30:	636f4361 	.word	0x636f4361
  406f34:	3fd287a7 	.word	0x3fd287a7
  406f38:	8b60c8b3 	.word	0x8b60c8b3
  406f3c:	3fc68a28 	.word	0x3fc68a28
  406f40:	509f79fb 	.word	0x509f79fb
  406f44:	3fd34413 	.word	0x3fd34413
  406f48:	7ff00000 	.word	0x7ff00000
  406f4c:	0040a40d 	.word	0x0040a40d
  406f50:	0040a450 	.word	0x0040a450
  406f54:	0040a45c 	.word	0x0040a45c
  406f58:	3ff80000 	.word	0x3ff80000
  406f5c:	0040a498 	.word	0x0040a498
  406f60:	0040a40c 	.word	0x0040a40c
  406f64:	40240000 	.word	0x40240000
  406f68:	f002 fcee 	bl	409948 <__aeabi_dmul>
  406f6c:	2200      	movs	r2, #0
  406f6e:	2300      	movs	r3, #0
  406f70:	4606      	mov	r6, r0
  406f72:	460f      	mov	r7, r1
  406f74:	f002 ff50 	bl	409e18 <__aeabi_dcmpeq>
  406f78:	2800      	cmp	r0, #0
  406f7a:	f040 83c1 	bne.w	407700 <_dtoa_r+0xa60>
  406f7e:	4642      	mov	r2, r8
  406f80:	464b      	mov	r3, r9
  406f82:	4630      	mov	r0, r6
  406f84:	4639      	mov	r1, r7
  406f86:	f002 fe09 	bl	409b9c <__aeabi_ddiv>
  406f8a:	f002 ff8d 	bl	409ea8 <__aeabi_d2iz>
  406f8e:	4604      	mov	r4, r0
  406f90:	f002 fc74 	bl	40987c <__aeabi_i2d>
  406f94:	4642      	mov	r2, r8
  406f96:	464b      	mov	r3, r9
  406f98:	f002 fcd6 	bl	409948 <__aeabi_dmul>
  406f9c:	4602      	mov	r2, r0
  406f9e:	460b      	mov	r3, r1
  406fa0:	4630      	mov	r0, r6
  406fa2:	4639      	mov	r1, r7
  406fa4:	f002 fb1c 	bl	4095e0 <__aeabi_dsub>
  406fa8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406fac:	9e04      	ldr	r6, [sp, #16]
  406fae:	f805 eb01 	strb.w	lr, [r5], #1
  406fb2:	eba5 0e06 	sub.w	lr, r5, r6
  406fb6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406fb8:	45b6      	cmp	lr, r6
  406fba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406fbe:	4652      	mov	r2, sl
  406fc0:	465b      	mov	r3, fp
  406fc2:	d1d1      	bne.n	406f68 <_dtoa_r+0x2c8>
  406fc4:	46a0      	mov	r8, r4
  406fc6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406fca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406fcc:	4606      	mov	r6, r0
  406fce:	460f      	mov	r7, r1
  406fd0:	4632      	mov	r2, r6
  406fd2:	463b      	mov	r3, r7
  406fd4:	4630      	mov	r0, r6
  406fd6:	4639      	mov	r1, r7
  406fd8:	f002 fb04 	bl	4095e4 <__adddf3>
  406fdc:	4606      	mov	r6, r0
  406fde:	460f      	mov	r7, r1
  406fe0:	4602      	mov	r2, r0
  406fe2:	460b      	mov	r3, r1
  406fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406fe8:	f002 ff20 	bl	409e2c <__aeabi_dcmplt>
  406fec:	b948      	cbnz	r0, 407002 <_dtoa_r+0x362>
  406fee:	4632      	mov	r2, r6
  406ff0:	463b      	mov	r3, r7
  406ff2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406ff6:	f002 ff0f 	bl	409e18 <__aeabi_dcmpeq>
  406ffa:	b1a8      	cbz	r0, 407028 <_dtoa_r+0x388>
  406ffc:	f018 0f01 	tst.w	r8, #1
  407000:	d012      	beq.n	407028 <_dtoa_r+0x388>
  407002:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407006:	9a04      	ldr	r2, [sp, #16]
  407008:	1e6b      	subs	r3, r5, #1
  40700a:	e004      	b.n	407016 <_dtoa_r+0x376>
  40700c:	429a      	cmp	r2, r3
  40700e:	f000 8401 	beq.w	407814 <_dtoa_r+0xb74>
  407012:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407016:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40701a:	f103 0501 	add.w	r5, r3, #1
  40701e:	d0f5      	beq.n	40700c <_dtoa_r+0x36c>
  407020:	f108 0801 	add.w	r8, r8, #1
  407024:	f883 8000 	strb.w	r8, [r3]
  407028:	4649      	mov	r1, r9
  40702a:	4620      	mov	r0, r4
  40702c:	f001 fb9a 	bl	408764 <_Bfree>
  407030:	2200      	movs	r2, #0
  407032:	9b02      	ldr	r3, [sp, #8]
  407034:	702a      	strb	r2, [r5, #0]
  407036:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407038:	3301      	adds	r3, #1
  40703a:	6013      	str	r3, [r2, #0]
  40703c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40703e:	2b00      	cmp	r3, #0
  407040:	f000 839e 	beq.w	407780 <_dtoa_r+0xae0>
  407044:	9804      	ldr	r0, [sp, #16]
  407046:	601d      	str	r5, [r3, #0]
  407048:	b01b      	add	sp, #108	; 0x6c
  40704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40704e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407050:	2a00      	cmp	r2, #0
  407052:	d03e      	beq.n	4070d2 <_dtoa_r+0x432>
  407054:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407056:	2a01      	cmp	r2, #1
  407058:	f340 8311 	ble.w	40767e <_dtoa_r+0x9de>
  40705c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40705e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407060:	1e5f      	subs	r7, r3, #1
  407062:	42ba      	cmp	r2, r7
  407064:	f2c0 838f 	blt.w	407786 <_dtoa_r+0xae6>
  407068:	1bd7      	subs	r7, r2, r7
  40706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40706c:	2b00      	cmp	r3, #0
  40706e:	f2c0 848b 	blt.w	407988 <_dtoa_r+0xce8>
  407072:	9d08      	ldr	r5, [sp, #32]
  407074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407076:	9a08      	ldr	r2, [sp, #32]
  407078:	441a      	add	r2, r3
  40707a:	9208      	str	r2, [sp, #32]
  40707c:	9a06      	ldr	r2, [sp, #24]
  40707e:	2101      	movs	r1, #1
  407080:	441a      	add	r2, r3
  407082:	4620      	mov	r0, r4
  407084:	9206      	str	r2, [sp, #24]
  407086:	f001 fc07 	bl	408898 <__i2b>
  40708a:	4606      	mov	r6, r0
  40708c:	e024      	b.n	4070d8 <_dtoa_r+0x438>
  40708e:	2301      	movs	r3, #1
  407090:	930e      	str	r3, [sp, #56]	; 0x38
  407092:	e6af      	b.n	406df4 <_dtoa_r+0x154>
  407094:	9a08      	ldr	r2, [sp, #32]
  407096:	9b02      	ldr	r3, [sp, #8]
  407098:	1ad2      	subs	r2, r2, r3
  40709a:	425b      	negs	r3, r3
  40709c:	930c      	str	r3, [sp, #48]	; 0x30
  40709e:	2300      	movs	r3, #0
  4070a0:	9208      	str	r2, [sp, #32]
  4070a2:	930d      	str	r3, [sp, #52]	; 0x34
  4070a4:	e6b8      	b.n	406e18 <_dtoa_r+0x178>
  4070a6:	f1c7 0301 	rsb	r3, r7, #1
  4070aa:	9308      	str	r3, [sp, #32]
  4070ac:	2300      	movs	r3, #0
  4070ae:	9306      	str	r3, [sp, #24]
  4070b0:	e6a7      	b.n	406e02 <_dtoa_r+0x162>
  4070b2:	9d02      	ldr	r5, [sp, #8]
  4070b4:	4628      	mov	r0, r5
  4070b6:	f002 fbe1 	bl	40987c <__aeabi_i2d>
  4070ba:	4602      	mov	r2, r0
  4070bc:	460b      	mov	r3, r1
  4070be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4070c2:	f002 fea9 	bl	409e18 <__aeabi_dcmpeq>
  4070c6:	2800      	cmp	r0, #0
  4070c8:	f47f ae80 	bne.w	406dcc <_dtoa_r+0x12c>
  4070cc:	1e6b      	subs	r3, r5, #1
  4070ce:	9302      	str	r3, [sp, #8]
  4070d0:	e67c      	b.n	406dcc <_dtoa_r+0x12c>
  4070d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4070d4:	9d08      	ldr	r5, [sp, #32]
  4070d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4070d8:	2d00      	cmp	r5, #0
  4070da:	dd0c      	ble.n	4070f6 <_dtoa_r+0x456>
  4070dc:	9906      	ldr	r1, [sp, #24]
  4070de:	2900      	cmp	r1, #0
  4070e0:	460b      	mov	r3, r1
  4070e2:	dd08      	ble.n	4070f6 <_dtoa_r+0x456>
  4070e4:	42a9      	cmp	r1, r5
  4070e6:	9a08      	ldr	r2, [sp, #32]
  4070e8:	bfa8      	it	ge
  4070ea:	462b      	movge	r3, r5
  4070ec:	1ad2      	subs	r2, r2, r3
  4070ee:	1aed      	subs	r5, r5, r3
  4070f0:	1acb      	subs	r3, r1, r3
  4070f2:	9208      	str	r2, [sp, #32]
  4070f4:	9306      	str	r3, [sp, #24]
  4070f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4070f8:	b1d3      	cbz	r3, 407130 <_dtoa_r+0x490>
  4070fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4070fc:	2b00      	cmp	r3, #0
  4070fe:	f000 82b7 	beq.w	407670 <_dtoa_r+0x9d0>
  407102:	2f00      	cmp	r7, #0
  407104:	dd10      	ble.n	407128 <_dtoa_r+0x488>
  407106:	4631      	mov	r1, r6
  407108:	463a      	mov	r2, r7
  40710a:	4620      	mov	r0, r4
  40710c:	f001 fc60 	bl	4089d0 <__pow5mult>
  407110:	464a      	mov	r2, r9
  407112:	4601      	mov	r1, r0
  407114:	4606      	mov	r6, r0
  407116:	4620      	mov	r0, r4
  407118:	f001 fbc8 	bl	4088ac <__multiply>
  40711c:	4649      	mov	r1, r9
  40711e:	4680      	mov	r8, r0
  407120:	4620      	mov	r0, r4
  407122:	f001 fb1f 	bl	408764 <_Bfree>
  407126:	46c1      	mov	r9, r8
  407128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40712a:	1bda      	subs	r2, r3, r7
  40712c:	f040 82a1 	bne.w	407672 <_dtoa_r+0x9d2>
  407130:	2101      	movs	r1, #1
  407132:	4620      	mov	r0, r4
  407134:	f001 fbb0 	bl	408898 <__i2b>
  407138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40713a:	2b00      	cmp	r3, #0
  40713c:	4680      	mov	r8, r0
  40713e:	dd1c      	ble.n	40717a <_dtoa_r+0x4da>
  407140:	4601      	mov	r1, r0
  407142:	461a      	mov	r2, r3
  407144:	4620      	mov	r0, r4
  407146:	f001 fc43 	bl	4089d0 <__pow5mult>
  40714a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40714c:	2b01      	cmp	r3, #1
  40714e:	4680      	mov	r8, r0
  407150:	f340 8254 	ble.w	4075fc <_dtoa_r+0x95c>
  407154:	2300      	movs	r3, #0
  407156:	930c      	str	r3, [sp, #48]	; 0x30
  407158:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40715c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407160:	6918      	ldr	r0, [r3, #16]
  407162:	f001 fb49 	bl	4087f8 <__hi0bits>
  407166:	f1c0 0020 	rsb	r0, r0, #32
  40716a:	e010      	b.n	40718e <_dtoa_r+0x4ee>
  40716c:	f1c3 0520 	rsb	r5, r3, #32
  407170:	fa0a f005 	lsl.w	r0, sl, r5
  407174:	e674      	b.n	406e60 <_dtoa_r+0x1c0>
  407176:	900e      	str	r0, [sp, #56]	; 0x38
  407178:	e63c      	b.n	406df4 <_dtoa_r+0x154>
  40717a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40717c:	2b01      	cmp	r3, #1
  40717e:	f340 8287 	ble.w	407690 <_dtoa_r+0x9f0>
  407182:	2300      	movs	r3, #0
  407184:	930c      	str	r3, [sp, #48]	; 0x30
  407186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407188:	2001      	movs	r0, #1
  40718a:	2b00      	cmp	r3, #0
  40718c:	d1e4      	bne.n	407158 <_dtoa_r+0x4b8>
  40718e:	9a06      	ldr	r2, [sp, #24]
  407190:	4410      	add	r0, r2
  407192:	f010 001f 	ands.w	r0, r0, #31
  407196:	f000 80a1 	beq.w	4072dc <_dtoa_r+0x63c>
  40719a:	f1c0 0320 	rsb	r3, r0, #32
  40719e:	2b04      	cmp	r3, #4
  4071a0:	f340 849e 	ble.w	407ae0 <_dtoa_r+0xe40>
  4071a4:	9b08      	ldr	r3, [sp, #32]
  4071a6:	f1c0 001c 	rsb	r0, r0, #28
  4071aa:	4403      	add	r3, r0
  4071ac:	9308      	str	r3, [sp, #32]
  4071ae:	4613      	mov	r3, r2
  4071b0:	4403      	add	r3, r0
  4071b2:	4405      	add	r5, r0
  4071b4:	9306      	str	r3, [sp, #24]
  4071b6:	9b08      	ldr	r3, [sp, #32]
  4071b8:	2b00      	cmp	r3, #0
  4071ba:	dd05      	ble.n	4071c8 <_dtoa_r+0x528>
  4071bc:	4649      	mov	r1, r9
  4071be:	461a      	mov	r2, r3
  4071c0:	4620      	mov	r0, r4
  4071c2:	f001 fc55 	bl	408a70 <__lshift>
  4071c6:	4681      	mov	r9, r0
  4071c8:	9b06      	ldr	r3, [sp, #24]
  4071ca:	2b00      	cmp	r3, #0
  4071cc:	dd05      	ble.n	4071da <_dtoa_r+0x53a>
  4071ce:	4641      	mov	r1, r8
  4071d0:	461a      	mov	r2, r3
  4071d2:	4620      	mov	r0, r4
  4071d4:	f001 fc4c 	bl	408a70 <__lshift>
  4071d8:	4680      	mov	r8, r0
  4071da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4071dc:	2b00      	cmp	r3, #0
  4071de:	f040 8086 	bne.w	4072ee <_dtoa_r+0x64e>
  4071e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4071e4:	2b00      	cmp	r3, #0
  4071e6:	f340 8266 	ble.w	4076b6 <_dtoa_r+0xa16>
  4071ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4071ec:	2b00      	cmp	r3, #0
  4071ee:	f000 8098 	beq.w	407322 <_dtoa_r+0x682>
  4071f2:	2d00      	cmp	r5, #0
  4071f4:	dd05      	ble.n	407202 <_dtoa_r+0x562>
  4071f6:	4631      	mov	r1, r6
  4071f8:	462a      	mov	r2, r5
  4071fa:	4620      	mov	r0, r4
  4071fc:	f001 fc38 	bl	408a70 <__lshift>
  407200:	4606      	mov	r6, r0
  407202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407204:	2b00      	cmp	r3, #0
  407206:	f040 8337 	bne.w	407878 <_dtoa_r+0xbd8>
  40720a:	9606      	str	r6, [sp, #24]
  40720c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40720e:	9a04      	ldr	r2, [sp, #16]
  407210:	f8dd b018 	ldr.w	fp, [sp, #24]
  407214:	3b01      	subs	r3, #1
  407216:	18d3      	adds	r3, r2, r3
  407218:	930b      	str	r3, [sp, #44]	; 0x2c
  40721a:	f00a 0301 	and.w	r3, sl, #1
  40721e:	930c      	str	r3, [sp, #48]	; 0x30
  407220:	4617      	mov	r7, r2
  407222:	46c2      	mov	sl, r8
  407224:	4651      	mov	r1, sl
  407226:	4648      	mov	r0, r9
  407228:	f7ff fca4 	bl	406b74 <quorem>
  40722c:	4631      	mov	r1, r6
  40722e:	4605      	mov	r5, r0
  407230:	4648      	mov	r0, r9
  407232:	f001 fc6f 	bl	408b14 <__mcmp>
  407236:	465a      	mov	r2, fp
  407238:	900a      	str	r0, [sp, #40]	; 0x28
  40723a:	4651      	mov	r1, sl
  40723c:	4620      	mov	r0, r4
  40723e:	f001 fc85 	bl	408b4c <__mdiff>
  407242:	68c2      	ldr	r2, [r0, #12]
  407244:	4680      	mov	r8, r0
  407246:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40724a:	2a00      	cmp	r2, #0
  40724c:	f040 822b 	bne.w	4076a6 <_dtoa_r+0xa06>
  407250:	4601      	mov	r1, r0
  407252:	4648      	mov	r0, r9
  407254:	9308      	str	r3, [sp, #32]
  407256:	f001 fc5d 	bl	408b14 <__mcmp>
  40725a:	4641      	mov	r1, r8
  40725c:	9006      	str	r0, [sp, #24]
  40725e:	4620      	mov	r0, r4
  407260:	f001 fa80 	bl	408764 <_Bfree>
  407264:	9a06      	ldr	r2, [sp, #24]
  407266:	9b08      	ldr	r3, [sp, #32]
  407268:	b932      	cbnz	r2, 407278 <_dtoa_r+0x5d8>
  40726a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40726c:	b921      	cbnz	r1, 407278 <_dtoa_r+0x5d8>
  40726e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407270:	2a00      	cmp	r2, #0
  407272:	f000 83ef 	beq.w	407a54 <_dtoa_r+0xdb4>
  407276:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407278:	990a      	ldr	r1, [sp, #40]	; 0x28
  40727a:	2900      	cmp	r1, #0
  40727c:	f2c0 829f 	blt.w	4077be <_dtoa_r+0xb1e>
  407280:	d105      	bne.n	40728e <_dtoa_r+0x5ee>
  407282:	9924      	ldr	r1, [sp, #144]	; 0x90
  407284:	b919      	cbnz	r1, 40728e <_dtoa_r+0x5ee>
  407286:	990c      	ldr	r1, [sp, #48]	; 0x30
  407288:	2900      	cmp	r1, #0
  40728a:	f000 8298 	beq.w	4077be <_dtoa_r+0xb1e>
  40728e:	2a00      	cmp	r2, #0
  407290:	f300 8306 	bgt.w	4078a0 <_dtoa_r+0xc00>
  407294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407296:	703b      	strb	r3, [r7, #0]
  407298:	f107 0801 	add.w	r8, r7, #1
  40729c:	4297      	cmp	r7, r2
  40729e:	4645      	mov	r5, r8
  4072a0:	f000 830c 	beq.w	4078bc <_dtoa_r+0xc1c>
  4072a4:	4649      	mov	r1, r9
  4072a6:	2300      	movs	r3, #0
  4072a8:	220a      	movs	r2, #10
  4072aa:	4620      	mov	r0, r4
  4072ac:	f001 fa64 	bl	408778 <__multadd>
  4072b0:	455e      	cmp	r6, fp
  4072b2:	4681      	mov	r9, r0
  4072b4:	4631      	mov	r1, r6
  4072b6:	f04f 0300 	mov.w	r3, #0
  4072ba:	f04f 020a 	mov.w	r2, #10
  4072be:	4620      	mov	r0, r4
  4072c0:	f000 81eb 	beq.w	40769a <_dtoa_r+0x9fa>
  4072c4:	f001 fa58 	bl	408778 <__multadd>
  4072c8:	4659      	mov	r1, fp
  4072ca:	4606      	mov	r6, r0
  4072cc:	2300      	movs	r3, #0
  4072ce:	220a      	movs	r2, #10
  4072d0:	4620      	mov	r0, r4
  4072d2:	f001 fa51 	bl	408778 <__multadd>
  4072d6:	4647      	mov	r7, r8
  4072d8:	4683      	mov	fp, r0
  4072da:	e7a3      	b.n	407224 <_dtoa_r+0x584>
  4072dc:	201c      	movs	r0, #28
  4072de:	9b08      	ldr	r3, [sp, #32]
  4072e0:	4403      	add	r3, r0
  4072e2:	9308      	str	r3, [sp, #32]
  4072e4:	9b06      	ldr	r3, [sp, #24]
  4072e6:	4403      	add	r3, r0
  4072e8:	4405      	add	r5, r0
  4072ea:	9306      	str	r3, [sp, #24]
  4072ec:	e763      	b.n	4071b6 <_dtoa_r+0x516>
  4072ee:	4641      	mov	r1, r8
  4072f0:	4648      	mov	r0, r9
  4072f2:	f001 fc0f 	bl	408b14 <__mcmp>
  4072f6:	2800      	cmp	r0, #0
  4072f8:	f6bf af73 	bge.w	4071e2 <_dtoa_r+0x542>
  4072fc:	9f02      	ldr	r7, [sp, #8]
  4072fe:	4649      	mov	r1, r9
  407300:	2300      	movs	r3, #0
  407302:	220a      	movs	r2, #10
  407304:	4620      	mov	r0, r4
  407306:	3f01      	subs	r7, #1
  407308:	9702      	str	r7, [sp, #8]
  40730a:	f001 fa35 	bl	408778 <__multadd>
  40730e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407310:	4681      	mov	r9, r0
  407312:	2b00      	cmp	r3, #0
  407314:	f040 83b6 	bne.w	407a84 <_dtoa_r+0xde4>
  407318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40731a:	2b00      	cmp	r3, #0
  40731c:	f340 83bf 	ble.w	407a9e <_dtoa_r+0xdfe>
  407320:	930a      	str	r3, [sp, #40]	; 0x28
  407322:	f8dd b010 	ldr.w	fp, [sp, #16]
  407326:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407328:	465d      	mov	r5, fp
  40732a:	e002      	b.n	407332 <_dtoa_r+0x692>
  40732c:	f001 fa24 	bl	408778 <__multadd>
  407330:	4681      	mov	r9, r0
  407332:	4641      	mov	r1, r8
  407334:	4648      	mov	r0, r9
  407336:	f7ff fc1d 	bl	406b74 <quorem>
  40733a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40733e:	f805 ab01 	strb.w	sl, [r5], #1
  407342:	eba5 030b 	sub.w	r3, r5, fp
  407346:	42bb      	cmp	r3, r7
  407348:	f04f 020a 	mov.w	r2, #10
  40734c:	f04f 0300 	mov.w	r3, #0
  407350:	4649      	mov	r1, r9
  407352:	4620      	mov	r0, r4
  407354:	dbea      	blt.n	40732c <_dtoa_r+0x68c>
  407356:	9b04      	ldr	r3, [sp, #16]
  407358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40735a:	2a01      	cmp	r2, #1
  40735c:	bfac      	ite	ge
  40735e:	189b      	addge	r3, r3, r2
  407360:	3301      	addlt	r3, #1
  407362:	461d      	mov	r5, r3
  407364:	f04f 0b00 	mov.w	fp, #0
  407368:	4649      	mov	r1, r9
  40736a:	2201      	movs	r2, #1
  40736c:	4620      	mov	r0, r4
  40736e:	f001 fb7f 	bl	408a70 <__lshift>
  407372:	4641      	mov	r1, r8
  407374:	4681      	mov	r9, r0
  407376:	f001 fbcd 	bl	408b14 <__mcmp>
  40737a:	2800      	cmp	r0, #0
  40737c:	f340 823d 	ble.w	4077fa <_dtoa_r+0xb5a>
  407380:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407384:	9904      	ldr	r1, [sp, #16]
  407386:	1e6b      	subs	r3, r5, #1
  407388:	e004      	b.n	407394 <_dtoa_r+0x6f4>
  40738a:	428b      	cmp	r3, r1
  40738c:	f000 81ae 	beq.w	4076ec <_dtoa_r+0xa4c>
  407390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407394:	2a39      	cmp	r2, #57	; 0x39
  407396:	f103 0501 	add.w	r5, r3, #1
  40739a:	d0f6      	beq.n	40738a <_dtoa_r+0x6ea>
  40739c:	3201      	adds	r2, #1
  40739e:	701a      	strb	r2, [r3, #0]
  4073a0:	4641      	mov	r1, r8
  4073a2:	4620      	mov	r0, r4
  4073a4:	f001 f9de 	bl	408764 <_Bfree>
  4073a8:	2e00      	cmp	r6, #0
  4073aa:	f43f ae3d 	beq.w	407028 <_dtoa_r+0x388>
  4073ae:	f1bb 0f00 	cmp.w	fp, #0
  4073b2:	d005      	beq.n	4073c0 <_dtoa_r+0x720>
  4073b4:	45b3      	cmp	fp, r6
  4073b6:	d003      	beq.n	4073c0 <_dtoa_r+0x720>
  4073b8:	4659      	mov	r1, fp
  4073ba:	4620      	mov	r0, r4
  4073bc:	f001 f9d2 	bl	408764 <_Bfree>
  4073c0:	4631      	mov	r1, r6
  4073c2:	4620      	mov	r0, r4
  4073c4:	f001 f9ce 	bl	408764 <_Bfree>
  4073c8:	e62e      	b.n	407028 <_dtoa_r+0x388>
  4073ca:	2300      	movs	r3, #0
  4073cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4073ce:	9b02      	ldr	r3, [sp, #8]
  4073d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4073d2:	4413      	add	r3, r2
  4073d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4073d6:	3301      	adds	r3, #1
  4073d8:	2b01      	cmp	r3, #1
  4073da:	461f      	mov	r7, r3
  4073dc:	461e      	mov	r6, r3
  4073de:	930a      	str	r3, [sp, #40]	; 0x28
  4073e0:	bfb8      	it	lt
  4073e2:	2701      	movlt	r7, #1
  4073e4:	2100      	movs	r1, #0
  4073e6:	2f17      	cmp	r7, #23
  4073e8:	6461      	str	r1, [r4, #68]	; 0x44
  4073ea:	d90a      	bls.n	407402 <_dtoa_r+0x762>
  4073ec:	2201      	movs	r2, #1
  4073ee:	2304      	movs	r3, #4
  4073f0:	005b      	lsls	r3, r3, #1
  4073f2:	f103 0014 	add.w	r0, r3, #20
  4073f6:	4287      	cmp	r7, r0
  4073f8:	4611      	mov	r1, r2
  4073fa:	f102 0201 	add.w	r2, r2, #1
  4073fe:	d2f7      	bcs.n	4073f0 <_dtoa_r+0x750>
  407400:	6461      	str	r1, [r4, #68]	; 0x44
  407402:	4620      	mov	r0, r4
  407404:	f001 f988 	bl	408718 <_Balloc>
  407408:	2e0e      	cmp	r6, #14
  40740a:	9004      	str	r0, [sp, #16]
  40740c:	6420      	str	r0, [r4, #64]	; 0x40
  40740e:	f63f ad41 	bhi.w	406e94 <_dtoa_r+0x1f4>
  407412:	2d00      	cmp	r5, #0
  407414:	f43f ad3e 	beq.w	406e94 <_dtoa_r+0x1f4>
  407418:	9902      	ldr	r1, [sp, #8]
  40741a:	2900      	cmp	r1, #0
  40741c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407420:	f340 8202 	ble.w	407828 <_dtoa_r+0xb88>
  407424:	4bb8      	ldr	r3, [pc, #736]	; (407708 <_dtoa_r+0xa68>)
  407426:	f001 020f 	and.w	r2, r1, #15
  40742a:	110d      	asrs	r5, r1, #4
  40742c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407430:	06e9      	lsls	r1, r5, #27
  407432:	e9d3 6700 	ldrd	r6, r7, [r3]
  407436:	f140 81ae 	bpl.w	407796 <_dtoa_r+0xaf6>
  40743a:	4bb4      	ldr	r3, [pc, #720]	; (40770c <_dtoa_r+0xa6c>)
  40743c:	4650      	mov	r0, sl
  40743e:	4659      	mov	r1, fp
  407440:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407444:	f002 fbaa 	bl	409b9c <__aeabi_ddiv>
  407448:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40744c:	f005 050f 	and.w	r5, r5, #15
  407450:	f04f 0a03 	mov.w	sl, #3
  407454:	b18d      	cbz	r5, 40747a <_dtoa_r+0x7da>
  407456:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40770c <_dtoa_r+0xa6c>
  40745a:	07ea      	lsls	r2, r5, #31
  40745c:	d509      	bpl.n	407472 <_dtoa_r+0x7d2>
  40745e:	4630      	mov	r0, r6
  407460:	4639      	mov	r1, r7
  407462:	e9d8 2300 	ldrd	r2, r3, [r8]
  407466:	f002 fa6f 	bl	409948 <__aeabi_dmul>
  40746a:	f10a 0a01 	add.w	sl, sl, #1
  40746e:	4606      	mov	r6, r0
  407470:	460f      	mov	r7, r1
  407472:	106d      	asrs	r5, r5, #1
  407474:	f108 0808 	add.w	r8, r8, #8
  407478:	d1ef      	bne.n	40745a <_dtoa_r+0x7ba>
  40747a:	463b      	mov	r3, r7
  40747c:	4632      	mov	r2, r6
  40747e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407482:	f002 fb8b 	bl	409b9c <__aeabi_ddiv>
  407486:	4607      	mov	r7, r0
  407488:	4688      	mov	r8, r1
  40748a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40748c:	b143      	cbz	r3, 4074a0 <_dtoa_r+0x800>
  40748e:	2200      	movs	r2, #0
  407490:	4b9f      	ldr	r3, [pc, #636]	; (407710 <_dtoa_r+0xa70>)
  407492:	4638      	mov	r0, r7
  407494:	4641      	mov	r1, r8
  407496:	f002 fcc9 	bl	409e2c <__aeabi_dcmplt>
  40749a:	2800      	cmp	r0, #0
  40749c:	f040 8286 	bne.w	4079ac <_dtoa_r+0xd0c>
  4074a0:	4650      	mov	r0, sl
  4074a2:	f002 f9eb 	bl	40987c <__aeabi_i2d>
  4074a6:	463a      	mov	r2, r7
  4074a8:	4643      	mov	r3, r8
  4074aa:	f002 fa4d 	bl	409948 <__aeabi_dmul>
  4074ae:	4b99      	ldr	r3, [pc, #612]	; (407714 <_dtoa_r+0xa74>)
  4074b0:	2200      	movs	r2, #0
  4074b2:	f002 f897 	bl	4095e4 <__adddf3>
  4074b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4074b8:	4605      	mov	r5, r0
  4074ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4074be:	2b00      	cmp	r3, #0
  4074c0:	f000 813e 	beq.w	407740 <_dtoa_r+0xaa0>
  4074c4:	9b02      	ldr	r3, [sp, #8]
  4074c6:	9315      	str	r3, [sp, #84]	; 0x54
  4074c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4074ca:	9312      	str	r3, [sp, #72]	; 0x48
  4074cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4074ce:	2b00      	cmp	r3, #0
  4074d0:	f000 81fa 	beq.w	4078c8 <_dtoa_r+0xc28>
  4074d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4074d6:	4b8c      	ldr	r3, [pc, #560]	; (407708 <_dtoa_r+0xa68>)
  4074d8:	498f      	ldr	r1, [pc, #572]	; (407718 <_dtoa_r+0xa78>)
  4074da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4074de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4074e2:	2000      	movs	r0, #0
  4074e4:	f002 fb5a 	bl	409b9c <__aeabi_ddiv>
  4074e8:	462a      	mov	r2, r5
  4074ea:	4633      	mov	r3, r6
  4074ec:	f002 f878 	bl	4095e0 <__aeabi_dsub>
  4074f0:	4682      	mov	sl, r0
  4074f2:	468b      	mov	fp, r1
  4074f4:	4638      	mov	r0, r7
  4074f6:	4641      	mov	r1, r8
  4074f8:	f002 fcd6 	bl	409ea8 <__aeabi_d2iz>
  4074fc:	4605      	mov	r5, r0
  4074fe:	f002 f9bd 	bl	40987c <__aeabi_i2d>
  407502:	4602      	mov	r2, r0
  407504:	460b      	mov	r3, r1
  407506:	4638      	mov	r0, r7
  407508:	4641      	mov	r1, r8
  40750a:	f002 f869 	bl	4095e0 <__aeabi_dsub>
  40750e:	3530      	adds	r5, #48	; 0x30
  407510:	fa5f f885 	uxtb.w	r8, r5
  407514:	9d04      	ldr	r5, [sp, #16]
  407516:	4606      	mov	r6, r0
  407518:	460f      	mov	r7, r1
  40751a:	f885 8000 	strb.w	r8, [r5]
  40751e:	4602      	mov	r2, r0
  407520:	460b      	mov	r3, r1
  407522:	4650      	mov	r0, sl
  407524:	4659      	mov	r1, fp
  407526:	3501      	adds	r5, #1
  407528:	f002 fc9e 	bl	409e68 <__aeabi_dcmpgt>
  40752c:	2800      	cmp	r0, #0
  40752e:	d154      	bne.n	4075da <_dtoa_r+0x93a>
  407530:	4632      	mov	r2, r6
  407532:	463b      	mov	r3, r7
  407534:	2000      	movs	r0, #0
  407536:	4976      	ldr	r1, [pc, #472]	; (407710 <_dtoa_r+0xa70>)
  407538:	f002 f852 	bl	4095e0 <__aeabi_dsub>
  40753c:	4602      	mov	r2, r0
  40753e:	460b      	mov	r3, r1
  407540:	4650      	mov	r0, sl
  407542:	4659      	mov	r1, fp
  407544:	f002 fc90 	bl	409e68 <__aeabi_dcmpgt>
  407548:	2800      	cmp	r0, #0
  40754a:	f040 8270 	bne.w	407a2e <_dtoa_r+0xd8e>
  40754e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407550:	2a01      	cmp	r2, #1
  407552:	f000 8111 	beq.w	407778 <_dtoa_r+0xad8>
  407556:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407558:	9a04      	ldr	r2, [sp, #16]
  40755a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40755e:	4413      	add	r3, r2
  407560:	4699      	mov	r9, r3
  407562:	e00d      	b.n	407580 <_dtoa_r+0x8e0>
  407564:	2000      	movs	r0, #0
  407566:	496a      	ldr	r1, [pc, #424]	; (407710 <_dtoa_r+0xa70>)
  407568:	f002 f83a 	bl	4095e0 <__aeabi_dsub>
  40756c:	4652      	mov	r2, sl
  40756e:	465b      	mov	r3, fp
  407570:	f002 fc5c 	bl	409e2c <__aeabi_dcmplt>
  407574:	2800      	cmp	r0, #0
  407576:	f040 8258 	bne.w	407a2a <_dtoa_r+0xd8a>
  40757a:	454d      	cmp	r5, r9
  40757c:	f000 80fa 	beq.w	407774 <_dtoa_r+0xad4>
  407580:	4650      	mov	r0, sl
  407582:	4659      	mov	r1, fp
  407584:	2200      	movs	r2, #0
  407586:	4b65      	ldr	r3, [pc, #404]	; (40771c <_dtoa_r+0xa7c>)
  407588:	f002 f9de 	bl	409948 <__aeabi_dmul>
  40758c:	2200      	movs	r2, #0
  40758e:	4b63      	ldr	r3, [pc, #396]	; (40771c <_dtoa_r+0xa7c>)
  407590:	4682      	mov	sl, r0
  407592:	468b      	mov	fp, r1
  407594:	4630      	mov	r0, r6
  407596:	4639      	mov	r1, r7
  407598:	f002 f9d6 	bl	409948 <__aeabi_dmul>
  40759c:	460f      	mov	r7, r1
  40759e:	4606      	mov	r6, r0
  4075a0:	f002 fc82 	bl	409ea8 <__aeabi_d2iz>
  4075a4:	4680      	mov	r8, r0
  4075a6:	f002 f969 	bl	40987c <__aeabi_i2d>
  4075aa:	4602      	mov	r2, r0
  4075ac:	460b      	mov	r3, r1
  4075ae:	4630      	mov	r0, r6
  4075b0:	4639      	mov	r1, r7
  4075b2:	f002 f815 	bl	4095e0 <__aeabi_dsub>
  4075b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4075ba:	fa5f f888 	uxtb.w	r8, r8
  4075be:	4652      	mov	r2, sl
  4075c0:	465b      	mov	r3, fp
  4075c2:	f805 8b01 	strb.w	r8, [r5], #1
  4075c6:	4606      	mov	r6, r0
  4075c8:	460f      	mov	r7, r1
  4075ca:	f002 fc2f 	bl	409e2c <__aeabi_dcmplt>
  4075ce:	4632      	mov	r2, r6
  4075d0:	463b      	mov	r3, r7
  4075d2:	2800      	cmp	r0, #0
  4075d4:	d0c6      	beq.n	407564 <_dtoa_r+0x8c4>
  4075d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4075da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4075dc:	9302      	str	r3, [sp, #8]
  4075de:	e523      	b.n	407028 <_dtoa_r+0x388>
  4075e0:	2300      	movs	r3, #0
  4075e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4075e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4075e6:	2b00      	cmp	r3, #0
  4075e8:	f340 80dc 	ble.w	4077a4 <_dtoa_r+0xb04>
  4075ec:	461f      	mov	r7, r3
  4075ee:	461e      	mov	r6, r3
  4075f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4075f2:	930a      	str	r3, [sp, #40]	; 0x28
  4075f4:	e6f6      	b.n	4073e4 <_dtoa_r+0x744>
  4075f6:	2301      	movs	r3, #1
  4075f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4075fa:	e7f3      	b.n	4075e4 <_dtoa_r+0x944>
  4075fc:	f1ba 0f00 	cmp.w	sl, #0
  407600:	f47f ada8 	bne.w	407154 <_dtoa_r+0x4b4>
  407604:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407608:	2b00      	cmp	r3, #0
  40760a:	f47f adba 	bne.w	407182 <_dtoa_r+0x4e2>
  40760e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407612:	0d3f      	lsrs	r7, r7, #20
  407614:	053f      	lsls	r7, r7, #20
  407616:	2f00      	cmp	r7, #0
  407618:	f000 820d 	beq.w	407a36 <_dtoa_r+0xd96>
  40761c:	9b08      	ldr	r3, [sp, #32]
  40761e:	3301      	adds	r3, #1
  407620:	9308      	str	r3, [sp, #32]
  407622:	9b06      	ldr	r3, [sp, #24]
  407624:	3301      	adds	r3, #1
  407626:	9306      	str	r3, [sp, #24]
  407628:	2301      	movs	r3, #1
  40762a:	930c      	str	r3, [sp, #48]	; 0x30
  40762c:	e5ab      	b.n	407186 <_dtoa_r+0x4e6>
  40762e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407630:	2b00      	cmp	r3, #0
  407632:	f73f ac42 	bgt.w	406eba <_dtoa_r+0x21a>
  407636:	f040 8221 	bne.w	407a7c <_dtoa_r+0xddc>
  40763a:	2200      	movs	r2, #0
  40763c:	4b38      	ldr	r3, [pc, #224]	; (407720 <_dtoa_r+0xa80>)
  40763e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407642:	f002 f981 	bl	409948 <__aeabi_dmul>
  407646:	4652      	mov	r2, sl
  407648:	465b      	mov	r3, fp
  40764a:	f002 fc03 	bl	409e54 <__aeabi_dcmpge>
  40764e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407652:	4646      	mov	r6, r8
  407654:	2800      	cmp	r0, #0
  407656:	d041      	beq.n	4076dc <_dtoa_r+0xa3c>
  407658:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40765a:	9d04      	ldr	r5, [sp, #16]
  40765c:	43db      	mvns	r3, r3
  40765e:	9302      	str	r3, [sp, #8]
  407660:	4641      	mov	r1, r8
  407662:	4620      	mov	r0, r4
  407664:	f001 f87e 	bl	408764 <_Bfree>
  407668:	2e00      	cmp	r6, #0
  40766a:	f43f acdd 	beq.w	407028 <_dtoa_r+0x388>
  40766e:	e6a7      	b.n	4073c0 <_dtoa_r+0x720>
  407670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407672:	4649      	mov	r1, r9
  407674:	4620      	mov	r0, r4
  407676:	f001 f9ab 	bl	4089d0 <__pow5mult>
  40767a:	4681      	mov	r9, r0
  40767c:	e558      	b.n	407130 <_dtoa_r+0x490>
  40767e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407680:	2a00      	cmp	r2, #0
  407682:	f000 8187 	beq.w	407994 <_dtoa_r+0xcf4>
  407686:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40768a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40768c:	9d08      	ldr	r5, [sp, #32]
  40768e:	e4f2      	b.n	407076 <_dtoa_r+0x3d6>
  407690:	f1ba 0f00 	cmp.w	sl, #0
  407694:	f47f ad75 	bne.w	407182 <_dtoa_r+0x4e2>
  407698:	e7b4      	b.n	407604 <_dtoa_r+0x964>
  40769a:	f001 f86d 	bl	408778 <__multadd>
  40769e:	4647      	mov	r7, r8
  4076a0:	4606      	mov	r6, r0
  4076a2:	4683      	mov	fp, r0
  4076a4:	e5be      	b.n	407224 <_dtoa_r+0x584>
  4076a6:	4601      	mov	r1, r0
  4076a8:	4620      	mov	r0, r4
  4076aa:	9306      	str	r3, [sp, #24]
  4076ac:	f001 f85a 	bl	408764 <_Bfree>
  4076b0:	2201      	movs	r2, #1
  4076b2:	9b06      	ldr	r3, [sp, #24]
  4076b4:	e5e0      	b.n	407278 <_dtoa_r+0x5d8>
  4076b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076b8:	2b02      	cmp	r3, #2
  4076ba:	f77f ad96 	ble.w	4071ea <_dtoa_r+0x54a>
  4076be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4076c0:	2b00      	cmp	r3, #0
  4076c2:	d1c9      	bne.n	407658 <_dtoa_r+0x9b8>
  4076c4:	4641      	mov	r1, r8
  4076c6:	2205      	movs	r2, #5
  4076c8:	4620      	mov	r0, r4
  4076ca:	f001 f855 	bl	408778 <__multadd>
  4076ce:	4601      	mov	r1, r0
  4076d0:	4680      	mov	r8, r0
  4076d2:	4648      	mov	r0, r9
  4076d4:	f001 fa1e 	bl	408b14 <__mcmp>
  4076d8:	2800      	cmp	r0, #0
  4076da:	ddbd      	ble.n	407658 <_dtoa_r+0x9b8>
  4076dc:	9a02      	ldr	r2, [sp, #8]
  4076de:	9904      	ldr	r1, [sp, #16]
  4076e0:	2331      	movs	r3, #49	; 0x31
  4076e2:	3201      	adds	r2, #1
  4076e4:	9202      	str	r2, [sp, #8]
  4076e6:	700b      	strb	r3, [r1, #0]
  4076e8:	1c4d      	adds	r5, r1, #1
  4076ea:	e7b9      	b.n	407660 <_dtoa_r+0x9c0>
  4076ec:	9a02      	ldr	r2, [sp, #8]
  4076ee:	3201      	adds	r2, #1
  4076f0:	9202      	str	r2, [sp, #8]
  4076f2:	9a04      	ldr	r2, [sp, #16]
  4076f4:	2331      	movs	r3, #49	; 0x31
  4076f6:	7013      	strb	r3, [r2, #0]
  4076f8:	e652      	b.n	4073a0 <_dtoa_r+0x700>
  4076fa:	2301      	movs	r3, #1
  4076fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4076fe:	e666      	b.n	4073ce <_dtoa_r+0x72e>
  407700:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407704:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407706:	e48f      	b.n	407028 <_dtoa_r+0x388>
  407708:	0040a498 	.word	0x0040a498
  40770c:	0040a470 	.word	0x0040a470
  407710:	3ff00000 	.word	0x3ff00000
  407714:	401c0000 	.word	0x401c0000
  407718:	3fe00000 	.word	0x3fe00000
  40771c:	40240000 	.word	0x40240000
  407720:	40140000 	.word	0x40140000
  407724:	4650      	mov	r0, sl
  407726:	f002 f8a9 	bl	40987c <__aeabi_i2d>
  40772a:	463a      	mov	r2, r7
  40772c:	4643      	mov	r3, r8
  40772e:	f002 f90b 	bl	409948 <__aeabi_dmul>
  407732:	2200      	movs	r2, #0
  407734:	4bc1      	ldr	r3, [pc, #772]	; (407a3c <_dtoa_r+0xd9c>)
  407736:	f001 ff55 	bl	4095e4 <__adddf3>
  40773a:	4605      	mov	r5, r0
  40773c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407740:	4641      	mov	r1, r8
  407742:	2200      	movs	r2, #0
  407744:	4bbe      	ldr	r3, [pc, #760]	; (407a40 <_dtoa_r+0xda0>)
  407746:	4638      	mov	r0, r7
  407748:	f001 ff4a 	bl	4095e0 <__aeabi_dsub>
  40774c:	462a      	mov	r2, r5
  40774e:	4633      	mov	r3, r6
  407750:	4682      	mov	sl, r0
  407752:	468b      	mov	fp, r1
  407754:	f002 fb88 	bl	409e68 <__aeabi_dcmpgt>
  407758:	4680      	mov	r8, r0
  40775a:	2800      	cmp	r0, #0
  40775c:	f040 8110 	bne.w	407980 <_dtoa_r+0xce0>
  407760:	462a      	mov	r2, r5
  407762:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  407766:	4650      	mov	r0, sl
  407768:	4659      	mov	r1, fp
  40776a:	f002 fb5f 	bl	409e2c <__aeabi_dcmplt>
  40776e:	b118      	cbz	r0, 407778 <_dtoa_r+0xad8>
  407770:	4646      	mov	r6, r8
  407772:	e771      	b.n	407658 <_dtoa_r+0x9b8>
  407774:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407778:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40777c:	f7ff bb8a 	b.w	406e94 <_dtoa_r+0x1f4>
  407780:	9804      	ldr	r0, [sp, #16]
  407782:	f7ff babb 	b.w	406cfc <_dtoa_r+0x5c>
  407786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40778a:	970c      	str	r7, [sp, #48]	; 0x30
  40778c:	1afb      	subs	r3, r7, r3
  40778e:	441a      	add	r2, r3
  407790:	920d      	str	r2, [sp, #52]	; 0x34
  407792:	2700      	movs	r7, #0
  407794:	e469      	b.n	40706a <_dtoa_r+0x3ca>
  407796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40779a:	f04f 0a02 	mov.w	sl, #2
  40779e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4077a2:	e657      	b.n	407454 <_dtoa_r+0x7b4>
  4077a4:	2100      	movs	r1, #0
  4077a6:	2301      	movs	r3, #1
  4077a8:	6461      	str	r1, [r4, #68]	; 0x44
  4077aa:	4620      	mov	r0, r4
  4077ac:	9325      	str	r3, [sp, #148]	; 0x94
  4077ae:	f000 ffb3 	bl	408718 <_Balloc>
  4077b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4077b4:	9004      	str	r0, [sp, #16]
  4077b6:	6420      	str	r0, [r4, #64]	; 0x40
  4077b8:	930a      	str	r3, [sp, #40]	; 0x28
  4077ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4077bc:	e629      	b.n	407412 <_dtoa_r+0x772>
  4077be:	2a00      	cmp	r2, #0
  4077c0:	46d0      	mov	r8, sl
  4077c2:	f8cd b018 	str.w	fp, [sp, #24]
  4077c6:	469a      	mov	sl, r3
  4077c8:	dd11      	ble.n	4077ee <_dtoa_r+0xb4e>
  4077ca:	4649      	mov	r1, r9
  4077cc:	2201      	movs	r2, #1
  4077ce:	4620      	mov	r0, r4
  4077d0:	f001 f94e 	bl	408a70 <__lshift>
  4077d4:	4641      	mov	r1, r8
  4077d6:	4681      	mov	r9, r0
  4077d8:	f001 f99c 	bl	408b14 <__mcmp>
  4077dc:	2800      	cmp	r0, #0
  4077de:	f340 8146 	ble.w	407a6e <_dtoa_r+0xdce>
  4077e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4077e6:	f000 8106 	beq.w	4079f6 <_dtoa_r+0xd56>
  4077ea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4077ee:	46b3      	mov	fp, r6
  4077f0:	f887 a000 	strb.w	sl, [r7]
  4077f4:	1c7d      	adds	r5, r7, #1
  4077f6:	9e06      	ldr	r6, [sp, #24]
  4077f8:	e5d2      	b.n	4073a0 <_dtoa_r+0x700>
  4077fa:	d104      	bne.n	407806 <_dtoa_r+0xb66>
  4077fc:	f01a 0f01 	tst.w	sl, #1
  407800:	d001      	beq.n	407806 <_dtoa_r+0xb66>
  407802:	e5bd      	b.n	407380 <_dtoa_r+0x6e0>
  407804:	4615      	mov	r5, r2
  407806:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40780a:	2b30      	cmp	r3, #48	; 0x30
  40780c:	f105 32ff 	add.w	r2, r5, #4294967295
  407810:	d0f8      	beq.n	407804 <_dtoa_r+0xb64>
  407812:	e5c5      	b.n	4073a0 <_dtoa_r+0x700>
  407814:	9904      	ldr	r1, [sp, #16]
  407816:	2230      	movs	r2, #48	; 0x30
  407818:	700a      	strb	r2, [r1, #0]
  40781a:	9a02      	ldr	r2, [sp, #8]
  40781c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407820:	3201      	adds	r2, #1
  407822:	9202      	str	r2, [sp, #8]
  407824:	f7ff bbfc 	b.w	407020 <_dtoa_r+0x380>
  407828:	f000 80bb 	beq.w	4079a2 <_dtoa_r+0xd02>
  40782c:	9b02      	ldr	r3, [sp, #8]
  40782e:	425d      	negs	r5, r3
  407830:	4b84      	ldr	r3, [pc, #528]	; (407a44 <_dtoa_r+0xda4>)
  407832:	f005 020f 	and.w	r2, r5, #15
  407836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40783a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40783e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407842:	f002 f881 	bl	409948 <__aeabi_dmul>
  407846:	112d      	asrs	r5, r5, #4
  407848:	4607      	mov	r7, r0
  40784a:	4688      	mov	r8, r1
  40784c:	f000 812c 	beq.w	407aa8 <_dtoa_r+0xe08>
  407850:	4e7d      	ldr	r6, [pc, #500]	; (407a48 <_dtoa_r+0xda8>)
  407852:	f04f 0a02 	mov.w	sl, #2
  407856:	07eb      	lsls	r3, r5, #31
  407858:	d509      	bpl.n	40786e <_dtoa_r+0xbce>
  40785a:	4638      	mov	r0, r7
  40785c:	4641      	mov	r1, r8
  40785e:	e9d6 2300 	ldrd	r2, r3, [r6]
  407862:	f002 f871 	bl	409948 <__aeabi_dmul>
  407866:	f10a 0a01 	add.w	sl, sl, #1
  40786a:	4607      	mov	r7, r0
  40786c:	4688      	mov	r8, r1
  40786e:	106d      	asrs	r5, r5, #1
  407870:	f106 0608 	add.w	r6, r6, #8
  407874:	d1ef      	bne.n	407856 <_dtoa_r+0xbb6>
  407876:	e608      	b.n	40748a <_dtoa_r+0x7ea>
  407878:	6871      	ldr	r1, [r6, #4]
  40787a:	4620      	mov	r0, r4
  40787c:	f000 ff4c 	bl	408718 <_Balloc>
  407880:	6933      	ldr	r3, [r6, #16]
  407882:	3302      	adds	r3, #2
  407884:	009a      	lsls	r2, r3, #2
  407886:	4605      	mov	r5, r0
  407888:	f106 010c 	add.w	r1, r6, #12
  40788c:	300c      	adds	r0, #12
  40788e:	f7fc fbb7 	bl	404000 <memcpy>
  407892:	4629      	mov	r1, r5
  407894:	2201      	movs	r2, #1
  407896:	4620      	mov	r0, r4
  407898:	f001 f8ea 	bl	408a70 <__lshift>
  40789c:	9006      	str	r0, [sp, #24]
  40789e:	e4b5      	b.n	40720c <_dtoa_r+0x56c>
  4078a0:	2b39      	cmp	r3, #57	; 0x39
  4078a2:	f8cd b018 	str.w	fp, [sp, #24]
  4078a6:	46d0      	mov	r8, sl
  4078a8:	f000 80a5 	beq.w	4079f6 <_dtoa_r+0xd56>
  4078ac:	f103 0a01 	add.w	sl, r3, #1
  4078b0:	46b3      	mov	fp, r6
  4078b2:	f887 a000 	strb.w	sl, [r7]
  4078b6:	1c7d      	adds	r5, r7, #1
  4078b8:	9e06      	ldr	r6, [sp, #24]
  4078ba:	e571      	b.n	4073a0 <_dtoa_r+0x700>
  4078bc:	465a      	mov	r2, fp
  4078be:	46d0      	mov	r8, sl
  4078c0:	46b3      	mov	fp, r6
  4078c2:	469a      	mov	sl, r3
  4078c4:	4616      	mov	r6, r2
  4078c6:	e54f      	b.n	407368 <_dtoa_r+0x6c8>
  4078c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4078ca:	495e      	ldr	r1, [pc, #376]	; (407a44 <_dtoa_r+0xda4>)
  4078cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4078d0:	462a      	mov	r2, r5
  4078d2:	4633      	mov	r3, r6
  4078d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4078d8:	f002 f836 	bl	409948 <__aeabi_dmul>
  4078dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4078e0:	4638      	mov	r0, r7
  4078e2:	4641      	mov	r1, r8
  4078e4:	f002 fae0 	bl	409ea8 <__aeabi_d2iz>
  4078e8:	4605      	mov	r5, r0
  4078ea:	f001 ffc7 	bl	40987c <__aeabi_i2d>
  4078ee:	460b      	mov	r3, r1
  4078f0:	4602      	mov	r2, r0
  4078f2:	4641      	mov	r1, r8
  4078f4:	4638      	mov	r0, r7
  4078f6:	f001 fe73 	bl	4095e0 <__aeabi_dsub>
  4078fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4078fc:	460f      	mov	r7, r1
  4078fe:	9904      	ldr	r1, [sp, #16]
  407900:	3530      	adds	r5, #48	; 0x30
  407902:	2b01      	cmp	r3, #1
  407904:	700d      	strb	r5, [r1, #0]
  407906:	4606      	mov	r6, r0
  407908:	f101 0501 	add.w	r5, r1, #1
  40790c:	d026      	beq.n	40795c <_dtoa_r+0xcbc>
  40790e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407910:	9a04      	ldr	r2, [sp, #16]
  407912:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407a50 <_dtoa_r+0xdb0>
  407916:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40791a:	4413      	add	r3, r2
  40791c:	f04f 0a00 	mov.w	sl, #0
  407920:	4699      	mov	r9, r3
  407922:	4652      	mov	r2, sl
  407924:	465b      	mov	r3, fp
  407926:	4630      	mov	r0, r6
  407928:	4639      	mov	r1, r7
  40792a:	f002 f80d 	bl	409948 <__aeabi_dmul>
  40792e:	460f      	mov	r7, r1
  407930:	4606      	mov	r6, r0
  407932:	f002 fab9 	bl	409ea8 <__aeabi_d2iz>
  407936:	4680      	mov	r8, r0
  407938:	f001 ffa0 	bl	40987c <__aeabi_i2d>
  40793c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407940:	4602      	mov	r2, r0
  407942:	460b      	mov	r3, r1
  407944:	4630      	mov	r0, r6
  407946:	4639      	mov	r1, r7
  407948:	f001 fe4a 	bl	4095e0 <__aeabi_dsub>
  40794c:	f805 8b01 	strb.w	r8, [r5], #1
  407950:	454d      	cmp	r5, r9
  407952:	4606      	mov	r6, r0
  407954:	460f      	mov	r7, r1
  407956:	d1e4      	bne.n	407922 <_dtoa_r+0xc82>
  407958:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40795c:	4b3b      	ldr	r3, [pc, #236]	; (407a4c <_dtoa_r+0xdac>)
  40795e:	2200      	movs	r2, #0
  407960:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  407964:	f001 fe3e 	bl	4095e4 <__adddf3>
  407968:	4632      	mov	r2, r6
  40796a:	463b      	mov	r3, r7
  40796c:	f002 fa5e 	bl	409e2c <__aeabi_dcmplt>
  407970:	2800      	cmp	r0, #0
  407972:	d046      	beq.n	407a02 <_dtoa_r+0xd62>
  407974:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407976:	9302      	str	r3, [sp, #8]
  407978:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40797c:	f7ff bb43 	b.w	407006 <_dtoa_r+0x366>
  407980:	f04f 0800 	mov.w	r8, #0
  407984:	4646      	mov	r6, r8
  407986:	e6a9      	b.n	4076dc <_dtoa_r+0xa3c>
  407988:	9b08      	ldr	r3, [sp, #32]
  40798a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40798c:	1a9d      	subs	r5, r3, r2
  40798e:	2300      	movs	r3, #0
  407990:	f7ff bb71 	b.w	407076 <_dtoa_r+0x3d6>
  407994:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407996:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407998:	9d08      	ldr	r5, [sp, #32]
  40799a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40799e:	f7ff bb6a 	b.w	407076 <_dtoa_r+0x3d6>
  4079a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4079a6:	f04f 0a02 	mov.w	sl, #2
  4079aa:	e56e      	b.n	40748a <_dtoa_r+0x7ea>
  4079ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4079ae:	2b00      	cmp	r3, #0
  4079b0:	f43f aeb8 	beq.w	407724 <_dtoa_r+0xa84>
  4079b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4079b6:	2b00      	cmp	r3, #0
  4079b8:	f77f aede 	ble.w	407778 <_dtoa_r+0xad8>
  4079bc:	2200      	movs	r2, #0
  4079be:	4b24      	ldr	r3, [pc, #144]	; (407a50 <_dtoa_r+0xdb0>)
  4079c0:	4638      	mov	r0, r7
  4079c2:	4641      	mov	r1, r8
  4079c4:	f001 ffc0 	bl	409948 <__aeabi_dmul>
  4079c8:	4607      	mov	r7, r0
  4079ca:	4688      	mov	r8, r1
  4079cc:	f10a 0001 	add.w	r0, sl, #1
  4079d0:	f001 ff54 	bl	40987c <__aeabi_i2d>
  4079d4:	463a      	mov	r2, r7
  4079d6:	4643      	mov	r3, r8
  4079d8:	f001 ffb6 	bl	409948 <__aeabi_dmul>
  4079dc:	2200      	movs	r2, #0
  4079de:	4b17      	ldr	r3, [pc, #92]	; (407a3c <_dtoa_r+0xd9c>)
  4079e0:	f001 fe00 	bl	4095e4 <__adddf3>
  4079e4:	9a02      	ldr	r2, [sp, #8]
  4079e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4079e8:	9312      	str	r3, [sp, #72]	; 0x48
  4079ea:	3a01      	subs	r2, #1
  4079ec:	4605      	mov	r5, r0
  4079ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4079f2:	9215      	str	r2, [sp, #84]	; 0x54
  4079f4:	e56a      	b.n	4074cc <_dtoa_r+0x82c>
  4079f6:	2239      	movs	r2, #57	; 0x39
  4079f8:	46b3      	mov	fp, r6
  4079fa:	703a      	strb	r2, [r7, #0]
  4079fc:	9e06      	ldr	r6, [sp, #24]
  4079fe:	1c7d      	adds	r5, r7, #1
  407a00:	e4c0      	b.n	407384 <_dtoa_r+0x6e4>
  407a02:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407a06:	2000      	movs	r0, #0
  407a08:	4910      	ldr	r1, [pc, #64]	; (407a4c <_dtoa_r+0xdac>)
  407a0a:	f001 fde9 	bl	4095e0 <__aeabi_dsub>
  407a0e:	4632      	mov	r2, r6
  407a10:	463b      	mov	r3, r7
  407a12:	f002 fa29 	bl	409e68 <__aeabi_dcmpgt>
  407a16:	b908      	cbnz	r0, 407a1c <_dtoa_r+0xd7c>
  407a18:	e6ae      	b.n	407778 <_dtoa_r+0xad8>
  407a1a:	4615      	mov	r5, r2
  407a1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407a20:	2b30      	cmp	r3, #48	; 0x30
  407a22:	f105 32ff 	add.w	r2, r5, #4294967295
  407a26:	d0f8      	beq.n	407a1a <_dtoa_r+0xd7a>
  407a28:	e5d7      	b.n	4075da <_dtoa_r+0x93a>
  407a2a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407a30:	9302      	str	r3, [sp, #8]
  407a32:	f7ff bae8 	b.w	407006 <_dtoa_r+0x366>
  407a36:	970c      	str	r7, [sp, #48]	; 0x30
  407a38:	f7ff bba5 	b.w	407186 <_dtoa_r+0x4e6>
  407a3c:	401c0000 	.word	0x401c0000
  407a40:	40140000 	.word	0x40140000
  407a44:	0040a498 	.word	0x0040a498
  407a48:	0040a470 	.word	0x0040a470
  407a4c:	3fe00000 	.word	0x3fe00000
  407a50:	40240000 	.word	0x40240000
  407a54:	2b39      	cmp	r3, #57	; 0x39
  407a56:	f8cd b018 	str.w	fp, [sp, #24]
  407a5a:	46d0      	mov	r8, sl
  407a5c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407a60:	469a      	mov	sl, r3
  407a62:	d0c8      	beq.n	4079f6 <_dtoa_r+0xd56>
  407a64:	f1bb 0f00 	cmp.w	fp, #0
  407a68:	f73f aebf 	bgt.w	4077ea <_dtoa_r+0xb4a>
  407a6c:	e6bf      	b.n	4077ee <_dtoa_r+0xb4e>
  407a6e:	f47f aebe 	bne.w	4077ee <_dtoa_r+0xb4e>
  407a72:	f01a 0f01 	tst.w	sl, #1
  407a76:	f43f aeba 	beq.w	4077ee <_dtoa_r+0xb4e>
  407a7a:	e6b2      	b.n	4077e2 <_dtoa_r+0xb42>
  407a7c:	f04f 0800 	mov.w	r8, #0
  407a80:	4646      	mov	r6, r8
  407a82:	e5e9      	b.n	407658 <_dtoa_r+0x9b8>
  407a84:	4631      	mov	r1, r6
  407a86:	2300      	movs	r3, #0
  407a88:	220a      	movs	r2, #10
  407a8a:	4620      	mov	r0, r4
  407a8c:	f000 fe74 	bl	408778 <__multadd>
  407a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407a92:	2b00      	cmp	r3, #0
  407a94:	4606      	mov	r6, r0
  407a96:	dd0a      	ble.n	407aae <_dtoa_r+0xe0e>
  407a98:	930a      	str	r3, [sp, #40]	; 0x28
  407a9a:	f7ff bbaa 	b.w	4071f2 <_dtoa_r+0x552>
  407a9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407aa0:	2b02      	cmp	r3, #2
  407aa2:	dc23      	bgt.n	407aec <_dtoa_r+0xe4c>
  407aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407aa6:	e43b      	b.n	407320 <_dtoa_r+0x680>
  407aa8:	f04f 0a02 	mov.w	sl, #2
  407aac:	e4ed      	b.n	40748a <_dtoa_r+0x7ea>
  407aae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ab0:	2b02      	cmp	r3, #2
  407ab2:	dc1b      	bgt.n	407aec <_dtoa_r+0xe4c>
  407ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407ab6:	e7ef      	b.n	407a98 <_dtoa_r+0xdf8>
  407ab8:	2500      	movs	r5, #0
  407aba:	6465      	str	r5, [r4, #68]	; 0x44
  407abc:	4629      	mov	r1, r5
  407abe:	4620      	mov	r0, r4
  407ac0:	f000 fe2a 	bl	408718 <_Balloc>
  407ac4:	f04f 33ff 	mov.w	r3, #4294967295
  407ac8:	930a      	str	r3, [sp, #40]	; 0x28
  407aca:	930f      	str	r3, [sp, #60]	; 0x3c
  407acc:	2301      	movs	r3, #1
  407ace:	9004      	str	r0, [sp, #16]
  407ad0:	9525      	str	r5, [sp, #148]	; 0x94
  407ad2:	6420      	str	r0, [r4, #64]	; 0x40
  407ad4:	930b      	str	r3, [sp, #44]	; 0x2c
  407ad6:	f7ff b9dd 	b.w	406e94 <_dtoa_r+0x1f4>
  407ada:	2501      	movs	r5, #1
  407adc:	f7ff b9a5 	b.w	406e2a <_dtoa_r+0x18a>
  407ae0:	f43f ab69 	beq.w	4071b6 <_dtoa_r+0x516>
  407ae4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407ae8:	f7ff bbf9 	b.w	4072de <_dtoa_r+0x63e>
  407aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407aee:	930a      	str	r3, [sp, #40]	; 0x28
  407af0:	e5e5      	b.n	4076be <_dtoa_r+0xa1e>
  407af2:	bf00      	nop

00407af4 <__sflush_r>:
  407af4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407af8:	b29a      	uxth	r2, r3
  407afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407afe:	460d      	mov	r5, r1
  407b00:	0711      	lsls	r1, r2, #28
  407b02:	4680      	mov	r8, r0
  407b04:	d43a      	bmi.n	407b7c <__sflush_r+0x88>
  407b06:	686a      	ldr	r2, [r5, #4]
  407b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407b0c:	2a00      	cmp	r2, #0
  407b0e:	81ab      	strh	r3, [r5, #12]
  407b10:	dd6f      	ble.n	407bf2 <__sflush_r+0xfe>
  407b12:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407b14:	2c00      	cmp	r4, #0
  407b16:	d049      	beq.n	407bac <__sflush_r+0xb8>
  407b18:	2200      	movs	r2, #0
  407b1a:	b29b      	uxth	r3, r3
  407b1c:	f8d8 6000 	ldr.w	r6, [r8]
  407b20:	f8c8 2000 	str.w	r2, [r8]
  407b24:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407b28:	d067      	beq.n	407bfa <__sflush_r+0x106>
  407b2a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407b2c:	075f      	lsls	r7, r3, #29
  407b2e:	d505      	bpl.n	407b3c <__sflush_r+0x48>
  407b30:	6869      	ldr	r1, [r5, #4]
  407b32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407b34:	1a52      	subs	r2, r2, r1
  407b36:	b10b      	cbz	r3, 407b3c <__sflush_r+0x48>
  407b38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407b3a:	1ad2      	subs	r2, r2, r3
  407b3c:	2300      	movs	r3, #0
  407b3e:	69e9      	ldr	r1, [r5, #28]
  407b40:	4640      	mov	r0, r8
  407b42:	47a0      	blx	r4
  407b44:	1c44      	adds	r4, r0, #1
  407b46:	d03c      	beq.n	407bc2 <__sflush_r+0xce>
  407b48:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407b4c:	692a      	ldr	r2, [r5, #16]
  407b4e:	602a      	str	r2, [r5, #0]
  407b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407b54:	2200      	movs	r2, #0
  407b56:	81ab      	strh	r3, [r5, #12]
  407b58:	04db      	lsls	r3, r3, #19
  407b5a:	606a      	str	r2, [r5, #4]
  407b5c:	d447      	bmi.n	407bee <__sflush_r+0xfa>
  407b5e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407b60:	f8c8 6000 	str.w	r6, [r8]
  407b64:	b311      	cbz	r1, 407bac <__sflush_r+0xb8>
  407b66:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407b6a:	4299      	cmp	r1, r3
  407b6c:	d002      	beq.n	407b74 <__sflush_r+0x80>
  407b6e:	4640      	mov	r0, r8
  407b70:	f000 f9de 	bl	407f30 <_free_r>
  407b74:	2000      	movs	r0, #0
  407b76:	6328      	str	r0, [r5, #48]	; 0x30
  407b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b7c:	692e      	ldr	r6, [r5, #16]
  407b7e:	b1ae      	cbz	r6, 407bac <__sflush_r+0xb8>
  407b80:	682c      	ldr	r4, [r5, #0]
  407b82:	602e      	str	r6, [r5, #0]
  407b84:	0791      	lsls	r1, r2, #30
  407b86:	bf0c      	ite	eq
  407b88:	696b      	ldreq	r3, [r5, #20]
  407b8a:	2300      	movne	r3, #0
  407b8c:	1ba4      	subs	r4, r4, r6
  407b8e:	60ab      	str	r3, [r5, #8]
  407b90:	e00a      	b.n	407ba8 <__sflush_r+0xb4>
  407b92:	4623      	mov	r3, r4
  407b94:	4632      	mov	r2, r6
  407b96:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407b98:	69e9      	ldr	r1, [r5, #28]
  407b9a:	4640      	mov	r0, r8
  407b9c:	47b8      	blx	r7
  407b9e:	2800      	cmp	r0, #0
  407ba0:	eba4 0400 	sub.w	r4, r4, r0
  407ba4:	4406      	add	r6, r0
  407ba6:	dd04      	ble.n	407bb2 <__sflush_r+0xbe>
  407ba8:	2c00      	cmp	r4, #0
  407baa:	dcf2      	bgt.n	407b92 <__sflush_r+0x9e>
  407bac:	2000      	movs	r0, #0
  407bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bb2:	89ab      	ldrh	r3, [r5, #12]
  407bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407bb8:	81ab      	strh	r3, [r5, #12]
  407bba:	f04f 30ff 	mov.w	r0, #4294967295
  407bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bc2:	f8d8 4000 	ldr.w	r4, [r8]
  407bc6:	2c1d      	cmp	r4, #29
  407bc8:	d8f3      	bhi.n	407bb2 <__sflush_r+0xbe>
  407bca:	4b19      	ldr	r3, [pc, #100]	; (407c30 <__sflush_r+0x13c>)
  407bcc:	40e3      	lsrs	r3, r4
  407bce:	43db      	mvns	r3, r3
  407bd0:	f013 0301 	ands.w	r3, r3, #1
  407bd4:	d1ed      	bne.n	407bb2 <__sflush_r+0xbe>
  407bd6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407bda:	606b      	str	r3, [r5, #4]
  407bdc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407be0:	6929      	ldr	r1, [r5, #16]
  407be2:	81ab      	strh	r3, [r5, #12]
  407be4:	04da      	lsls	r2, r3, #19
  407be6:	6029      	str	r1, [r5, #0]
  407be8:	d5b9      	bpl.n	407b5e <__sflush_r+0x6a>
  407bea:	2c00      	cmp	r4, #0
  407bec:	d1b7      	bne.n	407b5e <__sflush_r+0x6a>
  407bee:	6528      	str	r0, [r5, #80]	; 0x50
  407bf0:	e7b5      	b.n	407b5e <__sflush_r+0x6a>
  407bf2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407bf4:	2a00      	cmp	r2, #0
  407bf6:	dc8c      	bgt.n	407b12 <__sflush_r+0x1e>
  407bf8:	e7d8      	b.n	407bac <__sflush_r+0xb8>
  407bfa:	2301      	movs	r3, #1
  407bfc:	69e9      	ldr	r1, [r5, #28]
  407bfe:	4640      	mov	r0, r8
  407c00:	47a0      	blx	r4
  407c02:	1c43      	adds	r3, r0, #1
  407c04:	4602      	mov	r2, r0
  407c06:	d002      	beq.n	407c0e <__sflush_r+0x11a>
  407c08:	89ab      	ldrh	r3, [r5, #12]
  407c0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407c0c:	e78e      	b.n	407b2c <__sflush_r+0x38>
  407c0e:	f8d8 3000 	ldr.w	r3, [r8]
  407c12:	2b00      	cmp	r3, #0
  407c14:	d0f8      	beq.n	407c08 <__sflush_r+0x114>
  407c16:	2b1d      	cmp	r3, #29
  407c18:	d001      	beq.n	407c1e <__sflush_r+0x12a>
  407c1a:	2b16      	cmp	r3, #22
  407c1c:	d102      	bne.n	407c24 <__sflush_r+0x130>
  407c1e:	f8c8 6000 	str.w	r6, [r8]
  407c22:	e7c3      	b.n	407bac <__sflush_r+0xb8>
  407c24:	89ab      	ldrh	r3, [r5, #12]
  407c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c2a:	81ab      	strh	r3, [r5, #12]
  407c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c30:	20400001 	.word	0x20400001

00407c34 <_fflush_r>:
  407c34:	b538      	push	{r3, r4, r5, lr}
  407c36:	460d      	mov	r5, r1
  407c38:	4604      	mov	r4, r0
  407c3a:	b108      	cbz	r0, 407c40 <_fflush_r+0xc>
  407c3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407c3e:	b1bb      	cbz	r3, 407c70 <_fflush_r+0x3c>
  407c40:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407c44:	b188      	cbz	r0, 407c6a <_fflush_r+0x36>
  407c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407c48:	07db      	lsls	r3, r3, #31
  407c4a:	d401      	bmi.n	407c50 <_fflush_r+0x1c>
  407c4c:	0581      	lsls	r1, r0, #22
  407c4e:	d517      	bpl.n	407c80 <_fflush_r+0x4c>
  407c50:	4620      	mov	r0, r4
  407c52:	4629      	mov	r1, r5
  407c54:	f7ff ff4e 	bl	407af4 <__sflush_r>
  407c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407c5a:	07da      	lsls	r2, r3, #31
  407c5c:	4604      	mov	r4, r0
  407c5e:	d402      	bmi.n	407c66 <_fflush_r+0x32>
  407c60:	89ab      	ldrh	r3, [r5, #12]
  407c62:	059b      	lsls	r3, r3, #22
  407c64:	d507      	bpl.n	407c76 <_fflush_r+0x42>
  407c66:	4620      	mov	r0, r4
  407c68:	bd38      	pop	{r3, r4, r5, pc}
  407c6a:	4604      	mov	r4, r0
  407c6c:	4620      	mov	r0, r4
  407c6e:	bd38      	pop	{r3, r4, r5, pc}
  407c70:	f000 f838 	bl	407ce4 <__sinit>
  407c74:	e7e4      	b.n	407c40 <_fflush_r+0xc>
  407c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407c78:	f000 fc04 	bl	408484 <__retarget_lock_release_recursive>
  407c7c:	4620      	mov	r0, r4
  407c7e:	bd38      	pop	{r3, r4, r5, pc}
  407c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407c82:	f000 fbfd 	bl	408480 <__retarget_lock_acquire_recursive>
  407c86:	e7e3      	b.n	407c50 <_fflush_r+0x1c>

00407c88 <_cleanup_r>:
  407c88:	4901      	ldr	r1, [pc, #4]	; (407c90 <_cleanup_r+0x8>)
  407c8a:	f000 bbaf 	b.w	4083ec <_fwalk_reent>
  407c8e:	bf00      	nop
  407c90:	00409471 	.word	0x00409471

00407c94 <std.isra.0>:
  407c94:	b510      	push	{r4, lr}
  407c96:	2300      	movs	r3, #0
  407c98:	4604      	mov	r4, r0
  407c9a:	8181      	strh	r1, [r0, #12]
  407c9c:	81c2      	strh	r2, [r0, #14]
  407c9e:	6003      	str	r3, [r0, #0]
  407ca0:	6043      	str	r3, [r0, #4]
  407ca2:	6083      	str	r3, [r0, #8]
  407ca4:	6643      	str	r3, [r0, #100]	; 0x64
  407ca6:	6103      	str	r3, [r0, #16]
  407ca8:	6143      	str	r3, [r0, #20]
  407caa:	6183      	str	r3, [r0, #24]
  407cac:	4619      	mov	r1, r3
  407cae:	2208      	movs	r2, #8
  407cb0:	305c      	adds	r0, #92	; 0x5c
  407cb2:	f7fc fa3f 	bl	404134 <memset>
  407cb6:	4807      	ldr	r0, [pc, #28]	; (407cd4 <std.isra.0+0x40>)
  407cb8:	4907      	ldr	r1, [pc, #28]	; (407cd8 <std.isra.0+0x44>)
  407cba:	4a08      	ldr	r2, [pc, #32]	; (407cdc <std.isra.0+0x48>)
  407cbc:	4b08      	ldr	r3, [pc, #32]	; (407ce0 <std.isra.0+0x4c>)
  407cbe:	6220      	str	r0, [r4, #32]
  407cc0:	61e4      	str	r4, [r4, #28]
  407cc2:	6261      	str	r1, [r4, #36]	; 0x24
  407cc4:	62a2      	str	r2, [r4, #40]	; 0x28
  407cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
  407cc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407cd0:	f000 bbd2 	b.w	408478 <__retarget_lock_init_recursive>
  407cd4:	00409059 	.word	0x00409059
  407cd8:	0040907d 	.word	0x0040907d
  407cdc:	004090b9 	.word	0x004090b9
  407ce0:	004090d9 	.word	0x004090d9

00407ce4 <__sinit>:
  407ce4:	b510      	push	{r4, lr}
  407ce6:	4604      	mov	r4, r0
  407ce8:	4812      	ldr	r0, [pc, #72]	; (407d34 <__sinit+0x50>)
  407cea:	f000 fbc9 	bl	408480 <__retarget_lock_acquire_recursive>
  407cee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407cf0:	b9d2      	cbnz	r2, 407d28 <__sinit+0x44>
  407cf2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407cf6:	4810      	ldr	r0, [pc, #64]	; (407d38 <__sinit+0x54>)
  407cf8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407cfc:	2103      	movs	r1, #3
  407cfe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407d02:	63e0      	str	r0, [r4, #60]	; 0x3c
  407d04:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407d08:	6860      	ldr	r0, [r4, #4]
  407d0a:	2104      	movs	r1, #4
  407d0c:	f7ff ffc2 	bl	407c94 <std.isra.0>
  407d10:	2201      	movs	r2, #1
  407d12:	2109      	movs	r1, #9
  407d14:	68a0      	ldr	r0, [r4, #8]
  407d16:	f7ff ffbd 	bl	407c94 <std.isra.0>
  407d1a:	2202      	movs	r2, #2
  407d1c:	2112      	movs	r1, #18
  407d1e:	68e0      	ldr	r0, [r4, #12]
  407d20:	f7ff ffb8 	bl	407c94 <std.isra.0>
  407d24:	2301      	movs	r3, #1
  407d26:	63a3      	str	r3, [r4, #56]	; 0x38
  407d28:	4802      	ldr	r0, [pc, #8]	; (407d34 <__sinit+0x50>)
  407d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407d2e:	f000 bba9 	b.w	408484 <__retarget_lock_release_recursive>
  407d32:	bf00      	nop
  407d34:	20400d40 	.word	0x20400d40
  407d38:	00407c89 	.word	0x00407c89

00407d3c <__sfp_lock_acquire>:
  407d3c:	4801      	ldr	r0, [pc, #4]	; (407d44 <__sfp_lock_acquire+0x8>)
  407d3e:	f000 bb9f 	b.w	408480 <__retarget_lock_acquire_recursive>
  407d42:	bf00      	nop
  407d44:	20400d54 	.word	0x20400d54

00407d48 <__sfp_lock_release>:
  407d48:	4801      	ldr	r0, [pc, #4]	; (407d50 <__sfp_lock_release+0x8>)
  407d4a:	f000 bb9b 	b.w	408484 <__retarget_lock_release_recursive>
  407d4e:	bf00      	nop
  407d50:	20400d54 	.word	0x20400d54

00407d54 <__libc_fini_array>:
  407d54:	b538      	push	{r3, r4, r5, lr}
  407d56:	4c0a      	ldr	r4, [pc, #40]	; (407d80 <__libc_fini_array+0x2c>)
  407d58:	4d0a      	ldr	r5, [pc, #40]	; (407d84 <__libc_fini_array+0x30>)
  407d5a:	1b64      	subs	r4, r4, r5
  407d5c:	10a4      	asrs	r4, r4, #2
  407d5e:	d00a      	beq.n	407d76 <__libc_fini_array+0x22>
  407d60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407d64:	3b01      	subs	r3, #1
  407d66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407d6a:	3c01      	subs	r4, #1
  407d6c:	f855 3904 	ldr.w	r3, [r5], #-4
  407d70:	4798      	blx	r3
  407d72:	2c00      	cmp	r4, #0
  407d74:	d1f9      	bne.n	407d6a <__libc_fini_array+0x16>
  407d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407d7a:	f002 bc83 	b.w	40a684 <_fini>
  407d7e:	bf00      	nop
  407d80:	0040a694 	.word	0x0040a694
  407d84:	0040a690 	.word	0x0040a690

00407d88 <__fputwc>:
  407d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407d8c:	b082      	sub	sp, #8
  407d8e:	4680      	mov	r8, r0
  407d90:	4689      	mov	r9, r1
  407d92:	4614      	mov	r4, r2
  407d94:	f000 fb54 	bl	408440 <__locale_mb_cur_max>
  407d98:	2801      	cmp	r0, #1
  407d9a:	d036      	beq.n	407e0a <__fputwc+0x82>
  407d9c:	464a      	mov	r2, r9
  407d9e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407da2:	a901      	add	r1, sp, #4
  407da4:	4640      	mov	r0, r8
  407da6:	f001 fa71 	bl	40928c <_wcrtomb_r>
  407daa:	1c42      	adds	r2, r0, #1
  407dac:	4606      	mov	r6, r0
  407dae:	d025      	beq.n	407dfc <__fputwc+0x74>
  407db0:	b3a8      	cbz	r0, 407e1e <__fputwc+0x96>
  407db2:	f89d e004 	ldrb.w	lr, [sp, #4]
  407db6:	2500      	movs	r5, #0
  407db8:	f10d 0a04 	add.w	sl, sp, #4
  407dbc:	e009      	b.n	407dd2 <__fputwc+0x4a>
  407dbe:	6823      	ldr	r3, [r4, #0]
  407dc0:	1c5a      	adds	r2, r3, #1
  407dc2:	6022      	str	r2, [r4, #0]
  407dc4:	f883 e000 	strb.w	lr, [r3]
  407dc8:	3501      	adds	r5, #1
  407dca:	42b5      	cmp	r5, r6
  407dcc:	d227      	bcs.n	407e1e <__fputwc+0x96>
  407dce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407dd2:	68a3      	ldr	r3, [r4, #8]
  407dd4:	3b01      	subs	r3, #1
  407dd6:	2b00      	cmp	r3, #0
  407dd8:	60a3      	str	r3, [r4, #8]
  407dda:	daf0      	bge.n	407dbe <__fputwc+0x36>
  407ddc:	69a7      	ldr	r7, [r4, #24]
  407dde:	42bb      	cmp	r3, r7
  407de0:	4671      	mov	r1, lr
  407de2:	4622      	mov	r2, r4
  407de4:	4640      	mov	r0, r8
  407de6:	db02      	blt.n	407dee <__fputwc+0x66>
  407de8:	f1be 0f0a 	cmp.w	lr, #10
  407dec:	d1e7      	bne.n	407dbe <__fputwc+0x36>
  407dee:	f001 f9f5 	bl	4091dc <__swbuf_r>
  407df2:	1c43      	adds	r3, r0, #1
  407df4:	d1e8      	bne.n	407dc8 <__fputwc+0x40>
  407df6:	b002      	add	sp, #8
  407df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407dfc:	89a3      	ldrh	r3, [r4, #12]
  407dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e02:	81a3      	strh	r3, [r4, #12]
  407e04:	b002      	add	sp, #8
  407e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e0a:	f109 33ff 	add.w	r3, r9, #4294967295
  407e0e:	2bfe      	cmp	r3, #254	; 0xfe
  407e10:	d8c4      	bhi.n	407d9c <__fputwc+0x14>
  407e12:	fa5f fe89 	uxtb.w	lr, r9
  407e16:	4606      	mov	r6, r0
  407e18:	f88d e004 	strb.w	lr, [sp, #4]
  407e1c:	e7cb      	b.n	407db6 <__fputwc+0x2e>
  407e1e:	4648      	mov	r0, r9
  407e20:	b002      	add	sp, #8
  407e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e26:	bf00      	nop

00407e28 <_fputwc_r>:
  407e28:	b530      	push	{r4, r5, lr}
  407e2a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407e2c:	f013 0f01 	tst.w	r3, #1
  407e30:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407e34:	4614      	mov	r4, r2
  407e36:	b083      	sub	sp, #12
  407e38:	4605      	mov	r5, r0
  407e3a:	b29a      	uxth	r2, r3
  407e3c:	d101      	bne.n	407e42 <_fputwc_r+0x1a>
  407e3e:	0590      	lsls	r0, r2, #22
  407e40:	d51c      	bpl.n	407e7c <_fputwc_r+0x54>
  407e42:	0490      	lsls	r0, r2, #18
  407e44:	d406      	bmi.n	407e54 <_fputwc_r+0x2c>
  407e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407e50:	81a3      	strh	r3, [r4, #12]
  407e52:	6662      	str	r2, [r4, #100]	; 0x64
  407e54:	4628      	mov	r0, r5
  407e56:	4622      	mov	r2, r4
  407e58:	f7ff ff96 	bl	407d88 <__fputwc>
  407e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407e5e:	07da      	lsls	r2, r3, #31
  407e60:	4605      	mov	r5, r0
  407e62:	d402      	bmi.n	407e6a <_fputwc_r+0x42>
  407e64:	89a3      	ldrh	r3, [r4, #12]
  407e66:	059b      	lsls	r3, r3, #22
  407e68:	d502      	bpl.n	407e70 <_fputwc_r+0x48>
  407e6a:	4628      	mov	r0, r5
  407e6c:	b003      	add	sp, #12
  407e6e:	bd30      	pop	{r4, r5, pc}
  407e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407e72:	f000 fb07 	bl	408484 <__retarget_lock_release_recursive>
  407e76:	4628      	mov	r0, r5
  407e78:	b003      	add	sp, #12
  407e7a:	bd30      	pop	{r4, r5, pc}
  407e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407e7e:	9101      	str	r1, [sp, #4]
  407e80:	f000 fafe 	bl	408480 <__retarget_lock_acquire_recursive>
  407e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e88:	9901      	ldr	r1, [sp, #4]
  407e8a:	b29a      	uxth	r2, r3
  407e8c:	e7d9      	b.n	407e42 <_fputwc_r+0x1a>
  407e8e:	bf00      	nop

00407e90 <_malloc_trim_r>:
  407e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407e92:	4f24      	ldr	r7, [pc, #144]	; (407f24 <_malloc_trim_r+0x94>)
  407e94:	460c      	mov	r4, r1
  407e96:	4606      	mov	r6, r0
  407e98:	f7fc f99a 	bl	4041d0 <__malloc_lock>
  407e9c:	68bb      	ldr	r3, [r7, #8]
  407e9e:	685d      	ldr	r5, [r3, #4]
  407ea0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407ea4:	310f      	adds	r1, #15
  407ea6:	f025 0503 	bic.w	r5, r5, #3
  407eaa:	4429      	add	r1, r5
  407eac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407eb0:	f021 010f 	bic.w	r1, r1, #15
  407eb4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407eb8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407ebc:	db07      	blt.n	407ece <_malloc_trim_r+0x3e>
  407ebe:	2100      	movs	r1, #0
  407ec0:	4630      	mov	r0, r6
  407ec2:	f7fc f991 	bl	4041e8 <_sbrk_r>
  407ec6:	68bb      	ldr	r3, [r7, #8]
  407ec8:	442b      	add	r3, r5
  407eca:	4298      	cmp	r0, r3
  407ecc:	d004      	beq.n	407ed8 <_malloc_trim_r+0x48>
  407ece:	4630      	mov	r0, r6
  407ed0:	f7fc f984 	bl	4041dc <__malloc_unlock>
  407ed4:	2000      	movs	r0, #0
  407ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407ed8:	4261      	negs	r1, r4
  407eda:	4630      	mov	r0, r6
  407edc:	f7fc f984 	bl	4041e8 <_sbrk_r>
  407ee0:	3001      	adds	r0, #1
  407ee2:	d00d      	beq.n	407f00 <_malloc_trim_r+0x70>
  407ee4:	4b10      	ldr	r3, [pc, #64]	; (407f28 <_malloc_trim_r+0x98>)
  407ee6:	68ba      	ldr	r2, [r7, #8]
  407ee8:	6819      	ldr	r1, [r3, #0]
  407eea:	1b2d      	subs	r5, r5, r4
  407eec:	f045 0501 	orr.w	r5, r5, #1
  407ef0:	4630      	mov	r0, r6
  407ef2:	1b09      	subs	r1, r1, r4
  407ef4:	6055      	str	r5, [r2, #4]
  407ef6:	6019      	str	r1, [r3, #0]
  407ef8:	f7fc f970 	bl	4041dc <__malloc_unlock>
  407efc:	2001      	movs	r0, #1
  407efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407f00:	2100      	movs	r1, #0
  407f02:	4630      	mov	r0, r6
  407f04:	f7fc f970 	bl	4041e8 <_sbrk_r>
  407f08:	68ba      	ldr	r2, [r7, #8]
  407f0a:	1a83      	subs	r3, r0, r2
  407f0c:	2b0f      	cmp	r3, #15
  407f0e:	ddde      	ble.n	407ece <_malloc_trim_r+0x3e>
  407f10:	4c06      	ldr	r4, [pc, #24]	; (407f2c <_malloc_trim_r+0x9c>)
  407f12:	4905      	ldr	r1, [pc, #20]	; (407f28 <_malloc_trim_r+0x98>)
  407f14:	6824      	ldr	r4, [r4, #0]
  407f16:	f043 0301 	orr.w	r3, r3, #1
  407f1a:	1b00      	subs	r0, r0, r4
  407f1c:	6053      	str	r3, [r2, #4]
  407f1e:	6008      	str	r0, [r1, #0]
  407f20:	e7d5      	b.n	407ece <_malloc_trim_r+0x3e>
  407f22:	bf00      	nop
  407f24:	20400438 	.word	0x20400438
  407f28:	20400ca0 	.word	0x20400ca0
  407f2c:	20400840 	.word	0x20400840

00407f30 <_free_r>:
  407f30:	2900      	cmp	r1, #0
  407f32:	d044      	beq.n	407fbe <_free_r+0x8e>
  407f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407f38:	460d      	mov	r5, r1
  407f3a:	4680      	mov	r8, r0
  407f3c:	f7fc f948 	bl	4041d0 <__malloc_lock>
  407f40:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407f44:	4969      	ldr	r1, [pc, #420]	; (4080ec <_free_r+0x1bc>)
  407f46:	f027 0301 	bic.w	r3, r7, #1
  407f4a:	f1a5 0408 	sub.w	r4, r5, #8
  407f4e:	18e2      	adds	r2, r4, r3
  407f50:	688e      	ldr	r6, [r1, #8]
  407f52:	6850      	ldr	r0, [r2, #4]
  407f54:	42b2      	cmp	r2, r6
  407f56:	f020 0003 	bic.w	r0, r0, #3
  407f5a:	d05e      	beq.n	40801a <_free_r+0xea>
  407f5c:	07fe      	lsls	r6, r7, #31
  407f5e:	6050      	str	r0, [r2, #4]
  407f60:	d40b      	bmi.n	407f7a <_free_r+0x4a>
  407f62:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407f66:	1be4      	subs	r4, r4, r7
  407f68:	f101 0e08 	add.w	lr, r1, #8
  407f6c:	68a5      	ldr	r5, [r4, #8]
  407f6e:	4575      	cmp	r5, lr
  407f70:	443b      	add	r3, r7
  407f72:	d06d      	beq.n	408050 <_free_r+0x120>
  407f74:	68e7      	ldr	r7, [r4, #12]
  407f76:	60ef      	str	r7, [r5, #12]
  407f78:	60bd      	str	r5, [r7, #8]
  407f7a:	1815      	adds	r5, r2, r0
  407f7c:	686d      	ldr	r5, [r5, #4]
  407f7e:	07ed      	lsls	r5, r5, #31
  407f80:	d53e      	bpl.n	408000 <_free_r+0xd0>
  407f82:	f043 0201 	orr.w	r2, r3, #1
  407f86:	6062      	str	r2, [r4, #4]
  407f88:	50e3      	str	r3, [r4, r3]
  407f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407f8e:	d217      	bcs.n	407fc0 <_free_r+0x90>
  407f90:	08db      	lsrs	r3, r3, #3
  407f92:	1c58      	adds	r0, r3, #1
  407f94:	109a      	asrs	r2, r3, #2
  407f96:	684d      	ldr	r5, [r1, #4]
  407f98:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407f9c:	60a7      	str	r7, [r4, #8]
  407f9e:	2301      	movs	r3, #1
  407fa0:	4093      	lsls	r3, r2
  407fa2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407fa6:	432b      	orrs	r3, r5
  407fa8:	3a08      	subs	r2, #8
  407faa:	60e2      	str	r2, [r4, #12]
  407fac:	604b      	str	r3, [r1, #4]
  407fae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407fb2:	60fc      	str	r4, [r7, #12]
  407fb4:	4640      	mov	r0, r8
  407fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407fba:	f7fc b90f 	b.w	4041dc <__malloc_unlock>
  407fbe:	4770      	bx	lr
  407fc0:	0a5a      	lsrs	r2, r3, #9
  407fc2:	2a04      	cmp	r2, #4
  407fc4:	d852      	bhi.n	40806c <_free_r+0x13c>
  407fc6:	099a      	lsrs	r2, r3, #6
  407fc8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407fcc:	00ff      	lsls	r7, r7, #3
  407fce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407fd2:	19c8      	adds	r0, r1, r7
  407fd4:	59ca      	ldr	r2, [r1, r7]
  407fd6:	3808      	subs	r0, #8
  407fd8:	4290      	cmp	r0, r2
  407fda:	d04f      	beq.n	40807c <_free_r+0x14c>
  407fdc:	6851      	ldr	r1, [r2, #4]
  407fde:	f021 0103 	bic.w	r1, r1, #3
  407fe2:	428b      	cmp	r3, r1
  407fe4:	d232      	bcs.n	40804c <_free_r+0x11c>
  407fe6:	6892      	ldr	r2, [r2, #8]
  407fe8:	4290      	cmp	r0, r2
  407fea:	d1f7      	bne.n	407fdc <_free_r+0xac>
  407fec:	68c3      	ldr	r3, [r0, #12]
  407fee:	60a0      	str	r0, [r4, #8]
  407ff0:	60e3      	str	r3, [r4, #12]
  407ff2:	609c      	str	r4, [r3, #8]
  407ff4:	60c4      	str	r4, [r0, #12]
  407ff6:	4640      	mov	r0, r8
  407ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407ffc:	f7fc b8ee 	b.w	4041dc <__malloc_unlock>
  408000:	6895      	ldr	r5, [r2, #8]
  408002:	4f3b      	ldr	r7, [pc, #236]	; (4080f0 <_free_r+0x1c0>)
  408004:	42bd      	cmp	r5, r7
  408006:	4403      	add	r3, r0
  408008:	d040      	beq.n	40808c <_free_r+0x15c>
  40800a:	68d0      	ldr	r0, [r2, #12]
  40800c:	60e8      	str	r0, [r5, #12]
  40800e:	f043 0201 	orr.w	r2, r3, #1
  408012:	6085      	str	r5, [r0, #8]
  408014:	6062      	str	r2, [r4, #4]
  408016:	50e3      	str	r3, [r4, r3]
  408018:	e7b7      	b.n	407f8a <_free_r+0x5a>
  40801a:	07ff      	lsls	r7, r7, #31
  40801c:	4403      	add	r3, r0
  40801e:	d407      	bmi.n	408030 <_free_r+0x100>
  408020:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408024:	1aa4      	subs	r4, r4, r2
  408026:	4413      	add	r3, r2
  408028:	68a0      	ldr	r0, [r4, #8]
  40802a:	68e2      	ldr	r2, [r4, #12]
  40802c:	60c2      	str	r2, [r0, #12]
  40802e:	6090      	str	r0, [r2, #8]
  408030:	4a30      	ldr	r2, [pc, #192]	; (4080f4 <_free_r+0x1c4>)
  408032:	6812      	ldr	r2, [r2, #0]
  408034:	f043 0001 	orr.w	r0, r3, #1
  408038:	4293      	cmp	r3, r2
  40803a:	6060      	str	r0, [r4, #4]
  40803c:	608c      	str	r4, [r1, #8]
  40803e:	d3b9      	bcc.n	407fb4 <_free_r+0x84>
  408040:	4b2d      	ldr	r3, [pc, #180]	; (4080f8 <_free_r+0x1c8>)
  408042:	4640      	mov	r0, r8
  408044:	6819      	ldr	r1, [r3, #0]
  408046:	f7ff ff23 	bl	407e90 <_malloc_trim_r>
  40804a:	e7b3      	b.n	407fb4 <_free_r+0x84>
  40804c:	4610      	mov	r0, r2
  40804e:	e7cd      	b.n	407fec <_free_r+0xbc>
  408050:	1811      	adds	r1, r2, r0
  408052:	6849      	ldr	r1, [r1, #4]
  408054:	07c9      	lsls	r1, r1, #31
  408056:	d444      	bmi.n	4080e2 <_free_r+0x1b2>
  408058:	6891      	ldr	r1, [r2, #8]
  40805a:	68d2      	ldr	r2, [r2, #12]
  40805c:	60ca      	str	r2, [r1, #12]
  40805e:	4403      	add	r3, r0
  408060:	f043 0001 	orr.w	r0, r3, #1
  408064:	6091      	str	r1, [r2, #8]
  408066:	6060      	str	r0, [r4, #4]
  408068:	50e3      	str	r3, [r4, r3]
  40806a:	e7a3      	b.n	407fb4 <_free_r+0x84>
  40806c:	2a14      	cmp	r2, #20
  40806e:	d816      	bhi.n	40809e <_free_r+0x16e>
  408070:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408074:	00ff      	lsls	r7, r7, #3
  408076:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40807a:	e7aa      	b.n	407fd2 <_free_r+0xa2>
  40807c:	10aa      	asrs	r2, r5, #2
  40807e:	2301      	movs	r3, #1
  408080:	684d      	ldr	r5, [r1, #4]
  408082:	4093      	lsls	r3, r2
  408084:	432b      	orrs	r3, r5
  408086:	604b      	str	r3, [r1, #4]
  408088:	4603      	mov	r3, r0
  40808a:	e7b0      	b.n	407fee <_free_r+0xbe>
  40808c:	f043 0201 	orr.w	r2, r3, #1
  408090:	614c      	str	r4, [r1, #20]
  408092:	610c      	str	r4, [r1, #16]
  408094:	60e5      	str	r5, [r4, #12]
  408096:	60a5      	str	r5, [r4, #8]
  408098:	6062      	str	r2, [r4, #4]
  40809a:	50e3      	str	r3, [r4, r3]
  40809c:	e78a      	b.n	407fb4 <_free_r+0x84>
  40809e:	2a54      	cmp	r2, #84	; 0x54
  4080a0:	d806      	bhi.n	4080b0 <_free_r+0x180>
  4080a2:	0b1a      	lsrs	r2, r3, #12
  4080a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4080a8:	00ff      	lsls	r7, r7, #3
  4080aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4080ae:	e790      	b.n	407fd2 <_free_r+0xa2>
  4080b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4080b4:	d806      	bhi.n	4080c4 <_free_r+0x194>
  4080b6:	0bda      	lsrs	r2, r3, #15
  4080b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4080bc:	00ff      	lsls	r7, r7, #3
  4080be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4080c2:	e786      	b.n	407fd2 <_free_r+0xa2>
  4080c4:	f240 5054 	movw	r0, #1364	; 0x554
  4080c8:	4282      	cmp	r2, r0
  4080ca:	d806      	bhi.n	4080da <_free_r+0x1aa>
  4080cc:	0c9a      	lsrs	r2, r3, #18
  4080ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4080d2:	00ff      	lsls	r7, r7, #3
  4080d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4080d8:	e77b      	b.n	407fd2 <_free_r+0xa2>
  4080da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4080de:	257e      	movs	r5, #126	; 0x7e
  4080e0:	e777      	b.n	407fd2 <_free_r+0xa2>
  4080e2:	f043 0101 	orr.w	r1, r3, #1
  4080e6:	6061      	str	r1, [r4, #4]
  4080e8:	6013      	str	r3, [r2, #0]
  4080ea:	e763      	b.n	407fb4 <_free_r+0x84>
  4080ec:	20400438 	.word	0x20400438
  4080f0:	20400440 	.word	0x20400440
  4080f4:	20400844 	.word	0x20400844
  4080f8:	20400cd0 	.word	0x20400cd0

004080fc <__sfvwrite_r>:
  4080fc:	6893      	ldr	r3, [r2, #8]
  4080fe:	2b00      	cmp	r3, #0
  408100:	d073      	beq.n	4081ea <__sfvwrite_r+0xee>
  408102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408106:	898b      	ldrh	r3, [r1, #12]
  408108:	b083      	sub	sp, #12
  40810a:	460c      	mov	r4, r1
  40810c:	0719      	lsls	r1, r3, #28
  40810e:	9000      	str	r0, [sp, #0]
  408110:	4616      	mov	r6, r2
  408112:	d526      	bpl.n	408162 <__sfvwrite_r+0x66>
  408114:	6922      	ldr	r2, [r4, #16]
  408116:	b322      	cbz	r2, 408162 <__sfvwrite_r+0x66>
  408118:	f013 0002 	ands.w	r0, r3, #2
  40811c:	6835      	ldr	r5, [r6, #0]
  40811e:	d02c      	beq.n	40817a <__sfvwrite_r+0x7e>
  408120:	f04f 0900 	mov.w	r9, #0
  408124:	4fb0      	ldr	r7, [pc, #704]	; (4083e8 <__sfvwrite_r+0x2ec>)
  408126:	46c8      	mov	r8, r9
  408128:	46b2      	mov	sl, r6
  40812a:	45b8      	cmp	r8, r7
  40812c:	4643      	mov	r3, r8
  40812e:	464a      	mov	r2, r9
  408130:	bf28      	it	cs
  408132:	463b      	movcs	r3, r7
  408134:	9800      	ldr	r0, [sp, #0]
  408136:	f1b8 0f00 	cmp.w	r8, #0
  40813a:	d050      	beq.n	4081de <__sfvwrite_r+0xe2>
  40813c:	69e1      	ldr	r1, [r4, #28]
  40813e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408140:	47b0      	blx	r6
  408142:	2800      	cmp	r0, #0
  408144:	dd58      	ble.n	4081f8 <__sfvwrite_r+0xfc>
  408146:	f8da 3008 	ldr.w	r3, [sl, #8]
  40814a:	1a1b      	subs	r3, r3, r0
  40814c:	4481      	add	r9, r0
  40814e:	eba8 0800 	sub.w	r8, r8, r0
  408152:	f8ca 3008 	str.w	r3, [sl, #8]
  408156:	2b00      	cmp	r3, #0
  408158:	d1e7      	bne.n	40812a <__sfvwrite_r+0x2e>
  40815a:	2000      	movs	r0, #0
  40815c:	b003      	add	sp, #12
  40815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408162:	4621      	mov	r1, r4
  408164:	9800      	ldr	r0, [sp, #0]
  408166:	f7fe fc91 	bl	406a8c <__swsetup_r>
  40816a:	2800      	cmp	r0, #0
  40816c:	f040 8133 	bne.w	4083d6 <__sfvwrite_r+0x2da>
  408170:	89a3      	ldrh	r3, [r4, #12]
  408172:	6835      	ldr	r5, [r6, #0]
  408174:	f013 0002 	ands.w	r0, r3, #2
  408178:	d1d2      	bne.n	408120 <__sfvwrite_r+0x24>
  40817a:	f013 0901 	ands.w	r9, r3, #1
  40817e:	d145      	bne.n	40820c <__sfvwrite_r+0x110>
  408180:	464f      	mov	r7, r9
  408182:	9601      	str	r6, [sp, #4]
  408184:	b337      	cbz	r7, 4081d4 <__sfvwrite_r+0xd8>
  408186:	059a      	lsls	r2, r3, #22
  408188:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40818c:	f140 8083 	bpl.w	408296 <__sfvwrite_r+0x19a>
  408190:	4547      	cmp	r7, r8
  408192:	46c3      	mov	fp, r8
  408194:	f0c0 80ab 	bcc.w	4082ee <__sfvwrite_r+0x1f2>
  408198:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40819c:	f040 80ac 	bne.w	4082f8 <__sfvwrite_r+0x1fc>
  4081a0:	6820      	ldr	r0, [r4, #0]
  4081a2:	46ba      	mov	sl, r7
  4081a4:	465a      	mov	r2, fp
  4081a6:	4649      	mov	r1, r9
  4081a8:	f000 fa52 	bl	408650 <memmove>
  4081ac:	68a2      	ldr	r2, [r4, #8]
  4081ae:	6823      	ldr	r3, [r4, #0]
  4081b0:	eba2 0208 	sub.w	r2, r2, r8
  4081b4:	445b      	add	r3, fp
  4081b6:	60a2      	str	r2, [r4, #8]
  4081b8:	6023      	str	r3, [r4, #0]
  4081ba:	9a01      	ldr	r2, [sp, #4]
  4081bc:	6893      	ldr	r3, [r2, #8]
  4081be:	eba3 030a 	sub.w	r3, r3, sl
  4081c2:	44d1      	add	r9, sl
  4081c4:	eba7 070a 	sub.w	r7, r7, sl
  4081c8:	6093      	str	r3, [r2, #8]
  4081ca:	2b00      	cmp	r3, #0
  4081cc:	d0c5      	beq.n	40815a <__sfvwrite_r+0x5e>
  4081ce:	89a3      	ldrh	r3, [r4, #12]
  4081d0:	2f00      	cmp	r7, #0
  4081d2:	d1d8      	bne.n	408186 <__sfvwrite_r+0x8a>
  4081d4:	f8d5 9000 	ldr.w	r9, [r5]
  4081d8:	686f      	ldr	r7, [r5, #4]
  4081da:	3508      	adds	r5, #8
  4081dc:	e7d2      	b.n	408184 <__sfvwrite_r+0x88>
  4081de:	f8d5 9000 	ldr.w	r9, [r5]
  4081e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4081e6:	3508      	adds	r5, #8
  4081e8:	e79f      	b.n	40812a <__sfvwrite_r+0x2e>
  4081ea:	2000      	movs	r0, #0
  4081ec:	4770      	bx	lr
  4081ee:	4621      	mov	r1, r4
  4081f0:	9800      	ldr	r0, [sp, #0]
  4081f2:	f7ff fd1f 	bl	407c34 <_fflush_r>
  4081f6:	b370      	cbz	r0, 408256 <__sfvwrite_r+0x15a>
  4081f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4081fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408200:	f04f 30ff 	mov.w	r0, #4294967295
  408204:	81a3      	strh	r3, [r4, #12]
  408206:	b003      	add	sp, #12
  408208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40820c:	4681      	mov	r9, r0
  40820e:	4633      	mov	r3, r6
  408210:	464e      	mov	r6, r9
  408212:	46a8      	mov	r8, r5
  408214:	469a      	mov	sl, r3
  408216:	464d      	mov	r5, r9
  408218:	b34e      	cbz	r6, 40826e <__sfvwrite_r+0x172>
  40821a:	b380      	cbz	r0, 40827e <__sfvwrite_r+0x182>
  40821c:	6820      	ldr	r0, [r4, #0]
  40821e:	6923      	ldr	r3, [r4, #16]
  408220:	6962      	ldr	r2, [r4, #20]
  408222:	45b1      	cmp	r9, r6
  408224:	46cb      	mov	fp, r9
  408226:	bf28      	it	cs
  408228:	46b3      	movcs	fp, r6
  40822a:	4298      	cmp	r0, r3
  40822c:	465f      	mov	r7, fp
  40822e:	d904      	bls.n	40823a <__sfvwrite_r+0x13e>
  408230:	68a3      	ldr	r3, [r4, #8]
  408232:	4413      	add	r3, r2
  408234:	459b      	cmp	fp, r3
  408236:	f300 80a6 	bgt.w	408386 <__sfvwrite_r+0x28a>
  40823a:	4593      	cmp	fp, r2
  40823c:	db4b      	blt.n	4082d6 <__sfvwrite_r+0x1da>
  40823e:	4613      	mov	r3, r2
  408240:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408242:	69e1      	ldr	r1, [r4, #28]
  408244:	9800      	ldr	r0, [sp, #0]
  408246:	462a      	mov	r2, r5
  408248:	47b8      	blx	r7
  40824a:	1e07      	subs	r7, r0, #0
  40824c:	ddd4      	ble.n	4081f8 <__sfvwrite_r+0xfc>
  40824e:	ebb9 0907 	subs.w	r9, r9, r7
  408252:	d0cc      	beq.n	4081ee <__sfvwrite_r+0xf2>
  408254:	2001      	movs	r0, #1
  408256:	f8da 3008 	ldr.w	r3, [sl, #8]
  40825a:	1bdb      	subs	r3, r3, r7
  40825c:	443d      	add	r5, r7
  40825e:	1bf6      	subs	r6, r6, r7
  408260:	f8ca 3008 	str.w	r3, [sl, #8]
  408264:	2b00      	cmp	r3, #0
  408266:	f43f af78 	beq.w	40815a <__sfvwrite_r+0x5e>
  40826a:	2e00      	cmp	r6, #0
  40826c:	d1d5      	bne.n	40821a <__sfvwrite_r+0x11e>
  40826e:	f108 0308 	add.w	r3, r8, #8
  408272:	e913 0060 	ldmdb	r3, {r5, r6}
  408276:	4698      	mov	r8, r3
  408278:	3308      	adds	r3, #8
  40827a:	2e00      	cmp	r6, #0
  40827c:	d0f9      	beq.n	408272 <__sfvwrite_r+0x176>
  40827e:	4632      	mov	r2, r6
  408280:	210a      	movs	r1, #10
  408282:	4628      	mov	r0, r5
  408284:	f000 f994 	bl	4085b0 <memchr>
  408288:	2800      	cmp	r0, #0
  40828a:	f000 80a1 	beq.w	4083d0 <__sfvwrite_r+0x2d4>
  40828e:	3001      	adds	r0, #1
  408290:	eba0 0905 	sub.w	r9, r0, r5
  408294:	e7c2      	b.n	40821c <__sfvwrite_r+0x120>
  408296:	6820      	ldr	r0, [r4, #0]
  408298:	6923      	ldr	r3, [r4, #16]
  40829a:	4298      	cmp	r0, r3
  40829c:	d802      	bhi.n	4082a4 <__sfvwrite_r+0x1a8>
  40829e:	6963      	ldr	r3, [r4, #20]
  4082a0:	429f      	cmp	r7, r3
  4082a2:	d25d      	bcs.n	408360 <__sfvwrite_r+0x264>
  4082a4:	45b8      	cmp	r8, r7
  4082a6:	bf28      	it	cs
  4082a8:	46b8      	movcs	r8, r7
  4082aa:	4642      	mov	r2, r8
  4082ac:	4649      	mov	r1, r9
  4082ae:	f000 f9cf 	bl	408650 <memmove>
  4082b2:	68a3      	ldr	r3, [r4, #8]
  4082b4:	6822      	ldr	r2, [r4, #0]
  4082b6:	eba3 0308 	sub.w	r3, r3, r8
  4082ba:	4442      	add	r2, r8
  4082bc:	60a3      	str	r3, [r4, #8]
  4082be:	6022      	str	r2, [r4, #0]
  4082c0:	b10b      	cbz	r3, 4082c6 <__sfvwrite_r+0x1ca>
  4082c2:	46c2      	mov	sl, r8
  4082c4:	e779      	b.n	4081ba <__sfvwrite_r+0xbe>
  4082c6:	4621      	mov	r1, r4
  4082c8:	9800      	ldr	r0, [sp, #0]
  4082ca:	f7ff fcb3 	bl	407c34 <_fflush_r>
  4082ce:	2800      	cmp	r0, #0
  4082d0:	d192      	bne.n	4081f8 <__sfvwrite_r+0xfc>
  4082d2:	46c2      	mov	sl, r8
  4082d4:	e771      	b.n	4081ba <__sfvwrite_r+0xbe>
  4082d6:	465a      	mov	r2, fp
  4082d8:	4629      	mov	r1, r5
  4082da:	f000 f9b9 	bl	408650 <memmove>
  4082de:	68a2      	ldr	r2, [r4, #8]
  4082e0:	6823      	ldr	r3, [r4, #0]
  4082e2:	eba2 020b 	sub.w	r2, r2, fp
  4082e6:	445b      	add	r3, fp
  4082e8:	60a2      	str	r2, [r4, #8]
  4082ea:	6023      	str	r3, [r4, #0]
  4082ec:	e7af      	b.n	40824e <__sfvwrite_r+0x152>
  4082ee:	6820      	ldr	r0, [r4, #0]
  4082f0:	46b8      	mov	r8, r7
  4082f2:	46ba      	mov	sl, r7
  4082f4:	46bb      	mov	fp, r7
  4082f6:	e755      	b.n	4081a4 <__sfvwrite_r+0xa8>
  4082f8:	6962      	ldr	r2, [r4, #20]
  4082fa:	6820      	ldr	r0, [r4, #0]
  4082fc:	6921      	ldr	r1, [r4, #16]
  4082fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408302:	eba0 0a01 	sub.w	sl, r0, r1
  408306:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40830a:	f10a 0001 	add.w	r0, sl, #1
  40830e:	ea4f 0868 	mov.w	r8, r8, asr #1
  408312:	4438      	add	r0, r7
  408314:	4540      	cmp	r0, r8
  408316:	4642      	mov	r2, r8
  408318:	bf84      	itt	hi
  40831a:	4680      	movhi	r8, r0
  40831c:	4642      	movhi	r2, r8
  40831e:	055b      	lsls	r3, r3, #21
  408320:	d544      	bpl.n	4083ac <__sfvwrite_r+0x2b0>
  408322:	4611      	mov	r1, r2
  408324:	9800      	ldr	r0, [sp, #0]
  408326:	f7fb fbbb 	bl	403aa0 <_malloc_r>
  40832a:	4683      	mov	fp, r0
  40832c:	2800      	cmp	r0, #0
  40832e:	d055      	beq.n	4083dc <__sfvwrite_r+0x2e0>
  408330:	4652      	mov	r2, sl
  408332:	6921      	ldr	r1, [r4, #16]
  408334:	f7fb fe64 	bl	404000 <memcpy>
  408338:	89a3      	ldrh	r3, [r4, #12]
  40833a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40833e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408342:	81a3      	strh	r3, [r4, #12]
  408344:	eb0b 000a 	add.w	r0, fp, sl
  408348:	eba8 030a 	sub.w	r3, r8, sl
  40834c:	f8c4 b010 	str.w	fp, [r4, #16]
  408350:	f8c4 8014 	str.w	r8, [r4, #20]
  408354:	6020      	str	r0, [r4, #0]
  408356:	60a3      	str	r3, [r4, #8]
  408358:	46b8      	mov	r8, r7
  40835a:	46ba      	mov	sl, r7
  40835c:	46bb      	mov	fp, r7
  40835e:	e721      	b.n	4081a4 <__sfvwrite_r+0xa8>
  408360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408364:	42b9      	cmp	r1, r7
  408366:	bf28      	it	cs
  408368:	4639      	movcs	r1, r7
  40836a:	464a      	mov	r2, r9
  40836c:	fb91 f1f3 	sdiv	r1, r1, r3
  408370:	9800      	ldr	r0, [sp, #0]
  408372:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408374:	fb03 f301 	mul.w	r3, r3, r1
  408378:	69e1      	ldr	r1, [r4, #28]
  40837a:	47b0      	blx	r6
  40837c:	f1b0 0a00 	subs.w	sl, r0, #0
  408380:	f73f af1b 	bgt.w	4081ba <__sfvwrite_r+0xbe>
  408384:	e738      	b.n	4081f8 <__sfvwrite_r+0xfc>
  408386:	461a      	mov	r2, r3
  408388:	4629      	mov	r1, r5
  40838a:	9301      	str	r3, [sp, #4]
  40838c:	f000 f960 	bl	408650 <memmove>
  408390:	6822      	ldr	r2, [r4, #0]
  408392:	9b01      	ldr	r3, [sp, #4]
  408394:	9800      	ldr	r0, [sp, #0]
  408396:	441a      	add	r2, r3
  408398:	6022      	str	r2, [r4, #0]
  40839a:	4621      	mov	r1, r4
  40839c:	f7ff fc4a 	bl	407c34 <_fflush_r>
  4083a0:	9b01      	ldr	r3, [sp, #4]
  4083a2:	2800      	cmp	r0, #0
  4083a4:	f47f af28 	bne.w	4081f8 <__sfvwrite_r+0xfc>
  4083a8:	461f      	mov	r7, r3
  4083aa:	e750      	b.n	40824e <__sfvwrite_r+0x152>
  4083ac:	9800      	ldr	r0, [sp, #0]
  4083ae:	f000 fcad 	bl	408d0c <_realloc_r>
  4083b2:	4683      	mov	fp, r0
  4083b4:	2800      	cmp	r0, #0
  4083b6:	d1c5      	bne.n	408344 <__sfvwrite_r+0x248>
  4083b8:	9d00      	ldr	r5, [sp, #0]
  4083ba:	6921      	ldr	r1, [r4, #16]
  4083bc:	4628      	mov	r0, r5
  4083be:	f7ff fdb7 	bl	407f30 <_free_r>
  4083c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4083c6:	220c      	movs	r2, #12
  4083c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4083cc:	602a      	str	r2, [r5, #0]
  4083ce:	e715      	b.n	4081fc <__sfvwrite_r+0x100>
  4083d0:	f106 0901 	add.w	r9, r6, #1
  4083d4:	e722      	b.n	40821c <__sfvwrite_r+0x120>
  4083d6:	f04f 30ff 	mov.w	r0, #4294967295
  4083da:	e6bf      	b.n	40815c <__sfvwrite_r+0x60>
  4083dc:	9a00      	ldr	r2, [sp, #0]
  4083de:	230c      	movs	r3, #12
  4083e0:	6013      	str	r3, [r2, #0]
  4083e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4083e6:	e709      	b.n	4081fc <__sfvwrite_r+0x100>
  4083e8:	7ffffc00 	.word	0x7ffffc00

004083ec <_fwalk_reent>:
  4083ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4083f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4083f4:	d01f      	beq.n	408436 <_fwalk_reent+0x4a>
  4083f6:	4688      	mov	r8, r1
  4083f8:	4606      	mov	r6, r0
  4083fa:	f04f 0900 	mov.w	r9, #0
  4083fe:	687d      	ldr	r5, [r7, #4]
  408400:	68bc      	ldr	r4, [r7, #8]
  408402:	3d01      	subs	r5, #1
  408404:	d411      	bmi.n	40842a <_fwalk_reent+0x3e>
  408406:	89a3      	ldrh	r3, [r4, #12]
  408408:	2b01      	cmp	r3, #1
  40840a:	f105 35ff 	add.w	r5, r5, #4294967295
  40840e:	d908      	bls.n	408422 <_fwalk_reent+0x36>
  408410:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408414:	3301      	adds	r3, #1
  408416:	4621      	mov	r1, r4
  408418:	4630      	mov	r0, r6
  40841a:	d002      	beq.n	408422 <_fwalk_reent+0x36>
  40841c:	47c0      	blx	r8
  40841e:	ea49 0900 	orr.w	r9, r9, r0
  408422:	1c6b      	adds	r3, r5, #1
  408424:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408428:	d1ed      	bne.n	408406 <_fwalk_reent+0x1a>
  40842a:	683f      	ldr	r7, [r7, #0]
  40842c:	2f00      	cmp	r7, #0
  40842e:	d1e6      	bne.n	4083fe <_fwalk_reent+0x12>
  408430:	4648      	mov	r0, r9
  408432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408436:	46b9      	mov	r9, r7
  408438:	4648      	mov	r0, r9
  40843a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40843e:	bf00      	nop

00408440 <__locale_mb_cur_max>:
  408440:	4b04      	ldr	r3, [pc, #16]	; (408454 <__locale_mb_cur_max+0x14>)
  408442:	4a05      	ldr	r2, [pc, #20]	; (408458 <__locale_mb_cur_max+0x18>)
  408444:	681b      	ldr	r3, [r3, #0]
  408446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408448:	2b00      	cmp	r3, #0
  40844a:	bf08      	it	eq
  40844c:	4613      	moveq	r3, r2
  40844e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408452:	4770      	bx	lr
  408454:	2040000c 	.word	0x2040000c
  408458:	2040084c 	.word	0x2040084c

0040845c <_localeconv_r>:
  40845c:	4a04      	ldr	r2, [pc, #16]	; (408470 <_localeconv_r+0x14>)
  40845e:	4b05      	ldr	r3, [pc, #20]	; (408474 <_localeconv_r+0x18>)
  408460:	6812      	ldr	r2, [r2, #0]
  408462:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408464:	2800      	cmp	r0, #0
  408466:	bf08      	it	eq
  408468:	4618      	moveq	r0, r3
  40846a:	30f0      	adds	r0, #240	; 0xf0
  40846c:	4770      	bx	lr
  40846e:	bf00      	nop
  408470:	2040000c 	.word	0x2040000c
  408474:	2040084c 	.word	0x2040084c

00408478 <__retarget_lock_init_recursive>:
  408478:	4770      	bx	lr
  40847a:	bf00      	nop

0040847c <__retarget_lock_close_recursive>:
  40847c:	4770      	bx	lr
  40847e:	bf00      	nop

00408480 <__retarget_lock_acquire_recursive>:
  408480:	4770      	bx	lr
  408482:	bf00      	nop

00408484 <__retarget_lock_release_recursive>:
  408484:	4770      	bx	lr
  408486:	bf00      	nop

00408488 <__swhatbuf_r>:
  408488:	b570      	push	{r4, r5, r6, lr}
  40848a:	460c      	mov	r4, r1
  40848c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408490:	2900      	cmp	r1, #0
  408492:	b090      	sub	sp, #64	; 0x40
  408494:	4615      	mov	r5, r2
  408496:	461e      	mov	r6, r3
  408498:	db14      	blt.n	4084c4 <__swhatbuf_r+0x3c>
  40849a:	aa01      	add	r2, sp, #4
  40849c:	f001 f84a 	bl	409534 <_fstat_r>
  4084a0:	2800      	cmp	r0, #0
  4084a2:	db0f      	blt.n	4084c4 <__swhatbuf_r+0x3c>
  4084a4:	9a02      	ldr	r2, [sp, #8]
  4084a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4084aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4084ae:	fab2 f282 	clz	r2, r2
  4084b2:	0952      	lsrs	r2, r2, #5
  4084b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4084b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4084bc:	6032      	str	r2, [r6, #0]
  4084be:	602b      	str	r3, [r5, #0]
  4084c0:	b010      	add	sp, #64	; 0x40
  4084c2:	bd70      	pop	{r4, r5, r6, pc}
  4084c4:	89a2      	ldrh	r2, [r4, #12]
  4084c6:	2300      	movs	r3, #0
  4084c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4084cc:	6033      	str	r3, [r6, #0]
  4084ce:	d004      	beq.n	4084da <__swhatbuf_r+0x52>
  4084d0:	2240      	movs	r2, #64	; 0x40
  4084d2:	4618      	mov	r0, r3
  4084d4:	602a      	str	r2, [r5, #0]
  4084d6:	b010      	add	sp, #64	; 0x40
  4084d8:	bd70      	pop	{r4, r5, r6, pc}
  4084da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4084de:	602b      	str	r3, [r5, #0]
  4084e0:	b010      	add	sp, #64	; 0x40
  4084e2:	bd70      	pop	{r4, r5, r6, pc}

004084e4 <__smakebuf_r>:
  4084e4:	898a      	ldrh	r2, [r1, #12]
  4084e6:	0792      	lsls	r2, r2, #30
  4084e8:	460b      	mov	r3, r1
  4084ea:	d506      	bpl.n	4084fa <__smakebuf_r+0x16>
  4084ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4084f0:	2101      	movs	r1, #1
  4084f2:	601a      	str	r2, [r3, #0]
  4084f4:	611a      	str	r2, [r3, #16]
  4084f6:	6159      	str	r1, [r3, #20]
  4084f8:	4770      	bx	lr
  4084fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4084fc:	b083      	sub	sp, #12
  4084fe:	ab01      	add	r3, sp, #4
  408500:	466a      	mov	r2, sp
  408502:	460c      	mov	r4, r1
  408504:	4606      	mov	r6, r0
  408506:	f7ff ffbf 	bl	408488 <__swhatbuf_r>
  40850a:	9900      	ldr	r1, [sp, #0]
  40850c:	4605      	mov	r5, r0
  40850e:	4630      	mov	r0, r6
  408510:	f7fb fac6 	bl	403aa0 <_malloc_r>
  408514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408518:	b1d8      	cbz	r0, 408552 <__smakebuf_r+0x6e>
  40851a:	9a01      	ldr	r2, [sp, #4]
  40851c:	4f15      	ldr	r7, [pc, #84]	; (408574 <__smakebuf_r+0x90>)
  40851e:	9900      	ldr	r1, [sp, #0]
  408520:	63f7      	str	r7, [r6, #60]	; 0x3c
  408522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408526:	81a3      	strh	r3, [r4, #12]
  408528:	6020      	str	r0, [r4, #0]
  40852a:	6120      	str	r0, [r4, #16]
  40852c:	6161      	str	r1, [r4, #20]
  40852e:	b91a      	cbnz	r2, 408538 <__smakebuf_r+0x54>
  408530:	432b      	orrs	r3, r5
  408532:	81a3      	strh	r3, [r4, #12]
  408534:	b003      	add	sp, #12
  408536:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408538:	4630      	mov	r0, r6
  40853a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40853e:	f001 f80d 	bl	40955c <_isatty_r>
  408542:	b1a0      	cbz	r0, 40856e <__smakebuf_r+0x8a>
  408544:	89a3      	ldrh	r3, [r4, #12]
  408546:	f023 0303 	bic.w	r3, r3, #3
  40854a:	f043 0301 	orr.w	r3, r3, #1
  40854e:	b21b      	sxth	r3, r3
  408550:	e7ee      	b.n	408530 <__smakebuf_r+0x4c>
  408552:	059a      	lsls	r2, r3, #22
  408554:	d4ee      	bmi.n	408534 <__smakebuf_r+0x50>
  408556:	f023 0303 	bic.w	r3, r3, #3
  40855a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40855e:	f043 0302 	orr.w	r3, r3, #2
  408562:	2101      	movs	r1, #1
  408564:	81a3      	strh	r3, [r4, #12]
  408566:	6022      	str	r2, [r4, #0]
  408568:	6122      	str	r2, [r4, #16]
  40856a:	6161      	str	r1, [r4, #20]
  40856c:	e7e2      	b.n	408534 <__smakebuf_r+0x50>
  40856e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408572:	e7dd      	b.n	408530 <__smakebuf_r+0x4c>
  408574:	00407c89 	.word	0x00407c89

00408578 <__ascii_mbtowc>:
  408578:	b082      	sub	sp, #8
  40857a:	b149      	cbz	r1, 408590 <__ascii_mbtowc+0x18>
  40857c:	b15a      	cbz	r2, 408596 <__ascii_mbtowc+0x1e>
  40857e:	b16b      	cbz	r3, 40859c <__ascii_mbtowc+0x24>
  408580:	7813      	ldrb	r3, [r2, #0]
  408582:	600b      	str	r3, [r1, #0]
  408584:	7812      	ldrb	r2, [r2, #0]
  408586:	1c10      	adds	r0, r2, #0
  408588:	bf18      	it	ne
  40858a:	2001      	movne	r0, #1
  40858c:	b002      	add	sp, #8
  40858e:	4770      	bx	lr
  408590:	a901      	add	r1, sp, #4
  408592:	2a00      	cmp	r2, #0
  408594:	d1f3      	bne.n	40857e <__ascii_mbtowc+0x6>
  408596:	4610      	mov	r0, r2
  408598:	b002      	add	sp, #8
  40859a:	4770      	bx	lr
  40859c:	f06f 0001 	mvn.w	r0, #1
  4085a0:	e7f4      	b.n	40858c <__ascii_mbtowc+0x14>
  4085a2:	bf00      	nop
	...

004085b0 <memchr>:
  4085b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4085b4:	2a10      	cmp	r2, #16
  4085b6:	db2b      	blt.n	408610 <memchr+0x60>
  4085b8:	f010 0f07 	tst.w	r0, #7
  4085bc:	d008      	beq.n	4085d0 <memchr+0x20>
  4085be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4085c2:	3a01      	subs	r2, #1
  4085c4:	428b      	cmp	r3, r1
  4085c6:	d02d      	beq.n	408624 <memchr+0x74>
  4085c8:	f010 0f07 	tst.w	r0, #7
  4085cc:	b342      	cbz	r2, 408620 <memchr+0x70>
  4085ce:	d1f6      	bne.n	4085be <memchr+0xe>
  4085d0:	b4f0      	push	{r4, r5, r6, r7}
  4085d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4085d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4085da:	f022 0407 	bic.w	r4, r2, #7
  4085de:	f07f 0700 	mvns.w	r7, #0
  4085e2:	2300      	movs	r3, #0
  4085e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4085e8:	3c08      	subs	r4, #8
  4085ea:	ea85 0501 	eor.w	r5, r5, r1
  4085ee:	ea86 0601 	eor.w	r6, r6, r1
  4085f2:	fa85 f547 	uadd8	r5, r5, r7
  4085f6:	faa3 f587 	sel	r5, r3, r7
  4085fa:	fa86 f647 	uadd8	r6, r6, r7
  4085fe:	faa5 f687 	sel	r6, r5, r7
  408602:	b98e      	cbnz	r6, 408628 <memchr+0x78>
  408604:	d1ee      	bne.n	4085e4 <memchr+0x34>
  408606:	bcf0      	pop	{r4, r5, r6, r7}
  408608:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40860c:	f002 0207 	and.w	r2, r2, #7
  408610:	b132      	cbz	r2, 408620 <memchr+0x70>
  408612:	f810 3b01 	ldrb.w	r3, [r0], #1
  408616:	3a01      	subs	r2, #1
  408618:	ea83 0301 	eor.w	r3, r3, r1
  40861c:	b113      	cbz	r3, 408624 <memchr+0x74>
  40861e:	d1f8      	bne.n	408612 <memchr+0x62>
  408620:	2000      	movs	r0, #0
  408622:	4770      	bx	lr
  408624:	3801      	subs	r0, #1
  408626:	4770      	bx	lr
  408628:	2d00      	cmp	r5, #0
  40862a:	bf06      	itte	eq
  40862c:	4635      	moveq	r5, r6
  40862e:	3803      	subeq	r0, #3
  408630:	3807      	subne	r0, #7
  408632:	f015 0f01 	tst.w	r5, #1
  408636:	d107      	bne.n	408648 <memchr+0x98>
  408638:	3001      	adds	r0, #1
  40863a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40863e:	bf02      	ittt	eq
  408640:	3001      	addeq	r0, #1
  408642:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408646:	3001      	addeq	r0, #1
  408648:	bcf0      	pop	{r4, r5, r6, r7}
  40864a:	3801      	subs	r0, #1
  40864c:	4770      	bx	lr
  40864e:	bf00      	nop

00408650 <memmove>:
  408650:	4288      	cmp	r0, r1
  408652:	b5f0      	push	{r4, r5, r6, r7, lr}
  408654:	d90d      	bls.n	408672 <memmove+0x22>
  408656:	188b      	adds	r3, r1, r2
  408658:	4298      	cmp	r0, r3
  40865a:	d20a      	bcs.n	408672 <memmove+0x22>
  40865c:	1884      	adds	r4, r0, r2
  40865e:	2a00      	cmp	r2, #0
  408660:	d051      	beq.n	408706 <memmove+0xb6>
  408662:	4622      	mov	r2, r4
  408664:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408668:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40866c:	4299      	cmp	r1, r3
  40866e:	d1f9      	bne.n	408664 <memmove+0x14>
  408670:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408672:	2a0f      	cmp	r2, #15
  408674:	d948      	bls.n	408708 <memmove+0xb8>
  408676:	ea41 0300 	orr.w	r3, r1, r0
  40867a:	079b      	lsls	r3, r3, #30
  40867c:	d146      	bne.n	40870c <memmove+0xbc>
  40867e:	f100 0410 	add.w	r4, r0, #16
  408682:	f101 0310 	add.w	r3, r1, #16
  408686:	4615      	mov	r5, r2
  408688:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40868c:	f844 6c10 	str.w	r6, [r4, #-16]
  408690:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408694:	f844 6c0c 	str.w	r6, [r4, #-12]
  408698:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40869c:	f844 6c08 	str.w	r6, [r4, #-8]
  4086a0:	3d10      	subs	r5, #16
  4086a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4086a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4086aa:	2d0f      	cmp	r5, #15
  4086ac:	f103 0310 	add.w	r3, r3, #16
  4086b0:	f104 0410 	add.w	r4, r4, #16
  4086b4:	d8e8      	bhi.n	408688 <memmove+0x38>
  4086b6:	f1a2 0310 	sub.w	r3, r2, #16
  4086ba:	f023 030f 	bic.w	r3, r3, #15
  4086be:	f002 0e0f 	and.w	lr, r2, #15
  4086c2:	3310      	adds	r3, #16
  4086c4:	f1be 0f03 	cmp.w	lr, #3
  4086c8:	4419      	add	r1, r3
  4086ca:	4403      	add	r3, r0
  4086cc:	d921      	bls.n	408712 <memmove+0xc2>
  4086ce:	1f1e      	subs	r6, r3, #4
  4086d0:	460d      	mov	r5, r1
  4086d2:	4674      	mov	r4, lr
  4086d4:	3c04      	subs	r4, #4
  4086d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4086da:	f846 7f04 	str.w	r7, [r6, #4]!
  4086de:	2c03      	cmp	r4, #3
  4086e0:	d8f8      	bhi.n	4086d4 <memmove+0x84>
  4086e2:	f1ae 0404 	sub.w	r4, lr, #4
  4086e6:	f024 0403 	bic.w	r4, r4, #3
  4086ea:	3404      	adds	r4, #4
  4086ec:	4421      	add	r1, r4
  4086ee:	4423      	add	r3, r4
  4086f0:	f002 0203 	and.w	r2, r2, #3
  4086f4:	b162      	cbz	r2, 408710 <memmove+0xc0>
  4086f6:	3b01      	subs	r3, #1
  4086f8:	440a      	add	r2, r1
  4086fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4086fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  408702:	428a      	cmp	r2, r1
  408704:	d1f9      	bne.n	4086fa <memmove+0xaa>
  408706:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408708:	4603      	mov	r3, r0
  40870a:	e7f3      	b.n	4086f4 <memmove+0xa4>
  40870c:	4603      	mov	r3, r0
  40870e:	e7f2      	b.n	4086f6 <memmove+0xa6>
  408710:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408712:	4672      	mov	r2, lr
  408714:	e7ee      	b.n	4086f4 <memmove+0xa4>
  408716:	bf00      	nop

00408718 <_Balloc>:
  408718:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40871a:	b570      	push	{r4, r5, r6, lr}
  40871c:	4605      	mov	r5, r0
  40871e:	460c      	mov	r4, r1
  408720:	b14b      	cbz	r3, 408736 <_Balloc+0x1e>
  408722:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  408726:	b180      	cbz	r0, 40874a <_Balloc+0x32>
  408728:	6802      	ldr	r2, [r0, #0]
  40872a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40872e:	2300      	movs	r3, #0
  408730:	6103      	str	r3, [r0, #16]
  408732:	60c3      	str	r3, [r0, #12]
  408734:	bd70      	pop	{r4, r5, r6, pc}
  408736:	2221      	movs	r2, #33	; 0x21
  408738:	2104      	movs	r1, #4
  40873a:	f000 fe57 	bl	4093ec <_calloc_r>
  40873e:	64e8      	str	r0, [r5, #76]	; 0x4c
  408740:	4603      	mov	r3, r0
  408742:	2800      	cmp	r0, #0
  408744:	d1ed      	bne.n	408722 <_Balloc+0xa>
  408746:	2000      	movs	r0, #0
  408748:	bd70      	pop	{r4, r5, r6, pc}
  40874a:	2101      	movs	r1, #1
  40874c:	fa01 f604 	lsl.w	r6, r1, r4
  408750:	1d72      	adds	r2, r6, #5
  408752:	4628      	mov	r0, r5
  408754:	0092      	lsls	r2, r2, #2
  408756:	f000 fe49 	bl	4093ec <_calloc_r>
  40875a:	2800      	cmp	r0, #0
  40875c:	d0f3      	beq.n	408746 <_Balloc+0x2e>
  40875e:	6044      	str	r4, [r0, #4]
  408760:	6086      	str	r6, [r0, #8]
  408762:	e7e4      	b.n	40872e <_Balloc+0x16>

00408764 <_Bfree>:
  408764:	b131      	cbz	r1, 408774 <_Bfree+0x10>
  408766:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408768:	684a      	ldr	r2, [r1, #4]
  40876a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40876e:	6008      	str	r0, [r1, #0]
  408770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408774:	4770      	bx	lr
  408776:	bf00      	nop

00408778 <__multadd>:
  408778:	b5f0      	push	{r4, r5, r6, r7, lr}
  40877a:	690c      	ldr	r4, [r1, #16]
  40877c:	b083      	sub	sp, #12
  40877e:	460d      	mov	r5, r1
  408780:	4606      	mov	r6, r0
  408782:	f101 0e14 	add.w	lr, r1, #20
  408786:	2700      	movs	r7, #0
  408788:	f8de 0000 	ldr.w	r0, [lr]
  40878c:	b281      	uxth	r1, r0
  40878e:	fb02 3301 	mla	r3, r2, r1, r3
  408792:	0c01      	lsrs	r1, r0, #16
  408794:	0c18      	lsrs	r0, r3, #16
  408796:	fb02 0101 	mla	r1, r2, r1, r0
  40879a:	b29b      	uxth	r3, r3
  40879c:	3701      	adds	r7, #1
  40879e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4087a2:	42bc      	cmp	r4, r7
  4087a4:	f84e 3b04 	str.w	r3, [lr], #4
  4087a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4087ac:	dcec      	bgt.n	408788 <__multadd+0x10>
  4087ae:	b13b      	cbz	r3, 4087c0 <__multadd+0x48>
  4087b0:	68aa      	ldr	r2, [r5, #8]
  4087b2:	4294      	cmp	r4, r2
  4087b4:	da07      	bge.n	4087c6 <__multadd+0x4e>
  4087b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4087ba:	3401      	adds	r4, #1
  4087bc:	6153      	str	r3, [r2, #20]
  4087be:	612c      	str	r4, [r5, #16]
  4087c0:	4628      	mov	r0, r5
  4087c2:	b003      	add	sp, #12
  4087c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4087c6:	6869      	ldr	r1, [r5, #4]
  4087c8:	9301      	str	r3, [sp, #4]
  4087ca:	3101      	adds	r1, #1
  4087cc:	4630      	mov	r0, r6
  4087ce:	f7ff ffa3 	bl	408718 <_Balloc>
  4087d2:	692a      	ldr	r2, [r5, #16]
  4087d4:	3202      	adds	r2, #2
  4087d6:	f105 010c 	add.w	r1, r5, #12
  4087da:	4607      	mov	r7, r0
  4087dc:	0092      	lsls	r2, r2, #2
  4087de:	300c      	adds	r0, #12
  4087e0:	f7fb fc0e 	bl	404000 <memcpy>
  4087e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4087e6:	6869      	ldr	r1, [r5, #4]
  4087e8:	9b01      	ldr	r3, [sp, #4]
  4087ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4087ee:	6028      	str	r0, [r5, #0]
  4087f0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4087f4:	463d      	mov	r5, r7
  4087f6:	e7de      	b.n	4087b6 <__multadd+0x3e>

004087f8 <__hi0bits>:
  4087f8:	0c02      	lsrs	r2, r0, #16
  4087fa:	0412      	lsls	r2, r2, #16
  4087fc:	4603      	mov	r3, r0
  4087fe:	b9b2      	cbnz	r2, 40882e <__hi0bits+0x36>
  408800:	0403      	lsls	r3, r0, #16
  408802:	2010      	movs	r0, #16
  408804:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408808:	bf04      	itt	eq
  40880a:	021b      	lsleq	r3, r3, #8
  40880c:	3008      	addeq	r0, #8
  40880e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408812:	bf04      	itt	eq
  408814:	011b      	lsleq	r3, r3, #4
  408816:	3004      	addeq	r0, #4
  408818:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40881c:	bf04      	itt	eq
  40881e:	009b      	lsleq	r3, r3, #2
  408820:	3002      	addeq	r0, #2
  408822:	2b00      	cmp	r3, #0
  408824:	db02      	blt.n	40882c <__hi0bits+0x34>
  408826:	005b      	lsls	r3, r3, #1
  408828:	d403      	bmi.n	408832 <__hi0bits+0x3a>
  40882a:	2020      	movs	r0, #32
  40882c:	4770      	bx	lr
  40882e:	2000      	movs	r0, #0
  408830:	e7e8      	b.n	408804 <__hi0bits+0xc>
  408832:	3001      	adds	r0, #1
  408834:	4770      	bx	lr
  408836:	bf00      	nop

00408838 <__lo0bits>:
  408838:	6803      	ldr	r3, [r0, #0]
  40883a:	f013 0207 	ands.w	r2, r3, #7
  40883e:	4601      	mov	r1, r0
  408840:	d007      	beq.n	408852 <__lo0bits+0x1a>
  408842:	07da      	lsls	r2, r3, #31
  408844:	d421      	bmi.n	40888a <__lo0bits+0x52>
  408846:	0798      	lsls	r0, r3, #30
  408848:	d421      	bmi.n	40888e <__lo0bits+0x56>
  40884a:	089b      	lsrs	r3, r3, #2
  40884c:	600b      	str	r3, [r1, #0]
  40884e:	2002      	movs	r0, #2
  408850:	4770      	bx	lr
  408852:	b298      	uxth	r0, r3
  408854:	b198      	cbz	r0, 40887e <__lo0bits+0x46>
  408856:	4610      	mov	r0, r2
  408858:	f013 0fff 	tst.w	r3, #255	; 0xff
  40885c:	bf04      	itt	eq
  40885e:	0a1b      	lsreq	r3, r3, #8
  408860:	3008      	addeq	r0, #8
  408862:	071a      	lsls	r2, r3, #28
  408864:	bf04      	itt	eq
  408866:	091b      	lsreq	r3, r3, #4
  408868:	3004      	addeq	r0, #4
  40886a:	079a      	lsls	r2, r3, #30
  40886c:	bf04      	itt	eq
  40886e:	089b      	lsreq	r3, r3, #2
  408870:	3002      	addeq	r0, #2
  408872:	07da      	lsls	r2, r3, #31
  408874:	d407      	bmi.n	408886 <__lo0bits+0x4e>
  408876:	085b      	lsrs	r3, r3, #1
  408878:	d104      	bne.n	408884 <__lo0bits+0x4c>
  40887a:	2020      	movs	r0, #32
  40887c:	4770      	bx	lr
  40887e:	0c1b      	lsrs	r3, r3, #16
  408880:	2010      	movs	r0, #16
  408882:	e7e9      	b.n	408858 <__lo0bits+0x20>
  408884:	3001      	adds	r0, #1
  408886:	600b      	str	r3, [r1, #0]
  408888:	4770      	bx	lr
  40888a:	2000      	movs	r0, #0
  40888c:	4770      	bx	lr
  40888e:	085b      	lsrs	r3, r3, #1
  408890:	600b      	str	r3, [r1, #0]
  408892:	2001      	movs	r0, #1
  408894:	4770      	bx	lr
  408896:	bf00      	nop

00408898 <__i2b>:
  408898:	b510      	push	{r4, lr}
  40889a:	460c      	mov	r4, r1
  40889c:	2101      	movs	r1, #1
  40889e:	f7ff ff3b 	bl	408718 <_Balloc>
  4088a2:	2201      	movs	r2, #1
  4088a4:	6144      	str	r4, [r0, #20]
  4088a6:	6102      	str	r2, [r0, #16]
  4088a8:	bd10      	pop	{r4, pc}
  4088aa:	bf00      	nop

004088ac <__multiply>:
  4088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4088b0:	690c      	ldr	r4, [r1, #16]
  4088b2:	6915      	ldr	r5, [r2, #16]
  4088b4:	42ac      	cmp	r4, r5
  4088b6:	b083      	sub	sp, #12
  4088b8:	468b      	mov	fp, r1
  4088ba:	4616      	mov	r6, r2
  4088bc:	da04      	bge.n	4088c8 <__multiply+0x1c>
  4088be:	4622      	mov	r2, r4
  4088c0:	46b3      	mov	fp, r6
  4088c2:	462c      	mov	r4, r5
  4088c4:	460e      	mov	r6, r1
  4088c6:	4615      	mov	r5, r2
  4088c8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4088cc:	f8db 1004 	ldr.w	r1, [fp, #4]
  4088d0:	eb04 0805 	add.w	r8, r4, r5
  4088d4:	4598      	cmp	r8, r3
  4088d6:	bfc8      	it	gt
  4088d8:	3101      	addgt	r1, #1
  4088da:	f7ff ff1d 	bl	408718 <_Balloc>
  4088de:	f100 0914 	add.w	r9, r0, #20
  4088e2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4088e6:	45d1      	cmp	r9, sl
  4088e8:	9000      	str	r0, [sp, #0]
  4088ea:	d205      	bcs.n	4088f8 <__multiply+0x4c>
  4088ec:	464b      	mov	r3, r9
  4088ee:	2100      	movs	r1, #0
  4088f0:	f843 1b04 	str.w	r1, [r3], #4
  4088f4:	459a      	cmp	sl, r3
  4088f6:	d8fb      	bhi.n	4088f0 <__multiply+0x44>
  4088f8:	f106 0c14 	add.w	ip, r6, #20
  4088fc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408900:	f10b 0b14 	add.w	fp, fp, #20
  408904:	459c      	cmp	ip, r3
  408906:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40890a:	d24c      	bcs.n	4089a6 <__multiply+0xfa>
  40890c:	f8cd a004 	str.w	sl, [sp, #4]
  408910:	469a      	mov	sl, r3
  408912:	f8dc 5000 	ldr.w	r5, [ip]
  408916:	b2af      	uxth	r7, r5
  408918:	b1ef      	cbz	r7, 408956 <__multiply+0xaa>
  40891a:	2100      	movs	r1, #0
  40891c:	464d      	mov	r5, r9
  40891e:	465e      	mov	r6, fp
  408920:	460c      	mov	r4, r1
  408922:	f856 2b04 	ldr.w	r2, [r6], #4
  408926:	6828      	ldr	r0, [r5, #0]
  408928:	b293      	uxth	r3, r2
  40892a:	b281      	uxth	r1, r0
  40892c:	fb07 1303 	mla	r3, r7, r3, r1
  408930:	0c12      	lsrs	r2, r2, #16
  408932:	0c01      	lsrs	r1, r0, #16
  408934:	4423      	add	r3, r4
  408936:	fb07 1102 	mla	r1, r7, r2, r1
  40893a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40893e:	b29b      	uxth	r3, r3
  408940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408944:	45b6      	cmp	lr, r6
  408946:	f845 3b04 	str.w	r3, [r5], #4
  40894a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40894e:	d8e8      	bhi.n	408922 <__multiply+0x76>
  408950:	602c      	str	r4, [r5, #0]
  408952:	f8dc 5000 	ldr.w	r5, [ip]
  408956:	0c2d      	lsrs	r5, r5, #16
  408958:	d01d      	beq.n	408996 <__multiply+0xea>
  40895a:	f8d9 3000 	ldr.w	r3, [r9]
  40895e:	4648      	mov	r0, r9
  408960:	461c      	mov	r4, r3
  408962:	4659      	mov	r1, fp
  408964:	2200      	movs	r2, #0
  408966:	880e      	ldrh	r6, [r1, #0]
  408968:	0c24      	lsrs	r4, r4, #16
  40896a:	fb05 4406 	mla	r4, r5, r6, r4
  40896e:	4422      	add	r2, r4
  408970:	b29b      	uxth	r3, r3
  408972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408976:	f840 3b04 	str.w	r3, [r0], #4
  40897a:	f851 3b04 	ldr.w	r3, [r1], #4
  40897e:	6804      	ldr	r4, [r0, #0]
  408980:	0c1b      	lsrs	r3, r3, #16
  408982:	b2a6      	uxth	r6, r4
  408984:	fb05 6303 	mla	r3, r5, r3, r6
  408988:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40898c:	458e      	cmp	lr, r1
  40898e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408992:	d8e8      	bhi.n	408966 <__multiply+0xba>
  408994:	6003      	str	r3, [r0, #0]
  408996:	f10c 0c04 	add.w	ip, ip, #4
  40899a:	45e2      	cmp	sl, ip
  40899c:	f109 0904 	add.w	r9, r9, #4
  4089a0:	d8b7      	bhi.n	408912 <__multiply+0x66>
  4089a2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4089a6:	f1b8 0f00 	cmp.w	r8, #0
  4089aa:	dd0b      	ble.n	4089c4 <__multiply+0x118>
  4089ac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4089b0:	f1aa 0a04 	sub.w	sl, sl, #4
  4089b4:	b11b      	cbz	r3, 4089be <__multiply+0x112>
  4089b6:	e005      	b.n	4089c4 <__multiply+0x118>
  4089b8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4089bc:	b913      	cbnz	r3, 4089c4 <__multiply+0x118>
  4089be:	f1b8 0801 	subs.w	r8, r8, #1
  4089c2:	d1f9      	bne.n	4089b8 <__multiply+0x10c>
  4089c4:	9800      	ldr	r0, [sp, #0]
  4089c6:	f8c0 8010 	str.w	r8, [r0, #16]
  4089ca:	b003      	add	sp, #12
  4089cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004089d0 <__pow5mult>:
  4089d0:	f012 0303 	ands.w	r3, r2, #3
  4089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4089d8:	4614      	mov	r4, r2
  4089da:	4607      	mov	r7, r0
  4089dc:	d12e      	bne.n	408a3c <__pow5mult+0x6c>
  4089de:	460d      	mov	r5, r1
  4089e0:	10a4      	asrs	r4, r4, #2
  4089e2:	d01c      	beq.n	408a1e <__pow5mult+0x4e>
  4089e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4089e6:	b396      	cbz	r6, 408a4e <__pow5mult+0x7e>
  4089e8:	07e3      	lsls	r3, r4, #31
  4089ea:	f04f 0800 	mov.w	r8, #0
  4089ee:	d406      	bmi.n	4089fe <__pow5mult+0x2e>
  4089f0:	1064      	asrs	r4, r4, #1
  4089f2:	d014      	beq.n	408a1e <__pow5mult+0x4e>
  4089f4:	6830      	ldr	r0, [r6, #0]
  4089f6:	b1a8      	cbz	r0, 408a24 <__pow5mult+0x54>
  4089f8:	4606      	mov	r6, r0
  4089fa:	07e3      	lsls	r3, r4, #31
  4089fc:	d5f8      	bpl.n	4089f0 <__pow5mult+0x20>
  4089fe:	4632      	mov	r2, r6
  408a00:	4629      	mov	r1, r5
  408a02:	4638      	mov	r0, r7
  408a04:	f7ff ff52 	bl	4088ac <__multiply>
  408a08:	b1b5      	cbz	r5, 408a38 <__pow5mult+0x68>
  408a0a:	686a      	ldr	r2, [r5, #4]
  408a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408a0e:	1064      	asrs	r4, r4, #1
  408a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408a14:	6029      	str	r1, [r5, #0]
  408a16:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  408a1a:	4605      	mov	r5, r0
  408a1c:	d1ea      	bne.n	4089f4 <__pow5mult+0x24>
  408a1e:	4628      	mov	r0, r5
  408a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408a24:	4632      	mov	r2, r6
  408a26:	4631      	mov	r1, r6
  408a28:	4638      	mov	r0, r7
  408a2a:	f7ff ff3f 	bl	4088ac <__multiply>
  408a2e:	6030      	str	r0, [r6, #0]
  408a30:	f8c0 8000 	str.w	r8, [r0]
  408a34:	4606      	mov	r6, r0
  408a36:	e7e0      	b.n	4089fa <__pow5mult+0x2a>
  408a38:	4605      	mov	r5, r0
  408a3a:	e7d9      	b.n	4089f0 <__pow5mult+0x20>
  408a3c:	1e5a      	subs	r2, r3, #1
  408a3e:	4d0b      	ldr	r5, [pc, #44]	; (408a6c <__pow5mult+0x9c>)
  408a40:	2300      	movs	r3, #0
  408a42:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408a46:	f7ff fe97 	bl	408778 <__multadd>
  408a4a:	4605      	mov	r5, r0
  408a4c:	e7c8      	b.n	4089e0 <__pow5mult+0x10>
  408a4e:	2101      	movs	r1, #1
  408a50:	4638      	mov	r0, r7
  408a52:	f7ff fe61 	bl	408718 <_Balloc>
  408a56:	f240 2171 	movw	r1, #625	; 0x271
  408a5a:	2201      	movs	r2, #1
  408a5c:	2300      	movs	r3, #0
  408a5e:	6141      	str	r1, [r0, #20]
  408a60:	6102      	str	r2, [r0, #16]
  408a62:	4606      	mov	r6, r0
  408a64:	64b8      	str	r0, [r7, #72]	; 0x48
  408a66:	6003      	str	r3, [r0, #0]
  408a68:	e7be      	b.n	4089e8 <__pow5mult+0x18>
  408a6a:	bf00      	nop
  408a6c:	0040a560 	.word	0x0040a560

00408a70 <__lshift>:
  408a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408a74:	4691      	mov	r9, r2
  408a76:	690a      	ldr	r2, [r1, #16]
  408a78:	688b      	ldr	r3, [r1, #8]
  408a7a:	ea4f 1469 	mov.w	r4, r9, asr #5
  408a7e:	eb04 0802 	add.w	r8, r4, r2
  408a82:	f108 0501 	add.w	r5, r8, #1
  408a86:	429d      	cmp	r5, r3
  408a88:	460e      	mov	r6, r1
  408a8a:	4607      	mov	r7, r0
  408a8c:	6849      	ldr	r1, [r1, #4]
  408a8e:	dd04      	ble.n	408a9a <__lshift+0x2a>
  408a90:	005b      	lsls	r3, r3, #1
  408a92:	429d      	cmp	r5, r3
  408a94:	f101 0101 	add.w	r1, r1, #1
  408a98:	dcfa      	bgt.n	408a90 <__lshift+0x20>
  408a9a:	4638      	mov	r0, r7
  408a9c:	f7ff fe3c 	bl	408718 <_Balloc>
  408aa0:	2c00      	cmp	r4, #0
  408aa2:	f100 0314 	add.w	r3, r0, #20
  408aa6:	dd06      	ble.n	408ab6 <__lshift+0x46>
  408aa8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  408aac:	2100      	movs	r1, #0
  408aae:	f843 1b04 	str.w	r1, [r3], #4
  408ab2:	429a      	cmp	r2, r3
  408ab4:	d1fb      	bne.n	408aae <__lshift+0x3e>
  408ab6:	6934      	ldr	r4, [r6, #16]
  408ab8:	f106 0114 	add.w	r1, r6, #20
  408abc:	f019 091f 	ands.w	r9, r9, #31
  408ac0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408ac4:	d01d      	beq.n	408b02 <__lshift+0x92>
  408ac6:	f1c9 0c20 	rsb	ip, r9, #32
  408aca:	2200      	movs	r2, #0
  408acc:	680c      	ldr	r4, [r1, #0]
  408ace:	fa04 f409 	lsl.w	r4, r4, r9
  408ad2:	4314      	orrs	r4, r2
  408ad4:	f843 4b04 	str.w	r4, [r3], #4
  408ad8:	f851 2b04 	ldr.w	r2, [r1], #4
  408adc:	458e      	cmp	lr, r1
  408ade:	fa22 f20c 	lsr.w	r2, r2, ip
  408ae2:	d8f3      	bhi.n	408acc <__lshift+0x5c>
  408ae4:	601a      	str	r2, [r3, #0]
  408ae6:	b10a      	cbz	r2, 408aec <__lshift+0x7c>
  408ae8:	f108 0502 	add.w	r5, r8, #2
  408aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408aee:	6872      	ldr	r2, [r6, #4]
  408af0:	3d01      	subs	r5, #1
  408af2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408af6:	6105      	str	r5, [r0, #16]
  408af8:	6031      	str	r1, [r6, #0]
  408afa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  408afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408b02:	3b04      	subs	r3, #4
  408b04:	f851 2b04 	ldr.w	r2, [r1], #4
  408b08:	f843 2f04 	str.w	r2, [r3, #4]!
  408b0c:	458e      	cmp	lr, r1
  408b0e:	d8f9      	bhi.n	408b04 <__lshift+0x94>
  408b10:	e7ec      	b.n	408aec <__lshift+0x7c>
  408b12:	bf00      	nop

00408b14 <__mcmp>:
  408b14:	b430      	push	{r4, r5}
  408b16:	690b      	ldr	r3, [r1, #16]
  408b18:	4605      	mov	r5, r0
  408b1a:	6900      	ldr	r0, [r0, #16]
  408b1c:	1ac0      	subs	r0, r0, r3
  408b1e:	d10f      	bne.n	408b40 <__mcmp+0x2c>
  408b20:	009b      	lsls	r3, r3, #2
  408b22:	3514      	adds	r5, #20
  408b24:	3114      	adds	r1, #20
  408b26:	4419      	add	r1, r3
  408b28:	442b      	add	r3, r5
  408b2a:	e001      	b.n	408b30 <__mcmp+0x1c>
  408b2c:	429d      	cmp	r5, r3
  408b2e:	d207      	bcs.n	408b40 <__mcmp+0x2c>
  408b30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408b34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408b38:	4294      	cmp	r4, r2
  408b3a:	d0f7      	beq.n	408b2c <__mcmp+0x18>
  408b3c:	d302      	bcc.n	408b44 <__mcmp+0x30>
  408b3e:	2001      	movs	r0, #1
  408b40:	bc30      	pop	{r4, r5}
  408b42:	4770      	bx	lr
  408b44:	f04f 30ff 	mov.w	r0, #4294967295
  408b48:	e7fa      	b.n	408b40 <__mcmp+0x2c>
  408b4a:	bf00      	nop

00408b4c <__mdiff>:
  408b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408b50:	690f      	ldr	r7, [r1, #16]
  408b52:	460e      	mov	r6, r1
  408b54:	6911      	ldr	r1, [r2, #16]
  408b56:	1a7f      	subs	r7, r7, r1
  408b58:	2f00      	cmp	r7, #0
  408b5a:	4690      	mov	r8, r2
  408b5c:	d117      	bne.n	408b8e <__mdiff+0x42>
  408b5e:	0089      	lsls	r1, r1, #2
  408b60:	f106 0514 	add.w	r5, r6, #20
  408b64:	f102 0e14 	add.w	lr, r2, #20
  408b68:	186b      	adds	r3, r5, r1
  408b6a:	4471      	add	r1, lr
  408b6c:	e001      	b.n	408b72 <__mdiff+0x26>
  408b6e:	429d      	cmp	r5, r3
  408b70:	d25c      	bcs.n	408c2c <__mdiff+0xe0>
  408b72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408b76:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  408b7a:	42a2      	cmp	r2, r4
  408b7c:	d0f7      	beq.n	408b6e <__mdiff+0x22>
  408b7e:	d25e      	bcs.n	408c3e <__mdiff+0xf2>
  408b80:	4633      	mov	r3, r6
  408b82:	462c      	mov	r4, r5
  408b84:	4646      	mov	r6, r8
  408b86:	4675      	mov	r5, lr
  408b88:	4698      	mov	r8, r3
  408b8a:	2701      	movs	r7, #1
  408b8c:	e005      	b.n	408b9a <__mdiff+0x4e>
  408b8e:	db58      	blt.n	408c42 <__mdiff+0xf6>
  408b90:	f106 0514 	add.w	r5, r6, #20
  408b94:	f108 0414 	add.w	r4, r8, #20
  408b98:	2700      	movs	r7, #0
  408b9a:	6871      	ldr	r1, [r6, #4]
  408b9c:	f7ff fdbc 	bl	408718 <_Balloc>
  408ba0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408ba4:	6936      	ldr	r6, [r6, #16]
  408ba6:	60c7      	str	r7, [r0, #12]
  408ba8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  408bac:	46a6      	mov	lr, r4
  408bae:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408bb2:	f100 0414 	add.w	r4, r0, #20
  408bb6:	2300      	movs	r3, #0
  408bb8:	f85e 1b04 	ldr.w	r1, [lr], #4
  408bbc:	f855 8b04 	ldr.w	r8, [r5], #4
  408bc0:	b28a      	uxth	r2, r1
  408bc2:	fa13 f388 	uxtah	r3, r3, r8
  408bc6:	0c09      	lsrs	r1, r1, #16
  408bc8:	1a9a      	subs	r2, r3, r2
  408bca:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  408bce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408bd2:	b292      	uxth	r2, r2
  408bd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408bd8:	45f4      	cmp	ip, lr
  408bda:	f844 2b04 	str.w	r2, [r4], #4
  408bde:	ea4f 4323 	mov.w	r3, r3, asr #16
  408be2:	d8e9      	bhi.n	408bb8 <__mdiff+0x6c>
  408be4:	42af      	cmp	r7, r5
  408be6:	d917      	bls.n	408c18 <__mdiff+0xcc>
  408be8:	46a4      	mov	ip, r4
  408bea:	46ae      	mov	lr, r5
  408bec:	f85e 2b04 	ldr.w	r2, [lr], #4
  408bf0:	fa13 f382 	uxtah	r3, r3, r2
  408bf4:	1419      	asrs	r1, r3, #16
  408bf6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  408bfa:	b29b      	uxth	r3, r3
  408bfc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408c00:	4577      	cmp	r7, lr
  408c02:	f84c 2b04 	str.w	r2, [ip], #4
  408c06:	ea4f 4321 	mov.w	r3, r1, asr #16
  408c0a:	d8ef      	bhi.n	408bec <__mdiff+0xa0>
  408c0c:	43ed      	mvns	r5, r5
  408c0e:	442f      	add	r7, r5
  408c10:	f027 0703 	bic.w	r7, r7, #3
  408c14:	3704      	adds	r7, #4
  408c16:	443c      	add	r4, r7
  408c18:	3c04      	subs	r4, #4
  408c1a:	b922      	cbnz	r2, 408c26 <__mdiff+0xda>
  408c1c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408c20:	3e01      	subs	r6, #1
  408c22:	2b00      	cmp	r3, #0
  408c24:	d0fa      	beq.n	408c1c <__mdiff+0xd0>
  408c26:	6106      	str	r6, [r0, #16]
  408c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c2c:	2100      	movs	r1, #0
  408c2e:	f7ff fd73 	bl	408718 <_Balloc>
  408c32:	2201      	movs	r2, #1
  408c34:	2300      	movs	r3, #0
  408c36:	6102      	str	r2, [r0, #16]
  408c38:	6143      	str	r3, [r0, #20]
  408c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c3e:	4674      	mov	r4, lr
  408c40:	e7ab      	b.n	408b9a <__mdiff+0x4e>
  408c42:	4633      	mov	r3, r6
  408c44:	f106 0414 	add.w	r4, r6, #20
  408c48:	f102 0514 	add.w	r5, r2, #20
  408c4c:	4616      	mov	r6, r2
  408c4e:	2701      	movs	r7, #1
  408c50:	4698      	mov	r8, r3
  408c52:	e7a2      	b.n	408b9a <__mdiff+0x4e>

00408c54 <__d2b>:
  408c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408c58:	b082      	sub	sp, #8
  408c5a:	2101      	movs	r1, #1
  408c5c:	461c      	mov	r4, r3
  408c5e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408c62:	4615      	mov	r5, r2
  408c64:	9e08      	ldr	r6, [sp, #32]
  408c66:	f7ff fd57 	bl	408718 <_Balloc>
  408c6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  408c6e:	4680      	mov	r8, r0
  408c70:	b10f      	cbz	r7, 408c76 <__d2b+0x22>
  408c72:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408c76:	9401      	str	r4, [sp, #4]
  408c78:	b31d      	cbz	r5, 408cc2 <__d2b+0x6e>
  408c7a:	a802      	add	r0, sp, #8
  408c7c:	f840 5d08 	str.w	r5, [r0, #-8]!
  408c80:	f7ff fdda 	bl	408838 <__lo0bits>
  408c84:	2800      	cmp	r0, #0
  408c86:	d134      	bne.n	408cf2 <__d2b+0x9e>
  408c88:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408c8c:	f8c8 2014 	str.w	r2, [r8, #20]
  408c90:	2b00      	cmp	r3, #0
  408c92:	bf0c      	ite	eq
  408c94:	2101      	moveq	r1, #1
  408c96:	2102      	movne	r1, #2
  408c98:	f8c8 3018 	str.w	r3, [r8, #24]
  408c9c:	f8c8 1010 	str.w	r1, [r8, #16]
  408ca0:	b9df      	cbnz	r7, 408cda <__d2b+0x86>
  408ca2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408ca6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  408caa:	6030      	str	r0, [r6, #0]
  408cac:	6918      	ldr	r0, [r3, #16]
  408cae:	f7ff fda3 	bl	4087f8 <__hi0bits>
  408cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408cb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408cb8:	6018      	str	r0, [r3, #0]
  408cba:	4640      	mov	r0, r8
  408cbc:	b002      	add	sp, #8
  408cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408cc2:	a801      	add	r0, sp, #4
  408cc4:	f7ff fdb8 	bl	408838 <__lo0bits>
  408cc8:	9b01      	ldr	r3, [sp, #4]
  408cca:	f8c8 3014 	str.w	r3, [r8, #20]
  408cce:	2101      	movs	r1, #1
  408cd0:	3020      	adds	r0, #32
  408cd2:	f8c8 1010 	str.w	r1, [r8, #16]
  408cd6:	2f00      	cmp	r7, #0
  408cd8:	d0e3      	beq.n	408ca2 <__d2b+0x4e>
  408cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408cdc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408ce0:	4407      	add	r7, r0
  408ce2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408ce6:	6037      	str	r7, [r6, #0]
  408ce8:	6018      	str	r0, [r3, #0]
  408cea:	4640      	mov	r0, r8
  408cec:	b002      	add	sp, #8
  408cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408cf2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408cf6:	f1c0 0220 	rsb	r2, r0, #32
  408cfa:	fa03 f202 	lsl.w	r2, r3, r2
  408cfe:	430a      	orrs	r2, r1
  408d00:	40c3      	lsrs	r3, r0
  408d02:	9301      	str	r3, [sp, #4]
  408d04:	f8c8 2014 	str.w	r2, [r8, #20]
  408d08:	e7c2      	b.n	408c90 <__d2b+0x3c>
  408d0a:	bf00      	nop

00408d0c <_realloc_r>:
  408d0c:	2900      	cmp	r1, #0
  408d0e:	f000 8095 	beq.w	408e3c <_realloc_r+0x130>
  408d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d16:	460d      	mov	r5, r1
  408d18:	4616      	mov	r6, r2
  408d1a:	b083      	sub	sp, #12
  408d1c:	4680      	mov	r8, r0
  408d1e:	f106 070b 	add.w	r7, r6, #11
  408d22:	f7fb fa55 	bl	4041d0 <__malloc_lock>
  408d26:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408d2a:	2f16      	cmp	r7, #22
  408d2c:	f02e 0403 	bic.w	r4, lr, #3
  408d30:	f1a5 0908 	sub.w	r9, r5, #8
  408d34:	d83c      	bhi.n	408db0 <_realloc_r+0xa4>
  408d36:	2210      	movs	r2, #16
  408d38:	4617      	mov	r7, r2
  408d3a:	42be      	cmp	r6, r7
  408d3c:	d83d      	bhi.n	408dba <_realloc_r+0xae>
  408d3e:	4294      	cmp	r4, r2
  408d40:	da43      	bge.n	408dca <_realloc_r+0xbe>
  408d42:	4bc4      	ldr	r3, [pc, #784]	; (409054 <_realloc_r+0x348>)
  408d44:	6899      	ldr	r1, [r3, #8]
  408d46:	eb09 0004 	add.w	r0, r9, r4
  408d4a:	4288      	cmp	r0, r1
  408d4c:	f000 80b4 	beq.w	408eb8 <_realloc_r+0x1ac>
  408d50:	6843      	ldr	r3, [r0, #4]
  408d52:	f023 0101 	bic.w	r1, r3, #1
  408d56:	4401      	add	r1, r0
  408d58:	6849      	ldr	r1, [r1, #4]
  408d5a:	07c9      	lsls	r1, r1, #31
  408d5c:	d54c      	bpl.n	408df8 <_realloc_r+0xec>
  408d5e:	f01e 0f01 	tst.w	lr, #1
  408d62:	f000 809b 	beq.w	408e9c <_realloc_r+0x190>
  408d66:	4631      	mov	r1, r6
  408d68:	4640      	mov	r0, r8
  408d6a:	f7fa fe99 	bl	403aa0 <_malloc_r>
  408d6e:	4606      	mov	r6, r0
  408d70:	2800      	cmp	r0, #0
  408d72:	d03a      	beq.n	408dea <_realloc_r+0xde>
  408d74:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408d78:	f023 0301 	bic.w	r3, r3, #1
  408d7c:	444b      	add	r3, r9
  408d7e:	f1a0 0208 	sub.w	r2, r0, #8
  408d82:	429a      	cmp	r2, r3
  408d84:	f000 8121 	beq.w	408fca <_realloc_r+0x2be>
  408d88:	1f22      	subs	r2, r4, #4
  408d8a:	2a24      	cmp	r2, #36	; 0x24
  408d8c:	f200 8107 	bhi.w	408f9e <_realloc_r+0x292>
  408d90:	2a13      	cmp	r2, #19
  408d92:	f200 80db 	bhi.w	408f4c <_realloc_r+0x240>
  408d96:	4603      	mov	r3, r0
  408d98:	462a      	mov	r2, r5
  408d9a:	6811      	ldr	r1, [r2, #0]
  408d9c:	6019      	str	r1, [r3, #0]
  408d9e:	6851      	ldr	r1, [r2, #4]
  408da0:	6059      	str	r1, [r3, #4]
  408da2:	6892      	ldr	r2, [r2, #8]
  408da4:	609a      	str	r2, [r3, #8]
  408da6:	4629      	mov	r1, r5
  408da8:	4640      	mov	r0, r8
  408daa:	f7ff f8c1 	bl	407f30 <_free_r>
  408dae:	e01c      	b.n	408dea <_realloc_r+0xde>
  408db0:	f027 0707 	bic.w	r7, r7, #7
  408db4:	2f00      	cmp	r7, #0
  408db6:	463a      	mov	r2, r7
  408db8:	dabf      	bge.n	408d3a <_realloc_r+0x2e>
  408dba:	2600      	movs	r6, #0
  408dbc:	230c      	movs	r3, #12
  408dbe:	4630      	mov	r0, r6
  408dc0:	f8c8 3000 	str.w	r3, [r8]
  408dc4:	b003      	add	sp, #12
  408dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408dca:	462e      	mov	r6, r5
  408dcc:	1be3      	subs	r3, r4, r7
  408dce:	2b0f      	cmp	r3, #15
  408dd0:	d81e      	bhi.n	408e10 <_realloc_r+0x104>
  408dd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408dd6:	f003 0301 	and.w	r3, r3, #1
  408dda:	4323      	orrs	r3, r4
  408ddc:	444c      	add	r4, r9
  408dde:	f8c9 3004 	str.w	r3, [r9, #4]
  408de2:	6863      	ldr	r3, [r4, #4]
  408de4:	f043 0301 	orr.w	r3, r3, #1
  408de8:	6063      	str	r3, [r4, #4]
  408dea:	4640      	mov	r0, r8
  408dec:	f7fb f9f6 	bl	4041dc <__malloc_unlock>
  408df0:	4630      	mov	r0, r6
  408df2:	b003      	add	sp, #12
  408df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408df8:	f023 0303 	bic.w	r3, r3, #3
  408dfc:	18e1      	adds	r1, r4, r3
  408dfe:	4291      	cmp	r1, r2
  408e00:	db1f      	blt.n	408e42 <_realloc_r+0x136>
  408e02:	68c3      	ldr	r3, [r0, #12]
  408e04:	6882      	ldr	r2, [r0, #8]
  408e06:	462e      	mov	r6, r5
  408e08:	60d3      	str	r3, [r2, #12]
  408e0a:	460c      	mov	r4, r1
  408e0c:	609a      	str	r2, [r3, #8]
  408e0e:	e7dd      	b.n	408dcc <_realloc_r+0xc0>
  408e10:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408e14:	eb09 0107 	add.w	r1, r9, r7
  408e18:	f002 0201 	and.w	r2, r2, #1
  408e1c:	444c      	add	r4, r9
  408e1e:	f043 0301 	orr.w	r3, r3, #1
  408e22:	4317      	orrs	r7, r2
  408e24:	f8c9 7004 	str.w	r7, [r9, #4]
  408e28:	604b      	str	r3, [r1, #4]
  408e2a:	6863      	ldr	r3, [r4, #4]
  408e2c:	f043 0301 	orr.w	r3, r3, #1
  408e30:	3108      	adds	r1, #8
  408e32:	6063      	str	r3, [r4, #4]
  408e34:	4640      	mov	r0, r8
  408e36:	f7ff f87b 	bl	407f30 <_free_r>
  408e3a:	e7d6      	b.n	408dea <_realloc_r+0xde>
  408e3c:	4611      	mov	r1, r2
  408e3e:	f7fa be2f 	b.w	403aa0 <_malloc_r>
  408e42:	f01e 0f01 	tst.w	lr, #1
  408e46:	d18e      	bne.n	408d66 <_realloc_r+0x5a>
  408e48:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408e4c:	eba9 0a01 	sub.w	sl, r9, r1
  408e50:	f8da 1004 	ldr.w	r1, [sl, #4]
  408e54:	f021 0103 	bic.w	r1, r1, #3
  408e58:	440b      	add	r3, r1
  408e5a:	4423      	add	r3, r4
  408e5c:	4293      	cmp	r3, r2
  408e5e:	db25      	blt.n	408eac <_realloc_r+0x1a0>
  408e60:	68c2      	ldr	r2, [r0, #12]
  408e62:	6881      	ldr	r1, [r0, #8]
  408e64:	4656      	mov	r6, sl
  408e66:	60ca      	str	r2, [r1, #12]
  408e68:	6091      	str	r1, [r2, #8]
  408e6a:	f8da 100c 	ldr.w	r1, [sl, #12]
  408e6e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408e72:	1f22      	subs	r2, r4, #4
  408e74:	2a24      	cmp	r2, #36	; 0x24
  408e76:	60c1      	str	r1, [r0, #12]
  408e78:	6088      	str	r0, [r1, #8]
  408e7a:	f200 8094 	bhi.w	408fa6 <_realloc_r+0x29a>
  408e7e:	2a13      	cmp	r2, #19
  408e80:	d96f      	bls.n	408f62 <_realloc_r+0x256>
  408e82:	6829      	ldr	r1, [r5, #0]
  408e84:	f8ca 1008 	str.w	r1, [sl, #8]
  408e88:	6869      	ldr	r1, [r5, #4]
  408e8a:	f8ca 100c 	str.w	r1, [sl, #12]
  408e8e:	2a1b      	cmp	r2, #27
  408e90:	f200 80a2 	bhi.w	408fd8 <_realloc_r+0x2cc>
  408e94:	3508      	adds	r5, #8
  408e96:	f10a 0210 	add.w	r2, sl, #16
  408e9a:	e063      	b.n	408f64 <_realloc_r+0x258>
  408e9c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408ea0:	eba9 0a03 	sub.w	sl, r9, r3
  408ea4:	f8da 1004 	ldr.w	r1, [sl, #4]
  408ea8:	f021 0103 	bic.w	r1, r1, #3
  408eac:	1863      	adds	r3, r4, r1
  408eae:	4293      	cmp	r3, r2
  408eb0:	f6ff af59 	blt.w	408d66 <_realloc_r+0x5a>
  408eb4:	4656      	mov	r6, sl
  408eb6:	e7d8      	b.n	408e6a <_realloc_r+0x15e>
  408eb8:	6841      	ldr	r1, [r0, #4]
  408eba:	f021 0b03 	bic.w	fp, r1, #3
  408ebe:	44a3      	add	fp, r4
  408ec0:	f107 0010 	add.w	r0, r7, #16
  408ec4:	4583      	cmp	fp, r0
  408ec6:	da56      	bge.n	408f76 <_realloc_r+0x26a>
  408ec8:	f01e 0f01 	tst.w	lr, #1
  408ecc:	f47f af4b 	bne.w	408d66 <_realloc_r+0x5a>
  408ed0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408ed4:	eba9 0a01 	sub.w	sl, r9, r1
  408ed8:	f8da 1004 	ldr.w	r1, [sl, #4]
  408edc:	f021 0103 	bic.w	r1, r1, #3
  408ee0:	448b      	add	fp, r1
  408ee2:	4558      	cmp	r0, fp
  408ee4:	dce2      	bgt.n	408eac <_realloc_r+0x1a0>
  408ee6:	4656      	mov	r6, sl
  408ee8:	f8da 100c 	ldr.w	r1, [sl, #12]
  408eec:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408ef0:	1f22      	subs	r2, r4, #4
  408ef2:	2a24      	cmp	r2, #36	; 0x24
  408ef4:	60c1      	str	r1, [r0, #12]
  408ef6:	6088      	str	r0, [r1, #8]
  408ef8:	f200 808f 	bhi.w	40901a <_realloc_r+0x30e>
  408efc:	2a13      	cmp	r2, #19
  408efe:	f240 808a 	bls.w	409016 <_realloc_r+0x30a>
  408f02:	6829      	ldr	r1, [r5, #0]
  408f04:	f8ca 1008 	str.w	r1, [sl, #8]
  408f08:	6869      	ldr	r1, [r5, #4]
  408f0a:	f8ca 100c 	str.w	r1, [sl, #12]
  408f0e:	2a1b      	cmp	r2, #27
  408f10:	f200 808a 	bhi.w	409028 <_realloc_r+0x31c>
  408f14:	3508      	adds	r5, #8
  408f16:	f10a 0210 	add.w	r2, sl, #16
  408f1a:	6829      	ldr	r1, [r5, #0]
  408f1c:	6011      	str	r1, [r2, #0]
  408f1e:	6869      	ldr	r1, [r5, #4]
  408f20:	6051      	str	r1, [r2, #4]
  408f22:	68a9      	ldr	r1, [r5, #8]
  408f24:	6091      	str	r1, [r2, #8]
  408f26:	eb0a 0107 	add.w	r1, sl, r7
  408f2a:	ebab 0207 	sub.w	r2, fp, r7
  408f2e:	f042 0201 	orr.w	r2, r2, #1
  408f32:	6099      	str	r1, [r3, #8]
  408f34:	604a      	str	r2, [r1, #4]
  408f36:	f8da 3004 	ldr.w	r3, [sl, #4]
  408f3a:	f003 0301 	and.w	r3, r3, #1
  408f3e:	431f      	orrs	r7, r3
  408f40:	4640      	mov	r0, r8
  408f42:	f8ca 7004 	str.w	r7, [sl, #4]
  408f46:	f7fb f949 	bl	4041dc <__malloc_unlock>
  408f4a:	e751      	b.n	408df0 <_realloc_r+0xe4>
  408f4c:	682b      	ldr	r3, [r5, #0]
  408f4e:	6003      	str	r3, [r0, #0]
  408f50:	686b      	ldr	r3, [r5, #4]
  408f52:	6043      	str	r3, [r0, #4]
  408f54:	2a1b      	cmp	r2, #27
  408f56:	d82d      	bhi.n	408fb4 <_realloc_r+0x2a8>
  408f58:	f100 0308 	add.w	r3, r0, #8
  408f5c:	f105 0208 	add.w	r2, r5, #8
  408f60:	e71b      	b.n	408d9a <_realloc_r+0x8e>
  408f62:	4632      	mov	r2, r6
  408f64:	6829      	ldr	r1, [r5, #0]
  408f66:	6011      	str	r1, [r2, #0]
  408f68:	6869      	ldr	r1, [r5, #4]
  408f6a:	6051      	str	r1, [r2, #4]
  408f6c:	68a9      	ldr	r1, [r5, #8]
  408f6e:	6091      	str	r1, [r2, #8]
  408f70:	461c      	mov	r4, r3
  408f72:	46d1      	mov	r9, sl
  408f74:	e72a      	b.n	408dcc <_realloc_r+0xc0>
  408f76:	eb09 0107 	add.w	r1, r9, r7
  408f7a:	ebab 0b07 	sub.w	fp, fp, r7
  408f7e:	f04b 0201 	orr.w	r2, fp, #1
  408f82:	6099      	str	r1, [r3, #8]
  408f84:	604a      	str	r2, [r1, #4]
  408f86:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408f8a:	f003 0301 	and.w	r3, r3, #1
  408f8e:	431f      	orrs	r7, r3
  408f90:	4640      	mov	r0, r8
  408f92:	f845 7c04 	str.w	r7, [r5, #-4]
  408f96:	f7fb f921 	bl	4041dc <__malloc_unlock>
  408f9a:	462e      	mov	r6, r5
  408f9c:	e728      	b.n	408df0 <_realloc_r+0xe4>
  408f9e:	4629      	mov	r1, r5
  408fa0:	f7ff fb56 	bl	408650 <memmove>
  408fa4:	e6ff      	b.n	408da6 <_realloc_r+0x9a>
  408fa6:	4629      	mov	r1, r5
  408fa8:	4630      	mov	r0, r6
  408faa:	461c      	mov	r4, r3
  408fac:	46d1      	mov	r9, sl
  408fae:	f7ff fb4f 	bl	408650 <memmove>
  408fb2:	e70b      	b.n	408dcc <_realloc_r+0xc0>
  408fb4:	68ab      	ldr	r3, [r5, #8]
  408fb6:	6083      	str	r3, [r0, #8]
  408fb8:	68eb      	ldr	r3, [r5, #12]
  408fba:	60c3      	str	r3, [r0, #12]
  408fbc:	2a24      	cmp	r2, #36	; 0x24
  408fbe:	d017      	beq.n	408ff0 <_realloc_r+0x2e4>
  408fc0:	f100 0310 	add.w	r3, r0, #16
  408fc4:	f105 0210 	add.w	r2, r5, #16
  408fc8:	e6e7      	b.n	408d9a <_realloc_r+0x8e>
  408fca:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408fce:	f023 0303 	bic.w	r3, r3, #3
  408fd2:	441c      	add	r4, r3
  408fd4:	462e      	mov	r6, r5
  408fd6:	e6f9      	b.n	408dcc <_realloc_r+0xc0>
  408fd8:	68a9      	ldr	r1, [r5, #8]
  408fda:	f8ca 1010 	str.w	r1, [sl, #16]
  408fde:	68e9      	ldr	r1, [r5, #12]
  408fe0:	f8ca 1014 	str.w	r1, [sl, #20]
  408fe4:	2a24      	cmp	r2, #36	; 0x24
  408fe6:	d00c      	beq.n	409002 <_realloc_r+0x2f6>
  408fe8:	3510      	adds	r5, #16
  408fea:	f10a 0218 	add.w	r2, sl, #24
  408fee:	e7b9      	b.n	408f64 <_realloc_r+0x258>
  408ff0:	692b      	ldr	r3, [r5, #16]
  408ff2:	6103      	str	r3, [r0, #16]
  408ff4:	696b      	ldr	r3, [r5, #20]
  408ff6:	6143      	str	r3, [r0, #20]
  408ff8:	f105 0218 	add.w	r2, r5, #24
  408ffc:	f100 0318 	add.w	r3, r0, #24
  409000:	e6cb      	b.n	408d9a <_realloc_r+0x8e>
  409002:	692a      	ldr	r2, [r5, #16]
  409004:	f8ca 2018 	str.w	r2, [sl, #24]
  409008:	696a      	ldr	r2, [r5, #20]
  40900a:	f8ca 201c 	str.w	r2, [sl, #28]
  40900e:	3518      	adds	r5, #24
  409010:	f10a 0220 	add.w	r2, sl, #32
  409014:	e7a6      	b.n	408f64 <_realloc_r+0x258>
  409016:	4632      	mov	r2, r6
  409018:	e77f      	b.n	408f1a <_realloc_r+0x20e>
  40901a:	4629      	mov	r1, r5
  40901c:	4630      	mov	r0, r6
  40901e:	9301      	str	r3, [sp, #4]
  409020:	f7ff fb16 	bl	408650 <memmove>
  409024:	9b01      	ldr	r3, [sp, #4]
  409026:	e77e      	b.n	408f26 <_realloc_r+0x21a>
  409028:	68a9      	ldr	r1, [r5, #8]
  40902a:	f8ca 1010 	str.w	r1, [sl, #16]
  40902e:	68e9      	ldr	r1, [r5, #12]
  409030:	f8ca 1014 	str.w	r1, [sl, #20]
  409034:	2a24      	cmp	r2, #36	; 0x24
  409036:	d003      	beq.n	409040 <_realloc_r+0x334>
  409038:	3510      	adds	r5, #16
  40903a:	f10a 0218 	add.w	r2, sl, #24
  40903e:	e76c      	b.n	408f1a <_realloc_r+0x20e>
  409040:	692a      	ldr	r2, [r5, #16]
  409042:	f8ca 2018 	str.w	r2, [sl, #24]
  409046:	696a      	ldr	r2, [r5, #20]
  409048:	f8ca 201c 	str.w	r2, [sl, #28]
  40904c:	3518      	adds	r5, #24
  40904e:	f10a 0220 	add.w	r2, sl, #32
  409052:	e762      	b.n	408f1a <_realloc_r+0x20e>
  409054:	20400438 	.word	0x20400438

00409058 <__sread>:
  409058:	b510      	push	{r4, lr}
  40905a:	460c      	mov	r4, r1
  40905c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409060:	f000 faa4 	bl	4095ac <_read_r>
  409064:	2800      	cmp	r0, #0
  409066:	db03      	blt.n	409070 <__sread+0x18>
  409068:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40906a:	4403      	add	r3, r0
  40906c:	6523      	str	r3, [r4, #80]	; 0x50
  40906e:	bd10      	pop	{r4, pc}
  409070:	89a3      	ldrh	r3, [r4, #12]
  409072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409076:	81a3      	strh	r3, [r4, #12]
  409078:	bd10      	pop	{r4, pc}
  40907a:	bf00      	nop

0040907c <__swrite>:
  40907c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409080:	4616      	mov	r6, r2
  409082:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409086:	461f      	mov	r7, r3
  409088:	05d3      	lsls	r3, r2, #23
  40908a:	460c      	mov	r4, r1
  40908c:	4605      	mov	r5, r0
  40908e:	d507      	bpl.n	4090a0 <__swrite+0x24>
  409090:	2200      	movs	r2, #0
  409092:	2302      	movs	r3, #2
  409094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409098:	f000 fa72 	bl	409580 <_lseek_r>
  40909c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4090a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4090a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4090a8:	81a2      	strh	r2, [r4, #12]
  4090aa:	463b      	mov	r3, r7
  4090ac:	4632      	mov	r2, r6
  4090ae:	4628      	mov	r0, r5
  4090b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4090b4:	f000 b922 	b.w	4092fc <_write_r>

004090b8 <__sseek>:
  4090b8:	b510      	push	{r4, lr}
  4090ba:	460c      	mov	r4, r1
  4090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4090c0:	f000 fa5e 	bl	409580 <_lseek_r>
  4090c4:	89a3      	ldrh	r3, [r4, #12]
  4090c6:	1c42      	adds	r2, r0, #1
  4090c8:	bf0e      	itee	eq
  4090ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4090ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4090d2:	6520      	strne	r0, [r4, #80]	; 0x50
  4090d4:	81a3      	strh	r3, [r4, #12]
  4090d6:	bd10      	pop	{r4, pc}

004090d8 <__sclose>:
  4090d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4090dc:	f000 b9b6 	b.w	40944c <_close_r>

004090e0 <__ssprint_r>:
  4090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4090e4:	6893      	ldr	r3, [r2, #8]
  4090e6:	b083      	sub	sp, #12
  4090e8:	4690      	mov	r8, r2
  4090ea:	2b00      	cmp	r3, #0
  4090ec:	d070      	beq.n	4091d0 <__ssprint_r+0xf0>
  4090ee:	4682      	mov	sl, r0
  4090f0:	460c      	mov	r4, r1
  4090f2:	6817      	ldr	r7, [r2, #0]
  4090f4:	688d      	ldr	r5, [r1, #8]
  4090f6:	6808      	ldr	r0, [r1, #0]
  4090f8:	e042      	b.n	409180 <__ssprint_r+0xa0>
  4090fa:	89a3      	ldrh	r3, [r4, #12]
  4090fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409100:	d02e      	beq.n	409160 <__ssprint_r+0x80>
  409102:	6965      	ldr	r5, [r4, #20]
  409104:	6921      	ldr	r1, [r4, #16]
  409106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40910a:	eba0 0b01 	sub.w	fp, r0, r1
  40910e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409112:	f10b 0001 	add.w	r0, fp, #1
  409116:	106d      	asrs	r5, r5, #1
  409118:	4430      	add	r0, r6
  40911a:	42a8      	cmp	r0, r5
  40911c:	462a      	mov	r2, r5
  40911e:	bf84      	itt	hi
  409120:	4605      	movhi	r5, r0
  409122:	462a      	movhi	r2, r5
  409124:	055b      	lsls	r3, r3, #21
  409126:	d538      	bpl.n	40919a <__ssprint_r+0xba>
  409128:	4611      	mov	r1, r2
  40912a:	4650      	mov	r0, sl
  40912c:	f7fa fcb8 	bl	403aa0 <_malloc_r>
  409130:	2800      	cmp	r0, #0
  409132:	d03c      	beq.n	4091ae <__ssprint_r+0xce>
  409134:	465a      	mov	r2, fp
  409136:	6921      	ldr	r1, [r4, #16]
  409138:	9001      	str	r0, [sp, #4]
  40913a:	f7fa ff61 	bl	404000 <memcpy>
  40913e:	89a2      	ldrh	r2, [r4, #12]
  409140:	9b01      	ldr	r3, [sp, #4]
  409142:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40914a:	81a2      	strh	r2, [r4, #12]
  40914c:	eba5 020b 	sub.w	r2, r5, fp
  409150:	eb03 000b 	add.w	r0, r3, fp
  409154:	6165      	str	r5, [r4, #20]
  409156:	6123      	str	r3, [r4, #16]
  409158:	6020      	str	r0, [r4, #0]
  40915a:	60a2      	str	r2, [r4, #8]
  40915c:	4635      	mov	r5, r6
  40915e:	46b3      	mov	fp, r6
  409160:	465a      	mov	r2, fp
  409162:	4649      	mov	r1, r9
  409164:	f7ff fa74 	bl	408650 <memmove>
  409168:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40916c:	68a2      	ldr	r2, [r4, #8]
  40916e:	6820      	ldr	r0, [r4, #0]
  409170:	1b55      	subs	r5, r2, r5
  409172:	4458      	add	r0, fp
  409174:	1b9e      	subs	r6, r3, r6
  409176:	60a5      	str	r5, [r4, #8]
  409178:	6020      	str	r0, [r4, #0]
  40917a:	f8c8 6008 	str.w	r6, [r8, #8]
  40917e:	b33e      	cbz	r6, 4091d0 <__ssprint_r+0xf0>
  409180:	687e      	ldr	r6, [r7, #4]
  409182:	463b      	mov	r3, r7
  409184:	3708      	adds	r7, #8
  409186:	2e00      	cmp	r6, #0
  409188:	d0fa      	beq.n	409180 <__ssprint_r+0xa0>
  40918a:	42ae      	cmp	r6, r5
  40918c:	f8d3 9000 	ldr.w	r9, [r3]
  409190:	46ab      	mov	fp, r5
  409192:	d2b2      	bcs.n	4090fa <__ssprint_r+0x1a>
  409194:	4635      	mov	r5, r6
  409196:	46b3      	mov	fp, r6
  409198:	e7e2      	b.n	409160 <__ssprint_r+0x80>
  40919a:	4650      	mov	r0, sl
  40919c:	f7ff fdb6 	bl	408d0c <_realloc_r>
  4091a0:	4603      	mov	r3, r0
  4091a2:	2800      	cmp	r0, #0
  4091a4:	d1d2      	bne.n	40914c <__ssprint_r+0x6c>
  4091a6:	6921      	ldr	r1, [r4, #16]
  4091a8:	4650      	mov	r0, sl
  4091aa:	f7fe fec1 	bl	407f30 <_free_r>
  4091ae:	230c      	movs	r3, #12
  4091b0:	f8ca 3000 	str.w	r3, [sl]
  4091b4:	89a3      	ldrh	r3, [r4, #12]
  4091b6:	2200      	movs	r2, #0
  4091b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4091bc:	f04f 30ff 	mov.w	r0, #4294967295
  4091c0:	81a3      	strh	r3, [r4, #12]
  4091c2:	f8c8 2008 	str.w	r2, [r8, #8]
  4091c6:	f8c8 2004 	str.w	r2, [r8, #4]
  4091ca:	b003      	add	sp, #12
  4091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091d0:	2000      	movs	r0, #0
  4091d2:	f8c8 0004 	str.w	r0, [r8, #4]
  4091d6:	b003      	add	sp, #12
  4091d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004091dc <__swbuf_r>:
  4091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4091de:	460d      	mov	r5, r1
  4091e0:	4614      	mov	r4, r2
  4091e2:	4606      	mov	r6, r0
  4091e4:	b110      	cbz	r0, 4091ec <__swbuf_r+0x10>
  4091e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4091e8:	2b00      	cmp	r3, #0
  4091ea:	d04b      	beq.n	409284 <__swbuf_r+0xa8>
  4091ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4091f0:	69a3      	ldr	r3, [r4, #24]
  4091f2:	60a3      	str	r3, [r4, #8]
  4091f4:	b291      	uxth	r1, r2
  4091f6:	0708      	lsls	r0, r1, #28
  4091f8:	d539      	bpl.n	40926e <__swbuf_r+0x92>
  4091fa:	6923      	ldr	r3, [r4, #16]
  4091fc:	2b00      	cmp	r3, #0
  4091fe:	d036      	beq.n	40926e <__swbuf_r+0x92>
  409200:	b2ed      	uxtb	r5, r5
  409202:	0489      	lsls	r1, r1, #18
  409204:	462f      	mov	r7, r5
  409206:	d515      	bpl.n	409234 <__swbuf_r+0x58>
  409208:	6822      	ldr	r2, [r4, #0]
  40920a:	6961      	ldr	r1, [r4, #20]
  40920c:	1ad3      	subs	r3, r2, r3
  40920e:	428b      	cmp	r3, r1
  409210:	da1c      	bge.n	40924c <__swbuf_r+0x70>
  409212:	3301      	adds	r3, #1
  409214:	68a1      	ldr	r1, [r4, #8]
  409216:	1c50      	adds	r0, r2, #1
  409218:	3901      	subs	r1, #1
  40921a:	60a1      	str	r1, [r4, #8]
  40921c:	6020      	str	r0, [r4, #0]
  40921e:	7015      	strb	r5, [r2, #0]
  409220:	6962      	ldr	r2, [r4, #20]
  409222:	429a      	cmp	r2, r3
  409224:	d01a      	beq.n	40925c <__swbuf_r+0x80>
  409226:	89a3      	ldrh	r3, [r4, #12]
  409228:	07db      	lsls	r3, r3, #31
  40922a:	d501      	bpl.n	409230 <__swbuf_r+0x54>
  40922c:	2d0a      	cmp	r5, #10
  40922e:	d015      	beq.n	40925c <__swbuf_r+0x80>
  409230:	4638      	mov	r0, r7
  409232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409234:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409236:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40923a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40923e:	81a2      	strh	r2, [r4, #12]
  409240:	6822      	ldr	r2, [r4, #0]
  409242:	6661      	str	r1, [r4, #100]	; 0x64
  409244:	6961      	ldr	r1, [r4, #20]
  409246:	1ad3      	subs	r3, r2, r3
  409248:	428b      	cmp	r3, r1
  40924a:	dbe2      	blt.n	409212 <__swbuf_r+0x36>
  40924c:	4621      	mov	r1, r4
  40924e:	4630      	mov	r0, r6
  409250:	f7fe fcf0 	bl	407c34 <_fflush_r>
  409254:	b940      	cbnz	r0, 409268 <__swbuf_r+0x8c>
  409256:	6822      	ldr	r2, [r4, #0]
  409258:	2301      	movs	r3, #1
  40925a:	e7db      	b.n	409214 <__swbuf_r+0x38>
  40925c:	4621      	mov	r1, r4
  40925e:	4630      	mov	r0, r6
  409260:	f7fe fce8 	bl	407c34 <_fflush_r>
  409264:	2800      	cmp	r0, #0
  409266:	d0e3      	beq.n	409230 <__swbuf_r+0x54>
  409268:	f04f 37ff 	mov.w	r7, #4294967295
  40926c:	e7e0      	b.n	409230 <__swbuf_r+0x54>
  40926e:	4621      	mov	r1, r4
  409270:	4630      	mov	r0, r6
  409272:	f7fd fc0b 	bl	406a8c <__swsetup_r>
  409276:	2800      	cmp	r0, #0
  409278:	d1f6      	bne.n	409268 <__swbuf_r+0x8c>
  40927a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40927e:	6923      	ldr	r3, [r4, #16]
  409280:	b291      	uxth	r1, r2
  409282:	e7bd      	b.n	409200 <__swbuf_r+0x24>
  409284:	f7fe fd2e 	bl	407ce4 <__sinit>
  409288:	e7b0      	b.n	4091ec <__swbuf_r+0x10>
  40928a:	bf00      	nop

0040928c <_wcrtomb_r>:
  40928c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40928e:	4606      	mov	r6, r0
  409290:	b085      	sub	sp, #20
  409292:	461f      	mov	r7, r3
  409294:	b189      	cbz	r1, 4092ba <_wcrtomb_r+0x2e>
  409296:	4c10      	ldr	r4, [pc, #64]	; (4092d8 <_wcrtomb_r+0x4c>)
  409298:	4d10      	ldr	r5, [pc, #64]	; (4092dc <_wcrtomb_r+0x50>)
  40929a:	6824      	ldr	r4, [r4, #0]
  40929c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40929e:	2c00      	cmp	r4, #0
  4092a0:	bf08      	it	eq
  4092a2:	462c      	moveq	r4, r5
  4092a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4092a8:	47a0      	blx	r4
  4092aa:	1c43      	adds	r3, r0, #1
  4092ac:	d103      	bne.n	4092b6 <_wcrtomb_r+0x2a>
  4092ae:	2200      	movs	r2, #0
  4092b0:	238a      	movs	r3, #138	; 0x8a
  4092b2:	603a      	str	r2, [r7, #0]
  4092b4:	6033      	str	r3, [r6, #0]
  4092b6:	b005      	add	sp, #20
  4092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4092ba:	460c      	mov	r4, r1
  4092bc:	4906      	ldr	r1, [pc, #24]	; (4092d8 <_wcrtomb_r+0x4c>)
  4092be:	4a07      	ldr	r2, [pc, #28]	; (4092dc <_wcrtomb_r+0x50>)
  4092c0:	6809      	ldr	r1, [r1, #0]
  4092c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4092c4:	2900      	cmp	r1, #0
  4092c6:	bf08      	it	eq
  4092c8:	4611      	moveq	r1, r2
  4092ca:	4622      	mov	r2, r4
  4092cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4092d0:	a901      	add	r1, sp, #4
  4092d2:	47a0      	blx	r4
  4092d4:	e7e9      	b.n	4092aa <_wcrtomb_r+0x1e>
  4092d6:	bf00      	nop
  4092d8:	2040000c 	.word	0x2040000c
  4092dc:	2040084c 	.word	0x2040084c

004092e0 <__ascii_wctomb>:
  4092e0:	b121      	cbz	r1, 4092ec <__ascii_wctomb+0xc>
  4092e2:	2aff      	cmp	r2, #255	; 0xff
  4092e4:	d804      	bhi.n	4092f0 <__ascii_wctomb+0x10>
  4092e6:	700a      	strb	r2, [r1, #0]
  4092e8:	2001      	movs	r0, #1
  4092ea:	4770      	bx	lr
  4092ec:	4608      	mov	r0, r1
  4092ee:	4770      	bx	lr
  4092f0:	238a      	movs	r3, #138	; 0x8a
  4092f2:	6003      	str	r3, [r0, #0]
  4092f4:	f04f 30ff 	mov.w	r0, #4294967295
  4092f8:	4770      	bx	lr
  4092fa:	bf00      	nop

004092fc <_write_r>:
  4092fc:	b570      	push	{r4, r5, r6, lr}
  4092fe:	460d      	mov	r5, r1
  409300:	4c08      	ldr	r4, [pc, #32]	; (409324 <_write_r+0x28>)
  409302:	4611      	mov	r1, r2
  409304:	4606      	mov	r6, r0
  409306:	461a      	mov	r2, r3
  409308:	4628      	mov	r0, r5
  40930a:	2300      	movs	r3, #0
  40930c:	6023      	str	r3, [r4, #0]
  40930e:	f7f6 ffb7 	bl	400280 <_write>
  409312:	1c43      	adds	r3, r0, #1
  409314:	d000      	beq.n	409318 <_write_r+0x1c>
  409316:	bd70      	pop	{r4, r5, r6, pc}
  409318:	6823      	ldr	r3, [r4, #0]
  40931a:	2b00      	cmp	r3, #0
  40931c:	d0fb      	beq.n	409316 <_write_r+0x1a>
  40931e:	6033      	str	r3, [r6, #0]
  409320:	bd70      	pop	{r4, r5, r6, pc}
  409322:	bf00      	nop
  409324:	20400d58 	.word	0x20400d58

00409328 <__register_exitproc>:
  409328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40932c:	4d2c      	ldr	r5, [pc, #176]	; (4093e0 <__register_exitproc+0xb8>)
  40932e:	4606      	mov	r6, r0
  409330:	6828      	ldr	r0, [r5, #0]
  409332:	4698      	mov	r8, r3
  409334:	460f      	mov	r7, r1
  409336:	4691      	mov	r9, r2
  409338:	f7ff f8a2 	bl	408480 <__retarget_lock_acquire_recursive>
  40933c:	4b29      	ldr	r3, [pc, #164]	; (4093e4 <__register_exitproc+0xbc>)
  40933e:	681c      	ldr	r4, [r3, #0]
  409340:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409344:	2b00      	cmp	r3, #0
  409346:	d03e      	beq.n	4093c6 <__register_exitproc+0x9e>
  409348:	685a      	ldr	r2, [r3, #4]
  40934a:	2a1f      	cmp	r2, #31
  40934c:	dc1c      	bgt.n	409388 <__register_exitproc+0x60>
  40934e:	f102 0e01 	add.w	lr, r2, #1
  409352:	b176      	cbz	r6, 409372 <__register_exitproc+0x4a>
  409354:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409358:	2401      	movs	r4, #1
  40935a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40935e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409362:	4094      	lsls	r4, r2
  409364:	4320      	orrs	r0, r4
  409366:	2e02      	cmp	r6, #2
  409368:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40936c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409370:	d023      	beq.n	4093ba <__register_exitproc+0x92>
  409372:	3202      	adds	r2, #2
  409374:	f8c3 e004 	str.w	lr, [r3, #4]
  409378:	6828      	ldr	r0, [r5, #0]
  40937a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40937e:	f7ff f881 	bl	408484 <__retarget_lock_release_recursive>
  409382:	2000      	movs	r0, #0
  409384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409388:	4b17      	ldr	r3, [pc, #92]	; (4093e8 <__register_exitproc+0xc0>)
  40938a:	b30b      	cbz	r3, 4093d0 <__register_exitproc+0xa8>
  40938c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409390:	f7fa fb76 	bl	403a80 <malloc>
  409394:	4603      	mov	r3, r0
  409396:	b1d8      	cbz	r0, 4093d0 <__register_exitproc+0xa8>
  409398:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40939c:	6002      	str	r2, [r0, #0]
  40939e:	2100      	movs	r1, #0
  4093a0:	6041      	str	r1, [r0, #4]
  4093a2:	460a      	mov	r2, r1
  4093a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4093a8:	f04f 0e01 	mov.w	lr, #1
  4093ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4093b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4093b4:	2e00      	cmp	r6, #0
  4093b6:	d0dc      	beq.n	409372 <__register_exitproc+0x4a>
  4093b8:	e7cc      	b.n	409354 <__register_exitproc+0x2c>
  4093ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4093be:	430c      	orrs	r4, r1
  4093c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4093c4:	e7d5      	b.n	409372 <__register_exitproc+0x4a>
  4093c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4093ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4093ce:	e7bb      	b.n	409348 <__register_exitproc+0x20>
  4093d0:	6828      	ldr	r0, [r5, #0]
  4093d2:	f7ff f857 	bl	408484 <__retarget_lock_release_recursive>
  4093d6:	f04f 30ff 	mov.w	r0, #4294967295
  4093da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4093de:	bf00      	nop
  4093e0:	20400848 	.word	0x20400848
  4093e4:	0040a3c8 	.word	0x0040a3c8
  4093e8:	00403a81 	.word	0x00403a81

004093ec <_calloc_r>:
  4093ec:	b510      	push	{r4, lr}
  4093ee:	fb02 f101 	mul.w	r1, r2, r1
  4093f2:	f7fa fb55 	bl	403aa0 <_malloc_r>
  4093f6:	4604      	mov	r4, r0
  4093f8:	b1d8      	cbz	r0, 409432 <_calloc_r+0x46>
  4093fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4093fe:	f022 0203 	bic.w	r2, r2, #3
  409402:	3a04      	subs	r2, #4
  409404:	2a24      	cmp	r2, #36	; 0x24
  409406:	d818      	bhi.n	40943a <_calloc_r+0x4e>
  409408:	2a13      	cmp	r2, #19
  40940a:	d914      	bls.n	409436 <_calloc_r+0x4a>
  40940c:	2300      	movs	r3, #0
  40940e:	2a1b      	cmp	r2, #27
  409410:	6003      	str	r3, [r0, #0]
  409412:	6043      	str	r3, [r0, #4]
  409414:	d916      	bls.n	409444 <_calloc_r+0x58>
  409416:	2a24      	cmp	r2, #36	; 0x24
  409418:	6083      	str	r3, [r0, #8]
  40941a:	60c3      	str	r3, [r0, #12]
  40941c:	bf11      	iteee	ne
  40941e:	f100 0210 	addne.w	r2, r0, #16
  409422:	6103      	streq	r3, [r0, #16]
  409424:	6143      	streq	r3, [r0, #20]
  409426:	f100 0218 	addeq.w	r2, r0, #24
  40942a:	2300      	movs	r3, #0
  40942c:	6013      	str	r3, [r2, #0]
  40942e:	6053      	str	r3, [r2, #4]
  409430:	6093      	str	r3, [r2, #8]
  409432:	4620      	mov	r0, r4
  409434:	bd10      	pop	{r4, pc}
  409436:	4602      	mov	r2, r0
  409438:	e7f7      	b.n	40942a <_calloc_r+0x3e>
  40943a:	2100      	movs	r1, #0
  40943c:	f7fa fe7a 	bl	404134 <memset>
  409440:	4620      	mov	r0, r4
  409442:	bd10      	pop	{r4, pc}
  409444:	f100 0208 	add.w	r2, r0, #8
  409448:	e7ef      	b.n	40942a <_calloc_r+0x3e>
  40944a:	bf00      	nop

0040944c <_close_r>:
  40944c:	b538      	push	{r3, r4, r5, lr}
  40944e:	4c07      	ldr	r4, [pc, #28]	; (40946c <_close_r+0x20>)
  409450:	2300      	movs	r3, #0
  409452:	4605      	mov	r5, r0
  409454:	4608      	mov	r0, r1
  409456:	6023      	str	r3, [r4, #0]
  409458:	f7f7 fd6c 	bl	400f34 <_close>
  40945c:	1c43      	adds	r3, r0, #1
  40945e:	d000      	beq.n	409462 <_close_r+0x16>
  409460:	bd38      	pop	{r3, r4, r5, pc}
  409462:	6823      	ldr	r3, [r4, #0]
  409464:	2b00      	cmp	r3, #0
  409466:	d0fb      	beq.n	409460 <_close_r+0x14>
  409468:	602b      	str	r3, [r5, #0]
  40946a:	bd38      	pop	{r3, r4, r5, pc}
  40946c:	20400d58 	.word	0x20400d58

00409470 <_fclose_r>:
  409470:	b570      	push	{r4, r5, r6, lr}
  409472:	b159      	cbz	r1, 40948c <_fclose_r+0x1c>
  409474:	4605      	mov	r5, r0
  409476:	460c      	mov	r4, r1
  409478:	b110      	cbz	r0, 409480 <_fclose_r+0x10>
  40947a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40947c:	2b00      	cmp	r3, #0
  40947e:	d03c      	beq.n	4094fa <_fclose_r+0x8a>
  409480:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409482:	07d8      	lsls	r0, r3, #31
  409484:	d505      	bpl.n	409492 <_fclose_r+0x22>
  409486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40948a:	b92b      	cbnz	r3, 409498 <_fclose_r+0x28>
  40948c:	2600      	movs	r6, #0
  40948e:	4630      	mov	r0, r6
  409490:	bd70      	pop	{r4, r5, r6, pc}
  409492:	89a3      	ldrh	r3, [r4, #12]
  409494:	0599      	lsls	r1, r3, #22
  409496:	d53c      	bpl.n	409512 <_fclose_r+0xa2>
  409498:	4621      	mov	r1, r4
  40949a:	4628      	mov	r0, r5
  40949c:	f7fe fb2a 	bl	407af4 <__sflush_r>
  4094a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4094a2:	4606      	mov	r6, r0
  4094a4:	b133      	cbz	r3, 4094b4 <_fclose_r+0x44>
  4094a6:	69e1      	ldr	r1, [r4, #28]
  4094a8:	4628      	mov	r0, r5
  4094aa:	4798      	blx	r3
  4094ac:	2800      	cmp	r0, #0
  4094ae:	bfb8      	it	lt
  4094b0:	f04f 36ff 	movlt.w	r6, #4294967295
  4094b4:	89a3      	ldrh	r3, [r4, #12]
  4094b6:	061a      	lsls	r2, r3, #24
  4094b8:	d422      	bmi.n	409500 <_fclose_r+0x90>
  4094ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4094bc:	b141      	cbz	r1, 4094d0 <_fclose_r+0x60>
  4094be:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4094c2:	4299      	cmp	r1, r3
  4094c4:	d002      	beq.n	4094cc <_fclose_r+0x5c>
  4094c6:	4628      	mov	r0, r5
  4094c8:	f7fe fd32 	bl	407f30 <_free_r>
  4094cc:	2300      	movs	r3, #0
  4094ce:	6323      	str	r3, [r4, #48]	; 0x30
  4094d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4094d2:	b121      	cbz	r1, 4094de <_fclose_r+0x6e>
  4094d4:	4628      	mov	r0, r5
  4094d6:	f7fe fd2b 	bl	407f30 <_free_r>
  4094da:	2300      	movs	r3, #0
  4094dc:	6463      	str	r3, [r4, #68]	; 0x44
  4094de:	f7fe fc2d 	bl	407d3c <__sfp_lock_acquire>
  4094e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4094e4:	2200      	movs	r2, #0
  4094e6:	07db      	lsls	r3, r3, #31
  4094e8:	81a2      	strh	r2, [r4, #12]
  4094ea:	d50e      	bpl.n	40950a <_fclose_r+0x9a>
  4094ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4094ee:	f7fe ffc5 	bl	40847c <__retarget_lock_close_recursive>
  4094f2:	f7fe fc29 	bl	407d48 <__sfp_lock_release>
  4094f6:	4630      	mov	r0, r6
  4094f8:	bd70      	pop	{r4, r5, r6, pc}
  4094fa:	f7fe fbf3 	bl	407ce4 <__sinit>
  4094fe:	e7bf      	b.n	409480 <_fclose_r+0x10>
  409500:	6921      	ldr	r1, [r4, #16]
  409502:	4628      	mov	r0, r5
  409504:	f7fe fd14 	bl	407f30 <_free_r>
  409508:	e7d7      	b.n	4094ba <_fclose_r+0x4a>
  40950a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40950c:	f7fe ffba 	bl	408484 <__retarget_lock_release_recursive>
  409510:	e7ec      	b.n	4094ec <_fclose_r+0x7c>
  409512:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409514:	f7fe ffb4 	bl	408480 <__retarget_lock_acquire_recursive>
  409518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40951c:	2b00      	cmp	r3, #0
  40951e:	d1bb      	bne.n	409498 <_fclose_r+0x28>
  409520:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409522:	f016 0601 	ands.w	r6, r6, #1
  409526:	d1b1      	bne.n	40948c <_fclose_r+0x1c>
  409528:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40952a:	f7fe ffab 	bl	408484 <__retarget_lock_release_recursive>
  40952e:	4630      	mov	r0, r6
  409530:	bd70      	pop	{r4, r5, r6, pc}
  409532:	bf00      	nop

00409534 <_fstat_r>:
  409534:	b538      	push	{r3, r4, r5, lr}
  409536:	460b      	mov	r3, r1
  409538:	4c07      	ldr	r4, [pc, #28]	; (409558 <_fstat_r+0x24>)
  40953a:	4605      	mov	r5, r0
  40953c:	4611      	mov	r1, r2
  40953e:	4618      	mov	r0, r3
  409540:	2300      	movs	r3, #0
  409542:	6023      	str	r3, [r4, #0]
  409544:	f7f7 fcf9 	bl	400f3a <_fstat>
  409548:	1c43      	adds	r3, r0, #1
  40954a:	d000      	beq.n	40954e <_fstat_r+0x1a>
  40954c:	bd38      	pop	{r3, r4, r5, pc}
  40954e:	6823      	ldr	r3, [r4, #0]
  409550:	2b00      	cmp	r3, #0
  409552:	d0fb      	beq.n	40954c <_fstat_r+0x18>
  409554:	602b      	str	r3, [r5, #0]
  409556:	bd38      	pop	{r3, r4, r5, pc}
  409558:	20400d58 	.word	0x20400d58

0040955c <_isatty_r>:
  40955c:	b538      	push	{r3, r4, r5, lr}
  40955e:	4c07      	ldr	r4, [pc, #28]	; (40957c <_isatty_r+0x20>)
  409560:	2300      	movs	r3, #0
  409562:	4605      	mov	r5, r0
  409564:	4608      	mov	r0, r1
  409566:	6023      	str	r3, [r4, #0]
  409568:	f7f7 fcec 	bl	400f44 <_isatty>
  40956c:	1c43      	adds	r3, r0, #1
  40956e:	d000      	beq.n	409572 <_isatty_r+0x16>
  409570:	bd38      	pop	{r3, r4, r5, pc}
  409572:	6823      	ldr	r3, [r4, #0]
  409574:	2b00      	cmp	r3, #0
  409576:	d0fb      	beq.n	409570 <_isatty_r+0x14>
  409578:	602b      	str	r3, [r5, #0]
  40957a:	bd38      	pop	{r3, r4, r5, pc}
  40957c:	20400d58 	.word	0x20400d58

00409580 <_lseek_r>:
  409580:	b570      	push	{r4, r5, r6, lr}
  409582:	460d      	mov	r5, r1
  409584:	4c08      	ldr	r4, [pc, #32]	; (4095a8 <_lseek_r+0x28>)
  409586:	4611      	mov	r1, r2
  409588:	4606      	mov	r6, r0
  40958a:	461a      	mov	r2, r3
  40958c:	4628      	mov	r0, r5
  40958e:	2300      	movs	r3, #0
  409590:	6023      	str	r3, [r4, #0]
  409592:	f7f7 fcd9 	bl	400f48 <_lseek>
  409596:	1c43      	adds	r3, r0, #1
  409598:	d000      	beq.n	40959c <_lseek_r+0x1c>
  40959a:	bd70      	pop	{r4, r5, r6, pc}
  40959c:	6823      	ldr	r3, [r4, #0]
  40959e:	2b00      	cmp	r3, #0
  4095a0:	d0fb      	beq.n	40959a <_lseek_r+0x1a>
  4095a2:	6033      	str	r3, [r6, #0]
  4095a4:	bd70      	pop	{r4, r5, r6, pc}
  4095a6:	bf00      	nop
  4095a8:	20400d58 	.word	0x20400d58

004095ac <_read_r>:
  4095ac:	b570      	push	{r4, r5, r6, lr}
  4095ae:	460d      	mov	r5, r1
  4095b0:	4c08      	ldr	r4, [pc, #32]	; (4095d4 <_read_r+0x28>)
  4095b2:	4611      	mov	r1, r2
  4095b4:	4606      	mov	r6, r0
  4095b6:	461a      	mov	r2, r3
  4095b8:	4628      	mov	r0, r5
  4095ba:	2300      	movs	r3, #0
  4095bc:	6023      	str	r3, [r4, #0]
  4095be:	f7f6 fe41 	bl	400244 <_read>
  4095c2:	1c43      	adds	r3, r0, #1
  4095c4:	d000      	beq.n	4095c8 <_read_r+0x1c>
  4095c6:	bd70      	pop	{r4, r5, r6, pc}
  4095c8:	6823      	ldr	r3, [r4, #0]
  4095ca:	2b00      	cmp	r3, #0
  4095cc:	d0fb      	beq.n	4095c6 <_read_r+0x1a>
  4095ce:	6033      	str	r3, [r6, #0]
  4095d0:	bd70      	pop	{r4, r5, r6, pc}
  4095d2:	bf00      	nop
  4095d4:	20400d58 	.word	0x20400d58

004095d8 <__aeabi_drsub>:
  4095d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4095dc:	e002      	b.n	4095e4 <__adddf3>
  4095de:	bf00      	nop

004095e0 <__aeabi_dsub>:
  4095e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004095e4 <__adddf3>:
  4095e4:	b530      	push	{r4, r5, lr}
  4095e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4095ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4095ee:	ea94 0f05 	teq	r4, r5
  4095f2:	bf08      	it	eq
  4095f4:	ea90 0f02 	teqeq	r0, r2
  4095f8:	bf1f      	itttt	ne
  4095fa:	ea54 0c00 	orrsne.w	ip, r4, r0
  4095fe:	ea55 0c02 	orrsne.w	ip, r5, r2
  409602:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409606:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40960a:	f000 80e2 	beq.w	4097d2 <__adddf3+0x1ee>
  40960e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409612:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409616:	bfb8      	it	lt
  409618:	426d      	neglt	r5, r5
  40961a:	dd0c      	ble.n	409636 <__adddf3+0x52>
  40961c:	442c      	add	r4, r5
  40961e:	ea80 0202 	eor.w	r2, r0, r2
  409622:	ea81 0303 	eor.w	r3, r1, r3
  409626:	ea82 0000 	eor.w	r0, r2, r0
  40962a:	ea83 0101 	eor.w	r1, r3, r1
  40962e:	ea80 0202 	eor.w	r2, r0, r2
  409632:	ea81 0303 	eor.w	r3, r1, r3
  409636:	2d36      	cmp	r5, #54	; 0x36
  409638:	bf88      	it	hi
  40963a:	bd30      	pophi	{r4, r5, pc}
  40963c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409640:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409644:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409648:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40964c:	d002      	beq.n	409654 <__adddf3+0x70>
  40964e:	4240      	negs	r0, r0
  409650:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409654:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409658:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40965c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409660:	d002      	beq.n	409668 <__adddf3+0x84>
  409662:	4252      	negs	r2, r2
  409664:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409668:	ea94 0f05 	teq	r4, r5
  40966c:	f000 80a7 	beq.w	4097be <__adddf3+0x1da>
  409670:	f1a4 0401 	sub.w	r4, r4, #1
  409674:	f1d5 0e20 	rsbs	lr, r5, #32
  409678:	db0d      	blt.n	409696 <__adddf3+0xb2>
  40967a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40967e:	fa22 f205 	lsr.w	r2, r2, r5
  409682:	1880      	adds	r0, r0, r2
  409684:	f141 0100 	adc.w	r1, r1, #0
  409688:	fa03 f20e 	lsl.w	r2, r3, lr
  40968c:	1880      	adds	r0, r0, r2
  40968e:	fa43 f305 	asr.w	r3, r3, r5
  409692:	4159      	adcs	r1, r3
  409694:	e00e      	b.n	4096b4 <__adddf3+0xd0>
  409696:	f1a5 0520 	sub.w	r5, r5, #32
  40969a:	f10e 0e20 	add.w	lr, lr, #32
  40969e:	2a01      	cmp	r2, #1
  4096a0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4096a4:	bf28      	it	cs
  4096a6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4096aa:	fa43 f305 	asr.w	r3, r3, r5
  4096ae:	18c0      	adds	r0, r0, r3
  4096b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4096b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4096b8:	d507      	bpl.n	4096ca <__adddf3+0xe6>
  4096ba:	f04f 0e00 	mov.w	lr, #0
  4096be:	f1dc 0c00 	rsbs	ip, ip, #0
  4096c2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4096c6:	eb6e 0101 	sbc.w	r1, lr, r1
  4096ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4096ce:	d31b      	bcc.n	409708 <__adddf3+0x124>
  4096d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4096d4:	d30c      	bcc.n	4096f0 <__adddf3+0x10c>
  4096d6:	0849      	lsrs	r1, r1, #1
  4096d8:	ea5f 0030 	movs.w	r0, r0, rrx
  4096dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4096e0:	f104 0401 	add.w	r4, r4, #1
  4096e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4096e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4096ec:	f080 809a 	bcs.w	409824 <__adddf3+0x240>
  4096f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4096f4:	bf08      	it	eq
  4096f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4096fa:	f150 0000 	adcs.w	r0, r0, #0
  4096fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409702:	ea41 0105 	orr.w	r1, r1, r5
  409706:	bd30      	pop	{r4, r5, pc}
  409708:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40970c:	4140      	adcs	r0, r0
  40970e:	eb41 0101 	adc.w	r1, r1, r1
  409712:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409716:	f1a4 0401 	sub.w	r4, r4, #1
  40971a:	d1e9      	bne.n	4096f0 <__adddf3+0x10c>
  40971c:	f091 0f00 	teq	r1, #0
  409720:	bf04      	itt	eq
  409722:	4601      	moveq	r1, r0
  409724:	2000      	moveq	r0, #0
  409726:	fab1 f381 	clz	r3, r1
  40972a:	bf08      	it	eq
  40972c:	3320      	addeq	r3, #32
  40972e:	f1a3 030b 	sub.w	r3, r3, #11
  409732:	f1b3 0220 	subs.w	r2, r3, #32
  409736:	da0c      	bge.n	409752 <__adddf3+0x16e>
  409738:	320c      	adds	r2, #12
  40973a:	dd08      	ble.n	40974e <__adddf3+0x16a>
  40973c:	f102 0c14 	add.w	ip, r2, #20
  409740:	f1c2 020c 	rsb	r2, r2, #12
  409744:	fa01 f00c 	lsl.w	r0, r1, ip
  409748:	fa21 f102 	lsr.w	r1, r1, r2
  40974c:	e00c      	b.n	409768 <__adddf3+0x184>
  40974e:	f102 0214 	add.w	r2, r2, #20
  409752:	bfd8      	it	le
  409754:	f1c2 0c20 	rsble	ip, r2, #32
  409758:	fa01 f102 	lsl.w	r1, r1, r2
  40975c:	fa20 fc0c 	lsr.w	ip, r0, ip
  409760:	bfdc      	itt	le
  409762:	ea41 010c 	orrle.w	r1, r1, ip
  409766:	4090      	lslle	r0, r2
  409768:	1ae4      	subs	r4, r4, r3
  40976a:	bfa2      	ittt	ge
  40976c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  409770:	4329      	orrge	r1, r5
  409772:	bd30      	popge	{r4, r5, pc}
  409774:	ea6f 0404 	mvn.w	r4, r4
  409778:	3c1f      	subs	r4, #31
  40977a:	da1c      	bge.n	4097b6 <__adddf3+0x1d2>
  40977c:	340c      	adds	r4, #12
  40977e:	dc0e      	bgt.n	40979e <__adddf3+0x1ba>
  409780:	f104 0414 	add.w	r4, r4, #20
  409784:	f1c4 0220 	rsb	r2, r4, #32
  409788:	fa20 f004 	lsr.w	r0, r0, r4
  40978c:	fa01 f302 	lsl.w	r3, r1, r2
  409790:	ea40 0003 	orr.w	r0, r0, r3
  409794:	fa21 f304 	lsr.w	r3, r1, r4
  409798:	ea45 0103 	orr.w	r1, r5, r3
  40979c:	bd30      	pop	{r4, r5, pc}
  40979e:	f1c4 040c 	rsb	r4, r4, #12
  4097a2:	f1c4 0220 	rsb	r2, r4, #32
  4097a6:	fa20 f002 	lsr.w	r0, r0, r2
  4097aa:	fa01 f304 	lsl.w	r3, r1, r4
  4097ae:	ea40 0003 	orr.w	r0, r0, r3
  4097b2:	4629      	mov	r1, r5
  4097b4:	bd30      	pop	{r4, r5, pc}
  4097b6:	fa21 f004 	lsr.w	r0, r1, r4
  4097ba:	4629      	mov	r1, r5
  4097bc:	bd30      	pop	{r4, r5, pc}
  4097be:	f094 0f00 	teq	r4, #0
  4097c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4097c6:	bf06      	itte	eq
  4097c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4097cc:	3401      	addeq	r4, #1
  4097ce:	3d01      	subne	r5, #1
  4097d0:	e74e      	b.n	409670 <__adddf3+0x8c>
  4097d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4097d6:	bf18      	it	ne
  4097d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4097dc:	d029      	beq.n	409832 <__adddf3+0x24e>
  4097de:	ea94 0f05 	teq	r4, r5
  4097e2:	bf08      	it	eq
  4097e4:	ea90 0f02 	teqeq	r0, r2
  4097e8:	d005      	beq.n	4097f6 <__adddf3+0x212>
  4097ea:	ea54 0c00 	orrs.w	ip, r4, r0
  4097ee:	bf04      	itt	eq
  4097f0:	4619      	moveq	r1, r3
  4097f2:	4610      	moveq	r0, r2
  4097f4:	bd30      	pop	{r4, r5, pc}
  4097f6:	ea91 0f03 	teq	r1, r3
  4097fa:	bf1e      	ittt	ne
  4097fc:	2100      	movne	r1, #0
  4097fe:	2000      	movne	r0, #0
  409800:	bd30      	popne	{r4, r5, pc}
  409802:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409806:	d105      	bne.n	409814 <__adddf3+0x230>
  409808:	0040      	lsls	r0, r0, #1
  40980a:	4149      	adcs	r1, r1
  40980c:	bf28      	it	cs
  40980e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409812:	bd30      	pop	{r4, r5, pc}
  409814:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409818:	bf3c      	itt	cc
  40981a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40981e:	bd30      	popcc	{r4, r5, pc}
  409820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409824:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  409828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40982c:	f04f 0000 	mov.w	r0, #0
  409830:	bd30      	pop	{r4, r5, pc}
  409832:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409836:	bf1a      	itte	ne
  409838:	4619      	movne	r1, r3
  40983a:	4610      	movne	r0, r2
  40983c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  409840:	bf1c      	itt	ne
  409842:	460b      	movne	r3, r1
  409844:	4602      	movne	r2, r0
  409846:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40984a:	bf06      	itte	eq
  40984c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  409850:	ea91 0f03 	teqeq	r1, r3
  409854:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  409858:	bd30      	pop	{r4, r5, pc}
  40985a:	bf00      	nop

0040985c <__aeabi_ui2d>:
  40985c:	f090 0f00 	teq	r0, #0
  409860:	bf04      	itt	eq
  409862:	2100      	moveq	r1, #0
  409864:	4770      	bxeq	lr
  409866:	b530      	push	{r4, r5, lr}
  409868:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40986c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409870:	f04f 0500 	mov.w	r5, #0
  409874:	f04f 0100 	mov.w	r1, #0
  409878:	e750      	b.n	40971c <__adddf3+0x138>
  40987a:	bf00      	nop

0040987c <__aeabi_i2d>:
  40987c:	f090 0f00 	teq	r0, #0
  409880:	bf04      	itt	eq
  409882:	2100      	moveq	r1, #0
  409884:	4770      	bxeq	lr
  409886:	b530      	push	{r4, r5, lr}
  409888:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40988c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409890:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409894:	bf48      	it	mi
  409896:	4240      	negmi	r0, r0
  409898:	f04f 0100 	mov.w	r1, #0
  40989c:	e73e      	b.n	40971c <__adddf3+0x138>
  40989e:	bf00      	nop

004098a0 <__aeabi_f2d>:
  4098a0:	0042      	lsls	r2, r0, #1
  4098a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4098a6:	ea4f 0131 	mov.w	r1, r1, rrx
  4098aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4098ae:	bf1f      	itttt	ne
  4098b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4098b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4098b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4098bc:	4770      	bxne	lr
  4098be:	f092 0f00 	teq	r2, #0
  4098c2:	bf14      	ite	ne
  4098c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4098c8:	4770      	bxeq	lr
  4098ca:	b530      	push	{r4, r5, lr}
  4098cc:	f44f 7460 	mov.w	r4, #896	; 0x380
  4098d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4098d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4098d8:	e720      	b.n	40971c <__adddf3+0x138>
  4098da:	bf00      	nop

004098dc <__aeabi_ul2d>:
  4098dc:	ea50 0201 	orrs.w	r2, r0, r1
  4098e0:	bf08      	it	eq
  4098e2:	4770      	bxeq	lr
  4098e4:	b530      	push	{r4, r5, lr}
  4098e6:	f04f 0500 	mov.w	r5, #0
  4098ea:	e00a      	b.n	409902 <__aeabi_l2d+0x16>

004098ec <__aeabi_l2d>:
  4098ec:	ea50 0201 	orrs.w	r2, r0, r1
  4098f0:	bf08      	it	eq
  4098f2:	4770      	bxeq	lr
  4098f4:	b530      	push	{r4, r5, lr}
  4098f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4098fa:	d502      	bpl.n	409902 <__aeabi_l2d+0x16>
  4098fc:	4240      	negs	r0, r0
  4098fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409902:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409906:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40990a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40990e:	f43f aedc 	beq.w	4096ca <__adddf3+0xe6>
  409912:	f04f 0203 	mov.w	r2, #3
  409916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40991a:	bf18      	it	ne
  40991c:	3203      	addne	r2, #3
  40991e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409922:	bf18      	it	ne
  409924:	3203      	addne	r2, #3
  409926:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40992a:	f1c2 0320 	rsb	r3, r2, #32
  40992e:	fa00 fc03 	lsl.w	ip, r0, r3
  409932:	fa20 f002 	lsr.w	r0, r0, r2
  409936:	fa01 fe03 	lsl.w	lr, r1, r3
  40993a:	ea40 000e 	orr.w	r0, r0, lr
  40993e:	fa21 f102 	lsr.w	r1, r1, r2
  409942:	4414      	add	r4, r2
  409944:	e6c1      	b.n	4096ca <__adddf3+0xe6>
  409946:	bf00      	nop

00409948 <__aeabi_dmul>:
  409948:	b570      	push	{r4, r5, r6, lr}
  40994a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40994e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409956:	bf1d      	ittte	ne
  409958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40995c:	ea94 0f0c 	teqne	r4, ip
  409960:	ea95 0f0c 	teqne	r5, ip
  409964:	f000 f8de 	bleq	409b24 <__aeabi_dmul+0x1dc>
  409968:	442c      	add	r4, r5
  40996a:	ea81 0603 	eor.w	r6, r1, r3
  40996e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  409972:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  409976:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40997a:	bf18      	it	ne
  40997c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409988:	d038      	beq.n	4099fc <__aeabi_dmul+0xb4>
  40998a:	fba0 ce02 	umull	ip, lr, r0, r2
  40998e:	f04f 0500 	mov.w	r5, #0
  409992:	fbe1 e502 	umlal	lr, r5, r1, r2
  409996:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40999a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40999e:	f04f 0600 	mov.w	r6, #0
  4099a2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4099a6:	f09c 0f00 	teq	ip, #0
  4099aa:	bf18      	it	ne
  4099ac:	f04e 0e01 	orrne.w	lr, lr, #1
  4099b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4099b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4099b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4099bc:	d204      	bcs.n	4099c8 <__aeabi_dmul+0x80>
  4099be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4099c2:	416d      	adcs	r5, r5
  4099c4:	eb46 0606 	adc.w	r6, r6, r6
  4099c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4099cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4099d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4099d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4099d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4099dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4099e0:	bf88      	it	hi
  4099e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4099e6:	d81e      	bhi.n	409a26 <__aeabi_dmul+0xde>
  4099e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4099ec:	bf08      	it	eq
  4099ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4099f2:	f150 0000 	adcs.w	r0, r0, #0
  4099f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4099fa:	bd70      	pop	{r4, r5, r6, pc}
  4099fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409a00:	ea46 0101 	orr.w	r1, r6, r1
  409a04:	ea40 0002 	orr.w	r0, r0, r2
  409a08:	ea81 0103 	eor.w	r1, r1, r3
  409a0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409a10:	bfc2      	ittt	gt
  409a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  409a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409a1a:	bd70      	popgt	{r4, r5, r6, pc}
  409a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409a20:	f04f 0e00 	mov.w	lr, #0
  409a24:	3c01      	subs	r4, #1
  409a26:	f300 80ab 	bgt.w	409b80 <__aeabi_dmul+0x238>
  409a2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  409a2e:	bfde      	ittt	le
  409a30:	2000      	movle	r0, #0
  409a32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409a36:	bd70      	pople	{r4, r5, r6, pc}
  409a38:	f1c4 0400 	rsb	r4, r4, #0
  409a3c:	3c20      	subs	r4, #32
  409a3e:	da35      	bge.n	409aac <__aeabi_dmul+0x164>
  409a40:	340c      	adds	r4, #12
  409a42:	dc1b      	bgt.n	409a7c <__aeabi_dmul+0x134>
  409a44:	f104 0414 	add.w	r4, r4, #20
  409a48:	f1c4 0520 	rsb	r5, r4, #32
  409a4c:	fa00 f305 	lsl.w	r3, r0, r5
  409a50:	fa20 f004 	lsr.w	r0, r0, r4
  409a54:	fa01 f205 	lsl.w	r2, r1, r5
  409a58:	ea40 0002 	orr.w	r0, r0, r2
  409a5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  409a60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409a64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409a68:	fa21 f604 	lsr.w	r6, r1, r4
  409a6c:	eb42 0106 	adc.w	r1, r2, r6
  409a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409a74:	bf08      	it	eq
  409a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409a7a:	bd70      	pop	{r4, r5, r6, pc}
  409a7c:	f1c4 040c 	rsb	r4, r4, #12
  409a80:	f1c4 0520 	rsb	r5, r4, #32
  409a84:	fa00 f304 	lsl.w	r3, r0, r4
  409a88:	fa20 f005 	lsr.w	r0, r0, r5
  409a8c:	fa01 f204 	lsl.w	r2, r1, r4
  409a90:	ea40 0002 	orr.w	r0, r0, r2
  409a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409a98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409a9c:	f141 0100 	adc.w	r1, r1, #0
  409aa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409aa4:	bf08      	it	eq
  409aa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409aaa:	bd70      	pop	{r4, r5, r6, pc}
  409aac:	f1c4 0520 	rsb	r5, r4, #32
  409ab0:	fa00 f205 	lsl.w	r2, r0, r5
  409ab4:	ea4e 0e02 	orr.w	lr, lr, r2
  409ab8:	fa20 f304 	lsr.w	r3, r0, r4
  409abc:	fa01 f205 	lsl.w	r2, r1, r5
  409ac0:	ea43 0302 	orr.w	r3, r3, r2
  409ac4:	fa21 f004 	lsr.w	r0, r1, r4
  409ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409acc:	fa21 f204 	lsr.w	r2, r1, r4
  409ad0:	ea20 0002 	bic.w	r0, r0, r2
  409ad4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409ad8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409adc:	bf08      	it	eq
  409ade:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409ae2:	bd70      	pop	{r4, r5, r6, pc}
  409ae4:	f094 0f00 	teq	r4, #0
  409ae8:	d10f      	bne.n	409b0a <__aeabi_dmul+0x1c2>
  409aea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  409aee:	0040      	lsls	r0, r0, #1
  409af0:	eb41 0101 	adc.w	r1, r1, r1
  409af4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409af8:	bf08      	it	eq
  409afa:	3c01      	subeq	r4, #1
  409afc:	d0f7      	beq.n	409aee <__aeabi_dmul+0x1a6>
  409afe:	ea41 0106 	orr.w	r1, r1, r6
  409b02:	f095 0f00 	teq	r5, #0
  409b06:	bf18      	it	ne
  409b08:	4770      	bxne	lr
  409b0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  409b0e:	0052      	lsls	r2, r2, #1
  409b10:	eb43 0303 	adc.w	r3, r3, r3
  409b14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409b18:	bf08      	it	eq
  409b1a:	3d01      	subeq	r5, #1
  409b1c:	d0f7      	beq.n	409b0e <__aeabi_dmul+0x1c6>
  409b1e:	ea43 0306 	orr.w	r3, r3, r6
  409b22:	4770      	bx	lr
  409b24:	ea94 0f0c 	teq	r4, ip
  409b28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409b2c:	bf18      	it	ne
  409b2e:	ea95 0f0c 	teqne	r5, ip
  409b32:	d00c      	beq.n	409b4e <__aeabi_dmul+0x206>
  409b34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409b38:	bf18      	it	ne
  409b3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409b3e:	d1d1      	bne.n	409ae4 <__aeabi_dmul+0x19c>
  409b40:	ea81 0103 	eor.w	r1, r1, r3
  409b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409b48:	f04f 0000 	mov.w	r0, #0
  409b4c:	bd70      	pop	{r4, r5, r6, pc}
  409b4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409b52:	bf06      	itte	eq
  409b54:	4610      	moveq	r0, r2
  409b56:	4619      	moveq	r1, r3
  409b58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409b5c:	d019      	beq.n	409b92 <__aeabi_dmul+0x24a>
  409b5e:	ea94 0f0c 	teq	r4, ip
  409b62:	d102      	bne.n	409b6a <__aeabi_dmul+0x222>
  409b64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  409b68:	d113      	bne.n	409b92 <__aeabi_dmul+0x24a>
  409b6a:	ea95 0f0c 	teq	r5, ip
  409b6e:	d105      	bne.n	409b7c <__aeabi_dmul+0x234>
  409b70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  409b74:	bf1c      	itt	ne
  409b76:	4610      	movne	r0, r2
  409b78:	4619      	movne	r1, r3
  409b7a:	d10a      	bne.n	409b92 <__aeabi_dmul+0x24a>
  409b7c:	ea81 0103 	eor.w	r1, r1, r3
  409b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409b84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409b88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409b8c:	f04f 0000 	mov.w	r0, #0
  409b90:	bd70      	pop	{r4, r5, r6, pc}
  409b92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409b96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  409b9a:	bd70      	pop	{r4, r5, r6, pc}

00409b9c <__aeabi_ddiv>:
  409b9c:	b570      	push	{r4, r5, r6, lr}
  409b9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409ba2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409ba6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409baa:	bf1d      	ittte	ne
  409bac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409bb0:	ea94 0f0c 	teqne	r4, ip
  409bb4:	ea95 0f0c 	teqne	r5, ip
  409bb8:	f000 f8a7 	bleq	409d0a <__aeabi_ddiv+0x16e>
  409bbc:	eba4 0405 	sub.w	r4, r4, r5
  409bc0:	ea81 0e03 	eor.w	lr, r1, r3
  409bc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409bc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409bcc:	f000 8088 	beq.w	409ce0 <__aeabi_ddiv+0x144>
  409bd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409bd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409bd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  409bdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  409be0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  409be4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  409be8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  409bec:	ea4f 2600 	mov.w	r6, r0, lsl #8
  409bf0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  409bf4:	429d      	cmp	r5, r3
  409bf6:	bf08      	it	eq
  409bf8:	4296      	cmpeq	r6, r2
  409bfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  409bfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
  409c02:	d202      	bcs.n	409c0a <__aeabi_ddiv+0x6e>
  409c04:	085b      	lsrs	r3, r3, #1
  409c06:	ea4f 0232 	mov.w	r2, r2, rrx
  409c0a:	1ab6      	subs	r6, r6, r2
  409c0c:	eb65 0503 	sbc.w	r5, r5, r3
  409c10:	085b      	lsrs	r3, r3, #1
  409c12:	ea4f 0232 	mov.w	r2, r2, rrx
  409c16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  409c1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  409c1e:	ebb6 0e02 	subs.w	lr, r6, r2
  409c22:	eb75 0e03 	sbcs.w	lr, r5, r3
  409c26:	bf22      	ittt	cs
  409c28:	1ab6      	subcs	r6, r6, r2
  409c2a:	4675      	movcs	r5, lr
  409c2c:	ea40 000c 	orrcs.w	r0, r0, ip
  409c30:	085b      	lsrs	r3, r3, #1
  409c32:	ea4f 0232 	mov.w	r2, r2, rrx
  409c36:	ebb6 0e02 	subs.w	lr, r6, r2
  409c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
  409c3e:	bf22      	ittt	cs
  409c40:	1ab6      	subcs	r6, r6, r2
  409c42:	4675      	movcs	r5, lr
  409c44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  409c48:	085b      	lsrs	r3, r3, #1
  409c4a:	ea4f 0232 	mov.w	r2, r2, rrx
  409c4e:	ebb6 0e02 	subs.w	lr, r6, r2
  409c52:	eb75 0e03 	sbcs.w	lr, r5, r3
  409c56:	bf22      	ittt	cs
  409c58:	1ab6      	subcs	r6, r6, r2
  409c5a:	4675      	movcs	r5, lr
  409c5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  409c60:	085b      	lsrs	r3, r3, #1
  409c62:	ea4f 0232 	mov.w	r2, r2, rrx
  409c66:	ebb6 0e02 	subs.w	lr, r6, r2
  409c6a:	eb75 0e03 	sbcs.w	lr, r5, r3
  409c6e:	bf22      	ittt	cs
  409c70:	1ab6      	subcs	r6, r6, r2
  409c72:	4675      	movcs	r5, lr
  409c74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  409c78:	ea55 0e06 	orrs.w	lr, r5, r6
  409c7c:	d018      	beq.n	409cb0 <__aeabi_ddiv+0x114>
  409c7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  409c82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  409c86:	ea4f 1606 	mov.w	r6, r6, lsl #4
  409c8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  409c8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409c92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  409c96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  409c9a:	d1c0      	bne.n	409c1e <__aeabi_ddiv+0x82>
  409c9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409ca0:	d10b      	bne.n	409cba <__aeabi_ddiv+0x11e>
  409ca2:	ea41 0100 	orr.w	r1, r1, r0
  409ca6:	f04f 0000 	mov.w	r0, #0
  409caa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  409cae:	e7b6      	b.n	409c1e <__aeabi_ddiv+0x82>
  409cb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409cb4:	bf04      	itt	eq
  409cb6:	4301      	orreq	r1, r0
  409cb8:	2000      	moveq	r0, #0
  409cba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409cbe:	bf88      	it	hi
  409cc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409cc4:	f63f aeaf 	bhi.w	409a26 <__aeabi_dmul+0xde>
  409cc8:	ebb5 0c03 	subs.w	ip, r5, r3
  409ccc:	bf04      	itt	eq
  409cce:	ebb6 0c02 	subseq.w	ip, r6, r2
  409cd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409cd6:	f150 0000 	adcs.w	r0, r0, #0
  409cda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409cde:	bd70      	pop	{r4, r5, r6, pc}
  409ce0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  409ce4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  409ce8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  409cec:	bfc2      	ittt	gt
  409cee:	ebd4 050c 	rsbsgt	r5, r4, ip
  409cf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409cf6:	bd70      	popgt	{r4, r5, r6, pc}
  409cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409cfc:	f04f 0e00 	mov.w	lr, #0
  409d00:	3c01      	subs	r4, #1
  409d02:	e690      	b.n	409a26 <__aeabi_dmul+0xde>
  409d04:	ea45 0e06 	orr.w	lr, r5, r6
  409d08:	e68d      	b.n	409a26 <__aeabi_dmul+0xde>
  409d0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409d0e:	ea94 0f0c 	teq	r4, ip
  409d12:	bf08      	it	eq
  409d14:	ea95 0f0c 	teqeq	r5, ip
  409d18:	f43f af3b 	beq.w	409b92 <__aeabi_dmul+0x24a>
  409d1c:	ea94 0f0c 	teq	r4, ip
  409d20:	d10a      	bne.n	409d38 <__aeabi_ddiv+0x19c>
  409d22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409d26:	f47f af34 	bne.w	409b92 <__aeabi_dmul+0x24a>
  409d2a:	ea95 0f0c 	teq	r5, ip
  409d2e:	f47f af25 	bne.w	409b7c <__aeabi_dmul+0x234>
  409d32:	4610      	mov	r0, r2
  409d34:	4619      	mov	r1, r3
  409d36:	e72c      	b.n	409b92 <__aeabi_dmul+0x24a>
  409d38:	ea95 0f0c 	teq	r5, ip
  409d3c:	d106      	bne.n	409d4c <__aeabi_ddiv+0x1b0>
  409d3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409d42:	f43f aefd 	beq.w	409b40 <__aeabi_dmul+0x1f8>
  409d46:	4610      	mov	r0, r2
  409d48:	4619      	mov	r1, r3
  409d4a:	e722      	b.n	409b92 <__aeabi_dmul+0x24a>
  409d4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409d50:	bf18      	it	ne
  409d52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409d56:	f47f aec5 	bne.w	409ae4 <__aeabi_dmul+0x19c>
  409d5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  409d5e:	f47f af0d 	bne.w	409b7c <__aeabi_dmul+0x234>
  409d62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  409d66:	f47f aeeb 	bne.w	409b40 <__aeabi_dmul+0x1f8>
  409d6a:	e712      	b.n	409b92 <__aeabi_dmul+0x24a>

00409d6c <__gedf2>:
  409d6c:	f04f 3cff 	mov.w	ip, #4294967295
  409d70:	e006      	b.n	409d80 <__cmpdf2+0x4>
  409d72:	bf00      	nop

00409d74 <__ledf2>:
  409d74:	f04f 0c01 	mov.w	ip, #1
  409d78:	e002      	b.n	409d80 <__cmpdf2+0x4>
  409d7a:	bf00      	nop

00409d7c <__cmpdf2>:
  409d7c:	f04f 0c01 	mov.w	ip, #1
  409d80:	f84d cd04 	str.w	ip, [sp, #-4]!
  409d84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409d90:	bf18      	it	ne
  409d92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409d96:	d01b      	beq.n	409dd0 <__cmpdf2+0x54>
  409d98:	b001      	add	sp, #4
  409d9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  409d9e:	bf0c      	ite	eq
  409da0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409da4:	ea91 0f03 	teqne	r1, r3
  409da8:	bf02      	ittt	eq
  409daa:	ea90 0f02 	teqeq	r0, r2
  409dae:	2000      	moveq	r0, #0
  409db0:	4770      	bxeq	lr
  409db2:	f110 0f00 	cmn.w	r0, #0
  409db6:	ea91 0f03 	teq	r1, r3
  409dba:	bf58      	it	pl
  409dbc:	4299      	cmppl	r1, r3
  409dbe:	bf08      	it	eq
  409dc0:	4290      	cmpeq	r0, r2
  409dc2:	bf2c      	ite	cs
  409dc4:	17d8      	asrcs	r0, r3, #31
  409dc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409dca:	f040 0001 	orr.w	r0, r0, #1
  409dce:	4770      	bx	lr
  409dd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409dd8:	d102      	bne.n	409de0 <__cmpdf2+0x64>
  409dda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409dde:	d107      	bne.n	409df0 <__cmpdf2+0x74>
  409de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409de8:	d1d6      	bne.n	409d98 <__cmpdf2+0x1c>
  409dea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409dee:	d0d3      	beq.n	409d98 <__cmpdf2+0x1c>
  409df0:	f85d 0b04 	ldr.w	r0, [sp], #4
  409df4:	4770      	bx	lr
  409df6:	bf00      	nop

00409df8 <__aeabi_cdrcmple>:
  409df8:	4684      	mov	ip, r0
  409dfa:	4610      	mov	r0, r2
  409dfc:	4662      	mov	r2, ip
  409dfe:	468c      	mov	ip, r1
  409e00:	4619      	mov	r1, r3
  409e02:	4663      	mov	r3, ip
  409e04:	e000      	b.n	409e08 <__aeabi_cdcmpeq>
  409e06:	bf00      	nop

00409e08 <__aeabi_cdcmpeq>:
  409e08:	b501      	push	{r0, lr}
  409e0a:	f7ff ffb7 	bl	409d7c <__cmpdf2>
  409e0e:	2800      	cmp	r0, #0
  409e10:	bf48      	it	mi
  409e12:	f110 0f00 	cmnmi.w	r0, #0
  409e16:	bd01      	pop	{r0, pc}

00409e18 <__aeabi_dcmpeq>:
  409e18:	f84d ed08 	str.w	lr, [sp, #-8]!
  409e1c:	f7ff fff4 	bl	409e08 <__aeabi_cdcmpeq>
  409e20:	bf0c      	ite	eq
  409e22:	2001      	moveq	r0, #1
  409e24:	2000      	movne	r0, #0
  409e26:	f85d fb08 	ldr.w	pc, [sp], #8
  409e2a:	bf00      	nop

00409e2c <__aeabi_dcmplt>:
  409e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  409e30:	f7ff ffea 	bl	409e08 <__aeabi_cdcmpeq>
  409e34:	bf34      	ite	cc
  409e36:	2001      	movcc	r0, #1
  409e38:	2000      	movcs	r0, #0
  409e3a:	f85d fb08 	ldr.w	pc, [sp], #8
  409e3e:	bf00      	nop

00409e40 <__aeabi_dcmple>:
  409e40:	f84d ed08 	str.w	lr, [sp, #-8]!
  409e44:	f7ff ffe0 	bl	409e08 <__aeabi_cdcmpeq>
  409e48:	bf94      	ite	ls
  409e4a:	2001      	movls	r0, #1
  409e4c:	2000      	movhi	r0, #0
  409e4e:	f85d fb08 	ldr.w	pc, [sp], #8
  409e52:	bf00      	nop

00409e54 <__aeabi_dcmpge>:
  409e54:	f84d ed08 	str.w	lr, [sp, #-8]!
  409e58:	f7ff ffce 	bl	409df8 <__aeabi_cdrcmple>
  409e5c:	bf94      	ite	ls
  409e5e:	2001      	movls	r0, #1
  409e60:	2000      	movhi	r0, #0
  409e62:	f85d fb08 	ldr.w	pc, [sp], #8
  409e66:	bf00      	nop

00409e68 <__aeabi_dcmpgt>:
  409e68:	f84d ed08 	str.w	lr, [sp, #-8]!
  409e6c:	f7ff ffc4 	bl	409df8 <__aeabi_cdrcmple>
  409e70:	bf34      	ite	cc
  409e72:	2001      	movcc	r0, #1
  409e74:	2000      	movcs	r0, #0
  409e76:	f85d fb08 	ldr.w	pc, [sp], #8
  409e7a:	bf00      	nop

00409e7c <__aeabi_dcmpun>:
  409e7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409e84:	d102      	bne.n	409e8c <__aeabi_dcmpun+0x10>
  409e86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409e8a:	d10a      	bne.n	409ea2 <__aeabi_dcmpun+0x26>
  409e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409e90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409e94:	d102      	bne.n	409e9c <__aeabi_dcmpun+0x20>
  409e96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409e9a:	d102      	bne.n	409ea2 <__aeabi_dcmpun+0x26>
  409e9c:	f04f 0000 	mov.w	r0, #0
  409ea0:	4770      	bx	lr
  409ea2:	f04f 0001 	mov.w	r0, #1
  409ea6:	4770      	bx	lr

00409ea8 <__aeabi_d2iz>:
  409ea8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409eac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409eb0:	d215      	bcs.n	409ede <__aeabi_d2iz+0x36>
  409eb2:	d511      	bpl.n	409ed8 <__aeabi_d2iz+0x30>
  409eb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409eb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409ebc:	d912      	bls.n	409ee4 <__aeabi_d2iz+0x3c>
  409ebe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409ec6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409eca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409ece:	fa23 f002 	lsr.w	r0, r3, r2
  409ed2:	bf18      	it	ne
  409ed4:	4240      	negne	r0, r0
  409ed6:	4770      	bx	lr
  409ed8:	f04f 0000 	mov.w	r0, #0
  409edc:	4770      	bx	lr
  409ede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  409ee2:	d105      	bne.n	409ef0 <__aeabi_d2iz+0x48>
  409ee4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409ee8:	bf08      	it	eq
  409eea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409eee:	4770      	bx	lr
  409ef0:	f04f 0000 	mov.w	r0, #0
  409ef4:	4770      	bx	lr
  409ef6:	bf00      	nop

00409ef8 <__aeabi_uldivmod>:
  409ef8:	b953      	cbnz	r3, 409f10 <__aeabi_uldivmod+0x18>
  409efa:	b94a      	cbnz	r2, 409f10 <__aeabi_uldivmod+0x18>
  409efc:	2900      	cmp	r1, #0
  409efe:	bf08      	it	eq
  409f00:	2800      	cmpeq	r0, #0
  409f02:	bf1c      	itt	ne
  409f04:	f04f 31ff 	movne.w	r1, #4294967295
  409f08:	f04f 30ff 	movne.w	r0, #4294967295
  409f0c:	f000 b97a 	b.w	40a204 <__aeabi_idiv0>
  409f10:	f1ad 0c08 	sub.w	ip, sp, #8
  409f14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409f18:	f000 f806 	bl	409f28 <__udivmoddi4>
  409f1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  409f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409f24:	b004      	add	sp, #16
  409f26:	4770      	bx	lr

00409f28 <__udivmoddi4>:
  409f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409f2c:	468c      	mov	ip, r1
  409f2e:	460d      	mov	r5, r1
  409f30:	4604      	mov	r4, r0
  409f32:	9e08      	ldr	r6, [sp, #32]
  409f34:	2b00      	cmp	r3, #0
  409f36:	d151      	bne.n	409fdc <__udivmoddi4+0xb4>
  409f38:	428a      	cmp	r2, r1
  409f3a:	4617      	mov	r7, r2
  409f3c:	d96d      	bls.n	40a01a <__udivmoddi4+0xf2>
  409f3e:	fab2 fe82 	clz	lr, r2
  409f42:	f1be 0f00 	cmp.w	lr, #0
  409f46:	d00b      	beq.n	409f60 <__udivmoddi4+0x38>
  409f48:	f1ce 0c20 	rsb	ip, lr, #32
  409f4c:	fa01 f50e 	lsl.w	r5, r1, lr
  409f50:	fa20 fc0c 	lsr.w	ip, r0, ip
  409f54:	fa02 f70e 	lsl.w	r7, r2, lr
  409f58:	ea4c 0c05 	orr.w	ip, ip, r5
  409f5c:	fa00 f40e 	lsl.w	r4, r0, lr
  409f60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409f64:	0c25      	lsrs	r5, r4, #16
  409f66:	fbbc f8fa 	udiv	r8, ip, sl
  409f6a:	fa1f f987 	uxth.w	r9, r7
  409f6e:	fb0a cc18 	mls	ip, sl, r8, ip
  409f72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409f76:	fb08 f309 	mul.w	r3, r8, r9
  409f7a:	42ab      	cmp	r3, r5
  409f7c:	d90a      	bls.n	409f94 <__udivmoddi4+0x6c>
  409f7e:	19ed      	adds	r5, r5, r7
  409f80:	f108 32ff 	add.w	r2, r8, #4294967295
  409f84:	f080 8123 	bcs.w	40a1ce <__udivmoddi4+0x2a6>
  409f88:	42ab      	cmp	r3, r5
  409f8a:	f240 8120 	bls.w	40a1ce <__udivmoddi4+0x2a6>
  409f8e:	f1a8 0802 	sub.w	r8, r8, #2
  409f92:	443d      	add	r5, r7
  409f94:	1aed      	subs	r5, r5, r3
  409f96:	b2a4      	uxth	r4, r4
  409f98:	fbb5 f0fa 	udiv	r0, r5, sl
  409f9c:	fb0a 5510 	mls	r5, sl, r0, r5
  409fa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409fa4:	fb00 f909 	mul.w	r9, r0, r9
  409fa8:	45a1      	cmp	r9, r4
  409faa:	d909      	bls.n	409fc0 <__udivmoddi4+0x98>
  409fac:	19e4      	adds	r4, r4, r7
  409fae:	f100 33ff 	add.w	r3, r0, #4294967295
  409fb2:	f080 810a 	bcs.w	40a1ca <__udivmoddi4+0x2a2>
  409fb6:	45a1      	cmp	r9, r4
  409fb8:	f240 8107 	bls.w	40a1ca <__udivmoddi4+0x2a2>
  409fbc:	3802      	subs	r0, #2
  409fbe:	443c      	add	r4, r7
  409fc0:	eba4 0409 	sub.w	r4, r4, r9
  409fc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409fc8:	2100      	movs	r1, #0
  409fca:	2e00      	cmp	r6, #0
  409fcc:	d061      	beq.n	40a092 <__udivmoddi4+0x16a>
  409fce:	fa24 f40e 	lsr.w	r4, r4, lr
  409fd2:	2300      	movs	r3, #0
  409fd4:	6034      	str	r4, [r6, #0]
  409fd6:	6073      	str	r3, [r6, #4]
  409fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409fdc:	428b      	cmp	r3, r1
  409fde:	d907      	bls.n	409ff0 <__udivmoddi4+0xc8>
  409fe0:	2e00      	cmp	r6, #0
  409fe2:	d054      	beq.n	40a08e <__udivmoddi4+0x166>
  409fe4:	2100      	movs	r1, #0
  409fe6:	e886 0021 	stmia.w	r6, {r0, r5}
  409fea:	4608      	mov	r0, r1
  409fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409ff0:	fab3 f183 	clz	r1, r3
  409ff4:	2900      	cmp	r1, #0
  409ff6:	f040 808e 	bne.w	40a116 <__udivmoddi4+0x1ee>
  409ffa:	42ab      	cmp	r3, r5
  409ffc:	d302      	bcc.n	40a004 <__udivmoddi4+0xdc>
  409ffe:	4282      	cmp	r2, r0
  40a000:	f200 80fa 	bhi.w	40a1f8 <__udivmoddi4+0x2d0>
  40a004:	1a84      	subs	r4, r0, r2
  40a006:	eb65 0503 	sbc.w	r5, r5, r3
  40a00a:	2001      	movs	r0, #1
  40a00c:	46ac      	mov	ip, r5
  40a00e:	2e00      	cmp	r6, #0
  40a010:	d03f      	beq.n	40a092 <__udivmoddi4+0x16a>
  40a012:	e886 1010 	stmia.w	r6, {r4, ip}
  40a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a01a:	b912      	cbnz	r2, 40a022 <__udivmoddi4+0xfa>
  40a01c:	2701      	movs	r7, #1
  40a01e:	fbb7 f7f2 	udiv	r7, r7, r2
  40a022:	fab7 fe87 	clz	lr, r7
  40a026:	f1be 0f00 	cmp.w	lr, #0
  40a02a:	d134      	bne.n	40a096 <__udivmoddi4+0x16e>
  40a02c:	1beb      	subs	r3, r5, r7
  40a02e:	0c3a      	lsrs	r2, r7, #16
  40a030:	fa1f fc87 	uxth.w	ip, r7
  40a034:	2101      	movs	r1, #1
  40a036:	fbb3 f8f2 	udiv	r8, r3, r2
  40a03a:	0c25      	lsrs	r5, r4, #16
  40a03c:	fb02 3318 	mls	r3, r2, r8, r3
  40a040:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a044:	fb0c f308 	mul.w	r3, ip, r8
  40a048:	42ab      	cmp	r3, r5
  40a04a:	d907      	bls.n	40a05c <__udivmoddi4+0x134>
  40a04c:	19ed      	adds	r5, r5, r7
  40a04e:	f108 30ff 	add.w	r0, r8, #4294967295
  40a052:	d202      	bcs.n	40a05a <__udivmoddi4+0x132>
  40a054:	42ab      	cmp	r3, r5
  40a056:	f200 80d1 	bhi.w	40a1fc <__udivmoddi4+0x2d4>
  40a05a:	4680      	mov	r8, r0
  40a05c:	1aed      	subs	r5, r5, r3
  40a05e:	b2a3      	uxth	r3, r4
  40a060:	fbb5 f0f2 	udiv	r0, r5, r2
  40a064:	fb02 5510 	mls	r5, r2, r0, r5
  40a068:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a06c:	fb0c fc00 	mul.w	ip, ip, r0
  40a070:	45a4      	cmp	ip, r4
  40a072:	d907      	bls.n	40a084 <__udivmoddi4+0x15c>
  40a074:	19e4      	adds	r4, r4, r7
  40a076:	f100 33ff 	add.w	r3, r0, #4294967295
  40a07a:	d202      	bcs.n	40a082 <__udivmoddi4+0x15a>
  40a07c:	45a4      	cmp	ip, r4
  40a07e:	f200 80b8 	bhi.w	40a1f2 <__udivmoddi4+0x2ca>
  40a082:	4618      	mov	r0, r3
  40a084:	eba4 040c 	sub.w	r4, r4, ip
  40a088:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a08c:	e79d      	b.n	409fca <__udivmoddi4+0xa2>
  40a08e:	4631      	mov	r1, r6
  40a090:	4630      	mov	r0, r6
  40a092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a096:	f1ce 0420 	rsb	r4, lr, #32
  40a09a:	fa05 f30e 	lsl.w	r3, r5, lr
  40a09e:	fa07 f70e 	lsl.w	r7, r7, lr
  40a0a2:	fa20 f804 	lsr.w	r8, r0, r4
  40a0a6:	0c3a      	lsrs	r2, r7, #16
  40a0a8:	fa25 f404 	lsr.w	r4, r5, r4
  40a0ac:	ea48 0803 	orr.w	r8, r8, r3
  40a0b0:	fbb4 f1f2 	udiv	r1, r4, r2
  40a0b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a0b8:	fb02 4411 	mls	r4, r2, r1, r4
  40a0bc:	fa1f fc87 	uxth.w	ip, r7
  40a0c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a0c4:	fb01 f30c 	mul.w	r3, r1, ip
  40a0c8:	42ab      	cmp	r3, r5
  40a0ca:	fa00 f40e 	lsl.w	r4, r0, lr
  40a0ce:	d909      	bls.n	40a0e4 <__udivmoddi4+0x1bc>
  40a0d0:	19ed      	adds	r5, r5, r7
  40a0d2:	f101 30ff 	add.w	r0, r1, #4294967295
  40a0d6:	f080 808a 	bcs.w	40a1ee <__udivmoddi4+0x2c6>
  40a0da:	42ab      	cmp	r3, r5
  40a0dc:	f240 8087 	bls.w	40a1ee <__udivmoddi4+0x2c6>
  40a0e0:	3902      	subs	r1, #2
  40a0e2:	443d      	add	r5, r7
  40a0e4:	1aeb      	subs	r3, r5, r3
  40a0e6:	fa1f f588 	uxth.w	r5, r8
  40a0ea:	fbb3 f0f2 	udiv	r0, r3, r2
  40a0ee:	fb02 3310 	mls	r3, r2, r0, r3
  40a0f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a0f6:	fb00 f30c 	mul.w	r3, r0, ip
  40a0fa:	42ab      	cmp	r3, r5
  40a0fc:	d907      	bls.n	40a10e <__udivmoddi4+0x1e6>
  40a0fe:	19ed      	adds	r5, r5, r7
  40a100:	f100 38ff 	add.w	r8, r0, #4294967295
  40a104:	d26f      	bcs.n	40a1e6 <__udivmoddi4+0x2be>
  40a106:	42ab      	cmp	r3, r5
  40a108:	d96d      	bls.n	40a1e6 <__udivmoddi4+0x2be>
  40a10a:	3802      	subs	r0, #2
  40a10c:	443d      	add	r5, r7
  40a10e:	1aeb      	subs	r3, r5, r3
  40a110:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a114:	e78f      	b.n	40a036 <__udivmoddi4+0x10e>
  40a116:	f1c1 0720 	rsb	r7, r1, #32
  40a11a:	fa22 f807 	lsr.w	r8, r2, r7
  40a11e:	408b      	lsls	r3, r1
  40a120:	fa05 f401 	lsl.w	r4, r5, r1
  40a124:	ea48 0303 	orr.w	r3, r8, r3
  40a128:	fa20 fe07 	lsr.w	lr, r0, r7
  40a12c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a130:	40fd      	lsrs	r5, r7
  40a132:	ea4e 0e04 	orr.w	lr, lr, r4
  40a136:	fbb5 f9fc 	udiv	r9, r5, ip
  40a13a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a13e:	fb0c 5519 	mls	r5, ip, r9, r5
  40a142:	fa1f f883 	uxth.w	r8, r3
  40a146:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a14a:	fb09 f408 	mul.w	r4, r9, r8
  40a14e:	42ac      	cmp	r4, r5
  40a150:	fa02 f201 	lsl.w	r2, r2, r1
  40a154:	fa00 fa01 	lsl.w	sl, r0, r1
  40a158:	d908      	bls.n	40a16c <__udivmoddi4+0x244>
  40a15a:	18ed      	adds	r5, r5, r3
  40a15c:	f109 30ff 	add.w	r0, r9, #4294967295
  40a160:	d243      	bcs.n	40a1ea <__udivmoddi4+0x2c2>
  40a162:	42ac      	cmp	r4, r5
  40a164:	d941      	bls.n	40a1ea <__udivmoddi4+0x2c2>
  40a166:	f1a9 0902 	sub.w	r9, r9, #2
  40a16a:	441d      	add	r5, r3
  40a16c:	1b2d      	subs	r5, r5, r4
  40a16e:	fa1f fe8e 	uxth.w	lr, lr
  40a172:	fbb5 f0fc 	udiv	r0, r5, ip
  40a176:	fb0c 5510 	mls	r5, ip, r0, r5
  40a17a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a17e:	fb00 f808 	mul.w	r8, r0, r8
  40a182:	45a0      	cmp	r8, r4
  40a184:	d907      	bls.n	40a196 <__udivmoddi4+0x26e>
  40a186:	18e4      	adds	r4, r4, r3
  40a188:	f100 35ff 	add.w	r5, r0, #4294967295
  40a18c:	d229      	bcs.n	40a1e2 <__udivmoddi4+0x2ba>
  40a18e:	45a0      	cmp	r8, r4
  40a190:	d927      	bls.n	40a1e2 <__udivmoddi4+0x2ba>
  40a192:	3802      	subs	r0, #2
  40a194:	441c      	add	r4, r3
  40a196:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a19a:	eba4 0408 	sub.w	r4, r4, r8
  40a19e:	fba0 8902 	umull	r8, r9, r0, r2
  40a1a2:	454c      	cmp	r4, r9
  40a1a4:	46c6      	mov	lr, r8
  40a1a6:	464d      	mov	r5, r9
  40a1a8:	d315      	bcc.n	40a1d6 <__udivmoddi4+0x2ae>
  40a1aa:	d012      	beq.n	40a1d2 <__udivmoddi4+0x2aa>
  40a1ac:	b156      	cbz	r6, 40a1c4 <__udivmoddi4+0x29c>
  40a1ae:	ebba 030e 	subs.w	r3, sl, lr
  40a1b2:	eb64 0405 	sbc.w	r4, r4, r5
  40a1b6:	fa04 f707 	lsl.w	r7, r4, r7
  40a1ba:	40cb      	lsrs	r3, r1
  40a1bc:	431f      	orrs	r7, r3
  40a1be:	40cc      	lsrs	r4, r1
  40a1c0:	6037      	str	r7, [r6, #0]
  40a1c2:	6074      	str	r4, [r6, #4]
  40a1c4:	2100      	movs	r1, #0
  40a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1ca:	4618      	mov	r0, r3
  40a1cc:	e6f8      	b.n	409fc0 <__udivmoddi4+0x98>
  40a1ce:	4690      	mov	r8, r2
  40a1d0:	e6e0      	b.n	409f94 <__udivmoddi4+0x6c>
  40a1d2:	45c2      	cmp	sl, r8
  40a1d4:	d2ea      	bcs.n	40a1ac <__udivmoddi4+0x284>
  40a1d6:	ebb8 0e02 	subs.w	lr, r8, r2
  40a1da:	eb69 0503 	sbc.w	r5, r9, r3
  40a1de:	3801      	subs	r0, #1
  40a1e0:	e7e4      	b.n	40a1ac <__udivmoddi4+0x284>
  40a1e2:	4628      	mov	r0, r5
  40a1e4:	e7d7      	b.n	40a196 <__udivmoddi4+0x26e>
  40a1e6:	4640      	mov	r0, r8
  40a1e8:	e791      	b.n	40a10e <__udivmoddi4+0x1e6>
  40a1ea:	4681      	mov	r9, r0
  40a1ec:	e7be      	b.n	40a16c <__udivmoddi4+0x244>
  40a1ee:	4601      	mov	r1, r0
  40a1f0:	e778      	b.n	40a0e4 <__udivmoddi4+0x1bc>
  40a1f2:	3802      	subs	r0, #2
  40a1f4:	443c      	add	r4, r7
  40a1f6:	e745      	b.n	40a084 <__udivmoddi4+0x15c>
  40a1f8:	4608      	mov	r0, r1
  40a1fa:	e708      	b.n	40a00e <__udivmoddi4+0xe6>
  40a1fc:	f1a8 0802 	sub.w	r8, r8, #2
  40a200:	443d      	add	r5, r7
  40a202:	e72b      	b.n	40a05c <__udivmoddi4+0x134>

0040a204 <__aeabi_idiv0>:
  40a204:	4770      	bx	lr
  40a206:	bf00      	nop
  40a208:	09632509 	.word	0x09632509
  40a20c:	25097525 	.word	0x25097525
  40a210:	75250975 	.word	0x75250975
  40a214:	00000a0d 	.word	0x00000a0d
  40a218:	454c4449 	.word	0x454c4449
  40a21c:	00000000 	.word	0x00000000
  40a220:	51726d54 	.word	0x51726d54
  40a224:	00000000 	.word	0x00000000
  40a228:	20726d54 	.word	0x20726d54
  40a22c:	00637653 	.word	0x00637653
  40a230:	67676f74 	.word	0x67676f74
  40a234:	6c20656c 	.word	0x6c20656c
  40a238:	31206465 	.word	0x31206465
  40a23c:	00000000 	.word	0x00000000
  40a240:	67676f74 	.word	0x67676f74
  40a244:	6c20656c 	.word	0x6c20656c
  40a248:	32206465 	.word	0x32206465
  40a24c:	00000000 	.word	0x00000000
  40a250:	67676f74 	.word	0x67676f74
  40a254:	6c20656c 	.word	0x6c20656c
  40a258:	33206465 	.word	0x33206465
  40a25c:	00000000 	.word	0x00000000
  40a260:	46202d2d 	.word	0x46202d2d
  40a264:	72656572 	.word	0x72656572
  40a268:	20736f74 	.word	0x20736f74
  40a26c:	6d617845 	.word	0x6d617845
  40a270:	20656c70 	.word	0x20656c70
  40a274:	0d0a2d2d 	.word	0x0d0a2d2d
  40a278:	00000000 	.word	0x00000000
  40a27c:	454d4153 	.word	0x454d4153
  40a280:	582d3037 	.word	0x582d3037
  40a284:	00444c50 	.word	0x00444c50
  40a288:	25202d2d 	.word	0x25202d2d
  40a28c:	000d0a73 	.word	0x000d0a73
  40a290:	313a3931 	.word	0x313a3931
  40a294:	36333a30 	.word	0x36333a30
  40a298:	00000000 	.word	0x00000000
  40a29c:	20727041 	.word	0x20727041
  40a2a0:	32203932 	.word	0x32203932
  40a2a4:	00303230 	.word	0x00303230
  40a2a8:	43202d2d 	.word	0x43202d2d
  40a2ac:	69706d6f 	.word	0x69706d6f
  40a2b0:	3a64656c 	.word	0x3a64656c
  40a2b4:	20732520 	.word	0x20732520
  40a2b8:	2d207325 	.word	0x2d207325
  40a2bc:	000d0a2d 	.word	0x000d0a2d
  40a2c0:	696e6f4d 	.word	0x696e6f4d
  40a2c4:	00726f74 	.word	0x00726f74
  40a2c8:	6c696146 	.word	0x6c696146
  40a2cc:	74206465 	.word	0x74206465
  40a2d0:	7263206f 	.word	0x7263206f
  40a2d4:	65746165 	.word	0x65746165
  40a2d8:	6e6f4d20 	.word	0x6e6f4d20
  40a2dc:	726f7469 	.word	0x726f7469
  40a2e0:	73617420 	.word	0x73617420
  40a2e4:	000a0d6b 	.word	0x000a0d6b
  40a2e8:	0064654c 	.word	0x0064654c
  40a2ec:	6c696146 	.word	0x6c696146
  40a2f0:	74206465 	.word	0x74206465
  40a2f4:	7263206f 	.word	0x7263206f
  40a2f8:	65746165 	.word	0x65746165
  40a2fc:	73657420 	.word	0x73657420
  40a300:	656c2074 	.word	0x656c2074
  40a304:	61742064 	.word	0x61742064
  40a308:	0a0d6b73 	.word	0x0a0d6b73
  40a30c:	00000000 	.word	0x00000000
  40a310:	3164654c 	.word	0x3164654c
  40a314:	00000000 	.word	0x00000000
  40a318:	3264654c 	.word	0x3264654c
  40a31c:	00000000 	.word	0x00000000
  40a320:	3364654c 	.word	0x3364654c
  40a324:	00000000 	.word	0x00000000
  40a328:	63657845 	.word	0x63657845
  40a32c:	00657475 	.word	0x00657475
  40a330:	6c696146 	.word	0x6c696146
  40a334:	74206465 	.word	0x74206465
  40a338:	7263206f 	.word	0x7263206f
  40a33c:	65746165 	.word	0x65746165
  40a340:	73657420 	.word	0x73657420
  40a344:	78652074 	.word	0x78652074
  40a348:	74756365 	.word	0x74756365
  40a34c:	61742065 	.word	0x61742065
  40a350:	0a0d6b73 	.word	0x0a0d6b73
  40a354:	00000000 	.word	0x00000000
  40a358:	74726155 	.word	0x74726155
  40a35c:	00005852 	.word	0x00005852
  40a360:	6c696146 	.word	0x6c696146
  40a364:	74206465 	.word	0x74206465
  40a368:	7263206f 	.word	0x7263206f
  40a36c:	65746165 	.word	0x65746165
  40a370:	73657420 	.word	0x73657420
  40a374:	61752074 	.word	0x61752074
  40a378:	58527472 	.word	0x58527472
  40a37c:	73617420 	.word	0x73617420
  40a380:	000a0d6b 	.word	0x000a0d6b
  40a384:	686c6166 	.word	0x686c6166
  40a388:	6d652061 	.word	0x6d652061
  40a38c:	69726320 	.word	0x69726320
  40a390:	6f207261 	.word	0x6f207261
  40a394:	6d657320 	.word	0x6d657320
  40a398:	726f6661 	.word	0x726f6661
  40a39c:	000a206f 	.word	0x000a206f
  40a3a0:	202d2d2d 	.word	0x202d2d2d
  40a3a4:	6b736174 	.word	0x6b736174
  40a3a8:	20232320 	.word	0x20232320
  40a3ac:	000a7525 	.word	0x000a7525
  40a3b0:	63617473 	.word	0x63617473
  40a3b4:	766f206b 	.word	0x766f206b
  40a3b8:	6c667265 	.word	0x6c667265
  40a3bc:	2520776f 	.word	0x2520776f
  40a3c0:	73252078 	.word	0x73252078
  40a3c4:	00000a0d 	.word	0x00000a0d

0040a3c8 <_global_impure_ptr>:
  40a3c8:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  40a3d8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40a3e8:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a3f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a408:	0000296c 00000030                       l)..0...

0040a410 <blanks.7223>:
  40a410:	20202020 20202020 20202020 20202020                     

0040a420 <zeroes.7224>:
  40a420:	30303030 30303030 30303030 30303030     0000000000000000

0040a430 <blanks.7217>:
  40a430:	20202020 20202020 20202020 20202020                     

0040a440 <zeroes.7218>:
  40a440:	30303030 30303030 30303030 30303030     0000000000000000
  40a450:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40a460:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040a470 <__mprec_bigtens>:
  40a470:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40a480:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40a490:	7f73bf3c 75154fdd                       <.s..O.u

0040a498 <__mprec_tens>:
  40a498:	00000000 3ff00000 00000000 40240000     .......?......$@
  40a4a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40a4b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40a4c8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40a4d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a4e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a4f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a508:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a518:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a528:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a538:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a548:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a558:	79d99db4 44ea7843                       ...yCx.D

0040a560 <p05.6055>:
  40a560:	00000005 00000019 0000007d              ........}...

0040a56c <_ctype_>:
  40a56c:	20202000 20202020 28282020 20282828     .         ((((( 
  40a57c:	20202020 20202020 20202020 20202020                     
  40a58c:	10108820 10101010 10101010 10101010      ...............
  40a59c:	04040410 04040404 10040404 10101010     ................
  40a5ac:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a5bc:	01010101 01010101 01010101 10101010     ................
  40a5cc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a5dc:	02020202 02020202 02020202 10101010     ................
  40a5ec:	00000020 00000000 00000000 00000000      ...............
	...

0040a670 <_init>:
  40a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a672:	bf00      	nop
  40a674:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a676:	bc08      	pop	{r3}
  40a678:	469e      	mov	lr, r3
  40a67a:	4770      	bx	lr

0040a67c <__init_array_start>:
  40a67c:	00406b55 	.word	0x00406b55

0040a680 <__frame_dummy_init_array_entry>:
  40a680:	0040018d                                ..@.

0040a684 <_fini>:
  40a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a686:	bf00      	nop
  40a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a68a:	bc08      	pop	{r3}
  40a68c:	469e      	mov	lr, r3
  40a68e:	4770      	bx	lr

0040a690 <__fini_array_start>:
  40a690:	00400169 	.word	0x00400169
