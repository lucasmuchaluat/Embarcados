
RTOS-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007dbc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407dbc  00407dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00407dc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c0c8  204009c0  00408784  000209c0  2**2
                  ALLOC
  4 .stack        00002000  2040ca88  0041484c  000209c0  2**0
                  ALLOC
  5 .heap         00000200  2040ea88  0041684c  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  000209ec  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002eea9  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000604f  00000000  00000000  0004f949  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000013e8  00000000  00000000  00055998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028318  00000000  00000000  00056d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018e27  00000000  00000000  0007f098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a0536  00000000  00000000  00097ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000eedf  00000000  00000000  001383f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001650  00000000  00000000  001472d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003e20  00000000  00000000  00148924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 ea 40 20 41 20 40 00 3f 20 40 00 3f 20 40 00     ..@ A @.? @.? @.
  400010:	3f 20 40 00 3f 20 40 00 3f 20 40 00 00 00 00 00     ? @.? @.? @.....
	...
  40002c:	19 24 40 00 3f 20 40 00 00 00 00 00 b9 24 40 00     .$@.? @......$@.
  40003c:	21 25 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     !%@.? @.? @.? @.
  40004c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40005c:	3f 20 40 00 3f 20 40 00 00 00 00 00 b9 19 40 00     ? @.? @.......@.
  40006c:	cd 19 40 00 e1 19 40 00 3f 20 40 00 3f 20 40 00     ..@...@.? @.? @.
  40007c:	3f 20 40 00 f5 19 40 00 09 1a 40 00 3f 20 40 00     ? @...@...@.? @.
  40008c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40009c:	3f 20 40 00 5d 41 40 00 3f 20 40 00 3f 20 40 00     ? @.]A@.? @.? @.
  4000ac:	3f 20 40 00 3f 20 40 00 49 04 40 00 3f 20 40 00     ? @.? @.I.@.? @.
  4000bc:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  4000cc:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  4000dc:	3f 20 40 00 5d 04 40 00 3f 20 40 00 3f 20 40 00     ? @.].@.? @.? @.
  4000ec:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  4000fc:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40010c:	3f 20 40 00 3f 20 40 00 00 00 00 00 00 00 00 00     ? @.? @.........
  40011c:	00 00 00 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ....? @.? @.? @.
  40012c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40013c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40014c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40015c:	3f 20 40 00 3f 20 40 00 3f 20 40 00                 ? @.? @.? @.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00407dc4 	.word	0x00407dc4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00407dc4 	.word	0x00407dc4
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00407dc4 	.word	0x00407dc4
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c978 	.word	0x2040c978
  400258:	40064000 	.word	0x40064000

0040025c <afec_ch_set_config>:
{
  40025c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40025e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400260:	2301      	movs	r3, #1
  400262:	408b      	lsls	r3, r1
  400264:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400268:	7815      	ldrb	r5, [r2, #0]
  40026a:	2d00      	cmp	r5, #0
  40026c:	bf08      	it	eq
  40026e:	2300      	moveq	r3, #0
  400270:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400272:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400274:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400276:	004b      	lsls	r3, r1, #1
  400278:	2103      	movs	r1, #3
  40027a:	4099      	lsls	r1, r3
  40027c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400280:	7851      	ldrb	r1, [r2, #1]
  400282:	4099      	lsls	r1, r3
  400284:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400286:	6541      	str	r1, [r0, #84]	; 0x54
}
  400288:	bc30      	pop	{r4, r5}
  40028a:	4770      	bx	lr

0040028c <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  40028c:	784b      	ldrb	r3, [r1, #1]
  40028e:	780a      	ldrb	r2, [r1, #0]
  400290:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400292:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400294:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400296:	884b      	ldrh	r3, [r1, #2]
  400298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40029c:	6743      	str	r3, [r0, #116]	; 0x74
  40029e:	4770      	bx	lr

004002a0 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4002a0:	2200      	movs	r2, #0
  4002a2:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4002a4:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <afec_get_config_defaults+0x28>)
  4002a6:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4002a8:	4b08      	ldr	r3, [pc, #32]	; (4002cc <afec_get_config_defaults+0x2c>)
  4002aa:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4002ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4002b0:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4002b2:	2302      	movs	r3, #2
  4002b4:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4002b6:	2301      	movs	r3, #1
  4002b8:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4002ba:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4002bc:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4002be:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4002c0:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4002c2:	7583      	strb	r3, [r0, #22]
  4002c4:	4770      	bx	lr
  4002c6:	bf00      	nop
  4002c8:	11e1a300 	.word	0x11e1a300
  4002cc:	005b8d80 	.word	0x005b8d80

004002d0 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002d0:	2300      	movs	r3, #0
  4002d2:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002d4:	2301      	movs	r3, #1
  4002d6:	7043      	strb	r3, [r0, #1]
  4002d8:	4770      	bx	lr

004002da <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002da:	2300      	movs	r3, #0
  4002dc:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002de:	2320      	movs	r3, #32
  4002e0:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002e2:	23ff      	movs	r3, #255	; 0xff
  4002e4:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002e6:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002ea:	8083      	strh	r3, [r0, #4]
  4002ec:	4770      	bx	lr
	...

004002f0 <afec_init>:
	return afec->AFEC_ISR;
  4002f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002f2:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002f6:	d001      	beq.n	4002fc <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002f8:	2019      	movs	r0, #25
  4002fa:	4770      	bx	lr
{
  4002fc:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002fe:	2301      	movs	r3, #1
  400300:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	7ccb      	ldrb	r3, [r1, #19]
  400304:	2b00      	cmp	r3, #0
  400306:	bf18      	it	ne
  400308:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40030c:	684b      	ldr	r3, [r1, #4]
  40030e:	688c      	ldr	r4, [r1, #8]
  400310:	fbb3 f3f4 	udiv	r3, r3, r4
  400314:	3b01      	subs	r3, #1
  400316:	021b      	lsls	r3, r3, #8
  400318:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40031a:	68cc      	ldr	r4, [r1, #12]
  40031c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400320:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400322:	7c0c      	ldrb	r4, [r1, #16]
  400324:	0624      	lsls	r4, r4, #24
  400326:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40032a:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  40032c:	7c4c      	ldrb	r4, [r1, #17]
  40032e:	0724      	lsls	r4, r4, #28
  400330:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400334:	4323      	orrs	r3, r4
  400336:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400338:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40033a:	7d0b      	ldrb	r3, [r1, #20]
  40033c:	2b00      	cmp	r3, #0
  40033e:	bf14      	ite	ne
  400340:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400344:	2300      	moveq	r3, #0
  400346:	680a      	ldr	r2, [r1, #0]
  400348:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40034a:	7d4a      	ldrb	r2, [r1, #21]
  40034c:	2a00      	cmp	r2, #0
  40034e:	bf14      	ite	ne
  400350:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400354:	2200      	moveq	r2, #0
			(config->resolution) |
  400356:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400358:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40035a:	7d8b      	ldrb	r3, [r1, #22]
  40035c:	021b      	lsls	r3, r3, #8
  40035e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400362:	f043 030c 	orr.w	r3, r3, #12
  400366:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  40036a:	4b0f      	ldr	r3, [pc, #60]	; (4003a8 <afec_init+0xb8>)
  40036c:	4298      	cmp	r0, r3
  40036e:	d006      	beq.n	40037e <afec_init+0x8e>
	if(afec == AFEC1) {
  400370:	4b0e      	ldr	r3, [pc, #56]	; (4003ac <afec_init+0xbc>)
  400372:	4298      	cmp	r0, r3
  400374:	d00d      	beq.n	400392 <afec_init+0xa2>
	return STATUS_OK;
  400376:	2000      	movs	r0, #0
}
  400378:	f85d 4b04 	ldr.w	r4, [sp], #4
  40037c:	4770      	bx	lr
  40037e:	4b0c      	ldr	r3, [pc, #48]	; (4003b0 <afec_init+0xc0>)
  400380:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  400384:	2200      	movs	r2, #0
  400386:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40038a:	428b      	cmp	r3, r1
  40038c:	d1fb      	bne.n	400386 <afec_init+0x96>
	return STATUS_OK;
  40038e:	2000      	movs	r0, #0
  400390:	e7f2      	b.n	400378 <afec_init+0x88>
  400392:	4b08      	ldr	r3, [pc, #32]	; (4003b4 <afec_init+0xc4>)
  400394:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400398:	2200      	movs	r2, #0
  40039a:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40039e:	428b      	cmp	r3, r1
  4003a0:	d1fb      	bne.n	40039a <afec_init+0xaa>
	return STATUS_OK;
  4003a2:	2000      	movs	r0, #0
  4003a4:	e7e8      	b.n	400378 <afec_init+0x88>
  4003a6:	bf00      	nop
  4003a8:	4003c000 	.word	0x4003c000
  4003ac:	40064000 	.word	0x40064000
  4003b0:	2040c974 	.word	0x2040c974
  4003b4:	2040c9b8 	.word	0x2040c9b8

004003b8 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4003b8:	4b0c      	ldr	r3, [pc, #48]	; (4003ec <afec_enable_interrupt+0x34>)
  4003ba:	4299      	cmp	r1, r3
  4003bc:	d007      	beq.n	4003ce <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4003be:	290b      	cmp	r1, #11
  4003c0:	d80b      	bhi.n	4003da <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  4003c2:	d006      	beq.n	4003d2 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4003c4:	2301      	movs	r3, #1
  4003c6:	fa03 f101 	lsl.w	r1, r3, r1
  4003ca:	6241      	str	r1, [r0, #36]	; 0x24
  4003cc:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003ce:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003d0:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003d6:	6243      	str	r3, [r0, #36]	; 0x24
  4003d8:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003da:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003dc:	bf94      	ite	ls
  4003de:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003e0:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003e2:	2301      	movs	r3, #1
  4003e4:	fa03 f101 	lsl.w	r1, r3, r1
  4003e8:	6241      	str	r1, [r0, #36]	; 0x24
  4003ea:	4770      	bx	lr
  4003ec:	47000fff 	.word	0x47000fff

004003f0 <afec_set_callback>:
{
  4003f0:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003f2:	4c11      	ldr	r4, [pc, #68]	; (400438 <afec_set_callback+0x48>)
  4003f4:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003f6:	bf0c      	ite	eq
  4003f8:	2410      	moveq	r4, #16
  4003fa:	2400      	movne	r4, #0
  4003fc:	440c      	add	r4, r1
  4003fe:	4d0f      	ldr	r5, [pc, #60]	; (40043c <afec_set_callback+0x4c>)
  400400:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400404:	d10a      	bne.n	40041c <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400406:	4a0e      	ldr	r2, [pc, #56]	; (400440 <afec_set_callback+0x50>)
  400408:	f44f 7480 	mov.w	r4, #256	; 0x100
  40040c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400410:	015b      	lsls	r3, r3, #5
  400412:	b2db      	uxtb	r3, r3
  400414:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400418:	6054      	str	r4, [r2, #4]
  40041a:	e009      	b.n	400430 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40041c:	4a08      	ldr	r2, [pc, #32]	; (400440 <afec_set_callback+0x50>)
  40041e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400422:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400426:	015b      	lsls	r3, r3, #5
  400428:	b2db      	uxtb	r3, r3
  40042a:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40042e:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400430:	4b04      	ldr	r3, [pc, #16]	; (400444 <afec_set_callback+0x54>)
  400432:	4798      	blx	r3
  400434:	bd38      	pop	{r3, r4, r5, pc}
  400436:	bf00      	nop
  400438:	40064000 	.word	0x40064000
  40043c:	2040c978 	.word	0x2040c978
  400440:	e000e100 	.word	0xe000e100
  400444:	004003b9 	.word	0x004003b9

00400448 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400448:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40044a:	4802      	ldr	r0, [pc, #8]	; (400454 <AFEC0_Handler+0xc>)
  40044c:	4b02      	ldr	r3, [pc, #8]	; (400458 <AFEC0_Handler+0x10>)
  40044e:	4798      	blx	r3
  400450:	bd08      	pop	{r3, pc}
  400452:	bf00      	nop
  400454:	4003c000 	.word	0x4003c000
  400458:	004001d5 	.word	0x004001d5

0040045c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40045c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40045e:	4802      	ldr	r0, [pc, #8]	; (400468 <AFEC1_Handler+0xc>)
  400460:	4b02      	ldr	r3, [pc, #8]	; (40046c <AFEC1_Handler+0x10>)
  400462:	4798      	blx	r3
  400464:	bd08      	pop	{r3, pc}
  400466:	bf00      	nop
  400468:	40064000 	.word	0x40064000
  40046c:	004001d5 	.word	0x004001d5

00400470 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400470:	b500      	push	{lr}
  400472:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400474:	4b13      	ldr	r3, [pc, #76]	; (4004c4 <afec_enable+0x54>)
  400476:	4298      	cmp	r0, r3
  400478:	bf0c      	ite	eq
  40047a:	2028      	moveq	r0, #40	; 0x28
  40047c:	201d      	movne	r0, #29
  40047e:	4b12      	ldr	r3, [pc, #72]	; (4004c8 <afec_enable+0x58>)
  400480:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400482:	4b12      	ldr	r3, [pc, #72]	; (4004cc <afec_enable+0x5c>)
  400484:	789b      	ldrb	r3, [r3, #2]
  400486:	2bff      	cmp	r3, #255	; 0xff
  400488:	d01a      	beq.n	4004c0 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40048a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40048e:	fab3 f383 	clz	r3, r3
  400492:	095b      	lsrs	r3, r3, #5
  400494:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400496:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400498:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40049c:	2200      	movs	r2, #0
  40049e:	4b0c      	ldr	r3, [pc, #48]	; (4004d0 <afec_enable+0x60>)
  4004a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4004a2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4004a4:	4a09      	ldr	r2, [pc, #36]	; (4004cc <afec_enable+0x5c>)
  4004a6:	7893      	ldrb	r3, [r2, #2]
  4004a8:	3301      	adds	r3, #1
  4004aa:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004ac:	b129      	cbz	r1, 4004ba <afec_enable+0x4a>
		cpu_irq_enable();
  4004ae:	2201      	movs	r2, #1
  4004b0:	4b07      	ldr	r3, [pc, #28]	; (4004d0 <afec_enable+0x60>)
  4004b2:	701a      	strb	r2, [r3, #0]
  4004b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004b8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4004ba:	b003      	add	sp, #12
  4004bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4004c0:	e7fe      	b.n	4004c0 <afec_enable+0x50>
  4004c2:	bf00      	nop
  4004c4:	40064000 	.word	0x40064000
  4004c8:	00401b3d 	.word	0x00401b3d
  4004cc:	2040c970 	.word	0x2040c970
  4004d0:	2040000a 	.word	0x2040000a

004004d4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4004d4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4004d6:	0189      	lsls	r1, r1, #6
  4004d8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4004da:	2402      	movs	r4, #2
  4004dc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4004de:	f04f 31ff 	mov.w	r1, #4294967295
  4004e2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4004e4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4004e6:	605a      	str	r2, [r3, #4]
}
  4004e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ec:	4770      	bx	lr

004004ee <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4004ee:	0189      	lsls	r1, r1, #6
  4004f0:	2305      	movs	r3, #5
  4004f2:	5043      	str	r3, [r0, r1]
  4004f4:	4770      	bx	lr

004004f6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4004f6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4004fa:	61ca      	str	r2, [r1, #28]
  4004fc:	4770      	bx	lr

004004fe <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4004fe:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400502:	624a      	str	r2, [r1, #36]	; 0x24
  400504:	4770      	bx	lr

00400506 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400506:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40050a:	6a08      	ldr	r0, [r1, #32]
}
  40050c:	4770      	bx	lr

0040050e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40050e:	b4f0      	push	{r4, r5, r6, r7}
  400510:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400512:	2402      	movs	r4, #2
  400514:	9401      	str	r4, [sp, #4]
  400516:	2408      	movs	r4, #8
  400518:	9402      	str	r4, [sp, #8]
  40051a:	2420      	movs	r4, #32
  40051c:	9403      	str	r4, [sp, #12]
  40051e:	2480      	movs	r4, #128	; 0x80
  400520:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400522:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400524:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400526:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400528:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40052c:	d814      	bhi.n	400558 <tc_find_mck_divisor+0x4a>
  40052e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400530:	42a0      	cmp	r0, r4
  400532:	d217      	bcs.n	400564 <tc_find_mck_divisor+0x56>
  400534:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400536:	af01      	add	r7, sp, #4
  400538:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40053c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400540:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400542:	4284      	cmp	r4, r0
  400544:	d30a      	bcc.n	40055c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400546:	4286      	cmp	r6, r0
  400548:	d90d      	bls.n	400566 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40054a:	3501      	adds	r5, #1
	for (ul_index = 0;
  40054c:	2d05      	cmp	r5, #5
  40054e:	d1f3      	bne.n	400538 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400550:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400552:	b006      	add	sp, #24
  400554:	bcf0      	pop	{r4, r5, r6, r7}
  400556:	4770      	bx	lr
			return 0;
  400558:	2000      	movs	r0, #0
  40055a:	e7fa      	b.n	400552 <tc_find_mck_divisor+0x44>
  40055c:	2000      	movs	r0, #0
  40055e:	e7f8      	b.n	400552 <tc_find_mck_divisor+0x44>
	return 1;
  400560:	2001      	movs	r0, #1
  400562:	e7f6      	b.n	400552 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400564:	2500      	movs	r5, #0
	if (p_uldiv) {
  400566:	b12a      	cbz	r2, 400574 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400568:	a906      	add	r1, sp, #24
  40056a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40056e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400572:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400574:	2b00      	cmp	r3, #0
  400576:	d0f3      	beq.n	400560 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400578:	601d      	str	r5, [r3, #0]
	return 1;
  40057a:	2001      	movs	r0, #1
  40057c:	e7e9      	b.n	400552 <tc_find_mck_divisor+0x44>
	...

00400580 <mxt_init>:
* to the maXTouch Xplained Pro.
*
* \param device Pointer to mxt_device struct
*/
void mxt_init(struct mxt_device *device)
{
  400580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400584:	b09c      	sub	sp, #112	; 0x70
  400586:	4604      	mov	r4, r0
  enum status_code status;

  /* T8 configuration object data */
  uint8_t t8_object[] = {
  400588:	4d48      	ldr	r5, [pc, #288]	; (4006ac <mxt_init+0x12c>)
  40058a:	ab19      	add	r3, sp, #100	; 0x64
  40058c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400590:	c303      	stmia	r3!, {r0, r1}
  400592:	801a      	strh	r2, [r3, #0]
    0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
    0x00, 0x32, 0x19
  };

  /* T9 configuration object data */
  uint8_t t9_object[] = {
  400594:	ae10      	add	r6, sp, #64	; 0x40
  400596:	f105 070c 	add.w	r7, r5, #12
  40059a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  40059c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  40059e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4005a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4005a2:	683b      	ldr	r3, [r7, #0]
  4005a4:	6033      	str	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
    0x02
  };

  /* T46 configuration object data */
  uint8_t t46_object[] = {
  4005a6:	ab0d      	add	r3, sp, #52	; 0x34
  4005a8:	f105 0230 	add.w	r2, r5, #48	; 0x30
  4005ac:	ca07      	ldmia	r2, {r0, r1, r2}
  4005ae:	c303      	stmia	r3!, {r0, r1}
  4005b0:	701a      	strb	r2, [r3, #0]
    0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
    0x00, 0x00
  };
  
  /* T56 configuration object data */
  uint8_t t56_object[] = {
  4005b2:	ae04      	add	r6, sp, #16
  4005b4:	353c      	adds	r5, #60	; 0x3c
  4005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4005b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4005bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4005be:	682b      	ldr	r3, [r5, #0]
  4005c0:	7033      	strb	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
  };

  /* TWI configuration */
  twihs_master_options_t twi_opt = {
  4005c2:	2500      	movs	r5, #0
  4005c4:	9503      	str	r5, [sp, #12]
  4005c6:	4b3a      	ldr	r3, [pc, #232]	; (4006b0 <mxt_init+0x130>)
  4005c8:	9302      	str	r3, [sp, #8]
  4005ca:	274a      	movs	r7, #74	; 0x4a
  4005cc:	f88d 700c 	strb.w	r7, [sp, #12]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4005d0:	4b38      	ldr	r3, [pc, #224]	; (4006b4 <mxt_init+0x134>)
  4005d2:	9301      	str	r3, [sp, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005d4:	2013      	movs	r0, #19
  4005d6:	4b38      	ldr	r3, [pc, #224]	; (4006b8 <mxt_init+0x138>)
  4005d8:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4005da:	4e38      	ldr	r6, [pc, #224]	; (4006bc <mxt_init+0x13c>)
  4005dc:	a901      	add	r1, sp, #4
  4005de:	4630      	mov	r0, r6
  4005e0:	4b37      	ldr	r3, [pc, #220]	; (4006c0 <mxt_init+0x140>)
  4005e2:	4798      	blx	r3

  status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
  Assert(status == STATUS_OK);

  /* Initialize the maXTouch device */
  status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  4005e4:	2302      	movs	r3, #2
  4005e6:	463a      	mov	r2, r7
  4005e8:	4631      	mov	r1, r6
  4005ea:	4620      	mov	r0, r4
  4005ec:	4e35      	ldr	r6, [pc, #212]	; (4006c4 <mxt_init+0x144>)
  4005ee:	47b0      	blx	r6
  MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
  Assert(status == STATUS_OK);

  /* Issue soft reset of maXTouch device by writing a non-zero value to
  * the reset register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  4005f0:	462a      	mov	r2, r5
  4005f2:	2106      	movs	r1, #6
  4005f4:	4620      	mov	r0, r4
  4005f6:	4e34      	ldr	r6, [pc, #208]	; (4006c8 <mxt_init+0x148>)
  4005f8:	47b0      	blx	r6
  4005fa:	2201      	movs	r2, #1
  4005fc:	4601      	mov	r1, r0
  4005fe:	4620      	mov	r0, r4
  400600:	4f32      	ldr	r7, [pc, #200]	; (4006cc <mxt_init+0x14c>)
  400602:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

  /* Wait for the reset of the device to complete */
  delay_ms(MXT_RESET_TIME);
  400604:	4832      	ldr	r0, [pc, #200]	; (4006d0 <mxt_init+0x150>)
  400606:	4b33      	ldr	r3, [pc, #204]	; (4006d4 <mxt_init+0x154>)
  400608:	4798      	blx	r3

  /* Write data to configuration registers in T7 configuration object */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40060a:	462a      	mov	r2, r5
  40060c:	2107      	movs	r1, #7
  40060e:	4620      	mov	r0, r4
  400610:	47b0      	blx	r6
  400612:	2220      	movs	r2, #32
  400614:	4601      	mov	r1, r0
  400616:	4620      	mov	r0, r4
  400618:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40061a:	462a      	mov	r2, r5
  40061c:	2107      	movs	r1, #7
  40061e:	4620      	mov	r0, r4
  400620:	47b0      	blx	r6
  400622:	1c41      	adds	r1, r0, #1
  400624:	2210      	movs	r2, #16
  400626:	b289      	uxth	r1, r1
  400628:	4620      	mov	r0, r4
  40062a:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40062c:	462a      	mov	r2, r5
  40062e:	2107      	movs	r1, #7
  400630:	4620      	mov	r0, r4
  400632:	47b0      	blx	r6
  400634:	1c81      	adds	r1, r0, #2
  400636:	224b      	movs	r2, #75	; 0x4b
  400638:	b289      	uxth	r1, r1
  40063a:	4620      	mov	r0, r4
  40063c:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40063e:	462a      	mov	r2, r5
  400640:	2107      	movs	r1, #7
  400642:	4620      	mov	r0, r4
  400644:	47b0      	blx	r6
  400646:	1cc1      	adds	r1, r0, #3
  400648:	2284      	movs	r2, #132	; 0x84
  40064a:	b289      	uxth	r1, r1
  40064c:	4620      	mov	r0, r4
  40064e:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

  /* Write predefined configuration data to configuration objects */
  mxt_write_config_object(device, mxt_get_object_address(device,
  400650:	462a      	mov	r2, r5
  400652:	2108      	movs	r1, #8
  400654:	4620      	mov	r0, r4
  400656:	47b0      	blx	r6
  400658:	aa19      	add	r2, sp, #100	; 0x64
  40065a:	4601      	mov	r1, r0
  40065c:	4620      	mov	r0, r4
  40065e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4006d8 <mxt_init+0x158>
  400662:	47c0      	blx	r8
  MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400664:	462a      	mov	r2, r5
  400666:	2109      	movs	r1, #9
  400668:	4620      	mov	r0, r4
  40066a:	47b0      	blx	r6
  40066c:	aa10      	add	r2, sp, #64	; 0x40
  40066e:	4601      	mov	r1, r0
  400670:	4620      	mov	r0, r4
  400672:	47c0      	blx	r8
  MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400674:	462a      	mov	r2, r5
  400676:	212e      	movs	r1, #46	; 0x2e
  400678:	4620      	mov	r0, r4
  40067a:	47b0      	blx	r6
  40067c:	aa0d      	add	r2, sp, #52	; 0x34
  40067e:	4601      	mov	r1, r0
  400680:	4620      	mov	r0, r4
  400682:	47c0      	blx	r8
  MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400684:	462a      	mov	r2, r5
  400686:	2138      	movs	r1, #56	; 0x38
  400688:	4620      	mov	r0, r4
  40068a:	47b0      	blx	r6
  40068c:	aa04      	add	r2, sp, #16
  40068e:	4601      	mov	r1, r0
  400690:	4620      	mov	r0, r4
  400692:	47c0      	blx	r8
  MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

  /* Issue recalibration command to maXTouch device by writing a non-zero
  * value to the calibrate register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400694:	462a      	mov	r2, r5
  400696:	2106      	movs	r1, #6
  400698:	4620      	mov	r0, r4
  40069a:	47b0      	blx	r6
  40069c:	1c81      	adds	r1, r0, #2
  40069e:	2201      	movs	r2, #1
  4006a0:	b289      	uxth	r1, r1
  4006a2:	4620      	mov	r0, r4
  4006a4:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
  4006a6:	b01c      	add	sp, #112	; 0x70
  4006a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4006ac:	00407b18 	.word	0x00407b18
  4006b0:	00061a80 	.word	0x00061a80
  4006b4:	08f0d180 	.word	0x08f0d180
  4006b8:	00401b3d 	.word	0x00401b3d
  4006bc:	40018000 	.word	0x40018000
  4006c0:	00401d89 	.word	0x00401d89
  4006c4:	004006dd 	.word	0x004006dd
  4006c8:	00400975 	.word	0x00400975
  4006cc:	00400a2d 	.word	0x00400a2d
  4006d0:	003228d8 	.word	0x003228d8
  4006d4:	20400001 	.word	0x20400001
  4006d8:	004009b5 	.word	0x004009b5

004006dc <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4006de:	b087      	sub	sp, #28
  4006e0:	4604      	mov	r4, r0
  4006e2:	460e      	mov	r6, r1
  4006e4:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4006e6:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4006e8:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4006ea:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4006ec:	2500      	movs	r5, #0
  4006ee:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4006f0:	2007      	movs	r0, #7
  4006f2:	4b9d      	ldr	r3, [pc, #628]	; (400968 <mxt_init_device+0x28c>)
  4006f4:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4006f6:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4006f8:	9501      	str	r5, [sp, #4]
  4006fa:	9505      	str	r5, [sp, #20]
  4006fc:	2302      	movs	r3, #2
  4006fe:	9302      	str	r3, [sp, #8]
  400700:	9003      	str	r0, [sp, #12]
  400702:	2307      	movs	r3, #7
  400704:	9304      	str	r3, [sp, #16]
  400706:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40070a:	a901      	add	r1, sp, #4
  40070c:	4630      	mov	r0, r6
  40070e:	4b97      	ldr	r3, [pc, #604]	; (40096c <mxt_init_device+0x290>)
  400710:	4798      	blx	r3
  400712:	1b40      	subs	r0, r0, r5
  400714:	bf18      	it	ne
  400716:	2001      	movne	r0, #1
  400718:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  40071a:	b108      	cbz	r0, 400720 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  40071c:	b007      	add	sp, #28
  40071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400720:	6825      	ldr	r5, [r4, #0]
  400722:	79a8      	ldrb	r0, [r5, #6]
  400724:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400728:	0040      	lsls	r0, r0, #1
  40072a:	4b8f      	ldr	r3, [pc, #572]	; (400968 <mxt_init_device+0x28c>)
  40072c:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  40072e:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400730:	2300      	movs	r3, #0
  400732:	9301      	str	r3, [sp, #4]
  400734:	9304      	str	r3, [sp, #16]
  400736:	9305      	str	r3, [sp, #20]
  400738:	2307      	movs	r3, #7
  40073a:	f88d 3004 	strb.w	r3, [sp, #4]
  40073e:	2302      	movs	r3, #2
  400740:	9302      	str	r3, [sp, #8]
  400742:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400744:	79ab      	ldrb	r3, [r5, #6]
  400746:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40074a:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  40074c:	9304      	str	r3, [sp, #16]
  40074e:	7b23      	ldrb	r3, [r4, #12]
  400750:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400754:	a901      	add	r1, sp, #4
  400756:	68a0      	ldr	r0, [r4, #8]
  400758:	4b84      	ldr	r3, [pc, #528]	; (40096c <mxt_init_device+0x290>)
  40075a:	4798      	blx	r3
  40075c:	3000      	adds	r0, #0
  40075e:	bf18      	it	ne
  400760:	2001      	movne	r0, #1
  400762:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400764:	2800      	cmp	r0, #0
  400766:	d1d9      	bne.n	40071c <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400768:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  40076a:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  40076c:	79bb      	ldrb	r3, [r7, #6]
  40076e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400772:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400774:	3607      	adds	r6, #7
  400776:	b2b6      	uxth	r6, r6
  400778:	463a      	mov	r2, r7
  40077a:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  40077c:	2100      	movs	r1, #0
		result ^= crcpoly;
  40077e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400970 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400782:	f892 e001 	ldrb.w	lr, [r2, #1]
  400786:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400788:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  40078c:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400790:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  400794:	bf18      	it	ne
  400796:	ea81 010c 	eorne.w	r1, r1, ip
  40079a:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  40079c:	42ba      	cmp	r2, r7
  40079e:	d1f0      	bne.n	400782 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4007a0:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4007a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007a6:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4007aa:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4007ae:	d003      	beq.n	4007b8 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4007b0:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4007b4:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4007b8:	f1a6 0708 	sub.w	r7, r6, #8
  4007bc:	2f01      	cmp	r7, #1
  4007be:	dd12      	ble.n	4007e6 <mxt_init_device+0x10a>
  4007c0:	2301      	movs	r3, #1
		result ^= crcpoly;
  4007c2:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400970 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4007c6:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4007c8:	784d      	ldrb	r5, [r1, #1]
  4007ca:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4007cc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4007d0:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4007d4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4007d8:	bf18      	it	ne
  4007da:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4007de:	3302      	adds	r3, #2
  4007e0:	b29b      	uxth	r3, r3
  4007e2:	42bb      	cmp	r3, r7
  4007e4:	dbef      	blt.n	4007c6 <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4007e6:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4007e8:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4007ec:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4007f0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4007f4:	d003      	beq.n	4007fe <mxt_init_device+0x122>
		result ^= crcpoly;
  4007f6:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4007fa:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4007fe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  400802:	2300      	movs	r3, #0
  400804:	9301      	str	r3, [sp, #4]
  400806:	9305      	str	r3, [sp, #20]
  400808:	f88d 6004 	strb.w	r6, [sp, #4]
  40080c:	0a36      	lsrs	r6, r6, #8
  40080e:	f88d 6005 	strb.w	r6, [sp, #5]
  400812:	2302      	movs	r3, #2
  400814:	9302      	str	r3, [sp, #8]
  400816:	f8cd d00c 	str.w	sp, [sp, #12]
  40081a:	2303      	movs	r3, #3
  40081c:	9304      	str	r3, [sp, #16]
  40081e:	7b23      	ldrb	r3, [r4, #12]
  400820:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400824:	a901      	add	r1, sp, #4
  400826:	68a0      	ldr	r0, [r4, #8]
  400828:	4b50      	ldr	r3, [pc, #320]	; (40096c <mxt_init_device+0x290>)
  40082a:	4798      	blx	r3
  40082c:	b328      	cbz	r0, 40087a <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  40082e:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400832:	42ab      	cmp	r3, r5
  400834:	f040 808b 	bne.w	40094e <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400838:	6825      	ldr	r5, [r4, #0]
  40083a:	79a8      	ldrb	r0, [r5, #6]
  40083c:	b198      	cbz	r0, 400866 <mxt_init_device+0x18a>
  40083e:	2300      	movs	r3, #0
  400840:	3301      	adds	r3, #1
  400842:	b2da      	uxtb	r2, r3
  400844:	4290      	cmp	r0, r2
  400846:	d8fb      	bhi.n	400840 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400848:	6862      	ldr	r2, [r4, #4]
  40084a:	1e43      	subs	r3, r0, #1
  40084c:	b2db      	uxtb	r3, r3
  40084e:	3301      	adds	r3, #1
  400850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400854:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400858:	2000      	movs	r0, #0
  40085a:	7953      	ldrb	r3, [r2, #5]
  40085c:	4418      	add	r0, r3
  40085e:	b2c0      	uxtb	r0, r0
  400860:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400862:	4291      	cmp	r1, r2
  400864:	d1f9      	bne.n	40085a <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  400866:	0040      	lsls	r0, r0, #1
  400868:	4b3f      	ldr	r3, [pc, #252]	; (400968 <mxt_init_device+0x28c>)
  40086a:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  40086c:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40086e:	79ab      	ldrb	r3, [r5, #6]
  400870:	b173      	cbz	r3, 400890 <mxt_init_device+0x1b4>
  400872:	2700      	movs	r7, #0
  400874:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400876:	46be      	mov	lr, r7
  400878:	e037      	b.n	4008ea <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  40087a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40087e:	f89d 3000 	ldrb.w	r3, [sp]
  400882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400886:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40088a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40088e:	e7d0      	b.n	400832 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400890:	f06f 0003 	mvn.w	r0, #3
  400894:	e742      	b.n	40071c <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400896:	3001      	adds	r0, #1
  400898:	b2c0      	uxtb	r0, r0
  40089a:	6862      	ldr	r2, [r4, #4]
  40089c:	1953      	adds	r3, r2, r5
  40089e:	7919      	ldrb	r1, [r3, #4]
  4008a0:	4281      	cmp	r1, r0
  4008a2:	d31c      	bcc.n	4008de <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  4008a4:	795b      	ldrb	r3, [r3, #5]
  4008a6:	2b00      	cmp	r3, #0
  4008a8:	d0f5      	beq.n	400896 <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4008aa:	6862      	ldr	r2, [r4, #4]
  4008ac:	442a      	add	r2, r5
  4008ae:	7953      	ldrb	r3, [r2, #5]
  4008b0:	2b00      	cmp	r3, #0
  4008b2:	d0f0      	beq.n	400896 <mxt_init_device+0x1ba>
  4008b4:	4633      	mov	r3, r6
							device->object_list[i].type;
  4008b6:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4008b8:	6962      	ldr	r2, [r4, #20]
  4008ba:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4008be:	6962      	ldr	r2, [r4, #20]
  4008c0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4008c4:	7050      	strb	r0, [r2, #1]
					id_index++;
  4008c6:	3301      	adds	r3, #1
  4008c8:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4008ca:	6862      	ldr	r2, [r4, #4]
  4008cc:	442a      	add	r2, r5
  4008ce:	1b99      	subs	r1, r3, r6
  4008d0:	f892 c005 	ldrb.w	ip, [r2, #5]
  4008d4:	b2c9      	uxtb	r1, r1
  4008d6:	458c      	cmp	ip, r1
  4008d8:	d8ed      	bhi.n	4008b6 <mxt_init_device+0x1da>
					id_index++;
  4008da:	461e      	mov	r6, r3
  4008dc:	e7db      	b.n	400896 <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4008de:	3701      	adds	r7, #1
  4008e0:	b2ff      	uxtb	r7, r7
  4008e2:	6823      	ldr	r3, [r4, #0]
  4008e4:	799b      	ldrb	r3, [r3, #6]
  4008e6:	429f      	cmp	r7, r3
  4008e8:	d207      	bcs.n	4008fa <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4008ea:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4008ee:	005a      	lsls	r2, r3, #1
  4008f0:	4615      	mov	r5, r2
  4008f2:	6863      	ldr	r3, [r4, #4]
  4008f4:	4413      	add	r3, r2
  4008f6:	4670      	mov	r0, lr
  4008f8:	e7d4      	b.n	4008a4 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4008fa:	b35b      	cbz	r3, 400954 <mxt_init_device+0x278>
  4008fc:	4610      	mov	r0, r2
  4008fe:	3b01      	subs	r3, #1
  400900:	b2db      	uxtb	r3, r3
  400902:	3301      	adds	r3, #1
  400904:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400908:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  40090c:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  40090e:	7943      	ldrb	r3, [r0, #5]
  400910:	4419      	add	r1, r3
  400912:	b2c9      	uxtb	r1, r1
  400914:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400916:	4282      	cmp	r2, r0
  400918:	d1f9      	bne.n	40090e <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  40091a:	b1f1      	cbz	r1, 40095a <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  40091c:	6962      	ldr	r2, [r4, #20]
  40091e:	7813      	ldrb	r3, [r2, #0]
  400920:	2b09      	cmp	r3, #9
  400922:	d00f      	beq.n	400944 <mxt_init_device+0x268>
  400924:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  400926:	3301      	adds	r3, #1
  400928:	b2db      	uxtb	r3, r3
  40092a:	428b      	cmp	r3, r1
  40092c:	d00c      	beq.n	400948 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  40092e:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400932:	2809      	cmp	r0, #9
  400934:	d1f7      	bne.n	400926 <mxt_init_device+0x24a>
			return i;
  400936:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400938:	f1b3 3fff 	cmp.w	r3, #4294967295
  40093c:	d010      	beq.n	400960 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  40093e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400940:	2000      	movs	r0, #0
  400942:	e6eb      	b.n	40071c <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400944:	2300      	movs	r3, #0
  400946:	e7f6      	b.n	400936 <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400948:	f06f 0003 	mvn.w	r0, #3
  40094c:	e6e6      	b.n	40071c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40094e:	f06f 0003 	mvn.w	r0, #3
  400952:	e6e3      	b.n	40071c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400954:	f06f 0003 	mvn.w	r0, #3
  400958:	e6e0      	b.n	40071c <mxt_init_device+0x40>
  40095a:	f06f 0003 	mvn.w	r0, #3
  40095e:	e6dd      	b.n	40071c <mxt_init_device+0x40>
  400960:	f06f 0003 	mvn.w	r0, #3
  400964:	e6da      	b.n	40071c <mxt_init_device+0x40>
  400966:	bf00      	nop
  400968:	00404bed 	.word	0x00404bed
  40096c:	00401dbd 	.word	0x00401dbd
  400970:	0080001b 	.word	0x0080001b

00400974 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  400974:	6803      	ldr	r3, [r0, #0]
  400976:	799a      	ldrb	r2, [r3, #6]
  400978:	b1d2      	cbz	r2, 4009b0 <mxt_get_object_address+0x3c>
{
  40097a:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  40097c:	6844      	ldr	r4, [r0, #4]
  40097e:	7823      	ldrb	r3, [r4, #0]
  400980:	428b      	cmp	r3, r1
  400982:	d00e      	beq.n	4009a2 <mxt_get_object_address+0x2e>
  400984:	1da3      	adds	r3, r4, #6
  400986:	3a01      	subs	r2, #1
  400988:	b2d2      	uxtb	r2, r2
  40098a:	3201      	adds	r2, #1
  40098c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400990:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  400994:	4293      	cmp	r3, r2
  400996:	d009      	beq.n	4009ac <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400998:	461c      	mov	r4, r3
  40099a:	f813 0b06 	ldrb.w	r0, [r3], #6
  40099e:	4288      	cmp	r0, r1
  4009a0:	d1f8      	bne.n	400994 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  4009a2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  4009a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009aa:	4770      	bx	lr
	return 0;
  4009ac:	2000      	movs	r0, #0
  4009ae:	e7fa      	b.n	4009a6 <mxt_get_object_address+0x32>
  4009b0:	2000      	movs	r0, #0
  4009b2:	4770      	bx	lr

004009b4 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4009b4:	b530      	push	{r4, r5, lr}
  4009b6:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4009b8:	2300      	movs	r3, #0
  4009ba:	9301      	str	r3, [sp, #4]
  4009bc:	9304      	str	r3, [sp, #16]
  4009be:	9305      	str	r3, [sp, #20]
  4009c0:	f88d 1004 	strb.w	r1, [sp, #4]
  4009c4:	0a0b      	lsrs	r3, r1, #8
  4009c6:	f88d 3005 	strb.w	r3, [sp, #5]
  4009ca:	2302      	movs	r3, #2
  4009cc:	9302      	str	r3, [sp, #8]
  4009ce:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4009d0:	6803      	ldr	r3, [r0, #0]
  4009d2:	799a      	ldrb	r2, [r3, #6]
  4009d4:	b1ba      	cbz	r2, 400a06 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4009d6:	6844      	ldr	r4, [r0, #4]
  4009d8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4009dc:	428b      	cmp	r3, r1
  4009de:	d00f      	beq.n	400a00 <mxt_write_config_object+0x4c>
  4009e0:	1da3      	adds	r3, r4, #6
  4009e2:	3a01      	subs	r2, #1
  4009e4:	b2d2      	uxtb	r2, r2
  4009e6:	3201      	adds	r2, #1
  4009e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4009ec:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4009f0:	4293      	cmp	r3, r2
  4009f2:	d016      	beq.n	400a22 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4009f4:	461c      	mov	r4, r3
  4009f6:	3306      	adds	r3, #6
  4009f8:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4009fc:	428d      	cmp	r5, r1
  4009fe:	d1f7      	bne.n	4009f0 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  400a00:	78e2      	ldrb	r2, [r4, #3]
  400a02:	3201      	adds	r2, #1
  400a04:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  400a06:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400a08:	7b03      	ldrb	r3, [r0, #12]
  400a0a:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400a0e:	a901      	add	r1, sp, #4
  400a10:	6880      	ldr	r0, [r0, #8]
  400a12:	4b05      	ldr	r3, [pc, #20]	; (400a28 <mxt_write_config_object+0x74>)
  400a14:	4798      	blx	r3
  400a16:	3000      	adds	r0, #0
  400a18:	bf18      	it	ne
  400a1a:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400a1c:	4240      	negs	r0, r0
  400a1e:	b007      	add	sp, #28
  400a20:	bd30      	pop	{r4, r5, pc}
	return 0;
  400a22:	2200      	movs	r2, #0
  400a24:	e7ef      	b.n	400a06 <mxt_write_config_object+0x52>
  400a26:	bf00      	nop
  400a28:	00401e69 	.word	0x00401e69

00400a2c <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400a2c:	b500      	push	{lr}
  400a2e:	b089      	sub	sp, #36	; 0x24
  400a30:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400a34:	2300      	movs	r3, #0
  400a36:	9303      	str	r3, [sp, #12]
  400a38:	9307      	str	r3, [sp, #28]
  400a3a:	f88d 100c 	strb.w	r1, [sp, #12]
  400a3e:	0a09      	lsrs	r1, r1, #8
  400a40:	f88d 100d 	strb.w	r1, [sp, #13]
  400a44:	2302      	movs	r3, #2
  400a46:	9304      	str	r3, [sp, #16]
  400a48:	f10d 0307 	add.w	r3, sp, #7
  400a4c:	9305      	str	r3, [sp, #20]
  400a4e:	2301      	movs	r3, #1
  400a50:	9306      	str	r3, [sp, #24]
  400a52:	7b03      	ldrb	r3, [r0, #12]
  400a54:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400a58:	a903      	add	r1, sp, #12
  400a5a:	6880      	ldr	r0, [r0, #8]
  400a5c:	4b04      	ldr	r3, [pc, #16]	; (400a70 <mxt_write_config_reg+0x44>)
  400a5e:	4798      	blx	r3
  400a60:	3000      	adds	r0, #0
  400a62:	bf18      	it	ne
  400a64:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  400a66:	4240      	negs	r0, r0
  400a68:	b009      	add	sp, #36	; 0x24
  400a6a:	f85d fb04 	ldr.w	pc, [sp], #4
  400a6e:	bf00      	nop
  400a70:	00401e69 	.word	0x00401e69

00400a74 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  400a74:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a76:	4b07      	ldr	r3, [pc, #28]	; (400a94 <mxt_is_message_pending+0x20>)
  400a78:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400a7c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400a7e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400a80:	f002 021f 	and.w	r2, r2, #31
  400a84:	2301      	movs	r3, #1
  400a86:	fa03 f202 	lsl.w	r2, r3, r2
  400a8a:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400a8c:	bf0c      	ite	eq
  400a8e:	4618      	moveq	r0, r3
  400a90:	2000      	movne	r0, #0
  400a92:	4770      	bx	lr
  400a94:	00200707 	.word	0x00200707

00400a98 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400a98:	b530      	push	{r4, r5, lr}
  400a9a:	b087      	sub	sp, #28
  400a9c:	4604      	mov	r4, r0
  400a9e:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400aa0:	2200      	movs	r2, #0
  400aa2:	2105      	movs	r1, #5
  400aa4:	4b0d      	ldr	r3, [pc, #52]	; (400adc <mxt_read_message+0x44>)
  400aa6:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400aa8:	2300      	movs	r3, #0
  400aaa:	9301      	str	r3, [sp, #4]
  400aac:	9305      	str	r3, [sp, #20]
  400aae:	f88d 0004 	strb.w	r0, [sp, #4]
  400ab2:	0a00      	lsrs	r0, r0, #8
  400ab4:	f88d 0005 	strb.w	r0, [sp, #5]
  400ab8:	2302      	movs	r3, #2
  400aba:	9302      	str	r3, [sp, #8]
  400abc:	9503      	str	r5, [sp, #12]
  400abe:	2309      	movs	r3, #9
  400ac0:	9304      	str	r3, [sp, #16]
  400ac2:	7b23      	ldrb	r3, [r4, #12]
  400ac4:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400ac8:	a901      	add	r1, sp, #4
  400aca:	68a0      	ldr	r0, [r4, #8]
  400acc:	4b04      	ldr	r3, [pc, #16]	; (400ae0 <mxt_read_message+0x48>)
  400ace:	4798      	blx	r3
  400ad0:	3000      	adds	r0, #0
  400ad2:	bf18      	it	ne
  400ad4:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  400ad6:	4240      	negs	r0, r0
  400ad8:	b007      	add	sp, #28
  400ada:	bd30      	pop	{r4, r5, pc}
  400adc:	00400975 	.word	0x00400975
  400ae0:	00401dbd 	.word	0x00401dbd

00400ae4 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  400ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ae6:	b085      	sub	sp, #20
  400ae8:	4604      	mov	r4, r0
  400aea:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  400aec:	4d17      	ldr	r5, [pc, #92]	; (400b4c <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400aee:	4f18      	ldr	r7, [pc, #96]	; (400b50 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  400af0:	4620      	mov	r0, r4
  400af2:	47a8      	blx	r5
  400af4:	b328      	cbz	r0, 400b42 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400af6:	a901      	add	r1, sp, #4
  400af8:	4620      	mov	r0, r4
  400afa:	47b8      	blx	r7
  400afc:	4603      	mov	r3, r0
  400afe:	bb10      	cbnz	r0, 400b46 <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  400b00:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400b04:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  400b06:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400b0a:	2a09      	cmp	r2, #9
  400b0c:	d1f0      	bne.n	400af0 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400b0e:	7f22      	ldrb	r2, [r4, #28]
  400b10:	1a9b      	subs	r3, r3, r2
  400b12:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  400b14:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400b18:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400b1a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400b1e:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  400b22:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  400b24:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400b28:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400b2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400b2e:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400b32:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  400b36:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400b38:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400b3c:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400b3e:	2300      	movs	r3, #0
  400b40:	e001      	b.n	400b46 <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400b42:	f06f 0303 	mvn.w	r3, #3
}
  400b46:	4618      	mov	r0, r3
  400b48:	b005      	add	sp, #20
  400b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400b4c:	00400a75 	.word	0x00400a75
  400b50:	00400a99 	.word	0x00400a99

00400b54 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400b54:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400b56:	4810      	ldr	r0, [pc, #64]	; (400b98 <sysclk_init+0x44>)
  400b58:	4b10      	ldr	r3, [pc, #64]	; (400b9c <sysclk_init+0x48>)
  400b5a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400b5c:	213e      	movs	r1, #62	; 0x3e
  400b5e:	2000      	movs	r0, #0
  400b60:	4b0f      	ldr	r3, [pc, #60]	; (400ba0 <sysclk_init+0x4c>)
  400b62:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400b64:	4c0f      	ldr	r4, [pc, #60]	; (400ba4 <sysclk_init+0x50>)
  400b66:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400b68:	2800      	cmp	r0, #0
  400b6a:	d0fc      	beq.n	400b66 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400b6c:	4b0e      	ldr	r3, [pc, #56]	; (400ba8 <sysclk_init+0x54>)
  400b6e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b70:	4a0e      	ldr	r2, [pc, #56]	; (400bac <sysclk_init+0x58>)
  400b72:	4b0f      	ldr	r3, [pc, #60]	; (400bb0 <sysclk_init+0x5c>)
  400b74:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400b76:	4c0f      	ldr	r4, [pc, #60]	; (400bb4 <sysclk_init+0x60>)
  400b78:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400b7a:	2800      	cmp	r0, #0
  400b7c:	d0fc      	beq.n	400b78 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400b7e:	2002      	movs	r0, #2
  400b80:	4b0d      	ldr	r3, [pc, #52]	; (400bb8 <sysclk_init+0x64>)
  400b82:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400b84:	2000      	movs	r0, #0
  400b86:	4b0d      	ldr	r3, [pc, #52]	; (400bbc <sysclk_init+0x68>)
  400b88:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400b8a:	4b0d      	ldr	r3, [pc, #52]	; (400bc0 <sysclk_init+0x6c>)
  400b8c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400b8e:	480d      	ldr	r0, [pc, #52]	; (400bc4 <sysclk_init+0x70>)
  400b90:	4b02      	ldr	r3, [pc, #8]	; (400b9c <sysclk_init+0x48>)
  400b92:	4798      	blx	r3
  400b94:	bd10      	pop	{r4, pc}
  400b96:	bf00      	nop
  400b98:	07270e00 	.word	0x07270e00
  400b9c:	00402215 	.word	0x00402215
  400ba0:	00401ab9 	.word	0x00401ab9
  400ba4:	00401b0d 	.word	0x00401b0d
  400ba8:	00401b1d 	.word	0x00401b1d
  400bac:	20183f01 	.word	0x20183f01
  400bb0:	400e0600 	.word	0x400e0600
  400bb4:	00401b2d 	.word	0x00401b2d
  400bb8:	00401a1d 	.word	0x00401a1d
  400bbc:	00401a55 	.word	0x00401a55
  400bc0:	00402109 	.word	0x00402109
  400bc4:	11e1a300 	.word	0x11e1a300

00400bc8 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400bc8:	b510      	push	{r4, lr}
  400bca:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  400bcc:	4b10      	ldr	r3, [pc, #64]	; (400c10 <spi_master_init+0x48>)
  400bce:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400bd0:	2380      	movs	r3, #128	; 0x80
  400bd2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400bd4:	6863      	ldr	r3, [r4, #4]
  400bd6:	f043 0301 	orr.w	r3, r3, #1
  400bda:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400bdc:	6863      	ldr	r3, [r4, #4]
  400bde:	f043 0310 	orr.w	r3, r3, #16
  400be2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400be4:	6863      	ldr	r3, [r4, #4]
  400be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400bea:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  400bec:	2100      	movs	r1, #0
  400bee:	4620      	mov	r0, r4
  400bf0:	4b08      	ldr	r3, [pc, #32]	; (400c14 <spi_master_init+0x4c>)
  400bf2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400bf4:	6863      	ldr	r3, [r4, #4]
  400bf6:	f023 0302 	bic.w	r3, r3, #2
  400bfa:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400bfc:	6863      	ldr	r3, [r4, #4]
  400bfe:	f023 0304 	bic.w	r3, r3, #4
  400c02:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400c04:	2100      	movs	r1, #0
  400c06:	4620      	mov	r0, r4
  400c08:	4b03      	ldr	r3, [pc, #12]	; (400c18 <spi_master_init+0x50>)
  400c0a:	4798      	blx	r3
  400c0c:	bd10      	pop	{r4, pc}
  400c0e:	bf00      	nop
  400c10:	00401b5d 	.word	0x00401b5d
  400c14:	00401b89 	.word	0x00401b89
  400c18:	00401b9f 	.word	0x00401b9f

00400c1c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c20:	4604      	mov	r4, r0
  400c22:	460d      	mov	r5, r1
  400c24:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  400c26:	4915      	ldr	r1, [pc, #84]	; (400c7c <spi_master_setup_device+0x60>)
  400c28:	4618      	mov	r0, r3
  400c2a:	4b15      	ldr	r3, [pc, #84]	; (400c80 <spi_master_setup_device+0x64>)
  400c2c:	4798      	blx	r3
  400c2e:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400c30:	2300      	movs	r3, #0
  400c32:	461a      	mov	r2, r3
  400c34:	6829      	ldr	r1, [r5, #0]
  400c36:	4620      	mov	r0, r4
  400c38:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400c98 <spi_master_setup_device+0x7c>
  400c3c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400c3e:	2208      	movs	r2, #8
  400c40:	6829      	ldr	r1, [r5, #0]
  400c42:	4620      	mov	r0, r4
  400c44:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <spi_master_setup_device+0x68>)
  400c46:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400c48:	b2fa      	uxtb	r2, r7
  400c4a:	6829      	ldr	r1, [r5, #0]
  400c4c:	4620      	mov	r0, r4
  400c4e:	4b0e      	ldr	r3, [pc, #56]	; (400c88 <spi_master_setup_device+0x6c>)
  400c50:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400c52:	2208      	movs	r2, #8
  400c54:	6829      	ldr	r1, [r5, #0]
  400c56:	4620      	mov	r0, r4
  400c58:	4b0c      	ldr	r3, [pc, #48]	; (400c8c <spi_master_setup_device+0x70>)
  400c5a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400c5c:	0872      	lsrs	r2, r6, #1
  400c5e:	6829      	ldr	r1, [r5, #0]
  400c60:	4620      	mov	r0, r4
  400c62:	4b0b      	ldr	r3, [pc, #44]	; (400c90 <spi_master_setup_device+0x74>)
  400c64:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400c66:	f086 0201 	eor.w	r2, r6, #1
  400c6a:	f002 0201 	and.w	r2, r2, #1
  400c6e:	6829      	ldr	r1, [r5, #0]
  400c70:	4620      	mov	r0, r4
  400c72:	4b08      	ldr	r3, [pc, #32]	; (400c94 <spi_master_setup_device+0x78>)
  400c74:	4798      	blx	r3
  400c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c7a:	bf00      	nop
  400c7c:	08f0d180 	.word	0x08f0d180
  400c80:	00401c7b 	.word	0x00401c7b
  400c84:	00401c67 	.word	0x00401c67
  400c88:	00401c91 	.word	0x00401c91
  400c8c:	00401c21 	.word	0x00401c21
  400c90:	00401be5 	.word	0x00401be5
  400c94:	00401c03 	.word	0x00401c03
  400c98:	00401cb9 	.word	0x00401cb9

00400c9c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400c9c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400c9e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400ca0:	f013 0f04 	tst.w	r3, #4
  400ca4:	d006      	beq.n	400cb4 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400ca6:	6809      	ldr	r1, [r1, #0]
  400ca8:	290f      	cmp	r1, #15
  400caa:	d900      	bls.n	400cae <spi_select_device+0x12>
  400cac:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400cae:	4b06      	ldr	r3, [pc, #24]	; (400cc8 <spi_select_device+0x2c>)
  400cb0:	4798      	blx	r3
  400cb2:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400cb4:	6809      	ldr	r1, [r1, #0]
  400cb6:	2903      	cmp	r1, #3
  400cb8:	d8f8      	bhi.n	400cac <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400cba:	2301      	movs	r3, #1
  400cbc:	fa03 f101 	lsl.w	r1, r3, r1
  400cc0:	43c9      	mvns	r1, r1
  400cc2:	4b01      	ldr	r3, [pc, #4]	; (400cc8 <spi_select_device+0x2c>)
  400cc4:	4798      	blx	r3
		}
	}
}
  400cc6:	e7f1      	b.n	400cac <spi_select_device+0x10>
  400cc8:	00401b89 	.word	0x00401b89

00400ccc <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  400ccc:	b11a      	cbz	r2, 400cd6 <spi_write_packet+0xa>
{
  400cce:	b410      	push	{r4}
  400cd0:	460c      	mov	r4, r1
  400cd2:	4411      	add	r1, r2
  400cd4:	e006      	b.n	400ce4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  400cd6:	2000      	movs	r0, #0
  400cd8:	4770      	bx	lr
		val = data[i];
  400cda:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cde:	60c3      	str	r3, [r0, #12]
	while (len) {
  400ce0:	42a1      	cmp	r1, r4
  400ce2:	d00c      	beq.n	400cfe <spi_write_packet+0x32>
{
  400ce4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400ce8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400cea:	f012 0f02 	tst.w	r2, #2
  400cee:	d1f4      	bne.n	400cda <spi_write_packet+0xe>
			if (!timeout--) {
  400cf0:	3b01      	subs	r3, #1
  400cf2:	d1f9      	bne.n	400ce8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  400cf4:	f06f 0002 	mvn.w	r0, #2
}
  400cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cfc:	4770      	bx	lr
	return STATUS_OK;
  400cfe:	2000      	movs	r0, #0
  400d00:	e7fa      	b.n	400cf8 <spi_write_packet+0x2c>

00400d02 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400d02:	b13a      	cbz	r2, 400d14 <spi_read_packet+0x12>
{
  400d04:	b470      	push	{r4, r5, r6}
  400d06:	4615      	mov	r5, r2
  400d08:	460c      	mov	r4, r1
  400d0a:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d0c:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400d0e:	f240 2101 	movw	r1, #513	; 0x201
  400d12:	e012      	b.n	400d3a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400d14:	2000      	movs	r0, #0
  400d16:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d18:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400d1a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400d1e:	6902      	ldr	r2, [r0, #16]
  400d20:	ea31 0202 	bics.w	r2, r1, r2
  400d24:	d004      	beq.n	400d30 <spi_read_packet+0x2e>
			if (!timeout--) {
  400d26:	3b01      	subs	r3, #1
  400d28:	d1f9      	bne.n	400d1e <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400d2a:	f06f 0002 	mvn.w	r0, #2
  400d2e:	e00e      	b.n	400d4e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400d30:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400d32:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400d36:	42a5      	cmp	r5, r4
  400d38:	d00b      	beq.n	400d52 <spi_read_packet+0x50>
{
  400d3a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400d3e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400d40:	f012 0f02 	tst.w	r2, #2
  400d44:	d1e8      	bne.n	400d18 <spi_read_packet+0x16>
			if (!timeout--) {
  400d46:	3b01      	subs	r3, #1
  400d48:	d1f9      	bne.n	400d3e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400d4a:	f06f 0002 	mvn.w	r0, #2
}
  400d4e:	bc70      	pop	{r4, r5, r6}
  400d50:	4770      	bx	lr
	return STATUS_OK;
  400d52:	2000      	movs	r0, #0
  400d54:	e7fb      	b.n	400d4e <spi_read_packet+0x4c>
	...

00400d58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400d5c:	b980      	cbnz	r0, 400d80 <_read+0x28>
  400d5e:	460c      	mov	r4, r1
  400d60:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400d62:	2a00      	cmp	r2, #0
  400d64:	dd0f      	ble.n	400d86 <_read+0x2e>
  400d66:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400d68:	4e08      	ldr	r6, [pc, #32]	; (400d8c <_read+0x34>)
  400d6a:	4d09      	ldr	r5, [pc, #36]	; (400d90 <_read+0x38>)
  400d6c:	6830      	ldr	r0, [r6, #0]
  400d6e:	4621      	mov	r1, r4
  400d70:	682b      	ldr	r3, [r5, #0]
  400d72:	4798      	blx	r3
		ptr++;
  400d74:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400d76:	42bc      	cmp	r4, r7
  400d78:	d1f8      	bne.n	400d6c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400d7a:	4640      	mov	r0, r8
  400d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d80:	f04f 38ff 	mov.w	r8, #4294967295
  400d84:	e7f9      	b.n	400d7a <_read+0x22>
	for (; len > 0; --len) {
  400d86:	4680      	mov	r8, r0
  400d88:	e7f7      	b.n	400d7a <_read+0x22>
  400d8a:	bf00      	nop
  400d8c:	2040ca00 	.word	0x2040ca00
  400d90:	2040c9f8 	.word	0x2040c9f8

00400d94 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400d94:	3801      	subs	r0, #1
  400d96:	2802      	cmp	r0, #2
  400d98:	d815      	bhi.n	400dc6 <_write+0x32>
{
  400d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d9e:	460e      	mov	r6, r1
  400da0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400da2:	b19a      	cbz	r2, 400dcc <_write+0x38>
  400da4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400da6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400de0 <_write+0x4c>
  400daa:	4f0c      	ldr	r7, [pc, #48]	; (400ddc <_write+0x48>)
  400dac:	f8d8 0000 	ldr.w	r0, [r8]
  400db0:	f815 1b01 	ldrb.w	r1, [r5], #1
  400db4:	683b      	ldr	r3, [r7, #0]
  400db6:	4798      	blx	r3
  400db8:	2800      	cmp	r0, #0
  400dba:	db0a      	blt.n	400dd2 <_write+0x3e>
  400dbc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400dbe:	3c01      	subs	r4, #1
  400dc0:	d1f4      	bne.n	400dac <_write+0x18>
  400dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400dc6:	f04f 30ff 	mov.w	r0, #4294967295
  400dca:	4770      	bx	lr
	for (; len != 0; --len) {
  400dcc:	4610      	mov	r0, r2
  400dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400dd2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400dda:	bf00      	nop
  400ddc:	2040c9fc 	.word	0x2040c9fc
  400de0:	2040ca00 	.word	0x2040ca00

00400de4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400de8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400dec:	4b9e      	ldr	r3, [pc, #632]	; (401068 <board_init+0x284>)
  400dee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400df4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400df8:	4b9c      	ldr	r3, [pc, #624]	; (40106c <board_init+0x288>)
  400dfa:	2200      	movs	r2, #0
  400dfc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400e00:	695a      	ldr	r2, [r3, #20]
  400e02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400e06:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400e08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e0c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400e10:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400e14:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400e18:	f007 0007 	and.w	r0, r7, #7
  400e1c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400e1e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400e22:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400e26:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400e2a:	f3bf 8f4f 	dsb	sy
  400e2e:	f04f 34ff 	mov.w	r4, #4294967295
  400e32:	fa04 fc00 	lsl.w	ip, r4, r0
  400e36:	fa06 f000 	lsl.w	r0, r6, r0
  400e3a:	fa04 f40e 	lsl.w	r4, r4, lr
  400e3e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400e42:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400e44:	463a      	mov	r2, r7
  400e46:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400e48:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400e4c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400e50:	3a01      	subs	r2, #1
  400e52:	4423      	add	r3, r4
  400e54:	f1b2 3fff 	cmp.w	r2, #4294967295
  400e58:	d1f6      	bne.n	400e48 <board_init+0x64>
        } while(sets--);
  400e5a:	3e01      	subs	r6, #1
  400e5c:	4460      	add	r0, ip
  400e5e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400e62:	d1ef      	bne.n	400e44 <board_init+0x60>
  400e64:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400e68:	4b80      	ldr	r3, [pc, #512]	; (40106c <board_init+0x288>)
  400e6a:	695a      	ldr	r2, [r3, #20]
  400e6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400e70:	615a      	str	r2, [r3, #20]
  400e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e76:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e7a:	4a7d      	ldr	r2, [pc, #500]	; (401070 <board_init+0x28c>)
  400e7c:	497d      	ldr	r1, [pc, #500]	; (401074 <board_init+0x290>)
  400e7e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e80:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400e84:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400e86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e8a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400e8e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400e92:	f022 0201 	bic.w	r2, r2, #1
  400e96:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400e9a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400e9e:	f022 0201 	bic.w	r2, r2, #1
  400ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400ea6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400eaa:	f3bf 8f6f 	isb	sy
  400eae:	200a      	movs	r0, #10
  400eb0:	4c71      	ldr	r4, [pc, #452]	; (401078 <board_init+0x294>)
  400eb2:	47a0      	blx	r4
  400eb4:	200b      	movs	r0, #11
  400eb6:	47a0      	blx	r4
  400eb8:	200c      	movs	r0, #12
  400eba:	47a0      	blx	r4
  400ebc:	2010      	movs	r0, #16
  400ebe:	47a0      	blx	r4
  400ec0:	2011      	movs	r0, #17
  400ec2:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ec4:	4e6d      	ldr	r6, [pc, #436]	; (40107c <board_init+0x298>)
  400ec6:	f44f 7880 	mov.w	r8, #256	; 0x100
  400eca:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ece:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ed2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ed6:	4c6a      	ldr	r4, [pc, #424]	; (401080 <board_init+0x29c>)
  400ed8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400edc:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ede:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ee2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ee4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ee8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400eea:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400eec:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ef0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ef6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ef8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400efe:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400f00:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400f04:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400f08:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400f10:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f16:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f18:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f1a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f1e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400f20:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f24:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f26:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400f28:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f2c:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f2e:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400f30:	4a54      	ldr	r2, [pc, #336]	; (401084 <board_init+0x2a0>)
  400f32:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400f36:	f043 0310 	orr.w	r3, r3, #16
  400f3a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400f3e:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400f42:	2310      	movs	r3, #16
  400f44:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f4a:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f4c:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400f52:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400f54:	4319      	orrs	r1, r3
  400f56:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400f58:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400f5a:	4319      	orrs	r1, r3
  400f5c:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f5e:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400f60:	2208      	movs	r2, #8
  400f62:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f64:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f68:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f6a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f6c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f70:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400f72:	f021 0108 	bic.w	r1, r1, #8
  400f76:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f78:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400f7a:	f021 0108 	bic.w	r1, r1, #8
  400f7e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f80:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400f82:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f84:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f88:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f8a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f8c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f90:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400f92:	f022 0210 	bic.w	r2, r2, #16
  400f96:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f98:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400f9a:	f022 0210 	bic.w	r2, r2, #16
  400f9e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400fa0:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400fa2:	2300      	movs	r3, #0
  400fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400fa8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400fac:	4630      	mov	r0, r6
  400fae:	4f36      	ldr	r7, [pc, #216]	; (401088 <board_init+0x2a4>)
  400fb0:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400fb2:	2300      	movs	r3, #0
  400fb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400fb8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400fbc:	4630      	mov	r0, r6
  400fbe:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400fc0:	2301      	movs	r3, #1
  400fc2:	22ff      	movs	r2, #255	; 0xff
  400fc4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fc8:	4630      	mov	r0, r6
  400fca:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400fcc:	2301      	movs	r3, #1
  400fce:	223f      	movs	r2, #63	; 0x3f
  400fd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fd4:	482d      	ldr	r0, [pc, #180]	; (40108c <board_init+0x2a8>)
  400fd6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400fd8:	2301      	movs	r3, #1
  400fda:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400fde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fe2:	4620      	mov	r0, r4
  400fe4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400fe6:	2301      	movs	r3, #1
  400fe8:	4642      	mov	r2, r8
  400fea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fee:	4630      	mov	r0, r6
  400ff0:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400ff2:	2301      	movs	r3, #1
  400ff4:	462a      	mov	r2, r5
  400ff6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ffa:	4630      	mov	r0, r6
  400ffc:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400ffe:	2301      	movs	r3, #1
  401000:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401004:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401008:	4821      	ldr	r0, [pc, #132]	; (401090 <board_init+0x2ac>)
  40100a:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  40100c:	2300      	movs	r3, #0
  40100e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401012:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401016:	4630      	mov	r0, r6
  401018:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  40101a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40101e:	4630      	mov	r0, r6
  401020:	4b1c      	ldr	r3, [pc, #112]	; (401094 <board_init+0x2b0>)
  401022:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  401024:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401028:	2074      	movs	r0, #116	; 0x74
  40102a:	4c1b      	ldr	r4, [pc, #108]	; (401098 <board_init+0x2b4>)
  40102c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  40102e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401032:	2075      	movs	r0, #117	; 0x75
  401034:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  401036:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40103a:	2076      	movs	r0, #118	; 0x76
  40103c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  40103e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401042:	207b      	movs	r0, #123	; 0x7b
  401044:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  401046:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40104a:	2018      	movs	r0, #24
  40104c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  40104e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401052:	2006      	movs	r0, #6
  401054:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  401056:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40105a:	2053      	movs	r0, #83	; 0x53
  40105c:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  40105e:	2053      	movs	r0, #83	; 0x53
  401060:	4b0e      	ldr	r3, [pc, #56]	; (40109c <board_init+0x2b8>)
  401062:	4798      	blx	r3
  401064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401068:	400e1850 	.word	0x400e1850
  40106c:	e000ed00 	.word	0xe000ed00
  401070:	400e0c00 	.word	0x400e0c00
  401074:	5a00080c 	.word	0x5a00080c
  401078:	00401b3d 	.word	0x00401b3d
  40107c:	400e1200 	.word	0x400e1200
  401080:	400e0e00 	.word	0x400e0e00
  401084:	40088000 	.word	0x40088000
  401088:	00401769 	.word	0x00401769
  40108c:	400e1600 	.word	0x400e1600
  401090:	400e1400 	.word	0x400e1400
  401094:	00401675 	.word	0x00401675
  401098:	00401839 	.word	0x00401839
  40109c:	00401801 	.word	0x00401801

004010a0 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  4010a0:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  4010a2:	6804      	ldr	r4, [r0, #0]
  4010a4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  4010a8:	d302      	bcc.n	4010b0 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  4010aa:	f240 14df 	movw	r4, #479	; 0x1df
  4010ae:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  4010b0:	6814      	ldr	r4, [r2, #0]
  4010b2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  4010b6:	d302      	bcc.n	4010be <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  4010b8:	f240 14df 	movw	r4, #479	; 0x1df
  4010bc:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  4010be:	680c      	ldr	r4, [r1, #0]
  4010c0:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  4010c4:	d302      	bcc.n	4010cc <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  4010c6:	f240 143f 	movw	r4, #319	; 0x13f
  4010ca:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  4010cc:	681c      	ldr	r4, [r3, #0]
  4010ce:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  4010d2:	d302      	bcc.n	4010da <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  4010d4:	f240 143f 	movw	r4, #319	; 0x13f
  4010d8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  4010da:	6804      	ldr	r4, [r0, #0]
  4010dc:	6815      	ldr	r5, [r2, #0]
  4010de:	42ac      	cmp	r4, r5
  4010e0:	d901      	bls.n	4010e6 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  4010e2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  4010e4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  4010e6:	680a      	ldr	r2, [r1, #0]
  4010e8:	6818      	ldr	r0, [r3, #0]
  4010ea:	4282      	cmp	r2, r0
  4010ec:	d901      	bls.n	4010f2 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  4010ee:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  4010f0:	601a      	str	r2, [r3, #0]
	}
}
  4010f2:	bc30      	pop	{r4, r5}
  4010f4:	4770      	bx	lr
	...

004010f8 <ili9488_write_ram_prepare>:
{
  4010f8:	b510      	push	{r4, lr}
  4010fa:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  4010fc:	2006      	movs	r0, #6
  4010fe:	4b0a      	ldr	r3, [pc, #40]	; (401128 <ili9488_write_ram_prepare+0x30>)
  401100:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  401102:	2300      	movs	r3, #0
  401104:	2203      	movs	r2, #3
  401106:	212c      	movs	r1, #44	; 0x2c
  401108:	4808      	ldr	r0, [pc, #32]	; (40112c <ili9488_write_ram_prepare+0x34>)
  40110a:	4c09      	ldr	r4, [pc, #36]	; (401130 <ili9488_write_ram_prepare+0x38>)
  40110c:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  40110e:	2300      	movs	r3, #0
  401110:	9301      	str	r3, [sp, #4]
  401112:	9b01      	ldr	r3, [sp, #4]
  401114:	2bfe      	cmp	r3, #254	; 0xfe
  401116:	d805      	bhi.n	401124 <ili9488_write_ram_prepare+0x2c>
  401118:	9b01      	ldr	r3, [sp, #4]
  40111a:	3301      	adds	r3, #1
  40111c:	9301      	str	r3, [sp, #4]
  40111e:	9b01      	ldr	r3, [sp, #4]
  401120:	2bfe      	cmp	r3, #254	; 0xfe
  401122:	d9f9      	bls.n	401118 <ili9488_write_ram_prepare+0x20>
}
  401124:	b002      	add	sp, #8
  401126:	bd10      	pop	{r4, pc}
  401128:	0040181d 	.word	0x0040181d
  40112c:	40008000 	.word	0x40008000
  401130:	00401bb1 	.word	0x00401bb1

00401134 <ili9488_write_register>:
{
  401134:	b570      	push	{r4, r5, r6, lr}
  401136:	b082      	sub	sp, #8
  401138:	4605      	mov	r5, r0
  40113a:	460e      	mov	r6, r1
  40113c:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  40113e:	2006      	movs	r0, #6
  401140:	4b14      	ldr	r3, [pc, #80]	; (401194 <ili9488_write_register+0x60>)
  401142:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  401144:	2300      	movs	r3, #0
  401146:	2203      	movs	r2, #3
  401148:	4629      	mov	r1, r5
  40114a:	4813      	ldr	r0, [pc, #76]	; (401198 <ili9488_write_register+0x64>)
  40114c:	4d13      	ldr	r5, [pc, #76]	; (40119c <ili9488_write_register+0x68>)
  40114e:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  401150:	2300      	movs	r3, #0
  401152:	9301      	str	r3, [sp, #4]
  401154:	9b01      	ldr	r3, [sp, #4]
  401156:	2bfe      	cmp	r3, #254	; 0xfe
  401158:	d805      	bhi.n	401166 <ili9488_write_register+0x32>
  40115a:	9b01      	ldr	r3, [sp, #4]
  40115c:	3301      	adds	r3, #1
  40115e:	9301      	str	r3, [sp, #4]
  401160:	9b01      	ldr	r3, [sp, #4]
  401162:	2bfe      	cmp	r3, #254	; 0xfe
  401164:	d9f9      	bls.n	40115a <ili9488_write_register+0x26>
	if(size > 0) {
  401166:	b90c      	cbnz	r4, 40116c <ili9488_write_register+0x38>
}
  401168:	b002      	add	sp, #8
  40116a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  40116c:	2006      	movs	r0, #6
  40116e:	4b0c      	ldr	r3, [pc, #48]	; (4011a0 <ili9488_write_register+0x6c>)
  401170:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  401172:	4622      	mov	r2, r4
  401174:	4631      	mov	r1, r6
  401176:	4808      	ldr	r0, [pc, #32]	; (401198 <ili9488_write_register+0x64>)
  401178:	4b0a      	ldr	r3, [pc, #40]	; (4011a4 <ili9488_write_register+0x70>)
  40117a:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  40117c:	2300      	movs	r3, #0
  40117e:	9301      	str	r3, [sp, #4]
  401180:	9b01      	ldr	r3, [sp, #4]
  401182:	2b5e      	cmp	r3, #94	; 0x5e
  401184:	d8f0      	bhi.n	401168 <ili9488_write_register+0x34>
  401186:	9b01      	ldr	r3, [sp, #4]
  401188:	3301      	adds	r3, #1
  40118a:	9301      	str	r3, [sp, #4]
  40118c:	9b01      	ldr	r3, [sp, #4]
  40118e:	2b5e      	cmp	r3, #94	; 0x5e
  401190:	d9f9      	bls.n	401186 <ili9488_write_register+0x52>
  401192:	e7e9      	b.n	401168 <ili9488_write_register+0x34>
  401194:	0040181d 	.word	0x0040181d
  401198:	40008000 	.word	0x40008000
  40119c:	00401bb1 	.word	0x00401bb1
  4011a0:	00401801 	.word	0x00401801
  4011a4:	00400ccd 	.word	0x00400ccd

004011a8 <ili9488_write_ram_buffer>:
{
  4011a8:	b530      	push	{r4, r5, lr}
  4011aa:	b083      	sub	sp, #12
  4011ac:	4604      	mov	r4, r0
  4011ae:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  4011b0:	2006      	movs	r0, #6
  4011b2:	4b0a      	ldr	r3, [pc, #40]	; (4011dc <ili9488_write_ram_buffer+0x34>)
  4011b4:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  4011b6:	462a      	mov	r2, r5
  4011b8:	4621      	mov	r1, r4
  4011ba:	4809      	ldr	r0, [pc, #36]	; (4011e0 <ili9488_write_ram_buffer+0x38>)
  4011bc:	4b09      	ldr	r3, [pc, #36]	; (4011e4 <ili9488_write_ram_buffer+0x3c>)
  4011be:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  4011c0:	2300      	movs	r3, #0
  4011c2:	9301      	str	r3, [sp, #4]
  4011c4:	9b01      	ldr	r3, [sp, #4]
  4011c6:	2bfe      	cmp	r3, #254	; 0xfe
  4011c8:	d805      	bhi.n	4011d6 <ili9488_write_ram_buffer+0x2e>
  4011ca:	9b01      	ldr	r3, [sp, #4]
  4011cc:	3301      	adds	r3, #1
  4011ce:	9301      	str	r3, [sp, #4]
  4011d0:	9b01      	ldr	r3, [sp, #4]
  4011d2:	2bfe      	cmp	r3, #254	; 0xfe
  4011d4:	d9f9      	bls.n	4011ca <ili9488_write_ram_buffer+0x22>
}
  4011d6:	b003      	add	sp, #12
  4011d8:	bd30      	pop	{r4, r5, pc}
  4011da:	bf00      	nop
  4011dc:	00401801 	.word	0x00401801
  4011e0:	40008000 	.word	0x40008000
  4011e4:	00400ccd 	.word	0x00400ccd

004011e8 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  4011e8:	4601      	mov	r1, r0
  4011ea:	b130      	cbz	r0, 4011fa <ili9488_delay+0x12>
  4011ec:	4a03      	ldr	r2, [pc, #12]	; (4011fc <ili9488_delay+0x14>)
{
  4011ee:	4b04      	ldr	r3, [pc, #16]	; (401200 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  4011f0:	3b01      	subs	r3, #1
  4011f2:	d1fd      	bne.n	4011f0 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  4011f4:	4291      	cmp	r1, r2
  4011f6:	d8fa      	bhi.n	4011ee <ili9488_delay+0x6>
  4011f8:	4770      	bx	lr
  4011fa:	4770      	bx	lr
  4011fc:	000186a1 	.word	0x000186a1
  401200:	000186a0 	.word	0x000186a0

00401204 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  401204:	b500      	push	{lr}
  401206:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  401208:	b958      	cbnz	r0, 401222 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  40120a:	2348      	movs	r3, #72	; 0x48
  40120c:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  401210:	2201      	movs	r2, #1
  401212:	f10d 0107 	add.w	r1, sp, #7
  401216:	2036      	movs	r0, #54	; 0x36
  401218:	4b04      	ldr	r3, [pc, #16]	; (40122c <ili9488_set_display_direction+0x28>)
  40121a:	4798      	blx	r3
}
  40121c:	b003      	add	sp, #12
  40121e:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  401222:	23e8      	movs	r3, #232	; 0xe8
  401224:	f88d 3007 	strb.w	r3, [sp, #7]
  401228:	e7f2      	b.n	401210 <ili9488_set_display_direction+0xc>
  40122a:	bf00      	nop
  40122c:	00401135 	.word	0x00401135

00401230 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401230:	b510      	push	{r4, lr}
  401232:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  401234:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  401238:	3a01      	subs	r2, #1
  40123a:	4402      	add	r2, r0
  40123c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  401240:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  401244:	3b01      	subs	r3, #1
  401246:	4419      	add	r1, r3
  401248:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  40124c:	0a03      	lsrs	r3, r0, #8
  40124e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  401252:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  401256:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40125a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  40125e:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401262:	2204      	movs	r2, #4
  401264:	eb0d 0102 	add.w	r1, sp, r2
  401268:	202a      	movs	r0, #42	; 0x2a
  40126a:	4c10      	ldr	r4, [pc, #64]	; (4012ac <ili9488_set_window+0x7c>)
  40126c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40126e:	2200      	movs	r2, #0
  401270:	4611      	mov	r1, r2
  401272:	4610      	mov	r0, r2
  401274:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  401276:	f89d 300b 	ldrb.w	r3, [sp, #11]
  40127a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  40127e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401282:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  401286:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40128a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  40128e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  401292:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401296:	2204      	movs	r2, #4
  401298:	eb0d 0102 	add.w	r1, sp, r2
  40129c:	202b      	movs	r0, #43	; 0x2b
  40129e:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4012a0:	2200      	movs	r2, #0
  4012a2:	4611      	mov	r1, r2
  4012a4:	4610      	mov	r0, r2
  4012a6:	47a0      	blx	r4
}
  4012a8:	b004      	add	sp, #16
  4012aa:	bd10      	pop	{r4, pc}
  4012ac:	00401135 	.word	0x00401135

004012b0 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  4012b0:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  4012b2:	2200      	movs	r2, #0
  4012b4:	4611      	mov	r1, r2
  4012b6:	2029      	movs	r0, #41	; 0x29
  4012b8:	4b01      	ldr	r3, [pc, #4]	; (4012c0 <ili9488_display_on+0x10>)
  4012ba:	4798      	blx	r3
  4012bc:	bd08      	pop	{r3, pc}
  4012be:	bf00      	nop
  4012c0:	00401135 	.word	0x00401135

004012c4 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  4012c4:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  4012c6:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  4012ca:	f3c0 2107 	ubfx	r1, r0, #8, #8
  4012ce:	4b06      	ldr	r3, [pc, #24]	; (4012e8 <ili9488_set_foreground_color+0x24>)
  4012d0:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
		g_ul_pixel_cache[i++] = ul_color>>16;
  4012d4:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  4012d6:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  4012d8:	7098      	strb	r0, [r3, #2]
  4012da:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  4012dc:	4293      	cmp	r3, r2
  4012de:	d1f9      	bne.n	4012d4 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  4012e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012e4:	4770      	bx	lr
  4012e6:	bf00      	nop
  4012e8:	204009dc 	.word	0x204009dc

004012ec <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  4012ec:	b510      	push	{r4, lr}
  4012ee:	b084      	sub	sp, #16
  4012f0:	f8ad 0006 	strh.w	r0, [sp, #6]
  4012f4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  4012f8:	0a03      	lsrs	r3, r0, #8
  4012fa:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  4012fe:	b2c0      	uxtb	r0, r0
  401300:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  401304:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  401308:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  40130c:	2204      	movs	r2, #4
  40130e:	a903      	add	r1, sp, #12
  401310:	202a      	movs	r0, #42	; 0x2a
  401312:	4c0e      	ldr	r4, [pc, #56]	; (40134c <ili9488_set_cursor_position+0x60>)
  401314:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401316:	2200      	movs	r2, #0
  401318:	4611      	mov	r1, r2
  40131a:	4610      	mov	r0, r2
  40131c:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  40131e:	f89d 2005 	ldrb.w	r2, [sp, #5]
  401322:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  401326:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40132a:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  40132e:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  401332:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401336:	2204      	movs	r2, #4
  401338:	a903      	add	r1, sp, #12
  40133a:	202b      	movs	r0, #43	; 0x2b
  40133c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40133e:	2200      	movs	r2, #0
  401340:	4611      	mov	r1, r2
  401342:	4610      	mov	r0, r2
  401344:	47a0      	blx	r4
}
  401346:	b004      	add	sp, #16
  401348:	bd10      	pop	{r4, pc}
  40134a:	bf00      	nop
  40134c:	00401135 	.word	0x00401135

00401350 <ili9488_init>:
{
  401350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401354:	b087      	sub	sp, #28
  401356:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  401358:	2703      	movs	r7, #3
  40135a:	ae06      	add	r6, sp, #24
  40135c:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  401360:	4d5d      	ldr	r5, [pc, #372]	; (4014d8 <ili9488_init+0x188>)
  401362:	4628      	mov	r0, r5
  401364:	4b5d      	ldr	r3, [pc, #372]	; (4014dc <ili9488_init+0x18c>)
  401366:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  401368:	2400      	movs	r4, #0
  40136a:	9400      	str	r4, [sp, #0]
  40136c:	4b5c      	ldr	r3, [pc, #368]	; (4014e0 <ili9488_init+0x190>)
  40136e:	463a      	mov	r2, r7
  401370:	4631      	mov	r1, r6
  401372:	4628      	mov	r0, r5
  401374:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401510 <ili9488_init+0x1c0>
  401378:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  40137a:	4622      	mov	r2, r4
  40137c:	4639      	mov	r1, r7
  40137e:	4628      	mov	r0, r5
  401380:	4b58      	ldr	r3, [pc, #352]	; (4014e4 <ili9488_init+0x194>)
  401382:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  401384:	4631      	mov	r1, r6
  401386:	4628      	mov	r0, r5
  401388:	4b57      	ldr	r3, [pc, #348]	; (4014e8 <ili9488_init+0x198>)
  40138a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40138c:	2001      	movs	r0, #1
  40138e:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  401390:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  401392:	4622      	mov	r2, r4
  401394:	4621      	mov	r1, r4
  401396:	4e55      	ldr	r6, [pc, #340]	; (4014ec <ili9488_init+0x19c>)
  401398:	47b0      	blx	r6
	ili9488_delay(200);
  40139a:	20c8      	movs	r0, #200	; 0xc8
  40139c:	4d54      	ldr	r5, [pc, #336]	; (4014f0 <ili9488_init+0x1a0>)
  40139e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4013a0:	4622      	mov	r2, r4
  4013a2:	4621      	mov	r1, r4
  4013a4:	2011      	movs	r0, #17
  4013a6:	47b0      	blx	r6
	ili9488_delay(200);
  4013a8:	20c8      	movs	r0, #200	; 0xc8
  4013aa:	47a8      	blx	r5
	reg = 0x81;
  4013ac:	2381      	movs	r3, #129	; 0x81
  4013ae:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  4013b2:	f88d 400b 	strb.w	r4, [sp, #11]
  4013b6:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4013b8:	f04f 0801 	mov.w	r8, #1
  4013bc:	4f4b      	ldr	r7, [pc, #300]	; (4014ec <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  4013be:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4013c0:	4642      	mov	r2, r8
  4013c2:	f10d 010a 	add.w	r1, sp, #10
  4013c6:	20fb      	movs	r0, #251	; 0xfb
  4013c8:	47b8      	blx	r7
		reg++;
  4013ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4013ce:	3301      	adds	r3, #1
  4013d0:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  4013d4:	9503      	str	r5, [sp, #12]
  4013d6:	9b03      	ldr	r3, [sp, #12]
  4013d8:	2bfe      	cmp	r3, #254	; 0xfe
  4013da:	d805      	bhi.n	4013e8 <ili9488_init+0x98>
  4013dc:	9b03      	ldr	r3, [sp, #12]
  4013de:	3301      	adds	r3, #1
  4013e0:	9303      	str	r3, [sp, #12]
  4013e2:	9b03      	ldr	r3, [sp, #12]
  4013e4:	2bfe      	cmp	r3, #254	; 0xfe
  4013e6:	d9f9      	bls.n	4013dc <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  4013e8:	462a      	mov	r2, r5
  4013ea:	4629      	mov	r1, r5
  4013ec:	20d3      	movs	r0, #211	; 0xd3
  4013ee:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  4013f0:	2006      	movs	r0, #6
  4013f2:	4b40      	ldr	r3, [pc, #256]	; (4014f4 <ili9488_init+0x1a4>)
  4013f4:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  4013f6:	4642      	mov	r2, r8
  4013f8:	f10d 0109 	add.w	r1, sp, #9
  4013fc:	4836      	ldr	r0, [pc, #216]	; (4014d8 <ili9488_init+0x188>)
  4013fe:	4b3e      	ldr	r3, [pc, #248]	; (4014f8 <ili9488_init+0x1a8>)
  401400:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  401402:	9503      	str	r5, [sp, #12]
  401404:	9b03      	ldr	r3, [sp, #12]
  401406:	2bfe      	cmp	r3, #254	; 0xfe
  401408:	d805      	bhi.n	401416 <ili9488_init+0xc6>
  40140a:	9b03      	ldr	r3, [sp, #12]
  40140c:	3301      	adds	r3, #1
  40140e:	9303      	str	r3, [sp, #12]
  401410:	9b03      	ldr	r3, [sp, #12]
  401412:	2bfe      	cmp	r3, #254	; 0xfe
  401414:	d9f9      	bls.n	40140a <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  401416:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40141a:	40b3      	lsls	r3, r6
  40141c:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  40141e:	4642      	mov	r2, r8
  401420:	f10d 010b 	add.w	r1, sp, #11
  401424:	20fb      	movs	r0, #251	; 0xfb
  401426:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  401428:	9503      	str	r5, [sp, #12]
  40142a:	9a03      	ldr	r2, [sp, #12]
  40142c:	f640 73fe 	movw	r3, #4094	; 0xffe
  401430:	429a      	cmp	r2, r3
  401432:	d806      	bhi.n	401442 <ili9488_init+0xf2>
  401434:	461a      	mov	r2, r3
  401436:	9b03      	ldr	r3, [sp, #12]
  401438:	3301      	adds	r3, #1
  40143a:	9303      	str	r3, [sp, #12]
  40143c:	9b03      	ldr	r3, [sp, #12]
  40143e:	4293      	cmp	r3, r2
  401440:	d9f9      	bls.n	401436 <ili9488_init+0xe6>
  401442:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401444:	f116 0f08 	cmn.w	r6, #8
  401448:	d1ba      	bne.n	4013c0 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40144a:	f249 4388 	movw	r3, #38024	; 0x9488
  40144e:	429c      	cmp	r4, r3
  401450:	d003      	beq.n	40145a <ili9488_init+0x10a>
		return 1;
  401452:	2001      	movs	r0, #1
}
  401454:	b007      	add	sp, #28
  401456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40145a:	ad06      	add	r5, sp, #24
  40145c:	2348      	movs	r3, #72	; 0x48
  40145e:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401462:	2201      	movs	r2, #1
  401464:	4629      	mov	r1, r5
  401466:	2036      	movs	r0, #54	; 0x36
  401468:	4e20      	ldr	r6, [pc, #128]	; (4014ec <ili9488_init+0x19c>)
  40146a:	47b0      	blx	r6
	ili9488_delay(100);
  40146c:	2064      	movs	r0, #100	; 0x64
  40146e:	4c20      	ldr	r4, [pc, #128]	; (4014f0 <ili9488_init+0x1a0>)
  401470:	47a0      	blx	r4
	param = 0x04;
  401472:	2304      	movs	r3, #4
  401474:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401478:	2201      	movs	r2, #1
  40147a:	4629      	mov	r1, r5
  40147c:	20cf      	movs	r0, #207	; 0xcf
  40147e:	47b0      	blx	r6
	ili9488_delay(100);
  401480:	2064      	movs	r0, #100	; 0x64
  401482:	47a0      	blx	r4
	param = 0x06;
  401484:	2306      	movs	r3, #6
  401486:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40148a:	2201      	movs	r2, #1
  40148c:	4629      	mov	r1, r5
  40148e:	203a      	movs	r0, #58	; 0x3a
  401490:	47b0      	blx	r6
	ili9488_delay(100);
  401492:	2064      	movs	r0, #100	; 0x64
  401494:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  401496:	2200      	movs	r2, #0
  401498:	4611      	mov	r1, r2
  40149a:	2013      	movs	r0, #19
  40149c:	47b0      	blx	r6
	ili9488_delay(100);
  40149e:	2064      	movs	r0, #100	; 0x64
  4014a0:	47a0      	blx	r4
	ili9488_display_on();
  4014a2:	4b16      	ldr	r3, [pc, #88]	; (4014fc <ili9488_init+0x1ac>)
  4014a4:	4798      	blx	r3
	ili9488_delay(100);
  4014a6:	2064      	movs	r0, #100	; 0x64
  4014a8:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  4014aa:	2000      	movs	r0, #0
  4014ac:	4b14      	ldr	r3, [pc, #80]	; (401500 <ili9488_init+0x1b0>)
  4014ae:	4798      	blx	r3
	ili9488_delay(100);
  4014b0:	2064      	movs	r0, #100	; 0x64
  4014b2:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4014b4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  4014b8:	f8b9 2000 	ldrh.w	r2, [r9]
  4014bc:	2100      	movs	r1, #0
  4014be:	4608      	mov	r0, r1
  4014c0:	4c10      	ldr	r4, [pc, #64]	; (401504 <ili9488_init+0x1b4>)
  4014c2:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  4014c4:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4014c8:	4b0f      	ldr	r3, [pc, #60]	; (401508 <ili9488_init+0x1b8>)
  4014ca:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  4014cc:	2100      	movs	r1, #0
  4014ce:	4608      	mov	r0, r1
  4014d0:	4b0e      	ldr	r3, [pc, #56]	; (40150c <ili9488_init+0x1bc>)
  4014d2:	4798      	blx	r3
	return 0;
  4014d4:	2000      	movs	r0, #0
  4014d6:	e7bd      	b.n	401454 <ili9488_init+0x104>
  4014d8:	40008000 	.word	0x40008000
  4014dc:	00400bc9 	.word	0x00400bc9
  4014e0:	01312d00 	.word	0x01312d00
  4014e4:	00401c21 	.word	0x00401c21
  4014e8:	00400c9d 	.word	0x00400c9d
  4014ec:	00401135 	.word	0x00401135
  4014f0:	004011e9 	.word	0x004011e9
  4014f4:	00401801 	.word	0x00401801
  4014f8:	00400d03 	.word	0x00400d03
  4014fc:	004012b1 	.word	0x004012b1
  401500:	00401205 	.word	0x00401205
  401504:	00401231 	.word	0x00401231
  401508:	004012c5 	.word	0x004012c5
  40150c:	004012ed 	.word	0x004012ed
  401510:	00400c1d 	.word	0x00400c1d

00401514 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401518:	b084      	sub	sp, #16
  40151a:	9003      	str	r0, [sp, #12]
  40151c:	9102      	str	r1, [sp, #8]
  40151e:	9201      	str	r2, [sp, #4]
  401520:	aa04      	add	r2, sp, #16
  401522:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401526:	4613      	mov	r3, r2
  401528:	aa01      	add	r2, sp, #4
  40152a:	a902      	add	r1, sp, #8
  40152c:	a803      	add	r0, sp, #12
  40152e:	4c22      	ldr	r4, [pc, #136]	; (4015b8 <ili9488_draw_filled_rectangle+0xa4>)
  401530:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401532:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401536:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40153a:	9b00      	ldr	r3, [sp, #0]
  40153c:	3301      	adds	r3, #1
  40153e:	1a5b      	subs	r3, r3, r1
  401540:	9a01      	ldr	r2, [sp, #4]
  401542:	3201      	adds	r2, #1
  401544:	1a12      	subs	r2, r2, r0
  401546:	b29b      	uxth	r3, r3
  401548:	b292      	uxth	r2, r2
  40154a:	4c1c      	ldr	r4, [pc, #112]	; (4015bc <ili9488_draw_filled_rectangle+0xa8>)
  40154c:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40154e:	4b1c      	ldr	r3, [pc, #112]	; (4015c0 <ili9488_draw_filled_rectangle+0xac>)
  401550:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401552:	9903      	ldr	r1, [sp, #12]
  401554:	9d01      	ldr	r5, [sp, #4]
  401556:	1a69      	subs	r1, r5, r1
  401558:	9d00      	ldr	r5, [sp, #0]
  40155a:	3501      	adds	r5, #1
  40155c:	9b02      	ldr	r3, [sp, #8]
  40155e:	1aed      	subs	r5, r5, r3
  401560:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401564:	4b17      	ldr	r3, [pc, #92]	; (4015c4 <ili9488_draw_filled_rectangle+0xb0>)
  401566:	fba3 2305 	umull	r2, r3, r3, r5
  40156a:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  40156c:	b163      	cbz	r3, 401588 <ili9488_draw_filled_rectangle+0x74>
  40156e:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401570:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4015cc <ili9488_draw_filled_rectangle+0xb8>
  401574:	f44f 67b4 	mov.w	r7, #1440	; 0x5a0
  401578:	4e13      	ldr	r6, [pc, #76]	; (4015c8 <ili9488_draw_filled_rectangle+0xb4>)
  40157a:	4639      	mov	r1, r7
  40157c:	4640      	mov	r0, r8
  40157e:	47b0      	blx	r6
	while (blocks--) {
  401580:	3c01      	subs	r4, #1
  401582:	f1b4 3fff 	cmp.w	r4, #4294967295
  401586:	d1f8      	bne.n	40157a <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401588:	490e      	ldr	r1, [pc, #56]	; (4015c4 <ili9488_draw_filled_rectangle+0xb0>)
  40158a:	fba1 3105 	umull	r3, r1, r1, r5
  40158e:	0a09      	lsrs	r1, r1, #8
  401590:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
  401594:	eba5 1141 	sub.w	r1, r5, r1, lsl #5
  401598:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40159c:	480b      	ldr	r0, [pc, #44]	; (4015cc <ili9488_draw_filled_rectangle+0xb8>)
  40159e:	4b0a      	ldr	r3, [pc, #40]	; (4015c8 <ili9488_draw_filled_rectangle+0xb4>)
  4015a0:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4015a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4015a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  4015aa:	2100      	movs	r1, #0
  4015ac:	4608      	mov	r0, r1
  4015ae:	4c03      	ldr	r4, [pc, #12]	; (4015bc <ili9488_draw_filled_rectangle+0xa8>)
  4015b0:	47a0      	blx	r4

}
  4015b2:	b004      	add	sp, #16
  4015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015b8:	004010a1 	.word	0x004010a1
  4015bc:	00401231 	.word	0x00401231
  4015c0:	004010f9 	.word	0x004010f9
  4015c4:	88888889 	.word	0x88888889
  4015c8:	004011a9 	.word	0x004011a9
  4015cc:	204009dc 	.word	0x204009dc

004015d0 <ili9488_draw_filled_circle>:
	signed int d;       /* Decision Variable */
	uint32_t dwCurX;    /* Current X Value */
	uint32_t dwCurY;    /* Current Y Value */
	uint32_t dwXmin, dwYmin;

	if (ul_r == 0) {
  4015d0:	2a00      	cmp	r2, #0
  4015d2:	d04a      	beq.n	40166a <ili9488_draw_filled_circle+0x9a>
{
  4015d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015d8:	4607      	mov	r7, r0
  4015da:	4688      	mov	r8, r1
  4015dc:	4615      	mov	r5, r2
		return 1;
	}

	d = 3 - (ul_r << 1);
  4015de:	0056      	lsls	r6, r2, #1
  4015e0:	f1c6 0603 	rsb	r6, r6, #3
	dwCurX = 0;
  4015e4:	2400      	movs	r4, #0
	dwCurY = ul_r;

	while (dwCurX <= dwCurY) {
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  4015e6:	f8df a088 	ldr.w	sl, [pc, #136]	; 401670 <ili9488_draw_filled_circle+0xa0>
  4015ea:	e005      	b.n	4015f8 <ili9488_draw_filled_circle+0x28>
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);

		if (d < 0) {
			d += (dwCurX << 2) + 6;
  4015ec:	3606      	adds	r6, #6
  4015ee:	eb06 0684 	add.w	r6, r6, r4, lsl #2
		} else {
			d += ((dwCurX - dwCurY) << 2) + 10;
			dwCurY--;
		}

		dwCurX++;
  4015f2:	3401      	adds	r4, #1
	while (dwCurX <= dwCurY) {
  4015f4:	42a5      	cmp	r5, r4
  4015f6:	d335      	bcc.n	401664 <ili9488_draw_filled_circle+0x94>
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
  4015f8:	42a7      	cmp	r7, r4
  4015fa:	bf2c      	ite	cs
  4015fc:	eba7 0b04 	subcs.w	fp, r7, r4
  401600:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
  401604:	45a8      	cmp	r8, r5
  401606:	bf2c      	ite	cs
  401608:	eba8 0105 	subcs.w	r1, r8, r5
  40160c:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  40160e:	eb07 0904 	add.w	r9, r7, r4
  401612:	460b      	mov	r3, r1
  401614:	464a      	mov	r2, r9
  401616:	4658      	mov	r0, fp
  401618:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurY, ul_x + dwCurX, ul_y + dwCurY);
  40161a:	eb08 0105 	add.w	r1, r8, r5
  40161e:	460b      	mov	r3, r1
  401620:	464a      	mov	r2, r9
  401622:	4658      	mov	r0, fp
  401624:	47d0      	blx	sl
		dwXmin = (dwCurY > ul_x) ? 0 : ul_x - dwCurY;
  401626:	42af      	cmp	r7, r5
  401628:	bf2c      	ite	cs
  40162a:	eba7 0b05 	subcs.w	fp, r7, r5
  40162e:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
  401632:	45a0      	cmp	r8, r4
  401634:	bf2c      	ite	cs
  401636:	eba8 0104 	subcs.w	r1, r8, r4
  40163a:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
  40163c:	eb07 0905 	add.w	r9, r7, r5
  401640:	460b      	mov	r3, r1
  401642:	464a      	mov	r2, r9
  401644:	4658      	mov	r0, fp
  401646:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);
  401648:	eb08 0104 	add.w	r1, r8, r4
  40164c:	460b      	mov	r3, r1
  40164e:	464a      	mov	r2, r9
  401650:	4658      	mov	r0, fp
  401652:	47d0      	blx	sl
		if (d < 0) {
  401654:	2e00      	cmp	r6, #0
  401656:	dbc9      	blt.n	4015ec <ili9488_draw_filled_circle+0x1c>
			d += ((dwCurX - dwCurY) << 2) + 10;
  401658:	1b63      	subs	r3, r4, r5
  40165a:	360a      	adds	r6, #10
  40165c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			dwCurY--;
  401660:	3d01      	subs	r5, #1
  401662:	e7c6      	b.n	4015f2 <ili9488_draw_filled_circle+0x22>
	}

	return 0;
  401664:	2000      	movs	r0, #0
  401666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
  40166a:	2001      	movs	r0, #1
  40166c:	4770      	bx	lr
  40166e:	bf00      	nop
  401670:	00401515 	.word	0x00401515

00401674 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401674:	6301      	str	r1, [r0, #48]	; 0x30
  401676:	4770      	bx	lr

00401678 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401678:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40167a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40167e:	d03a      	beq.n	4016f6 <pio_set_peripheral+0x7e>
  401680:	d813      	bhi.n	4016aa <pio_set_peripheral+0x32>
  401682:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401686:	d025      	beq.n	4016d4 <pio_set_peripheral+0x5c>
  401688:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40168c:	d10a      	bne.n	4016a4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40168e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401690:	4313      	orrs	r3, r2
  401692:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401694:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401696:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401698:	400b      	ands	r3, r1
  40169a:	ea23 0302 	bic.w	r3, r3, r2
  40169e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4016a0:	6042      	str	r2, [r0, #4]
  4016a2:	4770      	bx	lr
	switch (ul_type) {
  4016a4:	2900      	cmp	r1, #0
  4016a6:	d1fb      	bne.n	4016a0 <pio_set_peripheral+0x28>
  4016a8:	4770      	bx	lr
  4016aa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4016ae:	d021      	beq.n	4016f4 <pio_set_peripheral+0x7c>
  4016b0:	d809      	bhi.n	4016c6 <pio_set_peripheral+0x4e>
  4016b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4016b6:	d1f3      	bne.n	4016a0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4016ba:	4313      	orrs	r3, r2
  4016bc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4016be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4016c0:	4313      	orrs	r3, r2
  4016c2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016c4:	e7ec      	b.n	4016a0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4016c6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4016ca:	d013      	beq.n	4016f4 <pio_set_peripheral+0x7c>
  4016cc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4016d0:	d010      	beq.n	4016f4 <pio_set_peripheral+0x7c>
  4016d2:	e7e5      	b.n	4016a0 <pio_set_peripheral+0x28>
{
  4016d4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016d8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4016da:	43d3      	mvns	r3, r2
  4016dc:	4021      	ands	r1, r4
  4016de:	461c      	mov	r4, r3
  4016e0:	4019      	ands	r1, r3
  4016e2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4016e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016e6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4016e8:	400b      	ands	r3, r1
  4016ea:	4023      	ands	r3, r4
  4016ec:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4016ee:	6042      	str	r2, [r0, #4]
}
  4016f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016f4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4016fa:	400b      	ands	r3, r1
  4016fc:	ea23 0302 	bic.w	r3, r3, r2
  401700:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401702:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401704:	4313      	orrs	r3, r2
  401706:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401708:	e7ca      	b.n	4016a0 <pio_set_peripheral+0x28>

0040170a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40170a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40170c:	f012 0f01 	tst.w	r2, #1
  401710:	d10d      	bne.n	40172e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401712:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401714:	f012 0f0a 	tst.w	r2, #10
  401718:	d00b      	beq.n	401732 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40171a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40171c:	f012 0f02 	tst.w	r2, #2
  401720:	d109      	bne.n	401736 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401722:	f012 0f08 	tst.w	r2, #8
  401726:	d008      	beq.n	40173a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401728:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40172c:	e005      	b.n	40173a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40172e:	6641      	str	r1, [r0, #100]	; 0x64
  401730:	e7f0      	b.n	401714 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401732:	6241      	str	r1, [r0, #36]	; 0x24
  401734:	e7f2      	b.n	40171c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401736:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40173a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40173c:	6001      	str	r1, [r0, #0]
  40173e:	4770      	bx	lr

00401740 <pio_set_output>:
{
  401740:	b410      	push	{r4}
  401742:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401744:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401746:	b94c      	cbnz	r4, 40175c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401748:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40174a:	b14b      	cbz	r3, 401760 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40174c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40174e:	b94a      	cbnz	r2, 401764 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401750:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401752:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401754:	6001      	str	r1, [r0, #0]
}
  401756:	f85d 4b04 	ldr.w	r4, [sp], #4
  40175a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40175c:	6641      	str	r1, [r0, #100]	; 0x64
  40175e:	e7f4      	b.n	40174a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401760:	6541      	str	r1, [r0, #84]	; 0x54
  401762:	e7f4      	b.n	40174e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401764:	6301      	str	r1, [r0, #48]	; 0x30
  401766:	e7f4      	b.n	401752 <pio_set_output+0x12>

00401768 <pio_configure>:
{
  401768:	b570      	push	{r4, r5, r6, lr}
  40176a:	b082      	sub	sp, #8
  40176c:	4605      	mov	r5, r0
  40176e:	4616      	mov	r6, r2
  401770:	461c      	mov	r4, r3
	switch (ul_type) {
  401772:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401776:	d014      	beq.n	4017a2 <pio_configure+0x3a>
  401778:	d90a      	bls.n	401790 <pio_configure+0x28>
  40177a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40177e:	d024      	beq.n	4017ca <pio_configure+0x62>
  401780:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401784:	d021      	beq.n	4017ca <pio_configure+0x62>
  401786:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40178a:	d017      	beq.n	4017bc <pio_configure+0x54>
		return 0;
  40178c:	2000      	movs	r0, #0
  40178e:	e01a      	b.n	4017c6 <pio_configure+0x5e>
	switch (ul_type) {
  401790:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401794:	d005      	beq.n	4017a2 <pio_configure+0x3a>
  401796:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40179a:	d002      	beq.n	4017a2 <pio_configure+0x3a>
  40179c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4017a0:	d1f4      	bne.n	40178c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4017a2:	4632      	mov	r2, r6
  4017a4:	4628      	mov	r0, r5
  4017a6:	4b11      	ldr	r3, [pc, #68]	; (4017ec <pio_configure+0x84>)
  4017a8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4017aa:	f014 0f01 	tst.w	r4, #1
  4017ae:	d102      	bne.n	4017b6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4017b0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4017b2:	2001      	movs	r0, #1
  4017b4:	e007      	b.n	4017c6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4017b6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4017b8:	2001      	movs	r0, #1
  4017ba:	e004      	b.n	4017c6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4017bc:	461a      	mov	r2, r3
  4017be:	4631      	mov	r1, r6
  4017c0:	4b0b      	ldr	r3, [pc, #44]	; (4017f0 <pio_configure+0x88>)
  4017c2:	4798      	blx	r3
	return 1;
  4017c4:	2001      	movs	r0, #1
}
  4017c6:	b002      	add	sp, #8
  4017c8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4017ca:	f004 0301 	and.w	r3, r4, #1
  4017ce:	9300      	str	r3, [sp, #0]
  4017d0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4017d4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4017d8:	bf14      	ite	ne
  4017da:	2200      	movne	r2, #0
  4017dc:	2201      	moveq	r2, #1
  4017de:	4631      	mov	r1, r6
  4017e0:	4628      	mov	r0, r5
  4017e2:	4c04      	ldr	r4, [pc, #16]	; (4017f4 <pio_configure+0x8c>)
  4017e4:	47a0      	blx	r4
	return 1;
  4017e6:	2001      	movs	r0, #1
		break;
  4017e8:	e7ed      	b.n	4017c6 <pio_configure+0x5e>
  4017ea:	bf00      	nop
  4017ec:	00401679 	.word	0x00401679
  4017f0:	0040170b 	.word	0x0040170b
  4017f4:	00401741 	.word	0x00401741

004017f8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4017f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4017fa:	4770      	bx	lr

004017fc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4017fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4017fe:	4770      	bx	lr

00401800 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401800:	4b05      	ldr	r3, [pc, #20]	; (401818 <pio_set_pin_high+0x18>)
  401802:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401806:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401808:	f000 001f 	and.w	r0, r0, #31
  40180c:	2201      	movs	r2, #1
  40180e:	fa02 f000 	lsl.w	r0, r2, r0
  401812:	6318      	str	r0, [r3, #48]	; 0x30
  401814:	4770      	bx	lr
  401816:	bf00      	nop
  401818:	00200707 	.word	0x00200707

0040181c <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40181c:	4b05      	ldr	r3, [pc, #20]	; (401834 <pio_set_pin_low+0x18>)
  40181e:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401822:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401824:	f000 001f 	and.w	r0, r0, #31
  401828:	2201      	movs	r2, #1
  40182a:	fa02 f000 	lsl.w	r0, r2, r0
  40182e:	6358      	str	r0, [r3, #52]	; 0x34
  401830:	4770      	bx	lr
  401832:	bf00      	nop
  401834:	00200707 	.word	0x00200707

00401838 <pio_configure_pin>:
{
  401838:	b570      	push	{r4, r5, r6, lr}
  40183a:	b082      	sub	sp, #8
  40183c:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40183e:	4c46      	ldr	r4, [pc, #280]	; (401958 <pio_configure_pin+0x120>)
  401840:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401844:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401846:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40184a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40184e:	d059      	beq.n	401904 <pio_configure_pin+0xcc>
  401850:	d80a      	bhi.n	401868 <pio_configure_pin+0x30>
  401852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401856:	d02f      	beq.n	4018b8 <pio_configure_pin+0x80>
  401858:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40185c:	d03f      	beq.n	4018de <pio_configure_pin+0xa6>
  40185e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401862:	d016      	beq.n	401892 <pio_configure_pin+0x5a>
		return 0;
  401864:	2000      	movs	r0, #0
  401866:	e012      	b.n	40188e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40186c:	d05d      	beq.n	40192a <pio_configure_pin+0xf2>
  40186e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401872:	d05a      	beq.n	40192a <pio_configure_pin+0xf2>
  401874:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401878:	d1f4      	bne.n	401864 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40187a:	f000 011f 	and.w	r1, r0, #31
  40187e:	2601      	movs	r6, #1
  401880:	462a      	mov	r2, r5
  401882:	fa06 f101 	lsl.w	r1, r6, r1
  401886:	4620      	mov	r0, r4
  401888:	4b34      	ldr	r3, [pc, #208]	; (40195c <pio_configure_pin+0x124>)
  40188a:	4798      	blx	r3
	return 1;
  40188c:	4630      	mov	r0, r6
}
  40188e:	b002      	add	sp, #8
  401890:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401892:	f000 001f 	and.w	r0, r0, #31
  401896:	2601      	movs	r6, #1
  401898:	4086      	lsls	r6, r0
  40189a:	4632      	mov	r2, r6
  40189c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4018a0:	4620      	mov	r0, r4
  4018a2:	4b2f      	ldr	r3, [pc, #188]	; (401960 <pio_configure_pin+0x128>)
  4018a4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4018a6:	f015 0f01 	tst.w	r5, #1
  4018aa:	d102      	bne.n	4018b2 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4018ac:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4018ae:	2001      	movs	r0, #1
  4018b0:	e7ed      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4018b2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4018b4:	2001      	movs	r0, #1
  4018b6:	e7ea      	b.n	40188e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4018b8:	f000 001f 	and.w	r0, r0, #31
  4018bc:	2601      	movs	r6, #1
  4018be:	4086      	lsls	r6, r0
  4018c0:	4632      	mov	r2, r6
  4018c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4018c6:	4620      	mov	r0, r4
  4018c8:	4b25      	ldr	r3, [pc, #148]	; (401960 <pio_configure_pin+0x128>)
  4018ca:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4018cc:	f015 0f01 	tst.w	r5, #1
  4018d0:	d102      	bne.n	4018d8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4018d2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4018d4:	2001      	movs	r0, #1
  4018d6:	e7da      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4018d8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4018da:	2001      	movs	r0, #1
  4018dc:	e7d7      	b.n	40188e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4018de:	f000 001f 	and.w	r0, r0, #31
  4018e2:	2601      	movs	r6, #1
  4018e4:	4086      	lsls	r6, r0
  4018e6:	4632      	mov	r2, r6
  4018e8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4018ec:	4620      	mov	r0, r4
  4018ee:	4b1c      	ldr	r3, [pc, #112]	; (401960 <pio_configure_pin+0x128>)
  4018f0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4018f2:	f015 0f01 	tst.w	r5, #1
  4018f6:	d102      	bne.n	4018fe <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4018f8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4018fa:	2001      	movs	r0, #1
  4018fc:	e7c7      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4018fe:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401900:	2001      	movs	r0, #1
  401902:	e7c4      	b.n	40188e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401904:	f000 001f 	and.w	r0, r0, #31
  401908:	2601      	movs	r6, #1
  40190a:	4086      	lsls	r6, r0
  40190c:	4632      	mov	r2, r6
  40190e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401912:	4620      	mov	r0, r4
  401914:	4b12      	ldr	r3, [pc, #72]	; (401960 <pio_configure_pin+0x128>)
  401916:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401918:	f015 0f01 	tst.w	r5, #1
  40191c:	d102      	bne.n	401924 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40191e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401920:	2001      	movs	r0, #1
  401922:	e7b4      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401924:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401926:	2001      	movs	r0, #1
  401928:	e7b1      	b.n	40188e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40192a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40192e:	f000 011f 	and.w	r1, r0, #31
  401932:	2601      	movs	r6, #1
  401934:	ea05 0306 	and.w	r3, r5, r6
  401938:	9300      	str	r3, [sp, #0]
  40193a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40193e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401942:	bf14      	ite	ne
  401944:	2200      	movne	r2, #0
  401946:	2201      	moveq	r2, #1
  401948:	fa06 f101 	lsl.w	r1, r6, r1
  40194c:	4620      	mov	r0, r4
  40194e:	4c05      	ldr	r4, [pc, #20]	; (401964 <pio_configure_pin+0x12c>)
  401950:	47a0      	blx	r4
	return 1;
  401952:	4630      	mov	r0, r6
		break;
  401954:	e79b      	b.n	40188e <pio_configure_pin+0x56>
  401956:	bf00      	nop
  401958:	00200707 	.word	0x00200707
  40195c:	0040170b 	.word	0x0040170b
  401960:	00401679 	.word	0x00401679
  401964:	00401741 	.word	0x00401741

00401968 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40196c:	4604      	mov	r4, r0
  40196e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401970:	4b0e      	ldr	r3, [pc, #56]	; (4019ac <pio_handler_process+0x44>)
  401972:	4798      	blx	r3
  401974:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401976:	4620      	mov	r0, r4
  401978:	4b0d      	ldr	r3, [pc, #52]	; (4019b0 <pio_handler_process+0x48>)
  40197a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40197c:	4005      	ands	r5, r0
  40197e:	d013      	beq.n	4019a8 <pio_handler_process+0x40>
  401980:	4c0c      	ldr	r4, [pc, #48]	; (4019b4 <pio_handler_process+0x4c>)
  401982:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401986:	e003      	b.n	401990 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401988:	42b4      	cmp	r4, r6
  40198a:	d00d      	beq.n	4019a8 <pio_handler_process+0x40>
  40198c:	3410      	adds	r4, #16
		while (status != 0) {
  40198e:	b15d      	cbz	r5, 4019a8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401990:	6820      	ldr	r0, [r4, #0]
  401992:	4540      	cmp	r0, r8
  401994:	d1f8      	bne.n	401988 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401996:	6861      	ldr	r1, [r4, #4]
  401998:	4229      	tst	r1, r5
  40199a:	d0f5      	beq.n	401988 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40199c:	68e3      	ldr	r3, [r4, #12]
  40199e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4019a0:	6863      	ldr	r3, [r4, #4]
  4019a2:	ea25 0503 	bic.w	r5, r5, r3
  4019a6:	e7ef      	b.n	401988 <pio_handler_process+0x20>
  4019a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019ac:	004017f9 	.word	0x004017f9
  4019b0:	004017fd 	.word	0x004017fd
  4019b4:	20400f7c 	.word	0x20400f7c

004019b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4019b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4019ba:	210a      	movs	r1, #10
  4019bc:	4801      	ldr	r0, [pc, #4]	; (4019c4 <PIOA_Handler+0xc>)
  4019be:	4b02      	ldr	r3, [pc, #8]	; (4019c8 <PIOA_Handler+0x10>)
  4019c0:	4798      	blx	r3
  4019c2:	bd08      	pop	{r3, pc}
  4019c4:	400e0e00 	.word	0x400e0e00
  4019c8:	00401969 	.word	0x00401969

004019cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4019cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4019ce:	210b      	movs	r1, #11
  4019d0:	4801      	ldr	r0, [pc, #4]	; (4019d8 <PIOB_Handler+0xc>)
  4019d2:	4b02      	ldr	r3, [pc, #8]	; (4019dc <PIOB_Handler+0x10>)
  4019d4:	4798      	blx	r3
  4019d6:	bd08      	pop	{r3, pc}
  4019d8:	400e1000 	.word	0x400e1000
  4019dc:	00401969 	.word	0x00401969

004019e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4019e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4019e2:	210c      	movs	r1, #12
  4019e4:	4801      	ldr	r0, [pc, #4]	; (4019ec <PIOC_Handler+0xc>)
  4019e6:	4b02      	ldr	r3, [pc, #8]	; (4019f0 <PIOC_Handler+0x10>)
  4019e8:	4798      	blx	r3
  4019ea:	bd08      	pop	{r3, pc}
  4019ec:	400e1200 	.word	0x400e1200
  4019f0:	00401969 	.word	0x00401969

004019f4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4019f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4019f6:	2110      	movs	r1, #16
  4019f8:	4801      	ldr	r0, [pc, #4]	; (401a00 <PIOD_Handler+0xc>)
  4019fa:	4b02      	ldr	r3, [pc, #8]	; (401a04 <PIOD_Handler+0x10>)
  4019fc:	4798      	blx	r3
  4019fe:	bd08      	pop	{r3, pc}
  401a00:	400e1400 	.word	0x400e1400
  401a04:	00401969 	.word	0x00401969

00401a08 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401a08:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401a0a:	2111      	movs	r1, #17
  401a0c:	4801      	ldr	r0, [pc, #4]	; (401a14 <PIOE_Handler+0xc>)
  401a0e:	4b02      	ldr	r3, [pc, #8]	; (401a18 <PIOE_Handler+0x10>)
  401a10:	4798      	blx	r3
  401a12:	bd08      	pop	{r3, pc}
  401a14:	400e1600 	.word	0x400e1600
  401a18:	00401969 	.word	0x00401969

00401a1c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401a1c:	2803      	cmp	r0, #3
  401a1e:	d011      	beq.n	401a44 <pmc_mck_set_division+0x28>
  401a20:	2804      	cmp	r0, #4
  401a22:	d012      	beq.n	401a4a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401a24:	2802      	cmp	r0, #2
  401a26:	bf0c      	ite	eq
  401a28:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401a2c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401a2e:	4a08      	ldr	r2, [pc, #32]	; (401a50 <pmc_mck_set_division+0x34>)
  401a30:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401a36:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401a38:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401a3a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a3c:	f013 0f08 	tst.w	r3, #8
  401a40:	d0fb      	beq.n	401a3a <pmc_mck_set_division+0x1e>
}
  401a42:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401a44:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401a48:	e7f1      	b.n	401a2e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401a4e:	e7ee      	b.n	401a2e <pmc_mck_set_division+0x12>
  401a50:	400e0600 	.word	0x400e0600

00401a54 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401a54:	4a17      	ldr	r2, [pc, #92]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a56:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401a5c:	4318      	orrs	r0, r3
  401a5e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a62:	f013 0f08 	tst.w	r3, #8
  401a66:	d10a      	bne.n	401a7e <pmc_switch_mck_to_pllack+0x2a>
  401a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401a6c:	4911      	ldr	r1, [pc, #68]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401a70:	f012 0f08 	tst.w	r2, #8
  401a74:	d103      	bne.n	401a7e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401a76:	3b01      	subs	r3, #1
  401a78:	d1f9      	bne.n	401a6e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401a7a:	2001      	movs	r0, #1
  401a7c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401a7e:	4a0d      	ldr	r2, [pc, #52]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a80:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a82:	f023 0303 	bic.w	r3, r3, #3
  401a86:	f043 0302 	orr.w	r3, r3, #2
  401a8a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a8e:	f013 0f08 	tst.w	r3, #8
  401a92:	d10a      	bne.n	401aaa <pmc_switch_mck_to_pllack+0x56>
  401a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401a98:	4906      	ldr	r1, [pc, #24]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401a9c:	f012 0f08 	tst.w	r2, #8
  401aa0:	d105      	bne.n	401aae <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401aa2:	3b01      	subs	r3, #1
  401aa4:	d1f9      	bne.n	401a9a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401aa6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401aa8:	4770      	bx	lr
	return 0;
  401aaa:	2000      	movs	r0, #0
  401aac:	4770      	bx	lr
  401aae:	2000      	movs	r0, #0
  401ab0:	4770      	bx	lr
  401ab2:	bf00      	nop
  401ab4:	400e0600 	.word	0x400e0600

00401ab8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401ab8:	b9a0      	cbnz	r0, 401ae4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401aba:	480e      	ldr	r0, [pc, #56]	; (401af4 <pmc_switch_mainck_to_xtal+0x3c>)
  401abc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401abe:	0209      	lsls	r1, r1, #8
  401ac0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ac2:	4a0d      	ldr	r2, [pc, #52]	; (401af8 <pmc_switch_mainck_to_xtal+0x40>)
  401ac4:	401a      	ands	r2, r3
  401ac6:	4b0d      	ldr	r3, [pc, #52]	; (401afc <pmc_switch_mainck_to_xtal+0x44>)
  401ac8:	4313      	orrs	r3, r2
  401aca:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401acc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401ace:	4602      	mov	r2, r0
  401ad0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ad2:	f013 0f01 	tst.w	r3, #1
  401ad6:	d0fb      	beq.n	401ad0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ad8:	4a06      	ldr	r2, [pc, #24]	; (401af4 <pmc_switch_mainck_to_xtal+0x3c>)
  401ada:	6a11      	ldr	r1, [r2, #32]
  401adc:	4b08      	ldr	r3, [pc, #32]	; (401b00 <pmc_switch_mainck_to_xtal+0x48>)
  401ade:	430b      	orrs	r3, r1
  401ae0:	6213      	str	r3, [r2, #32]
  401ae2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ae4:	4903      	ldr	r1, [pc, #12]	; (401af4 <pmc_switch_mainck_to_xtal+0x3c>)
  401ae6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401ae8:	4a06      	ldr	r2, [pc, #24]	; (401b04 <pmc_switch_mainck_to_xtal+0x4c>)
  401aea:	401a      	ands	r2, r3
  401aec:	4b06      	ldr	r3, [pc, #24]	; (401b08 <pmc_switch_mainck_to_xtal+0x50>)
  401aee:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401af0:	620b      	str	r3, [r1, #32]
  401af2:	4770      	bx	lr
  401af4:	400e0600 	.word	0x400e0600
  401af8:	ffc8fffc 	.word	0xffc8fffc
  401afc:	00370001 	.word	0x00370001
  401b00:	01370000 	.word	0x01370000
  401b04:	fec8fffc 	.word	0xfec8fffc
  401b08:	01370002 	.word	0x01370002

00401b0c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401b0c:	4b02      	ldr	r3, [pc, #8]	; (401b18 <pmc_osc_is_ready_mainck+0xc>)
  401b0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401b10:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401b14:	4770      	bx	lr
  401b16:	bf00      	nop
  401b18:	400e0600 	.word	0x400e0600

00401b1c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401b1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401b20:	4b01      	ldr	r3, [pc, #4]	; (401b28 <pmc_disable_pllack+0xc>)
  401b22:	629a      	str	r2, [r3, #40]	; 0x28
  401b24:	4770      	bx	lr
  401b26:	bf00      	nop
  401b28:	400e0600 	.word	0x400e0600

00401b2c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401b2c:	4b02      	ldr	r3, [pc, #8]	; (401b38 <pmc_is_locked_pllack+0xc>)
  401b2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401b30:	f000 0002 	and.w	r0, r0, #2
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop
  401b38:	400e0600 	.word	0x400e0600

00401b3c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401b3c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401b40:	4b05      	ldr	r3, [pc, #20]	; (401b58 <pmc_enable_periph_clk+0x1c>)
  401b42:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401b46:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401b4a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401b4e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401b52:	2000      	movs	r0, #0
  401b54:	4770      	bx	lr
  401b56:	bf00      	nop
  401b58:	400e0600 	.word	0x400e0600

00401b5c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401b5c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401b5e:	4b07      	ldr	r3, [pc, #28]	; (401b7c <spi_enable_clock+0x20>)
  401b60:	4298      	cmp	r0, r3
  401b62:	d003      	beq.n	401b6c <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401b64:	4b06      	ldr	r3, [pc, #24]	; (401b80 <spi_enable_clock+0x24>)
  401b66:	4298      	cmp	r0, r3
  401b68:	d004      	beq.n	401b74 <spi_enable_clock+0x18>
  401b6a:	bd08      	pop	{r3, pc}
  401b6c:	2015      	movs	r0, #21
  401b6e:	4b05      	ldr	r3, [pc, #20]	; (401b84 <spi_enable_clock+0x28>)
  401b70:	4798      	blx	r3
  401b72:	bd08      	pop	{r3, pc}
  401b74:	202a      	movs	r0, #42	; 0x2a
  401b76:	4b03      	ldr	r3, [pc, #12]	; (401b84 <spi_enable_clock+0x28>)
  401b78:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401b7a:	e7f6      	b.n	401b6a <spi_enable_clock+0xe>
  401b7c:	40008000 	.word	0x40008000
  401b80:	40058000 	.word	0x40058000
  401b84:	00401b3d 	.word	0x00401b3d

00401b88 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401b88:	6843      	ldr	r3, [r0, #4]
  401b8a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401b8e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401b90:	6843      	ldr	r3, [r0, #4]
  401b92:	0409      	lsls	r1, r1, #16
  401b94:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401b98:	4319      	orrs	r1, r3
  401b9a:	6041      	str	r1, [r0, #4]
  401b9c:	4770      	bx	lr

00401b9e <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401b9e:	6843      	ldr	r3, [r0, #4]
  401ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ba4:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401ba6:	6843      	ldr	r3, [r0, #4]
  401ba8:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401bac:	6041      	str	r1, [r0, #4]
  401bae:	4770      	bx	lr

00401bb0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401bb0:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401bb2:	f643 2499 	movw	r4, #15001	; 0x3a99
  401bb6:	6905      	ldr	r5, [r0, #16]
  401bb8:	f015 0f02 	tst.w	r5, #2
  401bbc:	d103      	bne.n	401bc6 <spi_write+0x16>
		if (!timeout--) {
  401bbe:	3c01      	subs	r4, #1
  401bc0:	d1f9      	bne.n	401bb6 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401bc2:	2001      	movs	r0, #1
  401bc4:	e00c      	b.n	401be0 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401bc6:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401bc8:	f014 0f02 	tst.w	r4, #2
  401bcc:	d006      	beq.n	401bdc <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401bce:	0412      	lsls	r2, r2, #16
  401bd0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401bd4:	4311      	orrs	r1, r2
		if (uc_last) {
  401bd6:	b10b      	cbz	r3, 401bdc <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401bd8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401bdc:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401bde:	2000      	movs	r0, #0
}
  401be0:	bc30      	pop	{r4, r5}
  401be2:	4770      	bx	lr

00401be4 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401be4:	b932      	cbnz	r2, 401bf4 <spi_set_clock_polarity+0x10>
  401be6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401bea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bec:	f023 0301 	bic.w	r3, r3, #1
  401bf0:	6303      	str	r3, [r0, #48]	; 0x30
  401bf2:	4770      	bx	lr
  401bf4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401bf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bfa:	f043 0301 	orr.w	r3, r3, #1
  401bfe:	6303      	str	r3, [r0, #48]	; 0x30
  401c00:	4770      	bx	lr

00401c02 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401c02:	b932      	cbnz	r2, 401c12 <spi_set_clock_phase+0x10>
  401c04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401c08:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c0a:	f023 0302 	bic.w	r3, r3, #2
  401c0e:	6303      	str	r3, [r0, #48]	; 0x30
  401c10:	4770      	bx	lr
  401c12:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401c16:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c18:	f043 0302 	orr.w	r3, r3, #2
  401c1c:	6303      	str	r3, [r0, #48]	; 0x30
  401c1e:	4770      	bx	lr

00401c20 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401c20:	2a04      	cmp	r2, #4
  401c22:	d003      	beq.n	401c2c <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401c24:	b16a      	cbz	r2, 401c42 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401c26:	2a08      	cmp	r2, #8
  401c28:	d016      	beq.n	401c58 <spi_configure_cs_behavior+0x38>
  401c2a:	4770      	bx	lr
  401c2c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401c30:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c32:	f023 0308 	bic.w	r3, r3, #8
  401c36:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401c38:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c3a:	f043 0304 	orr.w	r3, r3, #4
  401c3e:	6303      	str	r3, [r0, #48]	; 0x30
  401c40:	4770      	bx	lr
  401c42:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401c46:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c48:	f023 0308 	bic.w	r3, r3, #8
  401c4c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401c4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c50:	f023 0304 	bic.w	r3, r3, #4
  401c54:	6303      	str	r3, [r0, #48]	; 0x30
  401c56:	4770      	bx	lr
  401c58:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401c5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c5e:	f043 0308 	orr.w	r3, r3, #8
  401c62:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401c64:	e7e1      	b.n	401c2a <spi_configure_cs_behavior+0xa>

00401c66 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401c66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401c6a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401c70:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401c72:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c74:	431a      	orrs	r2, r3
  401c76:	630a      	str	r2, [r1, #48]	; 0x30
  401c78:	4770      	bx	lr

00401c7a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401c7a:	1e43      	subs	r3, r0, #1
  401c7c:	4419      	add	r1, r3
  401c7e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401c82:	1e43      	subs	r3, r0, #1
  401c84:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401c86:	bf94      	ite	ls
  401c88:	b200      	sxthls	r0, r0
		return -1;
  401c8a:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401c8e:	4770      	bx	lr

00401c90 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401c90:	b17a      	cbz	r2, 401cb2 <spi_set_baudrate_div+0x22>
{
  401c92:	b410      	push	{r4}
  401c94:	4614      	mov	r4, r2
  401c96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401c9a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401ca0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401ca2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401ca4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401ca8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401caa:	2000      	movs	r0, #0
}
  401cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cb0:	4770      	bx	lr
        return -1;
  401cb2:	f04f 30ff 	mov.w	r0, #4294967295
  401cb6:	4770      	bx	lr

00401cb8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401cb8:	b410      	push	{r4}
  401cba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401cbe:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401cc0:	b280      	uxth	r0, r0
  401cc2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401cc4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401cc6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401cce:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cd4:	4770      	bx	lr
	...

00401cd8 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401cd8:	4b28      	ldr	r3, [pc, #160]	; (401d7c <twihs_set_speed+0xa4>)
  401cda:	4299      	cmp	r1, r3
  401cdc:	d84b      	bhi.n	401d76 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401cde:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401ce2:	4299      	cmp	r1, r3
  401ce4:	d92d      	bls.n	401d42 <twihs_set_speed+0x6a>
{
  401ce6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401ce8:	4c25      	ldr	r4, [pc, #148]	; (401d80 <twihs_set_speed+0xa8>)
  401cea:	fba4 3402 	umull	r3, r4, r4, r2
  401cee:	0ba4      	lsrs	r4, r4, #14
  401cf0:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401cf2:	4b24      	ldr	r3, [pc, #144]	; (401d84 <twihs_set_speed+0xac>)
  401cf4:	440b      	add	r3, r1
  401cf6:	009b      	lsls	r3, r3, #2
  401cf8:	fbb2 f2f3 	udiv	r2, r2, r3
  401cfc:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cfe:	2cff      	cmp	r4, #255	; 0xff
  401d00:	d91d      	bls.n	401d3e <twihs_set_speed+0x66>
  401d02:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401d04:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401d06:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d08:	2cff      	cmp	r4, #255	; 0xff
  401d0a:	d901      	bls.n	401d10 <twihs_set_speed+0x38>
  401d0c:	2906      	cmp	r1, #6
  401d0e:	d9f9      	bls.n	401d04 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d10:	2aff      	cmp	r2, #255	; 0xff
  401d12:	d907      	bls.n	401d24 <twihs_set_speed+0x4c>
  401d14:	2906      	cmp	r1, #6
  401d16:	d805      	bhi.n	401d24 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401d18:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401d1a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d1c:	2aff      	cmp	r2, #255	; 0xff
  401d1e:	d901      	bls.n	401d24 <twihs_set_speed+0x4c>
  401d20:	2906      	cmp	r1, #6
  401d22:	d9f9      	bls.n	401d18 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401d24:	0213      	lsls	r3, r2, #8
  401d26:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401d28:	0409      	lsls	r1, r1, #16
  401d2a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401d2e:	430b      	orrs	r3, r1
  401d30:	b2e4      	uxtb	r4, r4
  401d32:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401d34:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401d36:	2000      	movs	r0, #0
}
  401d38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d3c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401d3e:	2100      	movs	r1, #0
  401d40:	e7e6      	b.n	401d10 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401d42:	0049      	lsls	r1, r1, #1
  401d44:	fbb2 f2f1 	udiv	r2, r2, r1
  401d48:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d4a:	2aff      	cmp	r2, #255	; 0xff
  401d4c:	d911      	bls.n	401d72 <twihs_set_speed+0x9a>
  401d4e:	2300      	movs	r3, #0
			ckdiv++;
  401d50:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401d52:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d54:	2aff      	cmp	r2, #255	; 0xff
  401d56:	d901      	bls.n	401d5c <twihs_set_speed+0x84>
  401d58:	2b06      	cmp	r3, #6
  401d5a:	d9f9      	bls.n	401d50 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d5c:	0211      	lsls	r1, r2, #8
  401d5e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401d60:	041b      	lsls	r3, r3, #16
  401d62:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d66:	430b      	orrs	r3, r1
  401d68:	b2d2      	uxtb	r2, r2
  401d6a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401d6c:	6102      	str	r2, [r0, #16]
	return PASS;
  401d6e:	2000      	movs	r0, #0
  401d70:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401d72:	2300      	movs	r3, #0
  401d74:	e7f2      	b.n	401d5c <twihs_set_speed+0x84>
		return FAIL;
  401d76:	2001      	movs	r0, #1
  401d78:	4770      	bx	lr
  401d7a:	bf00      	nop
  401d7c:	00061a80 	.word	0x00061a80
  401d80:	057619f1 	.word	0x057619f1
  401d84:	3ffd1200 	.word	0x3ffd1200

00401d88 <twihs_master_init>:
{
  401d88:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401d8a:	f04f 32ff 	mov.w	r2, #4294967295
  401d8e:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401d90:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401d92:	2280      	movs	r2, #128	; 0x80
  401d94:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401d96:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401d98:	2208      	movs	r2, #8
  401d9a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401d9c:	2220      	movs	r2, #32
  401d9e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401da0:	2204      	movs	r2, #4
  401da2:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401da4:	680a      	ldr	r2, [r1, #0]
  401da6:	6849      	ldr	r1, [r1, #4]
  401da8:	4b03      	ldr	r3, [pc, #12]	; (401db8 <twihs_master_init+0x30>)
  401daa:	4798      	blx	r3
}
  401dac:	2801      	cmp	r0, #1
  401dae:	bf14      	ite	ne
  401db0:	2000      	movne	r0, #0
  401db2:	2001      	moveq	r0, #1
  401db4:	bd08      	pop	{r3, pc}
  401db6:	bf00      	nop
  401db8:	00401cd9 	.word	0x00401cd9

00401dbc <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401dbc:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401dbe:	2a00      	cmp	r2, #0
  401dc0:	d04c      	beq.n	401e5c <twihs_master_read+0xa0>
{
  401dc2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401dc4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401dc6:	2600      	movs	r6, #0
  401dc8:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dca:	684b      	ldr	r3, [r1, #4]
  401dcc:	021b      	lsls	r3, r3, #8
  401dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401dd6:	7c0d      	ldrb	r5, [r1, #16]
  401dd8:	042d      	lsls	r5, r5, #16
  401dda:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401dde:	432b      	orrs	r3, r5
  401de0:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401de2:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401de4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401de6:	b15d      	cbz	r5, 401e00 <twihs_master_read+0x44>
	val = addr[0];
  401de8:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401dea:	2d01      	cmp	r5, #1
  401dec:	dd02      	ble.n	401df4 <twihs_master_read+0x38>
		val |= addr[1];
  401dee:	784e      	ldrb	r6, [r1, #1]
  401df0:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401df4:	2d02      	cmp	r5, #2
  401df6:	dd04      	ble.n	401e02 <twihs_master_read+0x46>
		val |= addr[2];
  401df8:	7889      	ldrb	r1, [r1, #2]
  401dfa:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401dfe:	e000      	b.n	401e02 <twihs_master_read+0x46>
		return 0;
  401e00:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e02:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401e04:	2301      	movs	r3, #1
  401e06:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e08:	2502      	movs	r5, #2
  401e0a:	e012      	b.n	401e32 <twihs_master_read+0x76>
  401e0c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401e0e:	f013 0f02 	tst.w	r3, #2
  401e12:	d01b      	beq.n	401e4c <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401e14:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401e16:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e18:	6a03      	ldr	r3, [r0, #32]
  401e1a:	f013 0f01 	tst.w	r3, #1
  401e1e:	d0fb      	beq.n	401e18 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401e20:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401e22:	2000      	movs	r0, #0
}
  401e24:	bc70      	pop	{r4, r5, r6}
  401e26:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401e28:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401e2a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401e2e:	3a01      	subs	r2, #1
  401e30:	d0f2      	beq.n	401e18 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401e32:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e34:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e38:	d114      	bne.n	401e64 <twihs_master_read+0xa8>
  401e3a:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401e3e:	2a01      	cmp	r2, #1
  401e40:	d0e4      	beq.n	401e0c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401e42:	f013 0f02 	tst.w	r3, #2
  401e46:	d1ef      	bne.n	401e28 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401e48:	2a00      	cmp	r2, #0
  401e4a:	d0e5      	beq.n	401e18 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401e4c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e4e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e52:	d105      	bne.n	401e60 <twihs_master_read+0xa4>
		if (!timeout--) {
  401e54:	3901      	subs	r1, #1
  401e56:	d1f2      	bne.n	401e3e <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401e58:	2009      	movs	r0, #9
  401e5a:	e7e3      	b.n	401e24 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401e5c:	2001      	movs	r0, #1
  401e5e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e60:	2005      	movs	r0, #5
  401e62:	e7df      	b.n	401e24 <twihs_master_read+0x68>
  401e64:	2005      	movs	r0, #5
  401e66:	e7dd      	b.n	401e24 <twihs_master_read+0x68>

00401e68 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401e68:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401e6a:	2b00      	cmp	r3, #0
  401e6c:	d043      	beq.n	401ef6 <twihs_master_write+0x8e>
{
  401e6e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401e70:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401e72:	2600      	movs	r6, #0
  401e74:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e76:	7c0a      	ldrb	r2, [r1, #16]
  401e78:	0412      	lsls	r2, r2, #16
  401e7a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401e7e:	684d      	ldr	r5, [r1, #4]
  401e80:	022d      	lsls	r5, r5, #8
  401e82:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e86:	432a      	orrs	r2, r5
  401e88:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401e8a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e8c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401e8e:	b15d      	cbz	r5, 401ea8 <twihs_master_write+0x40>
	val = addr[0];
  401e90:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401e92:	2d01      	cmp	r5, #1
  401e94:	dd02      	ble.n	401e9c <twihs_master_write+0x34>
		val |= addr[1];
  401e96:	784e      	ldrb	r6, [r1, #1]
  401e98:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401e9c:	2d02      	cmp	r5, #2
  401e9e:	dd04      	ble.n	401eaa <twihs_master_write+0x42>
		val |= addr[2];
  401ea0:	7889      	ldrb	r1, [r1, #2]
  401ea2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401ea6:	e000      	b.n	401eaa <twihs_master_write+0x42>
		return 0;
  401ea8:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401eaa:	60c2      	str	r2, [r0, #12]
  401eac:	e004      	b.n	401eb8 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401eae:	f814 2b01 	ldrb.w	r2, [r4], #1
  401eb2:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401eb4:	3b01      	subs	r3, #1
  401eb6:	d00f      	beq.n	401ed8 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401eb8:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401eba:	f412 7f80 	tst.w	r2, #256	; 0x100
  401ebe:	d11e      	bne.n	401efe <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401ec0:	f012 0f04 	tst.w	r2, #4
  401ec4:	d1f3      	bne.n	401eae <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401ec6:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401ec8:	f412 7f80 	tst.w	r2, #256	; 0x100
  401ecc:	d115      	bne.n	401efa <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401ece:	f012 0f04 	tst.w	r2, #4
  401ed2:	d1ec      	bne.n	401eae <twihs_master_write+0x46>
	while (cnt > 0) {
  401ed4:	2b00      	cmp	r3, #0
  401ed6:	d1f6      	bne.n	401ec6 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401ed8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401eda:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ede:	d111      	bne.n	401f04 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401ee0:	f013 0f04 	tst.w	r3, #4
  401ee4:	d0f8      	beq.n	401ed8 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401ee6:	2302      	movs	r3, #2
  401ee8:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401eea:	6a03      	ldr	r3, [r0, #32]
  401eec:	f013 0f01 	tst.w	r3, #1
  401ef0:	d0fb      	beq.n	401eea <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401ef2:	2000      	movs	r0, #0
  401ef4:	e004      	b.n	401f00 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401ef6:	2001      	movs	r0, #1
  401ef8:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401efa:	2005      	movs	r0, #5
  401efc:	e000      	b.n	401f00 <twihs_master_write+0x98>
  401efe:	2005      	movs	r0, #5
}
  401f00:	bc70      	pop	{r4, r5, r6}
  401f02:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401f04:	2005      	movs	r0, #5
  401f06:	e7fb      	b.n	401f00 <twihs_master_write+0x98>

00401f08 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401f08:	6943      	ldr	r3, [r0, #20]
  401f0a:	f013 0f02 	tst.w	r3, #2
  401f0e:	d002      	beq.n	401f16 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401f10:	61c1      	str	r1, [r0, #28]
	return 0;
  401f12:	2000      	movs	r0, #0
  401f14:	4770      	bx	lr
		return 1;
  401f16:	2001      	movs	r0, #1
}
  401f18:	4770      	bx	lr

00401f1a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401f1a:	6943      	ldr	r3, [r0, #20]
  401f1c:	f013 0f01 	tst.w	r3, #1
  401f20:	d003      	beq.n	401f2a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401f22:	6983      	ldr	r3, [r0, #24]
  401f24:	700b      	strb	r3, [r1, #0]
	return 0;
  401f26:	2000      	movs	r0, #0
  401f28:	4770      	bx	lr
		return 1;
  401f2a:	2001      	movs	r0, #1
}
  401f2c:	4770      	bx	lr

00401f2e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401f2e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401f30:	010b      	lsls	r3, r1, #4
  401f32:	4293      	cmp	r3, r2
  401f34:	d914      	bls.n	401f60 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401f36:	00c9      	lsls	r1, r1, #3
  401f38:	084b      	lsrs	r3, r1, #1
  401f3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401f3e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401f42:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401f44:	1e5c      	subs	r4, r3, #1
  401f46:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401f4a:	428c      	cmp	r4, r1
  401f4c:	d901      	bls.n	401f52 <usart_set_async_baudrate+0x24>
		return 1;
  401f4e:	2001      	movs	r0, #1
  401f50:	e017      	b.n	401f82 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401f52:	6841      	ldr	r1, [r0, #4]
  401f54:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401f58:	6041      	str	r1, [r0, #4]
  401f5a:	e00c      	b.n	401f76 <usart_set_async_baudrate+0x48>
		return 1;
  401f5c:	2001      	movs	r0, #1
  401f5e:	e010      	b.n	401f82 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401f60:	0859      	lsrs	r1, r3, #1
  401f62:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401f66:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401f6a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401f6c:	1e5c      	subs	r4, r3, #1
  401f6e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401f72:	428c      	cmp	r4, r1
  401f74:	d8f2      	bhi.n	401f5c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401f76:	0412      	lsls	r2, r2, #16
  401f78:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401f7c:	431a      	orrs	r2, r3
  401f7e:	6202      	str	r2, [r0, #32]

	return 0;
  401f80:	2000      	movs	r0, #0
}
  401f82:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f86:	4770      	bx	lr

00401f88 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401f88:	4b08      	ldr	r3, [pc, #32]	; (401fac <usart_reset+0x24>)
  401f8a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401f8e:	2300      	movs	r3, #0
  401f90:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401f92:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401f94:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401f96:	2388      	movs	r3, #136	; 0x88
  401f98:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401f9a:	2324      	movs	r3, #36	; 0x24
  401f9c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401fa2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401fa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401fa8:	6003      	str	r3, [r0, #0]
  401faa:	4770      	bx	lr
  401fac:	55534100 	.word	0x55534100

00401fb0 <usart_init_rs232>:
{
  401fb0:	b570      	push	{r4, r5, r6, lr}
  401fb2:	4605      	mov	r5, r0
  401fb4:	460c      	mov	r4, r1
  401fb6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401fb8:	4b0f      	ldr	r3, [pc, #60]	; (401ff8 <usart_init_rs232+0x48>)
  401fba:	4798      	blx	r3
	ul_reg_val = 0;
  401fbc:	2200      	movs	r2, #0
  401fbe:	4b0f      	ldr	r3, [pc, #60]	; (401ffc <usart_init_rs232+0x4c>)
  401fc0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401fc2:	b1a4      	cbz	r4, 401fee <usart_init_rs232+0x3e>
  401fc4:	4632      	mov	r2, r6
  401fc6:	6821      	ldr	r1, [r4, #0]
  401fc8:	4628      	mov	r0, r5
  401fca:	4b0d      	ldr	r3, [pc, #52]	; (402000 <usart_init_rs232+0x50>)
  401fcc:	4798      	blx	r3
  401fce:	4602      	mov	r2, r0
  401fd0:	b978      	cbnz	r0, 401ff2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401fd2:	6863      	ldr	r3, [r4, #4]
  401fd4:	68a1      	ldr	r1, [r4, #8]
  401fd6:	430b      	orrs	r3, r1
  401fd8:	6921      	ldr	r1, [r4, #16]
  401fda:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401fdc:	68e1      	ldr	r1, [r4, #12]
  401fde:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401fe0:	4906      	ldr	r1, [pc, #24]	; (401ffc <usart_init_rs232+0x4c>)
  401fe2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401fe4:	6869      	ldr	r1, [r5, #4]
  401fe6:	430b      	orrs	r3, r1
  401fe8:	606b      	str	r3, [r5, #4]
}
  401fea:	4610      	mov	r0, r2
  401fec:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401fee:	2201      	movs	r2, #1
  401ff0:	e7fb      	b.n	401fea <usart_init_rs232+0x3a>
  401ff2:	2201      	movs	r2, #1
  401ff4:	e7f9      	b.n	401fea <usart_init_rs232+0x3a>
  401ff6:	bf00      	nop
  401ff8:	00401f89 	.word	0x00401f89
  401ffc:	20400fec 	.word	0x20400fec
  402000:	00401f2f 	.word	0x00401f2f

00402004 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402004:	2340      	movs	r3, #64	; 0x40
  402006:	6003      	str	r3, [r0, #0]
  402008:	4770      	bx	lr

0040200a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40200a:	2310      	movs	r3, #16
  40200c:	6003      	str	r3, [r0, #0]
  40200e:	4770      	bx	lr

00402010 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402010:	6943      	ldr	r3, [r0, #20]
  402012:	f013 0f02 	tst.w	r3, #2
  402016:	d004      	beq.n	402022 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  402018:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40201c:	61c1      	str	r1, [r0, #28]
	return 0;
  40201e:	2000      	movs	r0, #0
  402020:	4770      	bx	lr
		return 1;
  402022:	2001      	movs	r0, #1
}
  402024:	4770      	bx	lr

00402026 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402026:	6943      	ldr	r3, [r0, #20]
  402028:	f013 0f01 	tst.w	r3, #1
  40202c:	d005      	beq.n	40203a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40202e:	6983      	ldr	r3, [r0, #24]
  402030:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402034:	600b      	str	r3, [r1, #0]
	return 0;
  402036:	2000      	movs	r0, #0
  402038:	4770      	bx	lr
		return 1;
  40203a:	2001      	movs	r0, #1
}
  40203c:	4770      	bx	lr

0040203e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40203e:	e7fe      	b.n	40203e <Dummy_Handler>

00402040 <Reset_Handler>:
{
  402040:	b500      	push	{lr}
  402042:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  402044:	4b25      	ldr	r3, [pc, #148]	; (4020dc <Reset_Handler+0x9c>)
  402046:	4a26      	ldr	r2, [pc, #152]	; (4020e0 <Reset_Handler+0xa0>)
  402048:	429a      	cmp	r2, r3
  40204a:	d010      	beq.n	40206e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40204c:	4b25      	ldr	r3, [pc, #148]	; (4020e4 <Reset_Handler+0xa4>)
  40204e:	4a23      	ldr	r2, [pc, #140]	; (4020dc <Reset_Handler+0x9c>)
  402050:	429a      	cmp	r2, r3
  402052:	d20c      	bcs.n	40206e <Reset_Handler+0x2e>
  402054:	3b01      	subs	r3, #1
  402056:	1a9b      	subs	r3, r3, r2
  402058:	f023 0303 	bic.w	r3, r3, #3
  40205c:	3304      	adds	r3, #4
  40205e:	4413      	add	r3, r2
  402060:	491f      	ldr	r1, [pc, #124]	; (4020e0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  402062:	f851 0b04 	ldr.w	r0, [r1], #4
  402066:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40206a:	429a      	cmp	r2, r3
  40206c:	d1f9      	bne.n	402062 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40206e:	4b1e      	ldr	r3, [pc, #120]	; (4020e8 <Reset_Handler+0xa8>)
  402070:	4a1e      	ldr	r2, [pc, #120]	; (4020ec <Reset_Handler+0xac>)
  402072:	429a      	cmp	r2, r3
  402074:	d20a      	bcs.n	40208c <Reset_Handler+0x4c>
  402076:	3b01      	subs	r3, #1
  402078:	1a9b      	subs	r3, r3, r2
  40207a:	f023 0303 	bic.w	r3, r3, #3
  40207e:	3304      	adds	r3, #4
  402080:	4413      	add	r3, r2
                *pDest++ = 0;
  402082:	2100      	movs	r1, #0
  402084:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402088:	4293      	cmp	r3, r2
  40208a:	d1fb      	bne.n	402084 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40208c:	4a18      	ldr	r2, [pc, #96]	; (4020f0 <Reset_Handler+0xb0>)
  40208e:	4b19      	ldr	r3, [pc, #100]	; (4020f4 <Reset_Handler+0xb4>)
  402090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402094:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402096:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40209a:	fab3 f383 	clz	r3, r3
  40209e:	095b      	lsrs	r3, r3, #5
  4020a0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4020a2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4020a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4020a8:	2200      	movs	r2, #0
  4020aa:	4b13      	ldr	r3, [pc, #76]	; (4020f8 <Reset_Handler+0xb8>)
  4020ac:	701a      	strb	r2, [r3, #0]
	return flags;
  4020ae:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4020b0:	4a12      	ldr	r2, [pc, #72]	; (4020fc <Reset_Handler+0xbc>)
  4020b2:	6813      	ldr	r3, [r2, #0]
  4020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4020b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4020ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4020be:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4020c2:	b129      	cbz	r1, 4020d0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4020c4:	2201      	movs	r2, #1
  4020c6:	4b0c      	ldr	r3, [pc, #48]	; (4020f8 <Reset_Handler+0xb8>)
  4020c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4020ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4020ce:	b662      	cpsie	i
        __libc_init_array();
  4020d0:	4b0b      	ldr	r3, [pc, #44]	; (402100 <Reset_Handler+0xc0>)
  4020d2:	4798      	blx	r3
        main();
  4020d4:	4b0b      	ldr	r3, [pc, #44]	; (402104 <Reset_Handler+0xc4>)
  4020d6:	4798      	blx	r3
  4020d8:	e7fe      	b.n	4020d8 <Reset_Handler+0x98>
  4020da:	bf00      	nop
  4020dc:	20400000 	.word	0x20400000
  4020e0:	00407dc4 	.word	0x00407dc4
  4020e4:	204009c0 	.word	0x204009c0
  4020e8:	2040ca88 	.word	0x2040ca88
  4020ec:	204009c0 	.word	0x204009c0
  4020f0:	e000ed00 	.word	0xe000ed00
  4020f4:	00400000 	.word	0x00400000
  4020f8:	2040000a 	.word	0x2040000a
  4020fc:	e000ed88 	.word	0xe000ed88
  402100:	00404b75 	.word	0x00404b75
  402104:	00404585 	.word	0x00404585

00402108 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402108:	4b3b      	ldr	r3, [pc, #236]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40210c:	f003 0303 	and.w	r3, r3, #3
  402110:	2b01      	cmp	r3, #1
  402112:	d01d      	beq.n	402150 <SystemCoreClockUpdate+0x48>
  402114:	b183      	cbz	r3, 402138 <SystemCoreClockUpdate+0x30>
  402116:	2b02      	cmp	r3, #2
  402118:	d036      	beq.n	402188 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40211a:	4b37      	ldr	r3, [pc, #220]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40211e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402122:	2b70      	cmp	r3, #112	; 0x70
  402124:	d05f      	beq.n	4021e6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402126:	4b34      	ldr	r3, [pc, #208]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  402128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40212a:	4934      	ldr	r1, [pc, #208]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40212c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402130:	680b      	ldr	r3, [r1, #0]
  402132:	40d3      	lsrs	r3, r2
  402134:	600b      	str	r3, [r1, #0]
  402136:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402138:	4b31      	ldr	r3, [pc, #196]	; (402200 <SystemCoreClockUpdate+0xf8>)
  40213a:	695b      	ldr	r3, [r3, #20]
  40213c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402140:	bf14      	ite	ne
  402142:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402146:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40214a:	4b2c      	ldr	r3, [pc, #176]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40214c:	601a      	str	r2, [r3, #0]
  40214e:	e7e4      	b.n	40211a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402150:	4b29      	ldr	r3, [pc, #164]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  402152:	6a1b      	ldr	r3, [r3, #32]
  402154:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402158:	d003      	beq.n	402162 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40215a:	4a2a      	ldr	r2, [pc, #168]	; (402204 <SystemCoreClockUpdate+0xfc>)
  40215c:	4b27      	ldr	r3, [pc, #156]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40215e:	601a      	str	r2, [r3, #0]
  402160:	e7db      	b.n	40211a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402162:	4a29      	ldr	r2, [pc, #164]	; (402208 <SystemCoreClockUpdate+0x100>)
  402164:	4b25      	ldr	r3, [pc, #148]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  402166:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402168:	4b23      	ldr	r3, [pc, #140]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40216a:	6a1b      	ldr	r3, [r3, #32]
  40216c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402170:	2b10      	cmp	r3, #16
  402172:	d005      	beq.n	402180 <SystemCoreClockUpdate+0x78>
  402174:	2b20      	cmp	r3, #32
  402176:	d1d0      	bne.n	40211a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402178:	4a22      	ldr	r2, [pc, #136]	; (402204 <SystemCoreClockUpdate+0xfc>)
  40217a:	4b20      	ldr	r3, [pc, #128]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40217c:	601a      	str	r2, [r3, #0]
          break;
  40217e:	e7cc      	b.n	40211a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402180:	4a22      	ldr	r2, [pc, #136]	; (40220c <SystemCoreClockUpdate+0x104>)
  402182:	4b1e      	ldr	r3, [pc, #120]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  402184:	601a      	str	r2, [r3, #0]
          break;
  402186:	e7c8      	b.n	40211a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402188:	4b1b      	ldr	r3, [pc, #108]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40218a:	6a1b      	ldr	r3, [r3, #32]
  40218c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402190:	d016      	beq.n	4021c0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402192:	4a1c      	ldr	r2, [pc, #112]	; (402204 <SystemCoreClockUpdate+0xfc>)
  402194:	4b19      	ldr	r3, [pc, #100]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  402196:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402198:	4b17      	ldr	r3, [pc, #92]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40219c:	f003 0303 	and.w	r3, r3, #3
  4021a0:	2b02      	cmp	r3, #2
  4021a2:	d1ba      	bne.n	40211a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4021a4:	4a14      	ldr	r2, [pc, #80]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  4021a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4021a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4021aa:	4814      	ldr	r0, [pc, #80]	; (4021fc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4021ac:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4021b0:	6803      	ldr	r3, [r0, #0]
  4021b2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4021b6:	b2d2      	uxtb	r2, r2
  4021b8:	fbb3 f3f2 	udiv	r3, r3, r2
  4021bc:	6003      	str	r3, [r0, #0]
  4021be:	e7ac      	b.n	40211a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4021c0:	4a11      	ldr	r2, [pc, #68]	; (402208 <SystemCoreClockUpdate+0x100>)
  4021c2:	4b0e      	ldr	r3, [pc, #56]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021c4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4021c6:	4b0c      	ldr	r3, [pc, #48]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  4021c8:	6a1b      	ldr	r3, [r3, #32]
  4021ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021ce:	2b10      	cmp	r3, #16
  4021d0:	d005      	beq.n	4021de <SystemCoreClockUpdate+0xd6>
  4021d2:	2b20      	cmp	r3, #32
  4021d4:	d1e0      	bne.n	402198 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4021d6:	4a0b      	ldr	r2, [pc, #44]	; (402204 <SystemCoreClockUpdate+0xfc>)
  4021d8:	4b08      	ldr	r3, [pc, #32]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021da:	601a      	str	r2, [r3, #0]
          break;
  4021dc:	e7dc      	b.n	402198 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4021de:	4a0b      	ldr	r2, [pc, #44]	; (40220c <SystemCoreClockUpdate+0x104>)
  4021e0:	4b06      	ldr	r3, [pc, #24]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021e2:	601a      	str	r2, [r3, #0]
          break;
  4021e4:	e7d8      	b.n	402198 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4021e6:	4a05      	ldr	r2, [pc, #20]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021e8:	6813      	ldr	r3, [r2, #0]
  4021ea:	4909      	ldr	r1, [pc, #36]	; (402210 <SystemCoreClockUpdate+0x108>)
  4021ec:	fba1 1303 	umull	r1, r3, r1, r3
  4021f0:	085b      	lsrs	r3, r3, #1
  4021f2:	6013      	str	r3, [r2, #0]
  4021f4:	4770      	bx	lr
  4021f6:	bf00      	nop
  4021f8:	400e0600 	.word	0x400e0600
  4021fc:	2040000c 	.word	0x2040000c
  402200:	400e1810 	.word	0x400e1810
  402204:	00b71b00 	.word	0x00b71b00
  402208:	003d0900 	.word	0x003d0900
  40220c:	007a1200 	.word	0x007a1200
  402210:	aaaaaaab 	.word	0xaaaaaaab

00402214 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402214:	4b16      	ldr	r3, [pc, #88]	; (402270 <system_init_flash+0x5c>)
  402216:	4298      	cmp	r0, r3
  402218:	d913      	bls.n	402242 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40221a:	4b16      	ldr	r3, [pc, #88]	; (402274 <system_init_flash+0x60>)
  40221c:	4298      	cmp	r0, r3
  40221e:	d915      	bls.n	40224c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402220:	4b15      	ldr	r3, [pc, #84]	; (402278 <system_init_flash+0x64>)
  402222:	4298      	cmp	r0, r3
  402224:	d916      	bls.n	402254 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402226:	4b15      	ldr	r3, [pc, #84]	; (40227c <system_init_flash+0x68>)
  402228:	4298      	cmp	r0, r3
  40222a:	d917      	bls.n	40225c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40222c:	4b14      	ldr	r3, [pc, #80]	; (402280 <system_init_flash+0x6c>)
  40222e:	4298      	cmp	r0, r3
  402230:	d918      	bls.n	402264 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402232:	4b14      	ldr	r3, [pc, #80]	; (402284 <system_init_flash+0x70>)
  402234:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402236:	bf94      	ite	ls
  402238:	4a13      	ldrls	r2, [pc, #76]	; (402288 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40223a:	4a14      	ldrhi	r2, [pc, #80]	; (40228c <system_init_flash+0x78>)
  40223c:	4b14      	ldr	r3, [pc, #80]	; (402290 <system_init_flash+0x7c>)
  40223e:	601a      	str	r2, [r3, #0]
  402240:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402242:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402246:	4b12      	ldr	r3, [pc, #72]	; (402290 <system_init_flash+0x7c>)
  402248:	601a      	str	r2, [r3, #0]
  40224a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40224c:	4a11      	ldr	r2, [pc, #68]	; (402294 <system_init_flash+0x80>)
  40224e:	4b10      	ldr	r3, [pc, #64]	; (402290 <system_init_flash+0x7c>)
  402250:	601a      	str	r2, [r3, #0]
  402252:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402254:	4a10      	ldr	r2, [pc, #64]	; (402298 <system_init_flash+0x84>)
  402256:	4b0e      	ldr	r3, [pc, #56]	; (402290 <system_init_flash+0x7c>)
  402258:	601a      	str	r2, [r3, #0]
  40225a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40225c:	4a0f      	ldr	r2, [pc, #60]	; (40229c <system_init_flash+0x88>)
  40225e:	4b0c      	ldr	r3, [pc, #48]	; (402290 <system_init_flash+0x7c>)
  402260:	601a      	str	r2, [r3, #0]
  402262:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402264:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402268:	4b09      	ldr	r3, [pc, #36]	; (402290 <system_init_flash+0x7c>)
  40226a:	601a      	str	r2, [r3, #0]
  40226c:	4770      	bx	lr
  40226e:	bf00      	nop
  402270:	015ef3bf 	.word	0x015ef3bf
  402274:	02bde77f 	.word	0x02bde77f
  402278:	041cdb3f 	.word	0x041cdb3f
  40227c:	057bceff 	.word	0x057bceff
  402280:	06dac2bf 	.word	0x06dac2bf
  402284:	0839b67f 	.word	0x0839b67f
  402288:	04000500 	.word	0x04000500
  40228c:	04000600 	.word	0x04000600
  402290:	400e0c00 	.word	0x400e0c00
  402294:	04000100 	.word	0x04000100
  402298:	04000200 	.word	0x04000200
  40229c:	04000300 	.word	0x04000300

004022a0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4022a0:	4b0a      	ldr	r3, [pc, #40]	; (4022cc <_sbrk+0x2c>)
  4022a2:	681b      	ldr	r3, [r3, #0]
  4022a4:	b153      	cbz	r3, 4022bc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4022a6:	4b09      	ldr	r3, [pc, #36]	; (4022cc <_sbrk+0x2c>)
  4022a8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4022aa:	181a      	adds	r2, r3, r0
  4022ac:	4908      	ldr	r1, [pc, #32]	; (4022d0 <_sbrk+0x30>)
  4022ae:	4291      	cmp	r1, r2
  4022b0:	db08      	blt.n	4022c4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4022b2:	4610      	mov	r0, r2
  4022b4:	4a05      	ldr	r2, [pc, #20]	; (4022cc <_sbrk+0x2c>)
  4022b6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4022b8:	4618      	mov	r0, r3
  4022ba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4022bc:	4a05      	ldr	r2, [pc, #20]	; (4022d4 <_sbrk+0x34>)
  4022be:	4b03      	ldr	r3, [pc, #12]	; (4022cc <_sbrk+0x2c>)
  4022c0:	601a      	str	r2, [r3, #0]
  4022c2:	e7f0      	b.n	4022a6 <_sbrk+0x6>
		return (caddr_t) -1;	
  4022c4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4022c8:	4770      	bx	lr
  4022ca:	bf00      	nop
  4022cc:	20400ff0 	.word	0x20400ff0
  4022d0:	2045fffc 	.word	0x2045fffc
  4022d4:	2040ec88 	.word	0x2040ec88

004022d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4022d8:	f04f 30ff 	mov.w	r0, #4294967295
  4022dc:	4770      	bx	lr

004022de <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4022de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4022e2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4022e4:	2000      	movs	r0, #0
  4022e6:	4770      	bx	lr

004022e8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4022e8:	2001      	movs	r0, #1
  4022ea:	4770      	bx	lr

004022ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4022ec:	2000      	movs	r0, #0
  4022ee:	4770      	bx	lr

004022f0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4022f0:	f100 0308 	add.w	r3, r0, #8
  4022f4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4022f6:	f04f 32ff 	mov.w	r2, #4294967295
  4022fa:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4022fc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4022fe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  402300:	2300      	movs	r3, #0
  402302:	6003      	str	r3, [r0, #0]
  402304:	4770      	bx	lr

00402306 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  402306:	2300      	movs	r3, #0
  402308:	6103      	str	r3, [r0, #16]
  40230a:	4770      	bx	lr

0040230c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40230c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40230e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  402310:	689a      	ldr	r2, [r3, #8]
  402312:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  402314:	689a      	ldr	r2, [r3, #8]
  402316:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  402318:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40231a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40231c:	6803      	ldr	r3, [r0, #0]
  40231e:	3301      	adds	r3, #1
  402320:	6003      	str	r3, [r0, #0]
  402322:	4770      	bx	lr

00402324 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  402324:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  402326:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  402328:	f1b5 3fff 	cmp.w	r5, #4294967295
  40232c:	d002      	beq.n	402334 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40232e:	f100 0208 	add.w	r2, r0, #8
  402332:	e002      	b.n	40233a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  402334:	6902      	ldr	r2, [r0, #16]
  402336:	e004      	b.n	402342 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402338:	461a      	mov	r2, r3
  40233a:	6853      	ldr	r3, [r2, #4]
  40233c:	681c      	ldr	r4, [r3, #0]
  40233e:	42a5      	cmp	r5, r4
  402340:	d2fa      	bcs.n	402338 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  402342:	6853      	ldr	r3, [r2, #4]
  402344:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  402346:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  402348:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40234a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40234c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40234e:	6803      	ldr	r3, [r0, #0]
  402350:	3301      	adds	r3, #1
  402352:	6003      	str	r3, [r0, #0]
}
  402354:	bc30      	pop	{r4, r5}
  402356:	4770      	bx	lr

00402358 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  402358:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40235a:	6842      	ldr	r2, [r0, #4]
  40235c:	6881      	ldr	r1, [r0, #8]
  40235e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  402360:	6882      	ldr	r2, [r0, #8]
  402362:	6841      	ldr	r1, [r0, #4]
  402364:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  402366:	685a      	ldr	r2, [r3, #4]
  402368:	4290      	cmp	r0, r2
  40236a:	d005      	beq.n	402378 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40236c:	2200      	movs	r2, #0
  40236e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  402370:	6818      	ldr	r0, [r3, #0]
  402372:	3801      	subs	r0, #1
  402374:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  402376:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  402378:	6882      	ldr	r2, [r0, #8]
  40237a:	605a      	str	r2, [r3, #4]
  40237c:	e7f6      	b.n	40236c <uxListRemove+0x14>
	...

00402380 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  402380:	4b0d      	ldr	r3, [pc, #52]	; (4023b8 <prvTaskExitError+0x38>)
  402382:	681b      	ldr	r3, [r3, #0]
  402384:	f1b3 3fff 	cmp.w	r3, #4294967295
  402388:	d00a      	beq.n	4023a0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40238a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40238e:	b672      	cpsid	i
  402390:	f383 8811 	msr	BASEPRI, r3
  402394:	f3bf 8f6f 	isb	sy
  402398:	f3bf 8f4f 	dsb	sy
  40239c:	b662      	cpsie	i
  40239e:	e7fe      	b.n	40239e <prvTaskExitError+0x1e>
  4023a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023a4:	b672      	cpsid	i
  4023a6:	f383 8811 	msr	BASEPRI, r3
  4023aa:	f3bf 8f6f 	isb	sy
  4023ae:	f3bf 8f4f 	dsb	sy
  4023b2:	b662      	cpsie	i
  4023b4:	e7fe      	b.n	4023b4 <prvTaskExitError+0x34>
  4023b6:	bf00      	nop
  4023b8:	20400010 	.word	0x20400010

004023bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4023bc:	4806      	ldr	r0, [pc, #24]	; (4023d8 <prvPortStartFirstTask+0x1c>)
  4023be:	6800      	ldr	r0, [r0, #0]
  4023c0:	6800      	ldr	r0, [r0, #0]
  4023c2:	f380 8808 	msr	MSP, r0
  4023c6:	b662      	cpsie	i
  4023c8:	b661      	cpsie	f
  4023ca:	f3bf 8f4f 	dsb	sy
  4023ce:	f3bf 8f6f 	isb	sy
  4023d2:	df00      	svc	0
  4023d4:	bf00      	nop
  4023d6:	0000      	.short	0x0000
  4023d8:	e000ed08 	.word	0xe000ed08

004023dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4023dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4023ec <vPortEnableVFP+0x10>
  4023e0:	6801      	ldr	r1, [r0, #0]
  4023e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4023e6:	6001      	str	r1, [r0, #0]
  4023e8:	4770      	bx	lr
  4023ea:	0000      	.short	0x0000
  4023ec:	e000ed88 	.word	0xe000ed88

004023f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4023f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4023f4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4023f8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4023fc:	4b05      	ldr	r3, [pc, #20]	; (402414 <pxPortInitialiseStack+0x24>)
  4023fe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  402402:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  402406:	f06f 0302 	mvn.w	r3, #2
  40240a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40240e:	3844      	subs	r0, #68	; 0x44
  402410:	4770      	bx	lr
  402412:	bf00      	nop
  402414:	00402381 	.word	0x00402381

00402418 <SVC_Handler>:
	__asm volatile (
  402418:	4b06      	ldr	r3, [pc, #24]	; (402434 <pxCurrentTCBConst2>)
  40241a:	6819      	ldr	r1, [r3, #0]
  40241c:	6808      	ldr	r0, [r1, #0]
  40241e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402422:	f380 8809 	msr	PSP, r0
  402426:	f3bf 8f6f 	isb	sy
  40242a:	f04f 0000 	mov.w	r0, #0
  40242e:	f380 8811 	msr	BASEPRI, r0
  402432:	4770      	bx	lr

00402434 <pxCurrentTCBConst2>:
  402434:	2040c804 	.word	0x2040c804
  402438:	4770      	bx	lr
  40243a:	bf00      	nop

0040243c <vPortEnterCritical>:
  40243c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402440:	b672      	cpsid	i
  402442:	f383 8811 	msr	BASEPRI, r3
  402446:	f3bf 8f6f 	isb	sy
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	b662      	cpsie	i
	uxCriticalNesting++;
  402450:	4a0b      	ldr	r2, [pc, #44]	; (402480 <vPortEnterCritical+0x44>)
  402452:	6813      	ldr	r3, [r2, #0]
  402454:	3301      	adds	r3, #1
  402456:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  402458:	2b01      	cmp	r3, #1
  40245a:	d10f      	bne.n	40247c <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40245c:	4b09      	ldr	r3, [pc, #36]	; (402484 <vPortEnterCritical+0x48>)
  40245e:	681b      	ldr	r3, [r3, #0]
  402460:	f013 0fff 	tst.w	r3, #255	; 0xff
  402464:	d00a      	beq.n	40247c <vPortEnterCritical+0x40>
  402466:	f04f 0380 	mov.w	r3, #128	; 0x80
  40246a:	b672      	cpsid	i
  40246c:	f383 8811 	msr	BASEPRI, r3
  402470:	f3bf 8f6f 	isb	sy
  402474:	f3bf 8f4f 	dsb	sy
  402478:	b662      	cpsie	i
  40247a:	e7fe      	b.n	40247a <vPortEnterCritical+0x3e>
  40247c:	4770      	bx	lr
  40247e:	bf00      	nop
  402480:	20400010 	.word	0x20400010
  402484:	e000ed04 	.word	0xe000ed04

00402488 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402488:	4b0a      	ldr	r3, [pc, #40]	; (4024b4 <vPortExitCritical+0x2c>)
  40248a:	681b      	ldr	r3, [r3, #0]
  40248c:	b953      	cbnz	r3, 4024a4 <vPortExitCritical+0x1c>
  40248e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402492:	b672      	cpsid	i
  402494:	f383 8811 	msr	BASEPRI, r3
  402498:	f3bf 8f6f 	isb	sy
  40249c:	f3bf 8f4f 	dsb	sy
  4024a0:	b662      	cpsie	i
  4024a2:	e7fe      	b.n	4024a2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4024a4:	3b01      	subs	r3, #1
  4024a6:	4a03      	ldr	r2, [pc, #12]	; (4024b4 <vPortExitCritical+0x2c>)
  4024a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4024aa:	b90b      	cbnz	r3, 4024b0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4024ac:	f383 8811 	msr	BASEPRI, r3
  4024b0:	4770      	bx	lr
  4024b2:	bf00      	nop
  4024b4:	20400010 	.word	0x20400010

004024b8 <PendSV_Handler>:
	__asm volatile
  4024b8:	f3ef 8009 	mrs	r0, PSP
  4024bc:	f3bf 8f6f 	isb	sy
  4024c0:	4b15      	ldr	r3, [pc, #84]	; (402518 <pxCurrentTCBConst>)
  4024c2:	681a      	ldr	r2, [r3, #0]
  4024c4:	f01e 0f10 	tst.w	lr, #16
  4024c8:	bf08      	it	eq
  4024ca:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4024ce:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024d2:	6010      	str	r0, [r2, #0]
  4024d4:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4024d8:	f04f 0080 	mov.w	r0, #128	; 0x80
  4024dc:	b672      	cpsid	i
  4024de:	f380 8811 	msr	BASEPRI, r0
  4024e2:	f3bf 8f4f 	dsb	sy
  4024e6:	f3bf 8f6f 	isb	sy
  4024ea:	b662      	cpsie	i
  4024ec:	f001 f8aa 	bl	403644 <vTaskSwitchContext>
  4024f0:	f04f 0000 	mov.w	r0, #0
  4024f4:	f380 8811 	msr	BASEPRI, r0
  4024f8:	bc08      	pop	{r3}
  4024fa:	6819      	ldr	r1, [r3, #0]
  4024fc:	6808      	ldr	r0, [r1, #0]
  4024fe:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402502:	f01e 0f10 	tst.w	lr, #16
  402506:	bf08      	it	eq
  402508:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40250c:	f380 8809 	msr	PSP, r0
  402510:	f3bf 8f6f 	isb	sy
  402514:	4770      	bx	lr
  402516:	bf00      	nop

00402518 <pxCurrentTCBConst>:
  402518:	2040c804 	.word	0x2040c804
  40251c:	4770      	bx	lr
  40251e:	bf00      	nop

00402520 <SysTick_Handler>:
{
  402520:	b508      	push	{r3, lr}
	__asm volatile
  402522:	f3ef 8311 	mrs	r3, BASEPRI
  402526:	f04f 0280 	mov.w	r2, #128	; 0x80
  40252a:	b672      	cpsid	i
  40252c:	f382 8811 	msr	BASEPRI, r2
  402530:	f3bf 8f6f 	isb	sy
  402534:	f3bf 8f4f 	dsb	sy
  402538:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40253a:	4b05      	ldr	r3, [pc, #20]	; (402550 <SysTick_Handler+0x30>)
  40253c:	4798      	blx	r3
  40253e:	b118      	cbz	r0, 402548 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  402540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402544:	4b03      	ldr	r3, [pc, #12]	; (402554 <SysTick_Handler+0x34>)
  402546:	601a      	str	r2, [r3, #0]
	__asm volatile
  402548:	2300      	movs	r3, #0
  40254a:	f383 8811 	msr	BASEPRI, r3
  40254e:	bd08      	pop	{r3, pc}
  402550:	004032b1 	.word	0x004032b1
  402554:	e000ed04 	.word	0xe000ed04

00402558 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  402558:	4a03      	ldr	r2, [pc, #12]	; (402568 <vPortSetupTimerInterrupt+0x10>)
  40255a:	4b04      	ldr	r3, [pc, #16]	; (40256c <vPortSetupTimerInterrupt+0x14>)
  40255c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40255e:	2207      	movs	r2, #7
  402560:	3b04      	subs	r3, #4
  402562:	601a      	str	r2, [r3, #0]
  402564:	4770      	bx	lr
  402566:	bf00      	nop
  402568:	0003a97f 	.word	0x0003a97f
  40256c:	e000e014 	.word	0xe000e014

00402570 <xPortStartScheduler>:
{
  402570:	b500      	push	{lr}
  402572:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402574:	4b25      	ldr	r3, [pc, #148]	; (40260c <xPortStartScheduler+0x9c>)
  402576:	781a      	ldrb	r2, [r3, #0]
  402578:	b2d2      	uxtb	r2, r2
  40257a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40257c:	22ff      	movs	r2, #255	; 0xff
  40257e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402580:	781b      	ldrb	r3, [r3, #0]
  402582:	b2db      	uxtb	r3, r3
  402584:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402588:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402590:	4a1f      	ldr	r2, [pc, #124]	; (402610 <xPortStartScheduler+0xa0>)
  402592:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402594:	2207      	movs	r2, #7
  402596:	4b1f      	ldr	r3, [pc, #124]	; (402614 <xPortStartScheduler+0xa4>)
  402598:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40259a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40259e:	f013 0f80 	tst.w	r3, #128	; 0x80
  4025a2:	d010      	beq.n	4025c6 <xPortStartScheduler+0x56>
  4025a4:	2206      	movs	r2, #6
  4025a6:	e000      	b.n	4025aa <xPortStartScheduler+0x3a>
  4025a8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4025aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4025ae:	005b      	lsls	r3, r3, #1
  4025b0:	b2db      	uxtb	r3, r3
  4025b2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4025b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4025ba:	1e51      	subs	r1, r2, #1
  4025bc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4025c0:	d1f2      	bne.n	4025a8 <xPortStartScheduler+0x38>
  4025c2:	4b14      	ldr	r3, [pc, #80]	; (402614 <xPortStartScheduler+0xa4>)
  4025c4:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4025c6:	4a13      	ldr	r2, [pc, #76]	; (402614 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4025c8:	6813      	ldr	r3, [r2, #0]
  4025ca:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4025cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4025d0:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4025d2:	9b01      	ldr	r3, [sp, #4]
  4025d4:	b2db      	uxtb	r3, r3
  4025d6:	4a0d      	ldr	r2, [pc, #52]	; (40260c <xPortStartScheduler+0x9c>)
  4025d8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4025da:	4b0f      	ldr	r3, [pc, #60]	; (402618 <xPortStartScheduler+0xa8>)
  4025dc:	681a      	ldr	r2, [r3, #0]
  4025de:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4025e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4025e4:	681a      	ldr	r2, [r3, #0]
  4025e6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4025ea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4025ec:	4b0b      	ldr	r3, [pc, #44]	; (40261c <xPortStartScheduler+0xac>)
  4025ee:	4798      	blx	r3
	uxCriticalNesting = 0;
  4025f0:	2200      	movs	r2, #0
  4025f2:	4b0b      	ldr	r3, [pc, #44]	; (402620 <xPortStartScheduler+0xb0>)
  4025f4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4025f6:	4b0b      	ldr	r3, [pc, #44]	; (402624 <xPortStartScheduler+0xb4>)
  4025f8:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4025fa:	4a0b      	ldr	r2, [pc, #44]	; (402628 <xPortStartScheduler+0xb8>)
  4025fc:	6813      	ldr	r3, [r2, #0]
  4025fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  402602:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  402604:	4b09      	ldr	r3, [pc, #36]	; (40262c <xPortStartScheduler+0xbc>)
  402606:	4798      	blx	r3
	prvTaskExitError();
  402608:	4b09      	ldr	r3, [pc, #36]	; (402630 <xPortStartScheduler+0xc0>)
  40260a:	4798      	blx	r3
  40260c:	e000e400 	.word	0xe000e400
  402610:	20400ff4 	.word	0x20400ff4
  402614:	20400ff8 	.word	0x20400ff8
  402618:	e000ed20 	.word	0xe000ed20
  40261c:	00402559 	.word	0x00402559
  402620:	20400010 	.word	0x20400010
  402624:	004023dd 	.word	0x004023dd
  402628:	e000ef34 	.word	0xe000ef34
  40262c:	004023bd 	.word	0x004023bd
  402630:	00402381 	.word	0x00402381

00402634 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  402634:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  402638:	2b0f      	cmp	r3, #15
  40263a:	d911      	bls.n	402660 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40263c:	4a12      	ldr	r2, [pc, #72]	; (402688 <vPortValidateInterruptPriority+0x54>)
  40263e:	5c9b      	ldrb	r3, [r3, r2]
  402640:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  402642:	4a12      	ldr	r2, [pc, #72]	; (40268c <vPortValidateInterruptPriority+0x58>)
  402644:	7812      	ldrb	r2, [r2, #0]
  402646:	429a      	cmp	r2, r3
  402648:	d90a      	bls.n	402660 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40264a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40264e:	b672      	cpsid	i
  402650:	f383 8811 	msr	BASEPRI, r3
  402654:	f3bf 8f6f 	isb	sy
  402658:	f3bf 8f4f 	dsb	sy
  40265c:	b662      	cpsie	i
  40265e:	e7fe      	b.n	40265e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  402660:	4b0b      	ldr	r3, [pc, #44]	; (402690 <vPortValidateInterruptPriority+0x5c>)
  402662:	681b      	ldr	r3, [r3, #0]
  402664:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402668:	4a0a      	ldr	r2, [pc, #40]	; (402694 <vPortValidateInterruptPriority+0x60>)
  40266a:	6812      	ldr	r2, [r2, #0]
  40266c:	4293      	cmp	r3, r2
  40266e:	d90a      	bls.n	402686 <vPortValidateInterruptPriority+0x52>
  402670:	f04f 0380 	mov.w	r3, #128	; 0x80
  402674:	b672      	cpsid	i
  402676:	f383 8811 	msr	BASEPRI, r3
  40267a:	f3bf 8f6f 	isb	sy
  40267e:	f3bf 8f4f 	dsb	sy
  402682:	b662      	cpsie	i
  402684:	e7fe      	b.n	402684 <vPortValidateInterruptPriority+0x50>
  402686:	4770      	bx	lr
  402688:	e000e3f0 	.word	0xe000e3f0
  40268c:	20400ff4 	.word	0x20400ff4
  402690:	e000ed0c 	.word	0xe000ed0c
  402694:	20400ff8 	.word	0x20400ff8

00402698 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402698:	b538      	push	{r3, r4, r5, lr}
  40269a:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40269c:	f010 0f07 	tst.w	r0, #7
  4026a0:	d002      	beq.n	4026a8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4026a2:	f020 0407 	bic.w	r4, r0, #7
  4026a6:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4026a8:	4b11      	ldr	r3, [pc, #68]	; (4026f0 <pvPortMalloc+0x58>)
  4026aa:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4026ac:	4b11      	ldr	r3, [pc, #68]	; (4026f4 <pvPortMalloc+0x5c>)
  4026ae:	681b      	ldr	r3, [r3, #0]
  4026b0:	b193      	cbz	r3, 4026d8 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4026b2:	4b11      	ldr	r3, [pc, #68]	; (4026f8 <pvPortMalloc+0x60>)
  4026b4:	681b      	ldr	r3, [r3, #0]
  4026b6:	441c      	add	r4, r3
  4026b8:	42a3      	cmp	r3, r4
  4026ba:	d213      	bcs.n	4026e4 <pvPortMalloc+0x4c>
  4026bc:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4026c0:	4294      	cmp	r4, r2
  4026c2:	d80f      	bhi.n	4026e4 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4026c4:	4a0b      	ldr	r2, [pc, #44]	; (4026f4 <pvPortMalloc+0x5c>)
  4026c6:	6815      	ldr	r5, [r2, #0]
  4026c8:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4026ca:	4b0b      	ldr	r3, [pc, #44]	; (4026f8 <pvPortMalloc+0x60>)
  4026cc:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4026ce:	4b0b      	ldr	r3, [pc, #44]	; (4026fc <pvPortMalloc+0x64>)
  4026d0:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4026d2:	b14d      	cbz	r5, 4026e8 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4026d4:	4628      	mov	r0, r5
  4026d6:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4026d8:	4b09      	ldr	r3, [pc, #36]	; (402700 <pvPortMalloc+0x68>)
  4026da:	f023 0307 	bic.w	r3, r3, #7
  4026de:	4a05      	ldr	r2, [pc, #20]	; (4026f4 <pvPortMalloc+0x5c>)
  4026e0:	6013      	str	r3, [r2, #0]
  4026e2:	e7e6      	b.n	4026b2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4026e4:	4b05      	ldr	r3, [pc, #20]	; (4026fc <pvPortMalloc+0x64>)
  4026e6:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4026e8:	4b06      	ldr	r3, [pc, #24]	; (402704 <pvPortMalloc+0x6c>)
  4026ea:	4798      	blx	r3
  4026ec:	2500      	movs	r5, #0
	return pvReturn;
  4026ee:	e7f1      	b.n	4026d4 <pvPortMalloc+0x3c>
  4026f0:	00403295 	.word	0x00403295
  4026f4:	20400ffc 	.word	0x20400ffc
  4026f8:	2040c800 	.word	0x2040c800
  4026fc:	004033fd 	.word	0x004033fd
  402700:	20401008 	.word	0x20401008
  402704:	004041a3 	.word	0x004041a3

00402708 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  402708:	b150      	cbz	r0, 402720 <vPortFree+0x18>
  40270a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40270e:	b672      	cpsid	i
  402710:	f383 8811 	msr	BASEPRI, r3
  402714:	f3bf 8f6f 	isb	sy
  402718:	f3bf 8f4f 	dsb	sy
  40271c:	b662      	cpsie	i
  40271e:	e7fe      	b.n	40271e <vPortFree+0x16>
  402720:	4770      	bx	lr
	...

00402724 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  402724:	b538      	push	{r3, r4, r5, lr}
  402726:	4604      	mov	r4, r0
  402728:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40272a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40272c:	b95a      	cbnz	r2, 402746 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40272e:	6803      	ldr	r3, [r0, #0]
  402730:	2b00      	cmp	r3, #0
  402732:	d12e      	bne.n	402792 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  402734:	6840      	ldr	r0, [r0, #4]
  402736:	4b1b      	ldr	r3, [pc, #108]	; (4027a4 <prvCopyDataToQueue+0x80>)
  402738:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40273a:	2300      	movs	r3, #0
  40273c:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40273e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402740:	3301      	adds	r3, #1
  402742:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  402744:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  402746:	b96d      	cbnz	r5, 402764 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  402748:	6880      	ldr	r0, [r0, #8]
  40274a:	4b17      	ldr	r3, [pc, #92]	; (4027a8 <prvCopyDataToQueue+0x84>)
  40274c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40274e:	68a3      	ldr	r3, [r4, #8]
  402750:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402752:	4413      	add	r3, r2
  402754:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402756:	6862      	ldr	r2, [r4, #4]
  402758:	4293      	cmp	r3, r2
  40275a:	d31c      	bcc.n	402796 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40275c:	6823      	ldr	r3, [r4, #0]
  40275e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  402760:	2000      	movs	r0, #0
  402762:	e7ec      	b.n	40273e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402764:	68c0      	ldr	r0, [r0, #12]
  402766:	4b10      	ldr	r3, [pc, #64]	; (4027a8 <prvCopyDataToQueue+0x84>)
  402768:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40276a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40276c:	425b      	negs	r3, r3
  40276e:	68e2      	ldr	r2, [r4, #12]
  402770:	441a      	add	r2, r3
  402772:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402774:	6821      	ldr	r1, [r4, #0]
  402776:	428a      	cmp	r2, r1
  402778:	d202      	bcs.n	402780 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40277a:	6862      	ldr	r2, [r4, #4]
  40277c:	4413      	add	r3, r2
  40277e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  402780:	2d02      	cmp	r5, #2
  402782:	d10a      	bne.n	40279a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402784:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402786:	b153      	cbz	r3, 40279e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  402788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40278a:	3b01      	subs	r3, #1
  40278c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40278e:	2000      	movs	r0, #0
  402790:	e7d5      	b.n	40273e <prvCopyDataToQueue+0x1a>
  402792:	2000      	movs	r0, #0
  402794:	e7d3      	b.n	40273e <prvCopyDataToQueue+0x1a>
  402796:	2000      	movs	r0, #0
  402798:	e7d1      	b.n	40273e <prvCopyDataToQueue+0x1a>
  40279a:	2000      	movs	r0, #0
  40279c:	e7cf      	b.n	40273e <prvCopyDataToQueue+0x1a>
  40279e:	2000      	movs	r0, #0
  4027a0:	e7cd      	b.n	40273e <prvCopyDataToQueue+0x1a>
  4027a2:	bf00      	nop
  4027a4:	00403a45 	.word	0x00403a45
  4027a8:	0040515d 	.word	0x0040515d

004027ac <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4027ac:	b530      	push	{r4, r5, lr}
  4027ae:	b083      	sub	sp, #12
  4027b0:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4027b2:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4027b4:	b174      	cbz	r4, 4027d4 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4027b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4027b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4027ba:	429a      	cmp	r2, r3
  4027bc:	d315      	bcc.n	4027ea <prvNotifyQueueSetContainer+0x3e>
  4027be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027c2:	b672      	cpsid	i
  4027c4:	f383 8811 	msr	BASEPRI, r3
  4027c8:	f3bf 8f6f 	isb	sy
  4027cc:	f3bf 8f4f 	dsb	sy
  4027d0:	b662      	cpsie	i
  4027d2:	e7fe      	b.n	4027d2 <prvNotifyQueueSetContainer+0x26>
  4027d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027d8:	b672      	cpsid	i
  4027da:	f383 8811 	msr	BASEPRI, r3
  4027de:	f3bf 8f6f 	isb	sy
  4027e2:	f3bf 8f4f 	dsb	sy
  4027e6:	b662      	cpsie	i
  4027e8:	e7fe      	b.n	4027e8 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4027ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4027ec:	4293      	cmp	r3, r2
  4027ee:	d803      	bhi.n	4027f8 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4027f0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4027f2:	4628      	mov	r0, r5
  4027f4:	b003      	add	sp, #12
  4027f6:	bd30      	pop	{r4, r5, pc}
  4027f8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4027fa:	a901      	add	r1, sp, #4
  4027fc:	4620      	mov	r0, r4
  4027fe:	4b0b      	ldr	r3, [pc, #44]	; (40282c <prvNotifyQueueSetContainer+0x80>)
  402800:	4798      	blx	r3
  402802:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  402804:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402806:	f1b3 3fff 	cmp.w	r3, #4294967295
  40280a:	d10a      	bne.n	402822 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40280c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40280e:	2b00      	cmp	r3, #0
  402810:	d0ef      	beq.n	4027f2 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  402812:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402816:	4b06      	ldr	r3, [pc, #24]	; (402830 <prvNotifyQueueSetContainer+0x84>)
  402818:	4798      	blx	r3
  40281a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40281c:	bf18      	it	ne
  40281e:	2501      	movne	r5, #1
  402820:	e7e7      	b.n	4027f2 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  402822:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402824:	3301      	adds	r3, #1
  402826:	64a3      	str	r3, [r4, #72]	; 0x48
  402828:	e7e3      	b.n	4027f2 <prvNotifyQueueSetContainer+0x46>
  40282a:	bf00      	nop
  40282c:	00402725 	.word	0x00402725
  402830:	00403819 	.word	0x00403819

00402834 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  402834:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402836:	b172      	cbz	r2, 402856 <prvCopyDataFromQueue+0x22>
{
  402838:	b510      	push	{r4, lr}
  40283a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40283c:	68c4      	ldr	r4, [r0, #12]
  40283e:	4414      	add	r4, r2
  402840:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  402842:	6840      	ldr	r0, [r0, #4]
  402844:	4284      	cmp	r4, r0
  402846:	d301      	bcc.n	40284c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  402848:	6818      	ldr	r0, [r3, #0]
  40284a:	60d8      	str	r0, [r3, #12]
  40284c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40284e:	68d9      	ldr	r1, [r3, #12]
  402850:	4b01      	ldr	r3, [pc, #4]	; (402858 <prvCopyDataFromQueue+0x24>)
  402852:	4798      	blx	r3
  402854:	bd10      	pop	{r4, pc}
  402856:	4770      	bx	lr
  402858:	0040515d 	.word	0x0040515d

0040285c <prvUnlockQueue>:
{
  40285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40285e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  402860:	4b22      	ldr	r3, [pc, #136]	; (4028ec <prvUnlockQueue+0x90>)
  402862:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402864:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402866:	2b00      	cmp	r3, #0
  402868:	dd1b      	ble.n	4028a2 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40286a:	4d21      	ldr	r5, [pc, #132]	; (4028f0 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  40286c:	4f21      	ldr	r7, [pc, #132]	; (4028f4 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40286e:	4e22      	ldr	r6, [pc, #136]	; (4028f8 <prvUnlockQueue+0x9c>)
  402870:	e00b      	b.n	40288a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402872:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402874:	b1ab      	cbz	r3, 4028a2 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402876:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40287a:	47b0      	blx	r6
  40287c:	b978      	cbnz	r0, 40289e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40287e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402880:	3b01      	subs	r3, #1
  402882:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402884:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402886:	2b00      	cmp	r3, #0
  402888:	dd0b      	ble.n	4028a2 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40288a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40288c:	2b00      	cmp	r3, #0
  40288e:	d0f0      	beq.n	402872 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402890:	2100      	movs	r1, #0
  402892:	4620      	mov	r0, r4
  402894:	47a8      	blx	r5
  402896:	2801      	cmp	r0, #1
  402898:	d1f1      	bne.n	40287e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40289a:	47b8      	blx	r7
  40289c:	e7ef      	b.n	40287e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40289e:	47b8      	blx	r7
  4028a0:	e7ed      	b.n	40287e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4028a2:	f04f 33ff 	mov.w	r3, #4294967295
  4028a6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4028a8:	4b14      	ldr	r3, [pc, #80]	; (4028fc <prvUnlockQueue+0xa0>)
  4028aa:	4798      	blx	r3
	taskENTER_CRITICAL();
  4028ac:	4b0f      	ldr	r3, [pc, #60]	; (4028ec <prvUnlockQueue+0x90>)
  4028ae:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4028b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028b2:	2b00      	cmp	r3, #0
  4028b4:	dd14      	ble.n	4028e0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4028b6:	6923      	ldr	r3, [r4, #16]
  4028b8:	b193      	cbz	r3, 4028e0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4028ba:	f104 0610 	add.w	r6, r4, #16
  4028be:	4d0e      	ldr	r5, [pc, #56]	; (4028f8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4028c0:	4f0c      	ldr	r7, [pc, #48]	; (4028f4 <prvUnlockQueue+0x98>)
  4028c2:	e007      	b.n	4028d4 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4028c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028c6:	3b01      	subs	r3, #1
  4028c8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4028ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028cc:	2b00      	cmp	r3, #0
  4028ce:	dd07      	ble.n	4028e0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4028d0:	6923      	ldr	r3, [r4, #16]
  4028d2:	b12b      	cbz	r3, 4028e0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4028d4:	4630      	mov	r0, r6
  4028d6:	47a8      	blx	r5
  4028d8:	2800      	cmp	r0, #0
  4028da:	d0f3      	beq.n	4028c4 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4028dc:	47b8      	blx	r7
  4028de:	e7f1      	b.n	4028c4 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4028e0:	f04f 33ff 	mov.w	r3, #4294967295
  4028e4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4028e6:	4b05      	ldr	r3, [pc, #20]	; (4028fc <prvUnlockQueue+0xa0>)
  4028e8:	4798      	blx	r3
  4028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028ec:	0040243d 	.word	0x0040243d
  4028f0:	004027ad 	.word	0x004027ad
  4028f4:	00403975 	.word	0x00403975
  4028f8:	00403819 	.word	0x00403819
  4028fc:	00402489 	.word	0x00402489

00402900 <xQueueGenericReset>:
{
  402900:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  402902:	b308      	cbz	r0, 402948 <xQueueGenericReset+0x48>
  402904:	4604      	mov	r4, r0
  402906:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402908:	4b1d      	ldr	r3, [pc, #116]	; (402980 <xQueueGenericReset+0x80>)
  40290a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40290c:	6822      	ldr	r2, [r4, #0]
  40290e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402912:	fb03 f301 	mul.w	r3, r3, r1
  402916:	18d0      	adds	r0, r2, r3
  402918:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40291a:	2000      	movs	r0, #0
  40291c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40291e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402920:	1a5b      	subs	r3, r3, r1
  402922:	4413      	add	r3, r2
  402924:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  402926:	f04f 33ff 	mov.w	r3, #4294967295
  40292a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40292c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40292e:	b9fd      	cbnz	r5, 402970 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402930:	6923      	ldr	r3, [r4, #16]
  402932:	b12b      	cbz	r3, 402940 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402934:	f104 0010 	add.w	r0, r4, #16
  402938:	4b12      	ldr	r3, [pc, #72]	; (402984 <xQueueGenericReset+0x84>)
  40293a:	4798      	blx	r3
  40293c:	2801      	cmp	r0, #1
  40293e:	d00e      	beq.n	40295e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402940:	4b11      	ldr	r3, [pc, #68]	; (402988 <xQueueGenericReset+0x88>)
  402942:	4798      	blx	r3
}
  402944:	2001      	movs	r0, #1
  402946:	bd38      	pop	{r3, r4, r5, pc}
  402948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40294c:	b672      	cpsid	i
  40294e:	f383 8811 	msr	BASEPRI, r3
  402952:	f3bf 8f6f 	isb	sy
  402956:	f3bf 8f4f 	dsb	sy
  40295a:	b662      	cpsie	i
  40295c:	e7fe      	b.n	40295c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40295e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402962:	4b0a      	ldr	r3, [pc, #40]	; (40298c <xQueueGenericReset+0x8c>)
  402964:	601a      	str	r2, [r3, #0]
  402966:	f3bf 8f4f 	dsb	sy
  40296a:	f3bf 8f6f 	isb	sy
  40296e:	e7e7      	b.n	402940 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  402970:	f104 0010 	add.w	r0, r4, #16
  402974:	4d06      	ldr	r5, [pc, #24]	; (402990 <xQueueGenericReset+0x90>)
  402976:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402978:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40297c:	47a8      	blx	r5
  40297e:	e7df      	b.n	402940 <xQueueGenericReset+0x40>
  402980:	0040243d 	.word	0x0040243d
  402984:	00403819 	.word	0x00403819
  402988:	00402489 	.word	0x00402489
  40298c:	e000ed04 	.word	0xe000ed04
  402990:	004022f1 	.word	0x004022f1

00402994 <xQueueGenericCreate>:
{
  402994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  402996:	b950      	cbnz	r0, 4029ae <xQueueGenericCreate+0x1a>
  402998:	f04f 0380 	mov.w	r3, #128	; 0x80
  40299c:	b672      	cpsid	i
  40299e:	f383 8811 	msr	BASEPRI, r3
  4029a2:	f3bf 8f6f 	isb	sy
  4029a6:	f3bf 8f4f 	dsb	sy
  4029aa:	b662      	cpsie	i
  4029ac:	e7fe      	b.n	4029ac <xQueueGenericCreate+0x18>
  4029ae:	4606      	mov	r6, r0
  4029b0:	4617      	mov	r7, r2
  4029b2:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4029b4:	b189      	cbz	r1, 4029da <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4029b6:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4029ba:	3059      	adds	r0, #89	; 0x59
  4029bc:	4b12      	ldr	r3, [pc, #72]	; (402a08 <xQueueGenericCreate+0x74>)
  4029be:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4029c0:	4604      	mov	r4, r0
  4029c2:	b9e8      	cbnz	r0, 402a00 <xQueueGenericCreate+0x6c>
  4029c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029c8:	b672      	cpsid	i
  4029ca:	f383 8811 	msr	BASEPRI, r3
  4029ce:	f3bf 8f6f 	isb	sy
  4029d2:	f3bf 8f4f 	dsb	sy
  4029d6:	b662      	cpsie	i
  4029d8:	e7fe      	b.n	4029d8 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4029da:	2058      	movs	r0, #88	; 0x58
  4029dc:	4b0a      	ldr	r3, [pc, #40]	; (402a08 <xQueueGenericCreate+0x74>)
  4029de:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4029e0:	4604      	mov	r4, r0
  4029e2:	2800      	cmp	r0, #0
  4029e4:	d0ee      	beq.n	4029c4 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4029e6:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4029e8:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4029ea:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4029ec:	2101      	movs	r1, #1
  4029ee:	4620      	mov	r0, r4
  4029f0:	4b06      	ldr	r3, [pc, #24]	; (402a0c <xQueueGenericCreate+0x78>)
  4029f2:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4029f4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4029f8:	2300      	movs	r3, #0
  4029fa:	6563      	str	r3, [r4, #84]	; 0x54
}
  4029fc:	4620      	mov	r0, r4
  4029fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402a00:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402a04:	6003      	str	r3, [r0, #0]
  402a06:	e7ef      	b.n	4029e8 <xQueueGenericCreate+0x54>
  402a08:	00402699 	.word	0x00402699
  402a0c:	00402901 	.word	0x00402901

00402a10 <xQueueGenericSend>:
{
  402a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a14:	b085      	sub	sp, #20
  402a16:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402a18:	b1b8      	cbz	r0, 402a4a <xQueueGenericSend+0x3a>
  402a1a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402a1c:	b301      	cbz	r1, 402a60 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402a1e:	2b02      	cmp	r3, #2
  402a20:	d02c      	beq.n	402a7c <xQueueGenericSend+0x6c>
  402a22:	461d      	mov	r5, r3
  402a24:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402a26:	4b66      	ldr	r3, [pc, #408]	; (402bc0 <xQueueGenericSend+0x1b0>)
  402a28:	4798      	blx	r3
  402a2a:	2800      	cmp	r0, #0
  402a2c:	d134      	bne.n	402a98 <xQueueGenericSend+0x88>
  402a2e:	9b01      	ldr	r3, [sp, #4]
  402a30:	2b00      	cmp	r3, #0
  402a32:	d038      	beq.n	402aa6 <xQueueGenericSend+0x96>
  402a34:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a38:	b672      	cpsid	i
  402a3a:	f383 8811 	msr	BASEPRI, r3
  402a3e:	f3bf 8f6f 	isb	sy
  402a42:	f3bf 8f4f 	dsb	sy
  402a46:	b662      	cpsie	i
  402a48:	e7fe      	b.n	402a48 <xQueueGenericSend+0x38>
  402a4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a4e:	b672      	cpsid	i
  402a50:	f383 8811 	msr	BASEPRI, r3
  402a54:	f3bf 8f6f 	isb	sy
  402a58:	f3bf 8f4f 	dsb	sy
  402a5c:	b662      	cpsie	i
  402a5e:	e7fe      	b.n	402a5e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402a60:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402a62:	2a00      	cmp	r2, #0
  402a64:	d0db      	beq.n	402a1e <xQueueGenericSend+0xe>
  402a66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a6a:	b672      	cpsid	i
  402a6c:	f383 8811 	msr	BASEPRI, r3
  402a70:	f3bf 8f6f 	isb	sy
  402a74:	f3bf 8f4f 	dsb	sy
  402a78:	b662      	cpsie	i
  402a7a:	e7fe      	b.n	402a7a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402a7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  402a7e:	2a01      	cmp	r2, #1
  402a80:	d0cf      	beq.n	402a22 <xQueueGenericSend+0x12>
  402a82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a86:	b672      	cpsid	i
  402a88:	f383 8811 	msr	BASEPRI, r3
  402a8c:	f3bf 8f6f 	isb	sy
  402a90:	f3bf 8f4f 	dsb	sy
  402a94:	b662      	cpsie	i
  402a96:	e7fe      	b.n	402a96 <xQueueGenericSend+0x86>
  402a98:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  402a9a:	4e4a      	ldr	r6, [pc, #296]	; (402bc4 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  402a9c:	f8df a150 	ldr.w	sl, [pc, #336]	; 402bf0 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  402aa0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402bd0 <xQueueGenericSend+0x1c0>
  402aa4:	e042      	b.n	402b2c <xQueueGenericSend+0x11c>
  402aa6:	2700      	movs	r7, #0
  402aa8:	e7f7      	b.n	402a9a <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402aaa:	462a      	mov	r2, r5
  402aac:	4641      	mov	r1, r8
  402aae:	4620      	mov	r0, r4
  402ab0:	4b45      	ldr	r3, [pc, #276]	; (402bc8 <xQueueGenericSend+0x1b8>)
  402ab2:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402ab4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402ab6:	b19b      	cbz	r3, 402ae0 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402ab8:	4629      	mov	r1, r5
  402aba:	4620      	mov	r0, r4
  402abc:	4b43      	ldr	r3, [pc, #268]	; (402bcc <xQueueGenericSend+0x1bc>)
  402abe:	4798      	blx	r3
  402ac0:	2801      	cmp	r0, #1
  402ac2:	d107      	bne.n	402ad4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402ac8:	4b41      	ldr	r3, [pc, #260]	; (402bd0 <xQueueGenericSend+0x1c0>)
  402aca:	601a      	str	r2, [r3, #0]
  402acc:	f3bf 8f4f 	dsb	sy
  402ad0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402ad4:	4b3f      	ldr	r3, [pc, #252]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402ad6:	4798      	blx	r3
				return pdPASS;
  402ad8:	2001      	movs	r0, #1
}
  402ada:	b005      	add	sp, #20
  402adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402ae2:	b173      	cbz	r3, 402b02 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402ae4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402ae8:	4b3b      	ldr	r3, [pc, #236]	; (402bd8 <xQueueGenericSend+0x1c8>)
  402aea:	4798      	blx	r3
  402aec:	2801      	cmp	r0, #1
  402aee:	d1f1      	bne.n	402ad4 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  402af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402af4:	4b36      	ldr	r3, [pc, #216]	; (402bd0 <xQueueGenericSend+0x1c0>)
  402af6:	601a      	str	r2, [r3, #0]
  402af8:	f3bf 8f4f 	dsb	sy
  402afc:	f3bf 8f6f 	isb	sy
  402b00:	e7e8      	b.n	402ad4 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  402b02:	2800      	cmp	r0, #0
  402b04:	d0e6      	beq.n	402ad4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b0a:	4b31      	ldr	r3, [pc, #196]	; (402bd0 <xQueueGenericSend+0x1c0>)
  402b0c:	601a      	str	r2, [r3, #0]
  402b0e:	f3bf 8f4f 	dsb	sy
  402b12:	f3bf 8f6f 	isb	sy
  402b16:	e7dd      	b.n	402ad4 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402b18:	4b2e      	ldr	r3, [pc, #184]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b1a:	4798      	blx	r3
					return errQUEUE_FULL;
  402b1c:	2000      	movs	r0, #0
  402b1e:	e7dc      	b.n	402ada <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402b20:	4620      	mov	r0, r4
  402b22:	4b2e      	ldr	r3, [pc, #184]	; (402bdc <xQueueGenericSend+0x1cc>)
  402b24:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402b26:	4b2e      	ldr	r3, [pc, #184]	; (402be0 <xQueueGenericSend+0x1d0>)
  402b28:	4798      	blx	r3
  402b2a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402b2c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402b2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402b32:	429a      	cmp	r2, r3
  402b34:	d3b9      	bcc.n	402aaa <xQueueGenericSend+0x9a>
  402b36:	2d02      	cmp	r5, #2
  402b38:	d0b7      	beq.n	402aaa <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402b3a:	9b01      	ldr	r3, [sp, #4]
  402b3c:	2b00      	cmp	r3, #0
  402b3e:	d0eb      	beq.n	402b18 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402b40:	b90f      	cbnz	r7, 402b46 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  402b42:	a802      	add	r0, sp, #8
  402b44:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402b46:	4b23      	ldr	r3, [pc, #140]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b48:	4798      	blx	r3
		vTaskSuspendAll();
  402b4a:	4b26      	ldr	r3, [pc, #152]	; (402be4 <xQueueGenericSend+0x1d4>)
  402b4c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402b4e:	47b0      	blx	r6
  402b50:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402b52:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b56:	d101      	bne.n	402b5c <xQueueGenericSend+0x14c>
  402b58:	2300      	movs	r3, #0
  402b5a:	6463      	str	r3, [r4, #68]	; 0x44
  402b5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b62:	d101      	bne.n	402b68 <xQueueGenericSend+0x158>
  402b64:	2300      	movs	r3, #0
  402b66:	64a3      	str	r3, [r4, #72]	; 0x48
  402b68:	4b1a      	ldr	r3, [pc, #104]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b6a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402b6c:	a901      	add	r1, sp, #4
  402b6e:	a802      	add	r0, sp, #8
  402b70:	4b1d      	ldr	r3, [pc, #116]	; (402be8 <xQueueGenericSend+0x1d8>)
  402b72:	4798      	blx	r3
  402b74:	b9e0      	cbnz	r0, 402bb0 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  402b76:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402b78:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402b7c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  402b7e:	4b15      	ldr	r3, [pc, #84]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b80:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  402b82:	45bb      	cmp	fp, r7
  402b84:	d1cc      	bne.n	402b20 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402b86:	9901      	ldr	r1, [sp, #4]
  402b88:	f104 0010 	add.w	r0, r4, #16
  402b8c:	4b17      	ldr	r3, [pc, #92]	; (402bec <xQueueGenericSend+0x1dc>)
  402b8e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402b90:	4620      	mov	r0, r4
  402b92:	4b12      	ldr	r3, [pc, #72]	; (402bdc <xQueueGenericSend+0x1cc>)
  402b94:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402b96:	4b12      	ldr	r3, [pc, #72]	; (402be0 <xQueueGenericSend+0x1d0>)
  402b98:	4798      	blx	r3
  402b9a:	2800      	cmp	r0, #0
  402b9c:	d1c5      	bne.n	402b2a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  402b9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402ba2:	f8c9 3000 	str.w	r3, [r9]
  402ba6:	f3bf 8f4f 	dsb	sy
  402baa:	f3bf 8f6f 	isb	sy
  402bae:	e7bc      	b.n	402b2a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402bb0:	4620      	mov	r0, r4
  402bb2:	4b0a      	ldr	r3, [pc, #40]	; (402bdc <xQueueGenericSend+0x1cc>)
  402bb4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402bb6:	4b0a      	ldr	r3, [pc, #40]	; (402be0 <xQueueGenericSend+0x1d0>)
  402bb8:	4798      	blx	r3
			return errQUEUE_FULL;
  402bba:	2000      	movs	r0, #0
  402bbc:	e78d      	b.n	402ada <xQueueGenericSend+0xca>
  402bbe:	bf00      	nop
  402bc0:	00403981 	.word	0x00403981
  402bc4:	0040243d 	.word	0x0040243d
  402bc8:	00402725 	.word	0x00402725
  402bcc:	004027ad 	.word	0x004027ad
  402bd0:	e000ed04 	.word	0xe000ed04
  402bd4:	00402489 	.word	0x00402489
  402bd8:	00403819 	.word	0x00403819
  402bdc:	0040285d 	.word	0x0040285d
  402be0:	004033fd 	.word	0x004033fd
  402be4:	00403295 	.word	0x00403295
  402be8:	004038e1 	.word	0x004038e1
  402bec:	00403715 	.word	0x00403715
  402bf0:	004038b1 	.word	0x004038b1

00402bf4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402bf4:	2800      	cmp	r0, #0
  402bf6:	d036      	beq.n	402c66 <xQueueGenericSendFromISR+0x72>
{
  402bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bfc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402bfe:	2900      	cmp	r1, #0
  402c00:	d03c      	beq.n	402c7c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402c02:	2b02      	cmp	r3, #2
  402c04:	d048      	beq.n	402c98 <xQueueGenericSendFromISR+0xa4>
  402c06:	461e      	mov	r6, r3
  402c08:	4615      	mov	r5, r2
  402c0a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402c0c:	4b35      	ldr	r3, [pc, #212]	; (402ce4 <xQueueGenericSendFromISR+0xf0>)
  402c0e:	4798      	blx	r3
	__asm volatile
  402c10:	f3ef 8711 	mrs	r7, BASEPRI
  402c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c18:	b672      	cpsid	i
  402c1a:	f383 8811 	msr	BASEPRI, r3
  402c1e:	f3bf 8f6f 	isb	sy
  402c22:	f3bf 8f4f 	dsb	sy
  402c26:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402c28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402c2c:	429a      	cmp	r2, r3
  402c2e:	d301      	bcc.n	402c34 <xQueueGenericSendFromISR+0x40>
  402c30:	2e02      	cmp	r6, #2
  402c32:	d14f      	bne.n	402cd4 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402c34:	4632      	mov	r2, r6
  402c36:	4641      	mov	r1, r8
  402c38:	4620      	mov	r0, r4
  402c3a:	4b2b      	ldr	r3, [pc, #172]	; (402ce8 <xQueueGenericSendFromISR+0xf4>)
  402c3c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  402c3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402c40:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c44:	d141      	bne.n	402cca <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402c46:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402c48:	2b00      	cmp	r3, #0
  402c4a:	d033      	beq.n	402cb4 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402c4c:	4631      	mov	r1, r6
  402c4e:	4620      	mov	r0, r4
  402c50:	4b26      	ldr	r3, [pc, #152]	; (402cec <xQueueGenericSendFromISR+0xf8>)
  402c52:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402c54:	2d00      	cmp	r5, #0
  402c56:	d03f      	beq.n	402cd8 <xQueueGenericSendFromISR+0xe4>
  402c58:	2801      	cmp	r0, #1
  402c5a:	d13d      	bne.n	402cd8 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402c5c:	6028      	str	r0, [r5, #0]
	__asm volatile
  402c5e:	f387 8811 	msr	BASEPRI, r7
}
  402c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  402c66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c6a:	b672      	cpsid	i
  402c6c:	f383 8811 	msr	BASEPRI, r3
  402c70:	f3bf 8f6f 	isb	sy
  402c74:	f3bf 8f4f 	dsb	sy
  402c78:	b662      	cpsie	i
  402c7a:	e7fe      	b.n	402c7a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402c7c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402c7e:	2800      	cmp	r0, #0
  402c80:	d0bf      	beq.n	402c02 <xQueueGenericSendFromISR+0xe>
  402c82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c86:	b672      	cpsid	i
  402c88:	f383 8811 	msr	BASEPRI, r3
  402c8c:	f3bf 8f6f 	isb	sy
  402c90:	f3bf 8f4f 	dsb	sy
  402c94:	b662      	cpsie	i
  402c96:	e7fe      	b.n	402c96 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402c98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402c9a:	2801      	cmp	r0, #1
  402c9c:	d0b3      	beq.n	402c06 <xQueueGenericSendFromISR+0x12>
  402c9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ca2:	b672      	cpsid	i
  402ca4:	f383 8811 	msr	BASEPRI, r3
  402ca8:	f3bf 8f6f 	isb	sy
  402cac:	f3bf 8f4f 	dsb	sy
  402cb0:	b662      	cpsie	i
  402cb2:	e7fe      	b.n	402cb2 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402cb6:	b18b      	cbz	r3, 402cdc <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402cb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402cbc:	4b0c      	ldr	r3, [pc, #48]	; (402cf0 <xQueueGenericSendFromISR+0xfc>)
  402cbe:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402cc0:	b175      	cbz	r5, 402ce0 <xQueueGenericSendFromISR+0xec>
  402cc2:	b168      	cbz	r0, 402ce0 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402cc4:	2001      	movs	r0, #1
  402cc6:	6028      	str	r0, [r5, #0]
  402cc8:	e7c9      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402cca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402ccc:	3301      	adds	r3, #1
  402cce:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402cd0:	2001      	movs	r0, #1
  402cd2:	e7c4      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402cd4:	2000      	movs	r0, #0
  402cd6:	e7c2      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402cd8:	2001      	movs	r0, #1
  402cda:	e7c0      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402cdc:	2001      	movs	r0, #1
  402cde:	e7be      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402ce0:	2001      	movs	r0, #1
  402ce2:	e7bc      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402ce4:	00402635 	.word	0x00402635
  402ce8:	00402725 	.word	0x00402725
  402cec:	004027ad 	.word	0x004027ad
  402cf0:	00403819 	.word	0x00403819

00402cf4 <xQueueGenericReceive>:
{
  402cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cf8:	b084      	sub	sp, #16
  402cfa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402cfc:	b198      	cbz	r0, 402d26 <xQueueGenericReceive+0x32>
  402cfe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402d00:	b1e1      	cbz	r1, 402d3c <xQueueGenericReceive+0x48>
  402d02:	4698      	mov	r8, r3
  402d04:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402d06:	4b61      	ldr	r3, [pc, #388]	; (402e8c <xQueueGenericReceive+0x198>)
  402d08:	4798      	blx	r3
  402d0a:	bb28      	cbnz	r0, 402d58 <xQueueGenericReceive+0x64>
  402d0c:	9b01      	ldr	r3, [sp, #4]
  402d0e:	b353      	cbz	r3, 402d66 <xQueueGenericReceive+0x72>
  402d10:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d14:	b672      	cpsid	i
  402d16:	f383 8811 	msr	BASEPRI, r3
  402d1a:	f3bf 8f6f 	isb	sy
  402d1e:	f3bf 8f4f 	dsb	sy
  402d22:	b662      	cpsie	i
  402d24:	e7fe      	b.n	402d24 <xQueueGenericReceive+0x30>
  402d26:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d2a:	b672      	cpsid	i
  402d2c:	f383 8811 	msr	BASEPRI, r3
  402d30:	f3bf 8f6f 	isb	sy
  402d34:	f3bf 8f4f 	dsb	sy
  402d38:	b662      	cpsie	i
  402d3a:	e7fe      	b.n	402d3a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402d3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402d3e:	2a00      	cmp	r2, #0
  402d40:	d0df      	beq.n	402d02 <xQueueGenericReceive+0xe>
  402d42:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d46:	b672      	cpsid	i
  402d48:	f383 8811 	msr	BASEPRI, r3
  402d4c:	f3bf 8f6f 	isb	sy
  402d50:	f3bf 8f4f 	dsb	sy
  402d54:	b662      	cpsie	i
  402d56:	e7fe      	b.n	402d56 <xQueueGenericReceive+0x62>
  402d58:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402d5a:	4d4d      	ldr	r5, [pc, #308]	; (402e90 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402d5c:	f8df a160 	ldr.w	sl, [pc, #352]	; 402ec0 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402d60:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402ea0 <xQueueGenericReceive+0x1ac>
  402d64:	e04b      	b.n	402dfe <xQueueGenericReceive+0x10a>
  402d66:	2600      	movs	r6, #0
  402d68:	e7f7      	b.n	402d5a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402d6a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402d6c:	4639      	mov	r1, r7
  402d6e:	4620      	mov	r0, r4
  402d70:	4b48      	ldr	r3, [pc, #288]	; (402e94 <xQueueGenericReceive+0x1a0>)
  402d72:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402d74:	f1b8 0f00 	cmp.w	r8, #0
  402d78:	d11d      	bne.n	402db6 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402d7c:	3b01      	subs	r3, #1
  402d7e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402d80:	6823      	ldr	r3, [r4, #0]
  402d82:	b913      	cbnz	r3, 402d8a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402d84:	4b44      	ldr	r3, [pc, #272]	; (402e98 <xQueueGenericReceive+0x1a4>)
  402d86:	4798      	blx	r3
  402d88:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402d8a:	6923      	ldr	r3, [r4, #16]
  402d8c:	b16b      	cbz	r3, 402daa <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402d8e:	f104 0010 	add.w	r0, r4, #16
  402d92:	4b42      	ldr	r3, [pc, #264]	; (402e9c <xQueueGenericReceive+0x1a8>)
  402d94:	4798      	blx	r3
  402d96:	2801      	cmp	r0, #1
  402d98:	d107      	bne.n	402daa <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d9e:	4b40      	ldr	r3, [pc, #256]	; (402ea0 <xQueueGenericReceive+0x1ac>)
  402da0:	601a      	str	r2, [r3, #0]
  402da2:	f3bf 8f4f 	dsb	sy
  402da6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402daa:	4b3e      	ldr	r3, [pc, #248]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402dac:	4798      	blx	r3
				return pdPASS;
  402dae:	2001      	movs	r0, #1
}
  402db0:	b004      	add	sp, #16
  402db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402db6:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402dba:	2b00      	cmp	r3, #0
  402dbc:	d0f5      	beq.n	402daa <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402dbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402dc2:	4b36      	ldr	r3, [pc, #216]	; (402e9c <xQueueGenericReceive+0x1a8>)
  402dc4:	4798      	blx	r3
  402dc6:	2800      	cmp	r0, #0
  402dc8:	d0ef      	beq.n	402daa <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402dce:	4b34      	ldr	r3, [pc, #208]	; (402ea0 <xQueueGenericReceive+0x1ac>)
  402dd0:	601a      	str	r2, [r3, #0]
  402dd2:	f3bf 8f4f 	dsb	sy
  402dd6:	f3bf 8f6f 	isb	sy
  402dda:	e7e6      	b.n	402daa <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402ddc:	4b31      	ldr	r3, [pc, #196]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402dde:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402de0:	2000      	movs	r0, #0
  402de2:	e7e5      	b.n	402db0 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402de4:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402de6:	6860      	ldr	r0, [r4, #4]
  402de8:	4b2f      	ldr	r3, [pc, #188]	; (402ea8 <xQueueGenericReceive+0x1b4>)
  402dea:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402dec:	4b2d      	ldr	r3, [pc, #180]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402dee:	4798      	blx	r3
  402df0:	e030      	b.n	402e54 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402df2:	4620      	mov	r0, r4
  402df4:	4b2d      	ldr	r3, [pc, #180]	; (402eac <xQueueGenericReceive+0x1b8>)
  402df6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402df8:	4b2d      	ldr	r3, [pc, #180]	; (402eb0 <xQueueGenericReceive+0x1bc>)
  402dfa:	4798      	blx	r3
  402dfc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402dfe:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402e02:	2b00      	cmp	r3, #0
  402e04:	d1b1      	bne.n	402d6a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402e06:	9b01      	ldr	r3, [sp, #4]
  402e08:	2b00      	cmp	r3, #0
  402e0a:	d0e7      	beq.n	402ddc <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402e0c:	b90e      	cbnz	r6, 402e12 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402e0e:	a802      	add	r0, sp, #8
  402e10:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402e12:	4b24      	ldr	r3, [pc, #144]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402e14:	4798      	blx	r3
		vTaskSuspendAll();
  402e16:	4b27      	ldr	r3, [pc, #156]	; (402eb4 <xQueueGenericReceive+0x1c0>)
  402e18:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402e1a:	47a8      	blx	r5
  402e1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e22:	d101      	bne.n	402e28 <xQueueGenericReceive+0x134>
  402e24:	2300      	movs	r3, #0
  402e26:	6463      	str	r3, [r4, #68]	; 0x44
  402e28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e2e:	d101      	bne.n	402e34 <xQueueGenericReceive+0x140>
  402e30:	2300      	movs	r3, #0
  402e32:	64a3      	str	r3, [r4, #72]	; 0x48
  402e34:	4b1b      	ldr	r3, [pc, #108]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402e36:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402e38:	a901      	add	r1, sp, #4
  402e3a:	a802      	add	r0, sp, #8
  402e3c:	4b1e      	ldr	r3, [pc, #120]	; (402eb8 <xQueueGenericReceive+0x1c4>)
  402e3e:	4798      	blx	r3
  402e40:	b9e8      	cbnz	r0, 402e7e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402e42:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402e44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402e46:	4b17      	ldr	r3, [pc, #92]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402e48:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402e4a:	2e00      	cmp	r6, #0
  402e4c:	d1d1      	bne.n	402df2 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402e4e:	6823      	ldr	r3, [r4, #0]
  402e50:	2b00      	cmp	r3, #0
  402e52:	d0c7      	beq.n	402de4 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402e54:	9901      	ldr	r1, [sp, #4]
  402e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402e5a:	4b18      	ldr	r3, [pc, #96]	; (402ebc <xQueueGenericReceive+0x1c8>)
  402e5c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402e5e:	4620      	mov	r0, r4
  402e60:	4b12      	ldr	r3, [pc, #72]	; (402eac <xQueueGenericReceive+0x1b8>)
  402e62:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402e64:	4b12      	ldr	r3, [pc, #72]	; (402eb0 <xQueueGenericReceive+0x1bc>)
  402e66:	4798      	blx	r3
  402e68:	2800      	cmp	r0, #0
  402e6a:	d1c7      	bne.n	402dfc <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402e70:	f8c9 3000 	str.w	r3, [r9]
  402e74:	f3bf 8f4f 	dsb	sy
  402e78:	f3bf 8f6f 	isb	sy
  402e7c:	e7be      	b.n	402dfc <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402e7e:	4620      	mov	r0, r4
  402e80:	4b0a      	ldr	r3, [pc, #40]	; (402eac <xQueueGenericReceive+0x1b8>)
  402e82:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402e84:	4b0a      	ldr	r3, [pc, #40]	; (402eb0 <xQueueGenericReceive+0x1bc>)
  402e86:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402e88:	2000      	movs	r0, #0
  402e8a:	e791      	b.n	402db0 <xQueueGenericReceive+0xbc>
  402e8c:	00403981 	.word	0x00403981
  402e90:	0040243d 	.word	0x0040243d
  402e94:	00402835 	.word	0x00402835
  402e98:	00403b01 	.word	0x00403b01
  402e9c:	00403819 	.word	0x00403819
  402ea0:	e000ed04 	.word	0xe000ed04
  402ea4:	00402489 	.word	0x00402489
  402ea8:	004039a1 	.word	0x004039a1
  402eac:	0040285d 	.word	0x0040285d
  402eb0:	004033fd 	.word	0x004033fd
  402eb4:	00403295 	.word	0x00403295
  402eb8:	004038e1 	.word	0x004038e1
  402ebc:	00403715 	.word	0x00403715
  402ec0:	004038b1 	.word	0x004038b1

00402ec4 <vQueueAddToRegistry>:
	{
  402ec4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402ec6:	4b0b      	ldr	r3, [pc, #44]	; (402ef4 <vQueueAddToRegistry+0x30>)
  402ec8:	681b      	ldr	r3, [r3, #0]
  402eca:	b153      	cbz	r3, 402ee2 <vQueueAddToRegistry+0x1e>
  402ecc:	2301      	movs	r3, #1
  402ece:	4c09      	ldr	r4, [pc, #36]	; (402ef4 <vQueueAddToRegistry+0x30>)
  402ed0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402ed4:	b132      	cbz	r2, 402ee4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402ed6:	3301      	adds	r3, #1
  402ed8:	2b08      	cmp	r3, #8
  402eda:	d1f9      	bne.n	402ed0 <vQueueAddToRegistry+0xc>
	}
  402edc:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ee0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402ee2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402ee4:	4a03      	ldr	r2, [pc, #12]	; (402ef4 <vQueueAddToRegistry+0x30>)
  402ee6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402eea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402eee:	6058      	str	r0, [r3, #4]
				break;
  402ef0:	e7f4      	b.n	402edc <vQueueAddToRegistry+0x18>
  402ef2:	bf00      	nop
  402ef4:	2040ca04 	.word	0x2040ca04

00402ef8 <vQueueWaitForMessageRestricted>:
	{
  402ef8:	b570      	push	{r4, r5, r6, lr}
  402efa:	4604      	mov	r4, r0
  402efc:	460d      	mov	r5, r1
  402efe:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402f00:	4b0f      	ldr	r3, [pc, #60]	; (402f40 <vQueueWaitForMessageRestricted+0x48>)
  402f02:	4798      	blx	r3
  402f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402f06:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f0a:	d00b      	beq.n	402f24 <vQueueWaitForMessageRestricted+0x2c>
  402f0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f12:	d00a      	beq.n	402f2a <vQueueWaitForMessageRestricted+0x32>
  402f14:	4b0b      	ldr	r3, [pc, #44]	; (402f44 <vQueueWaitForMessageRestricted+0x4c>)
  402f16:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402f18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402f1a:	b14b      	cbz	r3, 402f30 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402f1c:	4620      	mov	r0, r4
  402f1e:	4b0a      	ldr	r3, [pc, #40]	; (402f48 <vQueueWaitForMessageRestricted+0x50>)
  402f20:	4798      	blx	r3
  402f22:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402f24:	2300      	movs	r3, #0
  402f26:	6463      	str	r3, [r4, #68]	; 0x44
  402f28:	e7f0      	b.n	402f0c <vQueueWaitForMessageRestricted+0x14>
  402f2a:	2300      	movs	r3, #0
  402f2c:	64a3      	str	r3, [r4, #72]	; 0x48
  402f2e:	e7f1      	b.n	402f14 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402f30:	4632      	mov	r2, r6
  402f32:	4629      	mov	r1, r5
  402f34:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402f38:	4b04      	ldr	r3, [pc, #16]	; (402f4c <vQueueWaitForMessageRestricted+0x54>)
  402f3a:	4798      	blx	r3
  402f3c:	e7ee      	b.n	402f1c <vQueueWaitForMessageRestricted+0x24>
  402f3e:	bf00      	nop
  402f40:	0040243d 	.word	0x0040243d
  402f44:	00402489 	.word	0x00402489
  402f48:	0040285d 	.word	0x0040285d
  402f4c:	00403799 	.word	0x00403799

00402f50 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402f50:	4b08      	ldr	r3, [pc, #32]	; (402f74 <prvResetNextTaskUnblockTime+0x24>)
  402f52:	681b      	ldr	r3, [r3, #0]
  402f54:	681b      	ldr	r3, [r3, #0]
  402f56:	b13b      	cbz	r3, 402f68 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402f58:	4b06      	ldr	r3, [pc, #24]	; (402f74 <prvResetNextTaskUnblockTime+0x24>)
  402f5a:	681b      	ldr	r3, [r3, #0]
  402f5c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402f5e:	68db      	ldr	r3, [r3, #12]
  402f60:	685a      	ldr	r2, [r3, #4]
  402f62:	4b05      	ldr	r3, [pc, #20]	; (402f78 <prvResetNextTaskUnblockTime+0x28>)
  402f64:	601a      	str	r2, [r3, #0]
  402f66:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402f68:	f04f 32ff 	mov.w	r2, #4294967295
  402f6c:	4b02      	ldr	r3, [pc, #8]	; (402f78 <prvResetNextTaskUnblockTime+0x28>)
  402f6e:	601a      	str	r2, [r3, #0]
  402f70:	4770      	bx	lr
  402f72:	bf00      	nop
  402f74:	2040c808 	.word	0x2040c808
  402f78:	2040c8b4 	.word	0x2040c8b4

00402f7c <prvAddCurrentTaskToDelayedList>:
{
  402f7c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402f7e:	4b0f      	ldr	r3, [pc, #60]	; (402fbc <prvAddCurrentTaskToDelayedList+0x40>)
  402f80:	681b      	ldr	r3, [r3, #0]
  402f82:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402f84:	4b0e      	ldr	r3, [pc, #56]	; (402fc0 <prvAddCurrentTaskToDelayedList+0x44>)
  402f86:	681b      	ldr	r3, [r3, #0]
  402f88:	4298      	cmp	r0, r3
  402f8a:	d30e      	bcc.n	402faa <prvAddCurrentTaskToDelayedList+0x2e>
  402f8c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402f8e:	4b0d      	ldr	r3, [pc, #52]	; (402fc4 <prvAddCurrentTaskToDelayedList+0x48>)
  402f90:	6818      	ldr	r0, [r3, #0]
  402f92:	4b0a      	ldr	r3, [pc, #40]	; (402fbc <prvAddCurrentTaskToDelayedList+0x40>)
  402f94:	6819      	ldr	r1, [r3, #0]
  402f96:	3104      	adds	r1, #4
  402f98:	4b0b      	ldr	r3, [pc, #44]	; (402fc8 <prvAddCurrentTaskToDelayedList+0x4c>)
  402f9a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402f9c:	4b0b      	ldr	r3, [pc, #44]	; (402fcc <prvAddCurrentTaskToDelayedList+0x50>)
  402f9e:	681b      	ldr	r3, [r3, #0]
  402fa0:	429c      	cmp	r4, r3
  402fa2:	d201      	bcs.n	402fa8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402fa4:	4b09      	ldr	r3, [pc, #36]	; (402fcc <prvAddCurrentTaskToDelayedList+0x50>)
  402fa6:	601c      	str	r4, [r3, #0]
  402fa8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402faa:	4b09      	ldr	r3, [pc, #36]	; (402fd0 <prvAddCurrentTaskToDelayedList+0x54>)
  402fac:	6818      	ldr	r0, [r3, #0]
  402fae:	4b03      	ldr	r3, [pc, #12]	; (402fbc <prvAddCurrentTaskToDelayedList+0x40>)
  402fb0:	6819      	ldr	r1, [r3, #0]
  402fb2:	3104      	adds	r1, #4
  402fb4:	4b04      	ldr	r3, [pc, #16]	; (402fc8 <prvAddCurrentTaskToDelayedList+0x4c>)
  402fb6:	4798      	blx	r3
  402fb8:	bd10      	pop	{r4, pc}
  402fba:	bf00      	nop
  402fbc:	2040c804 	.word	0x2040c804
  402fc0:	2040c8fc 	.word	0x2040c8fc
  402fc4:	2040c808 	.word	0x2040c808
  402fc8:	00402325 	.word	0x00402325
  402fcc:	2040c8b4 	.word	0x2040c8b4
  402fd0:	2040c80c 	.word	0x2040c80c

00402fd4 <xTaskGenericCreate>:
{
  402fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fd8:	b083      	sub	sp, #12
  402fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402fdc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402fe0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402fe2:	b160      	cbz	r0, 402ffe <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402fe4:	2d04      	cmp	r5, #4
  402fe6:	d915      	bls.n	403014 <xTaskGenericCreate+0x40>
  402fe8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fec:	b672      	cpsid	i
  402fee:	f383 8811 	msr	BASEPRI, r3
  402ff2:	f3bf 8f6f 	isb	sy
  402ff6:	f3bf 8f4f 	dsb	sy
  402ffa:	b662      	cpsie	i
  402ffc:	e7fe      	b.n	402ffc <xTaskGenericCreate+0x28>
  402ffe:	f04f 0380 	mov.w	r3, #128	; 0x80
  403002:	b672      	cpsid	i
  403004:	f383 8811 	msr	BASEPRI, r3
  403008:	f3bf 8f6f 	isb	sy
  40300c:	f3bf 8f4f 	dsb	sy
  403010:	b662      	cpsie	i
  403012:	e7fe      	b.n	403012 <xTaskGenericCreate+0x3e>
  403014:	9001      	str	r0, [sp, #4]
  403016:	4698      	mov	r8, r3
  403018:	4691      	mov	r9, r2
  40301a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40301c:	b936      	cbnz	r6, 40302c <xTaskGenericCreate+0x58>
  40301e:	0090      	lsls	r0, r2, #2
  403020:	4b62      	ldr	r3, [pc, #392]	; (4031ac <xTaskGenericCreate+0x1d8>)
  403022:	4798      	blx	r3
		if( pxStack != NULL )
  403024:	4606      	mov	r6, r0
  403026:	2800      	cmp	r0, #0
  403028:	f000 809e 	beq.w	403168 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40302c:	2058      	movs	r0, #88	; 0x58
  40302e:	4b5f      	ldr	r3, [pc, #380]	; (4031ac <xTaskGenericCreate+0x1d8>)
  403030:	4798      	blx	r3
			if( pxNewTCB != NULL )
  403032:	4604      	mov	r4, r0
  403034:	2800      	cmp	r0, #0
  403036:	f000 8094 	beq.w	403162 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  40303a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40303c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  403040:	21a5      	movs	r1, #165	; 0xa5
  403042:	4630      	mov	r0, r6
  403044:	4b5a      	ldr	r3, [pc, #360]	; (4031b0 <xTaskGenericCreate+0x1dc>)
  403046:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  403048:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40304c:	444e      	add	r6, r9
  40304e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403050:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  403054:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  403058:	783b      	ldrb	r3, [r7, #0]
  40305a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40305e:	783b      	ldrb	r3, [r7, #0]
  403060:	2b00      	cmp	r3, #0
  403062:	f040 8084 	bne.w	40316e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  403066:	2700      	movs	r7, #0
  403068:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40306c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40306e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  403070:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  403072:	f104 0904 	add.w	r9, r4, #4
  403076:	4648      	mov	r0, r9
  403078:	f8df b184 	ldr.w	fp, [pc, #388]	; 403200 <xTaskGenericCreate+0x22c>
  40307c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40307e:	f104 0018 	add.w	r0, r4, #24
  403082:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  403084:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403086:	f1c5 0305 	rsb	r3, r5, #5
  40308a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40308c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40308e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  403090:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  403094:	4642      	mov	r2, r8
  403096:	9901      	ldr	r1, [sp, #4]
  403098:	4630      	mov	r0, r6
  40309a:	4b46      	ldr	r3, [pc, #280]	; (4031b4 <xTaskGenericCreate+0x1e0>)
  40309c:	4798      	blx	r3
  40309e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4030a0:	f1ba 0f00 	cmp.w	sl, #0
  4030a4:	d001      	beq.n	4030aa <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4030a6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4030aa:	4b43      	ldr	r3, [pc, #268]	; (4031b8 <xTaskGenericCreate+0x1e4>)
  4030ac:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4030ae:	4a43      	ldr	r2, [pc, #268]	; (4031bc <xTaskGenericCreate+0x1e8>)
  4030b0:	6813      	ldr	r3, [r2, #0]
  4030b2:	3301      	adds	r3, #1
  4030b4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4030b6:	4b42      	ldr	r3, [pc, #264]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  4030b8:	681b      	ldr	r3, [r3, #0]
  4030ba:	2b00      	cmp	r3, #0
  4030bc:	d166      	bne.n	40318c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4030be:	4b40      	ldr	r3, [pc, #256]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  4030c0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4030c2:	6813      	ldr	r3, [r2, #0]
  4030c4:	2b01      	cmp	r3, #1
  4030c6:	d121      	bne.n	40310c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4030c8:	4f3e      	ldr	r7, [pc, #248]	; (4031c4 <xTaskGenericCreate+0x1f0>)
  4030ca:	4638      	mov	r0, r7
  4030cc:	4e3e      	ldr	r6, [pc, #248]	; (4031c8 <xTaskGenericCreate+0x1f4>)
  4030ce:	47b0      	blx	r6
  4030d0:	f107 0014 	add.w	r0, r7, #20
  4030d4:	47b0      	blx	r6
  4030d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4030da:	47b0      	blx	r6
  4030dc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4030e0:	47b0      	blx	r6
  4030e2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4030e6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4030e8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 403204 <xTaskGenericCreate+0x230>
  4030ec:	4640      	mov	r0, r8
  4030ee:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4030f0:	4f36      	ldr	r7, [pc, #216]	; (4031cc <xTaskGenericCreate+0x1f8>)
  4030f2:	4638      	mov	r0, r7
  4030f4:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4030f6:	4836      	ldr	r0, [pc, #216]	; (4031d0 <xTaskGenericCreate+0x1fc>)
  4030f8:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4030fa:	4836      	ldr	r0, [pc, #216]	; (4031d4 <xTaskGenericCreate+0x200>)
  4030fc:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4030fe:	4836      	ldr	r0, [pc, #216]	; (4031d8 <xTaskGenericCreate+0x204>)
  403100:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  403102:	4b36      	ldr	r3, [pc, #216]	; (4031dc <xTaskGenericCreate+0x208>)
  403104:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  403108:	4b35      	ldr	r3, [pc, #212]	; (4031e0 <xTaskGenericCreate+0x20c>)
  40310a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  40310c:	4a35      	ldr	r2, [pc, #212]	; (4031e4 <xTaskGenericCreate+0x210>)
  40310e:	6813      	ldr	r3, [r2, #0]
  403110:	3301      	adds	r3, #1
  403112:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  403114:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  403116:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403118:	4a33      	ldr	r2, [pc, #204]	; (4031e8 <xTaskGenericCreate+0x214>)
  40311a:	6811      	ldr	r1, [r2, #0]
  40311c:	2301      	movs	r3, #1
  40311e:	4083      	lsls	r3, r0
  403120:	430b      	orrs	r3, r1
  403122:	6013      	str	r3, [r2, #0]
  403124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403128:	4649      	mov	r1, r9
  40312a:	4b26      	ldr	r3, [pc, #152]	; (4031c4 <xTaskGenericCreate+0x1f0>)
  40312c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403130:	4b2e      	ldr	r3, [pc, #184]	; (4031ec <xTaskGenericCreate+0x218>)
  403132:	4798      	blx	r3
		taskEXIT_CRITICAL();
  403134:	4b2e      	ldr	r3, [pc, #184]	; (4031f0 <xTaskGenericCreate+0x21c>)
  403136:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  403138:	4b2e      	ldr	r3, [pc, #184]	; (4031f4 <xTaskGenericCreate+0x220>)
  40313a:	681b      	ldr	r3, [r3, #0]
  40313c:	2b00      	cmp	r3, #0
  40313e:	d031      	beq.n	4031a4 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  403140:	4b1f      	ldr	r3, [pc, #124]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  403142:	681b      	ldr	r3, [r3, #0]
  403144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403146:	429d      	cmp	r5, r3
  403148:	d92e      	bls.n	4031a8 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40314a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40314e:	4b2a      	ldr	r3, [pc, #168]	; (4031f8 <xTaskGenericCreate+0x224>)
  403150:	601a      	str	r2, [r3, #0]
  403152:	f3bf 8f4f 	dsb	sy
  403156:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40315a:	2001      	movs	r0, #1
}
  40315c:	b003      	add	sp, #12
  40315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  403162:	4630      	mov	r0, r6
  403164:	4b25      	ldr	r3, [pc, #148]	; (4031fc <xTaskGenericCreate+0x228>)
  403166:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  403168:	f04f 30ff 	mov.w	r0, #4294967295
  40316c:	e7f6      	b.n	40315c <xTaskGenericCreate+0x188>
  40316e:	463b      	mov	r3, r7
  403170:	f104 0234 	add.w	r2, r4, #52	; 0x34
  403174:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  403176:	7859      	ldrb	r1, [r3, #1]
  403178:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40317c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  403180:	2900      	cmp	r1, #0
  403182:	f43f af70 	beq.w	403066 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  403186:	42bb      	cmp	r3, r7
  403188:	d1f5      	bne.n	403176 <xTaskGenericCreate+0x1a2>
  40318a:	e76c      	b.n	403066 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  40318c:	4b19      	ldr	r3, [pc, #100]	; (4031f4 <xTaskGenericCreate+0x220>)
  40318e:	681b      	ldr	r3, [r3, #0]
  403190:	2b00      	cmp	r3, #0
  403192:	d1bb      	bne.n	40310c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  403194:	4b0a      	ldr	r3, [pc, #40]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  403196:	681b      	ldr	r3, [r3, #0]
  403198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40319a:	429d      	cmp	r5, r3
  40319c:	d3b6      	bcc.n	40310c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40319e:	4b08      	ldr	r3, [pc, #32]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  4031a0:	601c      	str	r4, [r3, #0]
  4031a2:	e7b3      	b.n	40310c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4031a4:	2001      	movs	r0, #1
  4031a6:	e7d9      	b.n	40315c <xTaskGenericCreate+0x188>
  4031a8:	2001      	movs	r0, #1
	return xReturn;
  4031aa:	e7d7      	b.n	40315c <xTaskGenericCreate+0x188>
  4031ac:	00402699 	.word	0x00402699
  4031b0:	00405291 	.word	0x00405291
  4031b4:	004023f1 	.word	0x004023f1
  4031b8:	0040243d 	.word	0x0040243d
  4031bc:	2040c874 	.word	0x2040c874
  4031c0:	2040c804 	.word	0x2040c804
  4031c4:	2040c810 	.word	0x2040c810
  4031c8:	004022f1 	.word	0x004022f1
  4031cc:	2040c8a0 	.word	0x2040c8a0
  4031d0:	2040c8bc 	.word	0x2040c8bc
  4031d4:	2040c8e8 	.word	0x2040c8e8
  4031d8:	2040c8d4 	.word	0x2040c8d4
  4031dc:	2040c808 	.word	0x2040c808
  4031e0:	2040c80c 	.word	0x2040c80c
  4031e4:	2040c880 	.word	0x2040c880
  4031e8:	2040c888 	.word	0x2040c888
  4031ec:	0040230d 	.word	0x0040230d
  4031f0:	00402489 	.word	0x00402489
  4031f4:	2040c8d0 	.word	0x2040c8d0
  4031f8:	e000ed04 	.word	0xe000ed04
  4031fc:	00402709 	.word	0x00402709
  403200:	00402307 	.word	0x00402307
  403204:	2040c88c 	.word	0x2040c88c

00403208 <vTaskStartScheduler>:
{
  403208:	b510      	push	{r4, lr}
  40320a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  40320c:	2300      	movs	r3, #0
  40320e:	9303      	str	r3, [sp, #12]
  403210:	9302      	str	r3, [sp, #8]
  403212:	9301      	str	r3, [sp, #4]
  403214:	9300      	str	r3, [sp, #0]
  403216:	2282      	movs	r2, #130	; 0x82
  403218:	4916      	ldr	r1, [pc, #88]	; (403274 <vTaskStartScheduler+0x6c>)
  40321a:	4817      	ldr	r0, [pc, #92]	; (403278 <vTaskStartScheduler+0x70>)
  40321c:	4c17      	ldr	r4, [pc, #92]	; (40327c <vTaskStartScheduler+0x74>)
  40321e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  403220:	2801      	cmp	r0, #1
  403222:	d00b      	beq.n	40323c <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  403224:	bb20      	cbnz	r0, 403270 <vTaskStartScheduler+0x68>
  403226:	f04f 0380 	mov.w	r3, #128	; 0x80
  40322a:	b672      	cpsid	i
  40322c:	f383 8811 	msr	BASEPRI, r3
  403230:	f3bf 8f6f 	isb	sy
  403234:	f3bf 8f4f 	dsb	sy
  403238:	b662      	cpsie	i
  40323a:	e7fe      	b.n	40323a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  40323c:	4b10      	ldr	r3, [pc, #64]	; (403280 <vTaskStartScheduler+0x78>)
  40323e:	4798      	blx	r3
	if( xReturn == pdPASS )
  403240:	2801      	cmp	r0, #1
  403242:	d1ef      	bne.n	403224 <vTaskStartScheduler+0x1c>
  403244:	f04f 0380 	mov.w	r3, #128	; 0x80
  403248:	b672      	cpsid	i
  40324a:	f383 8811 	msr	BASEPRI, r3
  40324e:	f3bf 8f6f 	isb	sy
  403252:	f3bf 8f4f 	dsb	sy
  403256:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  403258:	f04f 32ff 	mov.w	r2, #4294967295
  40325c:	4b09      	ldr	r3, [pc, #36]	; (403284 <vTaskStartScheduler+0x7c>)
  40325e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  403260:	2201      	movs	r2, #1
  403262:	4b09      	ldr	r3, [pc, #36]	; (403288 <vTaskStartScheduler+0x80>)
  403264:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  403266:	2200      	movs	r2, #0
  403268:	4b08      	ldr	r3, [pc, #32]	; (40328c <vTaskStartScheduler+0x84>)
  40326a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40326c:	4b08      	ldr	r3, [pc, #32]	; (403290 <vTaskStartScheduler+0x88>)
  40326e:	4798      	blx	r3
}
  403270:	b004      	add	sp, #16
  403272:	bd10      	pop	{r4, pc}
  403274:	00407b78 	.word	0x00407b78
  403278:	004035ad 	.word	0x004035ad
  40327c:	00402fd5 	.word	0x00402fd5
  403280:	00403bed 	.word	0x00403bed
  403284:	2040c8b4 	.word	0x2040c8b4
  403288:	2040c8d0 	.word	0x2040c8d0
  40328c:	2040c8fc 	.word	0x2040c8fc
  403290:	00402571 	.word	0x00402571

00403294 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  403294:	4a02      	ldr	r2, [pc, #8]	; (4032a0 <vTaskSuspendAll+0xc>)
  403296:	6813      	ldr	r3, [r2, #0]
  403298:	3301      	adds	r3, #1
  40329a:	6013      	str	r3, [r2, #0]
  40329c:	4770      	bx	lr
  40329e:	bf00      	nop
  4032a0:	2040c87c 	.word	0x2040c87c

004032a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4032a4:	4b01      	ldr	r3, [pc, #4]	; (4032ac <xTaskGetTickCount+0x8>)
  4032a6:	6818      	ldr	r0, [r3, #0]
}
  4032a8:	4770      	bx	lr
  4032aa:	bf00      	nop
  4032ac:	2040c8fc 	.word	0x2040c8fc

004032b0 <xTaskIncrementTick>:
{
  4032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4032b4:	4b42      	ldr	r3, [pc, #264]	; (4033c0 <xTaskIncrementTick+0x110>)
  4032b6:	681b      	ldr	r3, [r3, #0]
  4032b8:	2b00      	cmp	r3, #0
  4032ba:	d178      	bne.n	4033ae <xTaskIncrementTick+0xfe>
		++xTickCount;
  4032bc:	4b41      	ldr	r3, [pc, #260]	; (4033c4 <xTaskIncrementTick+0x114>)
  4032be:	681a      	ldr	r2, [r3, #0]
  4032c0:	3201      	adds	r2, #1
  4032c2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4032c4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4032c6:	b9d6      	cbnz	r6, 4032fe <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4032c8:	4b3f      	ldr	r3, [pc, #252]	; (4033c8 <xTaskIncrementTick+0x118>)
  4032ca:	681b      	ldr	r3, [r3, #0]
  4032cc:	681b      	ldr	r3, [r3, #0]
  4032ce:	b153      	cbz	r3, 4032e6 <xTaskIncrementTick+0x36>
  4032d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032d4:	b672      	cpsid	i
  4032d6:	f383 8811 	msr	BASEPRI, r3
  4032da:	f3bf 8f6f 	isb	sy
  4032de:	f3bf 8f4f 	dsb	sy
  4032e2:	b662      	cpsie	i
  4032e4:	e7fe      	b.n	4032e4 <xTaskIncrementTick+0x34>
  4032e6:	4a38      	ldr	r2, [pc, #224]	; (4033c8 <xTaskIncrementTick+0x118>)
  4032e8:	6811      	ldr	r1, [r2, #0]
  4032ea:	4b38      	ldr	r3, [pc, #224]	; (4033cc <xTaskIncrementTick+0x11c>)
  4032ec:	6818      	ldr	r0, [r3, #0]
  4032ee:	6010      	str	r0, [r2, #0]
  4032f0:	6019      	str	r1, [r3, #0]
  4032f2:	4a37      	ldr	r2, [pc, #220]	; (4033d0 <xTaskIncrementTick+0x120>)
  4032f4:	6813      	ldr	r3, [r2, #0]
  4032f6:	3301      	adds	r3, #1
  4032f8:	6013      	str	r3, [r2, #0]
  4032fa:	4b36      	ldr	r3, [pc, #216]	; (4033d4 <xTaskIncrementTick+0x124>)
  4032fc:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4032fe:	4b36      	ldr	r3, [pc, #216]	; (4033d8 <xTaskIncrementTick+0x128>)
  403300:	681b      	ldr	r3, [r3, #0]
  403302:	429e      	cmp	r6, r3
  403304:	d218      	bcs.n	403338 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  403306:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  403308:	4b34      	ldr	r3, [pc, #208]	; (4033dc <xTaskIncrementTick+0x12c>)
  40330a:	681b      	ldr	r3, [r3, #0]
  40330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40330e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403312:	4a33      	ldr	r2, [pc, #204]	; (4033e0 <xTaskIncrementTick+0x130>)
  403314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  403318:	2b02      	cmp	r3, #2
  40331a:	bf28      	it	cs
  40331c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40331e:	4b31      	ldr	r3, [pc, #196]	; (4033e4 <xTaskIncrementTick+0x134>)
  403320:	681b      	ldr	r3, [r3, #0]
  403322:	b90b      	cbnz	r3, 403328 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  403324:	4b30      	ldr	r3, [pc, #192]	; (4033e8 <xTaskIncrementTick+0x138>)
  403326:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  403328:	4b30      	ldr	r3, [pc, #192]	; (4033ec <xTaskIncrementTick+0x13c>)
  40332a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40332c:	2b00      	cmp	r3, #0
}
  40332e:	bf0c      	ite	eq
  403330:	4620      	moveq	r0, r4
  403332:	2001      	movne	r0, #1
  403334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403338:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40333a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4033c8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40333e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4033f8 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  403342:	4f2b      	ldr	r7, [pc, #172]	; (4033f0 <xTaskIncrementTick+0x140>)
  403344:	e01f      	b.n	403386 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  403346:	f04f 32ff 	mov.w	r2, #4294967295
  40334a:	4b23      	ldr	r3, [pc, #140]	; (4033d8 <xTaskIncrementTick+0x128>)
  40334c:	601a      	str	r2, [r3, #0]
						break;
  40334e:	e7db      	b.n	403308 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  403350:	4a21      	ldr	r2, [pc, #132]	; (4033d8 <xTaskIncrementTick+0x128>)
  403352:	6013      	str	r3, [r2, #0]
							break;
  403354:	e7d8      	b.n	403308 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403356:	f105 0018 	add.w	r0, r5, #24
  40335a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40335c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40335e:	683a      	ldr	r2, [r7, #0]
  403360:	2301      	movs	r3, #1
  403362:	4083      	lsls	r3, r0
  403364:	4313      	orrs	r3, r2
  403366:	603b      	str	r3, [r7, #0]
  403368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40336c:	4651      	mov	r1, sl
  40336e:	4b1c      	ldr	r3, [pc, #112]	; (4033e0 <xTaskIncrementTick+0x130>)
  403370:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403374:	4b1f      	ldr	r3, [pc, #124]	; (4033f4 <xTaskIncrementTick+0x144>)
  403376:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403378:	4b18      	ldr	r3, [pc, #96]	; (4033dc <xTaskIncrementTick+0x12c>)
  40337a:	681b      	ldr	r3, [r3, #0]
  40337c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  403380:	429a      	cmp	r2, r3
  403382:	bf28      	it	cs
  403384:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403386:	f8d9 3000 	ldr.w	r3, [r9]
  40338a:	681b      	ldr	r3, [r3, #0]
  40338c:	2b00      	cmp	r3, #0
  40338e:	d0da      	beq.n	403346 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403390:	f8d9 3000 	ldr.w	r3, [r9]
  403394:	68db      	ldr	r3, [r3, #12]
  403396:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  403398:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40339a:	429e      	cmp	r6, r3
  40339c:	d3d8      	bcc.n	403350 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40339e:	f105 0a04 	add.w	sl, r5, #4
  4033a2:	4650      	mov	r0, sl
  4033a4:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4033a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d1d4      	bne.n	403356 <xTaskIncrementTick+0xa6>
  4033ac:	e7d6      	b.n	40335c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4033ae:	4a0d      	ldr	r2, [pc, #52]	; (4033e4 <xTaskIncrementTick+0x134>)
  4033b0:	6813      	ldr	r3, [r2, #0]
  4033b2:	3301      	adds	r3, #1
  4033b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4033b6:	4b0c      	ldr	r3, [pc, #48]	; (4033e8 <xTaskIncrementTick+0x138>)
  4033b8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4033ba:	2400      	movs	r4, #0
  4033bc:	e7b4      	b.n	403328 <xTaskIncrementTick+0x78>
  4033be:	bf00      	nop
  4033c0:	2040c87c 	.word	0x2040c87c
  4033c4:	2040c8fc 	.word	0x2040c8fc
  4033c8:	2040c808 	.word	0x2040c808
  4033cc:	2040c80c 	.word	0x2040c80c
  4033d0:	2040c8b8 	.word	0x2040c8b8
  4033d4:	00402f51 	.word	0x00402f51
  4033d8:	2040c8b4 	.word	0x2040c8b4
  4033dc:	2040c804 	.word	0x2040c804
  4033e0:	2040c810 	.word	0x2040c810
  4033e4:	2040c878 	.word	0x2040c878
  4033e8:	004041a1 	.word	0x004041a1
  4033ec:	2040c900 	.word	0x2040c900
  4033f0:	2040c888 	.word	0x2040c888
  4033f4:	0040230d 	.word	0x0040230d
  4033f8:	00402359 	.word	0x00402359

004033fc <xTaskResumeAll>:
{
  4033fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  403400:	4b38      	ldr	r3, [pc, #224]	; (4034e4 <xTaskResumeAll+0xe8>)
  403402:	681b      	ldr	r3, [r3, #0]
  403404:	b953      	cbnz	r3, 40341c <xTaskResumeAll+0x20>
  403406:	f04f 0380 	mov.w	r3, #128	; 0x80
  40340a:	b672      	cpsid	i
  40340c:	f383 8811 	msr	BASEPRI, r3
  403410:	f3bf 8f6f 	isb	sy
  403414:	f3bf 8f4f 	dsb	sy
  403418:	b662      	cpsie	i
  40341a:	e7fe      	b.n	40341a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  40341c:	4b32      	ldr	r3, [pc, #200]	; (4034e8 <xTaskResumeAll+0xec>)
  40341e:	4798      	blx	r3
		--uxSchedulerSuspended;
  403420:	4b30      	ldr	r3, [pc, #192]	; (4034e4 <xTaskResumeAll+0xe8>)
  403422:	681a      	ldr	r2, [r3, #0]
  403424:	3a01      	subs	r2, #1
  403426:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403428:	681b      	ldr	r3, [r3, #0]
  40342a:	2b00      	cmp	r3, #0
  40342c:	d155      	bne.n	4034da <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40342e:	4b2f      	ldr	r3, [pc, #188]	; (4034ec <xTaskResumeAll+0xf0>)
  403430:	681b      	ldr	r3, [r3, #0]
  403432:	2b00      	cmp	r3, #0
  403434:	d132      	bne.n	40349c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  403436:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403438:	4b2d      	ldr	r3, [pc, #180]	; (4034f0 <xTaskResumeAll+0xf4>)
  40343a:	4798      	blx	r3
}
  40343c:	4620      	mov	r0, r4
  40343e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  403442:	68fb      	ldr	r3, [r7, #12]
  403444:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403446:	f104 0018 	add.w	r0, r4, #24
  40344a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40344c:	f104 0804 	add.w	r8, r4, #4
  403450:	4640      	mov	r0, r8
  403452:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  403454:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403456:	682a      	ldr	r2, [r5, #0]
  403458:	2301      	movs	r3, #1
  40345a:	4083      	lsls	r3, r0
  40345c:	4313      	orrs	r3, r2
  40345e:	602b      	str	r3, [r5, #0]
  403460:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403464:	4641      	mov	r1, r8
  403466:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40346a:	4b22      	ldr	r3, [pc, #136]	; (4034f4 <xTaskResumeAll+0xf8>)
  40346c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40346e:	4b22      	ldr	r3, [pc, #136]	; (4034f8 <xTaskResumeAll+0xfc>)
  403470:	681b      	ldr	r3, [r3, #0]
  403472:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403476:	429a      	cmp	r2, r3
  403478:	d20c      	bcs.n	403494 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40347a:	683b      	ldr	r3, [r7, #0]
  40347c:	2b00      	cmp	r3, #0
  40347e:	d1e0      	bne.n	403442 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  403480:	4b1e      	ldr	r3, [pc, #120]	; (4034fc <xTaskResumeAll+0x100>)
  403482:	681b      	ldr	r3, [r3, #0]
  403484:	b1db      	cbz	r3, 4034be <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  403486:	4b1d      	ldr	r3, [pc, #116]	; (4034fc <xTaskResumeAll+0x100>)
  403488:	681b      	ldr	r3, [r3, #0]
  40348a:	b1c3      	cbz	r3, 4034be <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40348c:	4e1c      	ldr	r6, [pc, #112]	; (403500 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40348e:	4d1d      	ldr	r5, [pc, #116]	; (403504 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  403490:	4c1a      	ldr	r4, [pc, #104]	; (4034fc <xTaskResumeAll+0x100>)
  403492:	e00e      	b.n	4034b2 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  403494:	2201      	movs	r2, #1
  403496:	4b1b      	ldr	r3, [pc, #108]	; (403504 <xTaskResumeAll+0x108>)
  403498:	601a      	str	r2, [r3, #0]
  40349a:	e7ee      	b.n	40347a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40349c:	4f1a      	ldr	r7, [pc, #104]	; (403508 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40349e:	4e1b      	ldr	r6, [pc, #108]	; (40350c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4034a0:	4d1b      	ldr	r5, [pc, #108]	; (403510 <xTaskResumeAll+0x114>)
  4034a2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403518 <xTaskResumeAll+0x11c>
  4034a6:	e7e8      	b.n	40347a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4034a8:	6823      	ldr	r3, [r4, #0]
  4034aa:	3b01      	subs	r3, #1
  4034ac:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4034ae:	6823      	ldr	r3, [r4, #0]
  4034b0:	b12b      	cbz	r3, 4034be <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4034b2:	47b0      	blx	r6
  4034b4:	2800      	cmp	r0, #0
  4034b6:	d0f7      	beq.n	4034a8 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4034b8:	2301      	movs	r3, #1
  4034ba:	602b      	str	r3, [r5, #0]
  4034bc:	e7f4      	b.n	4034a8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4034be:	4b11      	ldr	r3, [pc, #68]	; (403504 <xTaskResumeAll+0x108>)
  4034c0:	681b      	ldr	r3, [r3, #0]
  4034c2:	2b01      	cmp	r3, #1
  4034c4:	d10b      	bne.n	4034de <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4034c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4034ca:	4b12      	ldr	r3, [pc, #72]	; (403514 <xTaskResumeAll+0x118>)
  4034cc:	601a      	str	r2, [r3, #0]
  4034ce:	f3bf 8f4f 	dsb	sy
  4034d2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4034d6:	2401      	movs	r4, #1
  4034d8:	e7ae      	b.n	403438 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4034da:	2400      	movs	r4, #0
  4034dc:	e7ac      	b.n	403438 <xTaskResumeAll+0x3c>
  4034de:	2400      	movs	r4, #0
  4034e0:	e7aa      	b.n	403438 <xTaskResumeAll+0x3c>
  4034e2:	bf00      	nop
  4034e4:	2040c87c 	.word	0x2040c87c
  4034e8:	0040243d 	.word	0x0040243d
  4034ec:	2040c874 	.word	0x2040c874
  4034f0:	00402489 	.word	0x00402489
  4034f4:	0040230d 	.word	0x0040230d
  4034f8:	2040c804 	.word	0x2040c804
  4034fc:	2040c878 	.word	0x2040c878
  403500:	004032b1 	.word	0x004032b1
  403504:	2040c900 	.word	0x2040c900
  403508:	2040c8bc 	.word	0x2040c8bc
  40350c:	00402359 	.word	0x00402359
  403510:	2040c888 	.word	0x2040c888
  403514:	e000ed04 	.word	0xe000ed04
  403518:	2040c810 	.word	0x2040c810

0040351c <vTaskDelay>:
	{
  40351c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40351e:	2800      	cmp	r0, #0
  403520:	d029      	beq.n	403576 <vTaskDelay+0x5a>
  403522:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403524:	4b18      	ldr	r3, [pc, #96]	; (403588 <vTaskDelay+0x6c>)
  403526:	681b      	ldr	r3, [r3, #0]
  403528:	b153      	cbz	r3, 403540 <vTaskDelay+0x24>
  40352a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40352e:	b672      	cpsid	i
  403530:	f383 8811 	msr	BASEPRI, r3
  403534:	f3bf 8f6f 	isb	sy
  403538:	f3bf 8f4f 	dsb	sy
  40353c:	b662      	cpsie	i
  40353e:	e7fe      	b.n	40353e <vTaskDelay+0x22>
			vTaskSuspendAll();
  403540:	4b12      	ldr	r3, [pc, #72]	; (40358c <vTaskDelay+0x70>)
  403542:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  403544:	4b12      	ldr	r3, [pc, #72]	; (403590 <vTaskDelay+0x74>)
  403546:	681b      	ldr	r3, [r3, #0]
  403548:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40354a:	4b12      	ldr	r3, [pc, #72]	; (403594 <vTaskDelay+0x78>)
  40354c:	6818      	ldr	r0, [r3, #0]
  40354e:	3004      	adds	r0, #4
  403550:	4b11      	ldr	r3, [pc, #68]	; (403598 <vTaskDelay+0x7c>)
  403552:	4798      	blx	r3
  403554:	b948      	cbnz	r0, 40356a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403556:	4b0f      	ldr	r3, [pc, #60]	; (403594 <vTaskDelay+0x78>)
  403558:	681a      	ldr	r2, [r3, #0]
  40355a:	4910      	ldr	r1, [pc, #64]	; (40359c <vTaskDelay+0x80>)
  40355c:	680b      	ldr	r3, [r1, #0]
  40355e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403560:	2201      	movs	r2, #1
  403562:	4082      	lsls	r2, r0
  403564:	ea23 0302 	bic.w	r3, r3, r2
  403568:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40356a:	4620      	mov	r0, r4
  40356c:	4b0c      	ldr	r3, [pc, #48]	; (4035a0 <vTaskDelay+0x84>)
  40356e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  403570:	4b0c      	ldr	r3, [pc, #48]	; (4035a4 <vTaskDelay+0x88>)
  403572:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  403574:	b938      	cbnz	r0, 403586 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  403576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40357a:	4b0b      	ldr	r3, [pc, #44]	; (4035a8 <vTaskDelay+0x8c>)
  40357c:	601a      	str	r2, [r3, #0]
  40357e:	f3bf 8f4f 	dsb	sy
  403582:	f3bf 8f6f 	isb	sy
  403586:	bd10      	pop	{r4, pc}
  403588:	2040c87c 	.word	0x2040c87c
  40358c:	00403295 	.word	0x00403295
  403590:	2040c8fc 	.word	0x2040c8fc
  403594:	2040c804 	.word	0x2040c804
  403598:	00402359 	.word	0x00402359
  40359c:	2040c888 	.word	0x2040c888
  4035a0:	00402f7d 	.word	0x00402f7d
  4035a4:	004033fd 	.word	0x004033fd
  4035a8:	e000ed04 	.word	0xe000ed04

004035ac <prvIdleTask>:
{
  4035ac:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4035ae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403638 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4035b2:	4e19      	ldr	r6, [pc, #100]	; (403618 <prvIdleTask+0x6c>)
				taskYIELD();
  4035b4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40363c <prvIdleTask+0x90>
  4035b8:	e02a      	b.n	403610 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4035ba:	4b18      	ldr	r3, [pc, #96]	; (40361c <prvIdleTask+0x70>)
  4035bc:	681b      	ldr	r3, [r3, #0]
  4035be:	2b01      	cmp	r3, #1
  4035c0:	d81e      	bhi.n	403600 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4035c2:	682b      	ldr	r3, [r5, #0]
  4035c4:	2b00      	cmp	r3, #0
  4035c6:	d0f8      	beq.n	4035ba <prvIdleTask+0xe>
			vTaskSuspendAll();
  4035c8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4035ca:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4035cc:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4035ce:	2c00      	cmp	r4, #0
  4035d0:	d0f7      	beq.n	4035c2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4035d2:	4b13      	ldr	r3, [pc, #76]	; (403620 <prvIdleTask+0x74>)
  4035d4:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4035d6:	68f3      	ldr	r3, [r6, #12]
  4035d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4035da:	1d20      	adds	r0, r4, #4
  4035dc:	4b11      	ldr	r3, [pc, #68]	; (403624 <prvIdleTask+0x78>)
  4035de:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4035e0:	4a11      	ldr	r2, [pc, #68]	; (403628 <prvIdleTask+0x7c>)
  4035e2:	6813      	ldr	r3, [r2, #0]
  4035e4:	3b01      	subs	r3, #1
  4035e6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4035e8:	682b      	ldr	r3, [r5, #0]
  4035ea:	3b01      	subs	r3, #1
  4035ec:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4035ee:	4b0f      	ldr	r3, [pc, #60]	; (40362c <prvIdleTask+0x80>)
  4035f0:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4035f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4035f4:	f8df a048 	ldr.w	sl, [pc, #72]	; 403640 <prvIdleTask+0x94>
  4035f8:	47d0      	blx	sl
		vPortFree( pxTCB );
  4035fa:	4620      	mov	r0, r4
  4035fc:	47d0      	blx	sl
  4035fe:	e7e0      	b.n	4035c2 <prvIdleTask+0x16>
				taskYIELD();
  403600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403604:	f8c9 3000 	str.w	r3, [r9]
  403608:	f3bf 8f4f 	dsb	sy
  40360c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403610:	4d07      	ldr	r5, [pc, #28]	; (403630 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  403612:	4f08      	ldr	r7, [pc, #32]	; (403634 <prvIdleTask+0x88>)
  403614:	e7d5      	b.n	4035c2 <prvIdleTask+0x16>
  403616:	bf00      	nop
  403618:	2040c8e8 	.word	0x2040c8e8
  40361c:	2040c810 	.word	0x2040c810
  403620:	0040243d 	.word	0x0040243d
  403624:	00402359 	.word	0x00402359
  403628:	2040c874 	.word	0x2040c874
  40362c:	00402489 	.word	0x00402489
  403630:	2040c884 	.word	0x2040c884
  403634:	004033fd 	.word	0x004033fd
  403638:	00403295 	.word	0x00403295
  40363c:	e000ed04 	.word	0xe000ed04
  403640:	00402709 	.word	0x00402709

00403644 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  403644:	4b2d      	ldr	r3, [pc, #180]	; (4036fc <vTaskSwitchContext+0xb8>)
  403646:	681b      	ldr	r3, [r3, #0]
  403648:	2b00      	cmp	r3, #0
  40364a:	d12c      	bne.n	4036a6 <vTaskSwitchContext+0x62>
{
  40364c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40364e:	2200      	movs	r2, #0
  403650:	4b2b      	ldr	r3, [pc, #172]	; (403700 <vTaskSwitchContext+0xbc>)
  403652:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  403654:	4b2b      	ldr	r3, [pc, #172]	; (403704 <vTaskSwitchContext+0xc0>)
  403656:	681b      	ldr	r3, [r3, #0]
  403658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40365a:	681a      	ldr	r2, [r3, #0]
  40365c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403660:	d103      	bne.n	40366a <vTaskSwitchContext+0x26>
  403662:	685a      	ldr	r2, [r3, #4]
  403664:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403668:	d021      	beq.n	4036ae <vTaskSwitchContext+0x6a>
  40366a:	4b26      	ldr	r3, [pc, #152]	; (403704 <vTaskSwitchContext+0xc0>)
  40366c:	6818      	ldr	r0, [r3, #0]
  40366e:	6819      	ldr	r1, [r3, #0]
  403670:	3134      	adds	r1, #52	; 0x34
  403672:	4b25      	ldr	r3, [pc, #148]	; (403708 <vTaskSwitchContext+0xc4>)
  403674:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403676:	4b25      	ldr	r3, [pc, #148]	; (40370c <vTaskSwitchContext+0xc8>)
  403678:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40367a:	fab3 f383 	clz	r3, r3
  40367e:	b2db      	uxtb	r3, r3
  403680:	f1c3 031f 	rsb	r3, r3, #31
  403684:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403688:	4a21      	ldr	r2, [pc, #132]	; (403710 <vTaskSwitchContext+0xcc>)
  40368a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40368e:	b9ba      	cbnz	r2, 4036c0 <vTaskSwitchContext+0x7c>
	__asm volatile
  403690:	f04f 0380 	mov.w	r3, #128	; 0x80
  403694:	b672      	cpsid	i
  403696:	f383 8811 	msr	BASEPRI, r3
  40369a:	f3bf 8f6f 	isb	sy
  40369e:	f3bf 8f4f 	dsb	sy
  4036a2:	b662      	cpsie	i
  4036a4:	e7fe      	b.n	4036a4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4036a6:	2201      	movs	r2, #1
  4036a8:	4b15      	ldr	r3, [pc, #84]	; (403700 <vTaskSwitchContext+0xbc>)
  4036aa:	601a      	str	r2, [r3, #0]
  4036ac:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4036ae:	689a      	ldr	r2, [r3, #8]
  4036b0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4036b4:	d1d9      	bne.n	40366a <vTaskSwitchContext+0x26>
  4036b6:	68db      	ldr	r3, [r3, #12]
  4036b8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4036bc:	d1d5      	bne.n	40366a <vTaskSwitchContext+0x26>
  4036be:	e7da      	b.n	403676 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4036c0:	4a13      	ldr	r2, [pc, #76]	; (403710 <vTaskSwitchContext+0xcc>)
  4036c2:	0099      	lsls	r1, r3, #2
  4036c4:	18c8      	adds	r0, r1, r3
  4036c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4036ca:	6844      	ldr	r4, [r0, #4]
  4036cc:	6864      	ldr	r4, [r4, #4]
  4036ce:	6044      	str	r4, [r0, #4]
  4036d0:	4419      	add	r1, r3
  4036d2:	4602      	mov	r2, r0
  4036d4:	3208      	adds	r2, #8
  4036d6:	4294      	cmp	r4, r2
  4036d8:	d009      	beq.n	4036ee <vTaskSwitchContext+0xaa>
  4036da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4036de:	4a0c      	ldr	r2, [pc, #48]	; (403710 <vTaskSwitchContext+0xcc>)
  4036e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4036e4:	685b      	ldr	r3, [r3, #4]
  4036e6:	68da      	ldr	r2, [r3, #12]
  4036e8:	4b06      	ldr	r3, [pc, #24]	; (403704 <vTaskSwitchContext+0xc0>)
  4036ea:	601a      	str	r2, [r3, #0]
  4036ec:	bd10      	pop	{r4, pc}
  4036ee:	6860      	ldr	r0, [r4, #4]
  4036f0:	4a07      	ldr	r2, [pc, #28]	; (403710 <vTaskSwitchContext+0xcc>)
  4036f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4036f6:	6050      	str	r0, [r2, #4]
  4036f8:	e7ef      	b.n	4036da <vTaskSwitchContext+0x96>
  4036fa:	bf00      	nop
  4036fc:	2040c87c 	.word	0x2040c87c
  403700:	2040c900 	.word	0x2040c900
  403704:	2040c804 	.word	0x2040c804
  403708:	00404189 	.word	0x00404189
  40370c:	2040c888 	.word	0x2040c888
  403710:	2040c810 	.word	0x2040c810

00403714 <vTaskPlaceOnEventList>:
{
  403714:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  403716:	b1e0      	cbz	r0, 403752 <vTaskPlaceOnEventList+0x3e>
  403718:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40371a:	4d17      	ldr	r5, [pc, #92]	; (403778 <vTaskPlaceOnEventList+0x64>)
  40371c:	6829      	ldr	r1, [r5, #0]
  40371e:	3118      	adds	r1, #24
  403720:	4b16      	ldr	r3, [pc, #88]	; (40377c <vTaskPlaceOnEventList+0x68>)
  403722:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403724:	6828      	ldr	r0, [r5, #0]
  403726:	3004      	adds	r0, #4
  403728:	4b15      	ldr	r3, [pc, #84]	; (403780 <vTaskPlaceOnEventList+0x6c>)
  40372a:	4798      	blx	r3
  40372c:	b940      	cbnz	r0, 403740 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40372e:	682a      	ldr	r2, [r5, #0]
  403730:	4914      	ldr	r1, [pc, #80]	; (403784 <vTaskPlaceOnEventList+0x70>)
  403732:	680b      	ldr	r3, [r1, #0]
  403734:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403736:	2201      	movs	r2, #1
  403738:	4082      	lsls	r2, r0
  40373a:	ea23 0302 	bic.w	r3, r3, r2
  40373e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  403740:	f1b4 3fff 	cmp.w	r4, #4294967295
  403744:	d010      	beq.n	403768 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  403746:	4b10      	ldr	r3, [pc, #64]	; (403788 <vTaskPlaceOnEventList+0x74>)
  403748:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40374a:	4420      	add	r0, r4
  40374c:	4b0f      	ldr	r3, [pc, #60]	; (40378c <vTaskPlaceOnEventList+0x78>)
  40374e:	4798      	blx	r3
  403750:	bd38      	pop	{r3, r4, r5, pc}
  403752:	f04f 0380 	mov.w	r3, #128	; 0x80
  403756:	b672      	cpsid	i
  403758:	f383 8811 	msr	BASEPRI, r3
  40375c:	f3bf 8f6f 	isb	sy
  403760:	f3bf 8f4f 	dsb	sy
  403764:	b662      	cpsie	i
  403766:	e7fe      	b.n	403766 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403768:	4b03      	ldr	r3, [pc, #12]	; (403778 <vTaskPlaceOnEventList+0x64>)
  40376a:	6819      	ldr	r1, [r3, #0]
  40376c:	3104      	adds	r1, #4
  40376e:	4808      	ldr	r0, [pc, #32]	; (403790 <vTaskPlaceOnEventList+0x7c>)
  403770:	4b08      	ldr	r3, [pc, #32]	; (403794 <vTaskPlaceOnEventList+0x80>)
  403772:	4798      	blx	r3
  403774:	bd38      	pop	{r3, r4, r5, pc}
  403776:	bf00      	nop
  403778:	2040c804 	.word	0x2040c804
  40377c:	00402325 	.word	0x00402325
  403780:	00402359 	.word	0x00402359
  403784:	2040c888 	.word	0x2040c888
  403788:	2040c8fc 	.word	0x2040c8fc
  40378c:	00402f7d 	.word	0x00402f7d
  403790:	2040c8d4 	.word	0x2040c8d4
  403794:	0040230d 	.word	0x0040230d

00403798 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  403798:	b1e8      	cbz	r0, 4037d6 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40379a:	b570      	push	{r4, r5, r6, lr}
  40379c:	4615      	mov	r5, r2
  40379e:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4037a0:	4e16      	ldr	r6, [pc, #88]	; (4037fc <vTaskPlaceOnEventListRestricted+0x64>)
  4037a2:	6831      	ldr	r1, [r6, #0]
  4037a4:	3118      	adds	r1, #24
  4037a6:	4b16      	ldr	r3, [pc, #88]	; (403800 <vTaskPlaceOnEventListRestricted+0x68>)
  4037a8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4037aa:	6830      	ldr	r0, [r6, #0]
  4037ac:	3004      	adds	r0, #4
  4037ae:	4b15      	ldr	r3, [pc, #84]	; (403804 <vTaskPlaceOnEventListRestricted+0x6c>)
  4037b0:	4798      	blx	r3
  4037b2:	b940      	cbnz	r0, 4037c6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4037b4:	6832      	ldr	r2, [r6, #0]
  4037b6:	4914      	ldr	r1, [pc, #80]	; (403808 <vTaskPlaceOnEventListRestricted+0x70>)
  4037b8:	680b      	ldr	r3, [r1, #0]
  4037ba:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4037bc:	2201      	movs	r2, #1
  4037be:	4082      	lsls	r2, r0
  4037c0:	ea23 0302 	bic.w	r3, r3, r2
  4037c4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4037c6:	2d01      	cmp	r5, #1
  4037c8:	d010      	beq.n	4037ec <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4037ca:	4b10      	ldr	r3, [pc, #64]	; (40380c <vTaskPlaceOnEventListRestricted+0x74>)
  4037cc:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4037ce:	4420      	add	r0, r4
  4037d0:	4b0f      	ldr	r3, [pc, #60]	; (403810 <vTaskPlaceOnEventListRestricted+0x78>)
  4037d2:	4798      	blx	r3
  4037d4:	bd70      	pop	{r4, r5, r6, pc}
  4037d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037da:	b672      	cpsid	i
  4037dc:	f383 8811 	msr	BASEPRI, r3
  4037e0:	f3bf 8f6f 	isb	sy
  4037e4:	f3bf 8f4f 	dsb	sy
  4037e8:	b662      	cpsie	i
  4037ea:	e7fe      	b.n	4037ea <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4037ec:	4b03      	ldr	r3, [pc, #12]	; (4037fc <vTaskPlaceOnEventListRestricted+0x64>)
  4037ee:	6819      	ldr	r1, [r3, #0]
  4037f0:	3104      	adds	r1, #4
  4037f2:	4808      	ldr	r0, [pc, #32]	; (403814 <vTaskPlaceOnEventListRestricted+0x7c>)
  4037f4:	4b02      	ldr	r3, [pc, #8]	; (403800 <vTaskPlaceOnEventListRestricted+0x68>)
  4037f6:	4798      	blx	r3
  4037f8:	bd70      	pop	{r4, r5, r6, pc}
  4037fa:	bf00      	nop
  4037fc:	2040c804 	.word	0x2040c804
  403800:	0040230d 	.word	0x0040230d
  403804:	00402359 	.word	0x00402359
  403808:	2040c888 	.word	0x2040c888
  40380c:	2040c8fc 	.word	0x2040c8fc
  403810:	00402f7d 	.word	0x00402f7d
  403814:	2040c8d4 	.word	0x2040c8d4

00403818 <xTaskRemoveFromEventList>:
{
  403818:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40381a:	68c3      	ldr	r3, [r0, #12]
  40381c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40381e:	b324      	cbz	r4, 40386a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403820:	f104 0518 	add.w	r5, r4, #24
  403824:	4628      	mov	r0, r5
  403826:	4b1a      	ldr	r3, [pc, #104]	; (403890 <xTaskRemoveFromEventList+0x78>)
  403828:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40382a:	4b1a      	ldr	r3, [pc, #104]	; (403894 <xTaskRemoveFromEventList+0x7c>)
  40382c:	681b      	ldr	r3, [r3, #0]
  40382e:	bb3b      	cbnz	r3, 403880 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403830:	1d25      	adds	r5, r4, #4
  403832:	4628      	mov	r0, r5
  403834:	4b16      	ldr	r3, [pc, #88]	; (403890 <xTaskRemoveFromEventList+0x78>)
  403836:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40383a:	4a17      	ldr	r2, [pc, #92]	; (403898 <xTaskRemoveFromEventList+0x80>)
  40383c:	6811      	ldr	r1, [r2, #0]
  40383e:	2301      	movs	r3, #1
  403840:	4083      	lsls	r3, r0
  403842:	430b      	orrs	r3, r1
  403844:	6013      	str	r3, [r2, #0]
  403846:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40384a:	4629      	mov	r1, r5
  40384c:	4b13      	ldr	r3, [pc, #76]	; (40389c <xTaskRemoveFromEventList+0x84>)
  40384e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403852:	4b13      	ldr	r3, [pc, #76]	; (4038a0 <xTaskRemoveFromEventList+0x88>)
  403854:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  403856:	4b13      	ldr	r3, [pc, #76]	; (4038a4 <xTaskRemoveFromEventList+0x8c>)
  403858:	681b      	ldr	r3, [r3, #0]
  40385a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40385e:	429a      	cmp	r2, r3
  403860:	d913      	bls.n	40388a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  403862:	2001      	movs	r0, #1
  403864:	4b10      	ldr	r3, [pc, #64]	; (4038a8 <xTaskRemoveFromEventList+0x90>)
  403866:	6018      	str	r0, [r3, #0]
  403868:	bd38      	pop	{r3, r4, r5, pc}
  40386a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40386e:	b672      	cpsid	i
  403870:	f383 8811 	msr	BASEPRI, r3
  403874:	f3bf 8f6f 	isb	sy
  403878:	f3bf 8f4f 	dsb	sy
  40387c:	b662      	cpsie	i
  40387e:	e7fe      	b.n	40387e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  403880:	4629      	mov	r1, r5
  403882:	480a      	ldr	r0, [pc, #40]	; (4038ac <xTaskRemoveFromEventList+0x94>)
  403884:	4b06      	ldr	r3, [pc, #24]	; (4038a0 <xTaskRemoveFromEventList+0x88>)
  403886:	4798      	blx	r3
  403888:	e7e5      	b.n	403856 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40388a:	2000      	movs	r0, #0
}
  40388c:	bd38      	pop	{r3, r4, r5, pc}
  40388e:	bf00      	nop
  403890:	00402359 	.word	0x00402359
  403894:	2040c87c 	.word	0x2040c87c
  403898:	2040c888 	.word	0x2040c888
  40389c:	2040c810 	.word	0x2040c810
  4038a0:	0040230d 	.word	0x0040230d
  4038a4:	2040c804 	.word	0x2040c804
  4038a8:	2040c900 	.word	0x2040c900
  4038ac:	2040c8bc 	.word	0x2040c8bc

004038b0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4038b0:	b130      	cbz	r0, 4038c0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4038b2:	4a09      	ldr	r2, [pc, #36]	; (4038d8 <vTaskSetTimeOutState+0x28>)
  4038b4:	6812      	ldr	r2, [r2, #0]
  4038b6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4038b8:	4a08      	ldr	r2, [pc, #32]	; (4038dc <vTaskSetTimeOutState+0x2c>)
  4038ba:	6812      	ldr	r2, [r2, #0]
  4038bc:	6042      	str	r2, [r0, #4]
  4038be:	4770      	bx	lr
  4038c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038c4:	b672      	cpsid	i
  4038c6:	f383 8811 	msr	BASEPRI, r3
  4038ca:	f3bf 8f6f 	isb	sy
  4038ce:	f3bf 8f4f 	dsb	sy
  4038d2:	b662      	cpsie	i
  4038d4:	e7fe      	b.n	4038d4 <vTaskSetTimeOutState+0x24>
  4038d6:	bf00      	nop
  4038d8:	2040c8b8 	.word	0x2040c8b8
  4038dc:	2040c8fc 	.word	0x2040c8fc

004038e0 <xTaskCheckForTimeOut>:
{
  4038e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4038e2:	b1c0      	cbz	r0, 403916 <xTaskCheckForTimeOut+0x36>
  4038e4:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4038e6:	b309      	cbz	r1, 40392c <xTaskCheckForTimeOut+0x4c>
  4038e8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4038ea:	4b1d      	ldr	r3, [pc, #116]	; (403960 <xTaskCheckForTimeOut+0x80>)
  4038ec:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4038ee:	4b1d      	ldr	r3, [pc, #116]	; (403964 <xTaskCheckForTimeOut+0x84>)
  4038f0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4038f2:	682b      	ldr	r3, [r5, #0]
  4038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4038f8:	d02e      	beq.n	403958 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4038fa:	491b      	ldr	r1, [pc, #108]	; (403968 <xTaskCheckForTimeOut+0x88>)
  4038fc:	6809      	ldr	r1, [r1, #0]
  4038fe:	6820      	ldr	r0, [r4, #0]
  403900:	4288      	cmp	r0, r1
  403902:	d002      	beq.n	40390a <xTaskCheckForTimeOut+0x2a>
  403904:	6861      	ldr	r1, [r4, #4]
  403906:	428a      	cmp	r2, r1
  403908:	d228      	bcs.n	40395c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40390a:	6861      	ldr	r1, [r4, #4]
  40390c:	1a50      	subs	r0, r2, r1
  40390e:	4283      	cmp	r3, r0
  403910:	d817      	bhi.n	403942 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403912:	2401      	movs	r4, #1
  403914:	e01c      	b.n	403950 <xTaskCheckForTimeOut+0x70>
  403916:	f04f 0380 	mov.w	r3, #128	; 0x80
  40391a:	b672      	cpsid	i
  40391c:	f383 8811 	msr	BASEPRI, r3
  403920:	f3bf 8f6f 	isb	sy
  403924:	f3bf 8f4f 	dsb	sy
  403928:	b662      	cpsie	i
  40392a:	e7fe      	b.n	40392a <xTaskCheckForTimeOut+0x4a>
  40392c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403930:	b672      	cpsid	i
  403932:	f383 8811 	msr	BASEPRI, r3
  403936:	f3bf 8f6f 	isb	sy
  40393a:	f3bf 8f4f 	dsb	sy
  40393e:	b662      	cpsie	i
  403940:	e7fe      	b.n	403940 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  403942:	1a9b      	subs	r3, r3, r2
  403944:	440b      	add	r3, r1
  403946:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403948:	4620      	mov	r0, r4
  40394a:	4b08      	ldr	r3, [pc, #32]	; (40396c <xTaskCheckForTimeOut+0x8c>)
  40394c:	4798      	blx	r3
			xReturn = pdFALSE;
  40394e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403950:	4b07      	ldr	r3, [pc, #28]	; (403970 <xTaskCheckForTimeOut+0x90>)
  403952:	4798      	blx	r3
}
  403954:	4620      	mov	r0, r4
  403956:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403958:	2400      	movs	r4, #0
  40395a:	e7f9      	b.n	403950 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  40395c:	2401      	movs	r4, #1
  40395e:	e7f7      	b.n	403950 <xTaskCheckForTimeOut+0x70>
  403960:	0040243d 	.word	0x0040243d
  403964:	2040c8fc 	.word	0x2040c8fc
  403968:	2040c8b8 	.word	0x2040c8b8
  40396c:	004038b1 	.word	0x004038b1
  403970:	00402489 	.word	0x00402489

00403974 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  403974:	2201      	movs	r2, #1
  403976:	4b01      	ldr	r3, [pc, #4]	; (40397c <vTaskMissedYield+0x8>)
  403978:	601a      	str	r2, [r3, #0]
  40397a:	4770      	bx	lr
  40397c:	2040c900 	.word	0x2040c900

00403980 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  403980:	4b05      	ldr	r3, [pc, #20]	; (403998 <xTaskGetSchedulerState+0x18>)
  403982:	681b      	ldr	r3, [r3, #0]
  403984:	b133      	cbz	r3, 403994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403986:	4b05      	ldr	r3, [pc, #20]	; (40399c <xTaskGetSchedulerState+0x1c>)
  403988:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40398a:	2b00      	cmp	r3, #0
  40398c:	bf0c      	ite	eq
  40398e:	2002      	moveq	r0, #2
  403990:	2000      	movne	r0, #0
  403992:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  403994:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  403996:	4770      	bx	lr
  403998:	2040c8d0 	.word	0x2040c8d0
  40399c:	2040c87c 	.word	0x2040c87c

004039a0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4039a0:	2800      	cmp	r0, #0
  4039a2:	d044      	beq.n	403a2e <vTaskPriorityInherit+0x8e>
	{
  4039a4:	b538      	push	{r3, r4, r5, lr}
  4039a6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4039a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4039aa:	4921      	ldr	r1, [pc, #132]	; (403a30 <vTaskPriorityInherit+0x90>)
  4039ac:	6809      	ldr	r1, [r1, #0]
  4039ae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4039b0:	428a      	cmp	r2, r1
  4039b2:	d214      	bcs.n	4039de <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4039b4:	6981      	ldr	r1, [r0, #24]
  4039b6:	2900      	cmp	r1, #0
  4039b8:	db05      	blt.n	4039c6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4039ba:	491d      	ldr	r1, [pc, #116]	; (403a30 <vTaskPriorityInherit+0x90>)
  4039bc:	6809      	ldr	r1, [r1, #0]
  4039be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4039c0:	f1c1 0105 	rsb	r1, r1, #5
  4039c4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4039c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4039ca:	491a      	ldr	r1, [pc, #104]	; (403a34 <vTaskPriorityInherit+0x94>)
  4039cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4039d0:	6961      	ldr	r1, [r4, #20]
  4039d2:	4291      	cmp	r1, r2
  4039d4:	d004      	beq.n	4039e0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4039d6:	4a16      	ldr	r2, [pc, #88]	; (403a30 <vTaskPriorityInherit+0x90>)
  4039d8:	6812      	ldr	r2, [r2, #0]
  4039da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4039dc:	62e2      	str	r2, [r4, #44]	; 0x2c
  4039de:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4039e0:	1d25      	adds	r5, r4, #4
  4039e2:	4628      	mov	r0, r5
  4039e4:	4b14      	ldr	r3, [pc, #80]	; (403a38 <vTaskPriorityInherit+0x98>)
  4039e6:	4798      	blx	r3
  4039e8:	b970      	cbnz	r0, 403a08 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4039ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4039ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4039f0:	4a10      	ldr	r2, [pc, #64]	; (403a34 <vTaskPriorityInherit+0x94>)
  4039f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4039f6:	b93a      	cbnz	r2, 403a08 <vTaskPriorityInherit+0x68>
  4039f8:	4810      	ldr	r0, [pc, #64]	; (403a3c <vTaskPriorityInherit+0x9c>)
  4039fa:	6802      	ldr	r2, [r0, #0]
  4039fc:	2101      	movs	r1, #1
  4039fe:	fa01 f303 	lsl.w	r3, r1, r3
  403a02:	ea22 0303 	bic.w	r3, r2, r3
  403a06:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403a08:	4b09      	ldr	r3, [pc, #36]	; (403a30 <vTaskPriorityInherit+0x90>)
  403a0a:	681b      	ldr	r3, [r3, #0]
  403a0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  403a0e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403a10:	4a0a      	ldr	r2, [pc, #40]	; (403a3c <vTaskPriorityInherit+0x9c>)
  403a12:	6811      	ldr	r1, [r2, #0]
  403a14:	2301      	movs	r3, #1
  403a16:	4083      	lsls	r3, r0
  403a18:	430b      	orrs	r3, r1
  403a1a:	6013      	str	r3, [r2, #0]
  403a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403a20:	4629      	mov	r1, r5
  403a22:	4b04      	ldr	r3, [pc, #16]	; (403a34 <vTaskPriorityInherit+0x94>)
  403a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403a28:	4b05      	ldr	r3, [pc, #20]	; (403a40 <vTaskPriorityInherit+0xa0>)
  403a2a:	4798      	blx	r3
  403a2c:	bd38      	pop	{r3, r4, r5, pc}
  403a2e:	4770      	bx	lr
  403a30:	2040c804 	.word	0x2040c804
  403a34:	2040c810 	.word	0x2040c810
  403a38:	00402359 	.word	0x00402359
  403a3c:	2040c888 	.word	0x2040c888
  403a40:	0040230d 	.word	0x0040230d

00403a44 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403a44:	2800      	cmp	r0, #0
  403a46:	d04d      	beq.n	403ae4 <xTaskPriorityDisinherit+0xa0>
	{
  403a48:	b538      	push	{r3, r4, r5, lr}
  403a4a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403a4c:	4a27      	ldr	r2, [pc, #156]	; (403aec <xTaskPriorityDisinherit+0xa8>)
  403a4e:	6812      	ldr	r2, [r2, #0]
  403a50:	4290      	cmp	r0, r2
  403a52:	d00a      	beq.n	403a6a <xTaskPriorityDisinherit+0x26>
  403a54:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a58:	b672      	cpsid	i
  403a5a:	f383 8811 	msr	BASEPRI, r3
  403a5e:	f3bf 8f6f 	isb	sy
  403a62:	f3bf 8f4f 	dsb	sy
  403a66:	b662      	cpsie	i
  403a68:	e7fe      	b.n	403a68 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  403a6a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403a6c:	b952      	cbnz	r2, 403a84 <xTaskPriorityDisinherit+0x40>
  403a6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a72:	b672      	cpsid	i
  403a74:	f383 8811 	msr	BASEPRI, r3
  403a78:	f3bf 8f6f 	isb	sy
  403a7c:	f3bf 8f4f 	dsb	sy
  403a80:	b662      	cpsie	i
  403a82:	e7fe      	b.n	403a82 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403a84:	3a01      	subs	r2, #1
  403a86:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  403a88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403a8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403a8c:	4288      	cmp	r0, r1
  403a8e:	d02b      	beq.n	403ae8 <xTaskPriorityDisinherit+0xa4>
  403a90:	bb52      	cbnz	r2, 403ae8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403a92:	1d25      	adds	r5, r4, #4
  403a94:	4628      	mov	r0, r5
  403a96:	4b16      	ldr	r3, [pc, #88]	; (403af0 <xTaskPriorityDisinherit+0xac>)
  403a98:	4798      	blx	r3
  403a9a:	b968      	cbnz	r0, 403ab8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403a9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403a9e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403aa2:	4b14      	ldr	r3, [pc, #80]	; (403af4 <xTaskPriorityDisinherit+0xb0>)
  403aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403aa8:	b933      	cbnz	r3, 403ab8 <xTaskPriorityDisinherit+0x74>
  403aaa:	4813      	ldr	r0, [pc, #76]	; (403af8 <xTaskPriorityDisinherit+0xb4>)
  403aac:	6803      	ldr	r3, [r0, #0]
  403aae:	2201      	movs	r2, #1
  403ab0:	408a      	lsls	r2, r1
  403ab2:	ea23 0302 	bic.w	r3, r3, r2
  403ab6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403ab8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403aba:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403abc:	f1c0 0305 	rsb	r3, r0, #5
  403ac0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403ac2:	4a0d      	ldr	r2, [pc, #52]	; (403af8 <xTaskPriorityDisinherit+0xb4>)
  403ac4:	6811      	ldr	r1, [r2, #0]
  403ac6:	2401      	movs	r4, #1
  403ac8:	fa04 f300 	lsl.w	r3, r4, r0
  403acc:	430b      	orrs	r3, r1
  403ace:	6013      	str	r3, [r2, #0]
  403ad0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403ad4:	4629      	mov	r1, r5
  403ad6:	4b07      	ldr	r3, [pc, #28]	; (403af4 <xTaskPriorityDisinherit+0xb0>)
  403ad8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403adc:	4b07      	ldr	r3, [pc, #28]	; (403afc <xTaskPriorityDisinherit+0xb8>)
  403ade:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403ae0:	4620      	mov	r0, r4
  403ae2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403ae4:	2000      	movs	r0, #0
  403ae6:	4770      	bx	lr
  403ae8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403aea:	bd38      	pop	{r3, r4, r5, pc}
  403aec:	2040c804 	.word	0x2040c804
  403af0:	00402359 	.word	0x00402359
  403af4:	2040c810 	.word	0x2040c810
  403af8:	2040c888 	.word	0x2040c888
  403afc:	0040230d 	.word	0x0040230d

00403b00 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403b00:	4b05      	ldr	r3, [pc, #20]	; (403b18 <pvTaskIncrementMutexHeldCount+0x18>)
  403b02:	681b      	ldr	r3, [r3, #0]
  403b04:	b123      	cbz	r3, 403b10 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403b06:	4b04      	ldr	r3, [pc, #16]	; (403b18 <pvTaskIncrementMutexHeldCount+0x18>)
  403b08:	681a      	ldr	r2, [r3, #0]
  403b0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403b0c:	3301      	adds	r3, #1
  403b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403b10:	4b01      	ldr	r3, [pc, #4]	; (403b18 <pvTaskIncrementMutexHeldCount+0x18>)
  403b12:	6818      	ldr	r0, [r3, #0]
	}
  403b14:	4770      	bx	lr
  403b16:	bf00      	nop
  403b18:	2040c804 	.word	0x2040c804

00403b1c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403b1c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  403b1e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403b20:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403b22:	4291      	cmp	r1, r2
  403b24:	d80c      	bhi.n	403b40 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403b26:	1ad2      	subs	r2, r2, r3
  403b28:	6983      	ldr	r3, [r0, #24]
  403b2a:	429a      	cmp	r2, r3
  403b2c:	d301      	bcc.n	403b32 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  403b2e:	2001      	movs	r0, #1
  403b30:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403b32:	1d01      	adds	r1, r0, #4
  403b34:	4b09      	ldr	r3, [pc, #36]	; (403b5c <prvInsertTimerInActiveList+0x40>)
  403b36:	6818      	ldr	r0, [r3, #0]
  403b38:	4b09      	ldr	r3, [pc, #36]	; (403b60 <prvInsertTimerInActiveList+0x44>)
  403b3a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403b3c:	2000      	movs	r0, #0
  403b3e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403b40:	429a      	cmp	r2, r3
  403b42:	d203      	bcs.n	403b4c <prvInsertTimerInActiveList+0x30>
  403b44:	4299      	cmp	r1, r3
  403b46:	d301      	bcc.n	403b4c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403b48:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  403b4a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403b4c:	1d01      	adds	r1, r0, #4
  403b4e:	4b05      	ldr	r3, [pc, #20]	; (403b64 <prvInsertTimerInActiveList+0x48>)
  403b50:	6818      	ldr	r0, [r3, #0]
  403b52:	4b03      	ldr	r3, [pc, #12]	; (403b60 <prvInsertTimerInActiveList+0x44>)
  403b54:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403b56:	2000      	movs	r0, #0
  403b58:	bd08      	pop	{r3, pc}
  403b5a:	bf00      	nop
  403b5c:	2040c908 	.word	0x2040c908
  403b60:	00402325 	.word	0x00402325
  403b64:	2040c904 	.word	0x2040c904

00403b68 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403b68:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403b6a:	4b15      	ldr	r3, [pc, #84]	; (403bc0 <prvCheckForValidListAndQueue+0x58>)
  403b6c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  403b6e:	4b15      	ldr	r3, [pc, #84]	; (403bc4 <prvCheckForValidListAndQueue+0x5c>)
  403b70:	681b      	ldr	r3, [r3, #0]
  403b72:	b113      	cbz	r3, 403b7a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  403b74:	4b14      	ldr	r3, [pc, #80]	; (403bc8 <prvCheckForValidListAndQueue+0x60>)
  403b76:	4798      	blx	r3
  403b78:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  403b7a:	4d14      	ldr	r5, [pc, #80]	; (403bcc <prvCheckForValidListAndQueue+0x64>)
  403b7c:	4628      	mov	r0, r5
  403b7e:	4e14      	ldr	r6, [pc, #80]	; (403bd0 <prvCheckForValidListAndQueue+0x68>)
  403b80:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  403b82:	4c14      	ldr	r4, [pc, #80]	; (403bd4 <prvCheckForValidListAndQueue+0x6c>)
  403b84:	4620      	mov	r0, r4
  403b86:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403b88:	4b13      	ldr	r3, [pc, #76]	; (403bd8 <prvCheckForValidListAndQueue+0x70>)
  403b8a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403b8c:	4b13      	ldr	r3, [pc, #76]	; (403bdc <prvCheckForValidListAndQueue+0x74>)
  403b8e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  403b90:	2200      	movs	r2, #0
  403b92:	2110      	movs	r1, #16
  403b94:	2005      	movs	r0, #5
  403b96:	4b12      	ldr	r3, [pc, #72]	; (403be0 <prvCheckForValidListAndQueue+0x78>)
  403b98:	4798      	blx	r3
  403b9a:	4b0a      	ldr	r3, [pc, #40]	; (403bc4 <prvCheckForValidListAndQueue+0x5c>)
  403b9c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  403b9e:	b118      	cbz	r0, 403ba8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403ba0:	4910      	ldr	r1, [pc, #64]	; (403be4 <prvCheckForValidListAndQueue+0x7c>)
  403ba2:	4b11      	ldr	r3, [pc, #68]	; (403be8 <prvCheckForValidListAndQueue+0x80>)
  403ba4:	4798      	blx	r3
  403ba6:	e7e5      	b.n	403b74 <prvCheckForValidListAndQueue+0xc>
  403ba8:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bac:	b672      	cpsid	i
  403bae:	f383 8811 	msr	BASEPRI, r3
  403bb2:	f3bf 8f6f 	isb	sy
  403bb6:	f3bf 8f4f 	dsb	sy
  403bba:	b662      	cpsie	i
  403bbc:	e7fe      	b.n	403bbc <prvCheckForValidListAndQueue+0x54>
  403bbe:	bf00      	nop
  403bc0:	0040243d 	.word	0x0040243d
  403bc4:	2040c938 	.word	0x2040c938
  403bc8:	00402489 	.word	0x00402489
  403bcc:	2040c90c 	.word	0x2040c90c
  403bd0:	004022f1 	.word	0x004022f1
  403bd4:	2040c920 	.word	0x2040c920
  403bd8:	2040c904 	.word	0x2040c904
  403bdc:	2040c908 	.word	0x2040c908
  403be0:	00402995 	.word	0x00402995
  403be4:	00407b80 	.word	0x00407b80
  403be8:	00402ec5 	.word	0x00402ec5

00403bec <xTimerCreateTimerTask>:
{
  403bec:	b510      	push	{r4, lr}
  403bee:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403bf0:	4b0f      	ldr	r3, [pc, #60]	; (403c30 <xTimerCreateTimerTask+0x44>)
  403bf2:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403bf4:	4b0f      	ldr	r3, [pc, #60]	; (403c34 <xTimerCreateTimerTask+0x48>)
  403bf6:	681b      	ldr	r3, [r3, #0]
  403bf8:	b173      	cbz	r3, 403c18 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403bfa:	2300      	movs	r3, #0
  403bfc:	9303      	str	r3, [sp, #12]
  403bfe:	9302      	str	r3, [sp, #8]
  403c00:	9301      	str	r3, [sp, #4]
  403c02:	2204      	movs	r2, #4
  403c04:	9200      	str	r2, [sp, #0]
  403c06:	f44f 7282 	mov.w	r2, #260	; 0x104
  403c0a:	490b      	ldr	r1, [pc, #44]	; (403c38 <xTimerCreateTimerTask+0x4c>)
  403c0c:	480b      	ldr	r0, [pc, #44]	; (403c3c <xTimerCreateTimerTask+0x50>)
  403c0e:	4c0c      	ldr	r4, [pc, #48]	; (403c40 <xTimerCreateTimerTask+0x54>)
  403c10:	47a0      	blx	r4
	configASSERT( xReturn );
  403c12:	b108      	cbz	r0, 403c18 <xTimerCreateTimerTask+0x2c>
}
  403c14:	b004      	add	sp, #16
  403c16:	bd10      	pop	{r4, pc}
  403c18:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c1c:	b672      	cpsid	i
  403c1e:	f383 8811 	msr	BASEPRI, r3
  403c22:	f3bf 8f6f 	isb	sy
  403c26:	f3bf 8f4f 	dsb	sy
  403c2a:	b662      	cpsie	i
  403c2c:	e7fe      	b.n	403c2c <xTimerCreateTimerTask+0x40>
  403c2e:	bf00      	nop
  403c30:	00403b69 	.word	0x00403b69
  403c34:	2040c938 	.word	0x2040c938
  403c38:	00407b88 	.word	0x00407b88
  403c3c:	00403d6d 	.word	0x00403d6d
  403c40:	00402fd5 	.word	0x00402fd5

00403c44 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403c44:	b1d8      	cbz	r0, 403c7e <xTimerGenericCommand+0x3a>
{
  403c46:	b530      	push	{r4, r5, lr}
  403c48:	b085      	sub	sp, #20
  403c4a:	4615      	mov	r5, r2
  403c4c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  403c4e:	4a15      	ldr	r2, [pc, #84]	; (403ca4 <xTimerGenericCommand+0x60>)
  403c50:	6810      	ldr	r0, [r2, #0]
  403c52:	b320      	cbz	r0, 403c9e <xTimerGenericCommand+0x5a>
  403c54:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403c56:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403c58:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403c5a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403c5c:	2905      	cmp	r1, #5
  403c5e:	dc19      	bgt.n	403c94 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403c60:	4b11      	ldr	r3, [pc, #68]	; (403ca8 <xTimerGenericCommand+0x64>)
  403c62:	4798      	blx	r3
  403c64:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403c66:	f04f 0300 	mov.w	r3, #0
  403c6a:	bf0c      	ite	eq
  403c6c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403c6e:	461a      	movne	r2, r3
  403c70:	4669      	mov	r1, sp
  403c72:	480c      	ldr	r0, [pc, #48]	; (403ca4 <xTimerGenericCommand+0x60>)
  403c74:	6800      	ldr	r0, [r0, #0]
  403c76:	4c0d      	ldr	r4, [pc, #52]	; (403cac <xTimerGenericCommand+0x68>)
  403c78:	47a0      	blx	r4
}
  403c7a:	b005      	add	sp, #20
  403c7c:	bd30      	pop	{r4, r5, pc}
  403c7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c82:	b672      	cpsid	i
  403c84:	f383 8811 	msr	BASEPRI, r3
  403c88:	f3bf 8f6f 	isb	sy
  403c8c:	f3bf 8f4f 	dsb	sy
  403c90:	b662      	cpsie	i
  403c92:	e7fe      	b.n	403c92 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403c94:	2300      	movs	r3, #0
  403c96:	4669      	mov	r1, sp
  403c98:	4c05      	ldr	r4, [pc, #20]	; (403cb0 <xTimerGenericCommand+0x6c>)
  403c9a:	47a0      	blx	r4
  403c9c:	e7ed      	b.n	403c7a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  403c9e:	2000      	movs	r0, #0
	return xReturn;
  403ca0:	e7eb      	b.n	403c7a <xTimerGenericCommand+0x36>
  403ca2:	bf00      	nop
  403ca4:	2040c938 	.word	0x2040c938
  403ca8:	00403981 	.word	0x00403981
  403cac:	00402a11 	.word	0x00402a11
  403cb0:	00402bf5 	.word	0x00402bf5

00403cb4 <prvSampleTimeNow>:
{
  403cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403cb8:	b082      	sub	sp, #8
  403cba:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403cbc:	4b24      	ldr	r3, [pc, #144]	; (403d50 <prvSampleTimeNow+0x9c>)
  403cbe:	4798      	blx	r3
  403cc0:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403cc2:	4b24      	ldr	r3, [pc, #144]	; (403d54 <prvSampleTimeNow+0xa0>)
  403cc4:	681b      	ldr	r3, [r3, #0]
  403cc6:	4298      	cmp	r0, r3
  403cc8:	d31b      	bcc.n	403d02 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403cca:	2300      	movs	r3, #0
  403ccc:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403cd0:	4b20      	ldr	r3, [pc, #128]	; (403d54 <prvSampleTimeNow+0xa0>)
  403cd2:	601f      	str	r7, [r3, #0]
}
  403cd4:	4638      	mov	r0, r7
  403cd6:	b002      	add	sp, #8
  403cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403cdc:	2100      	movs	r1, #0
  403cde:	9100      	str	r1, [sp, #0]
  403ce0:	460b      	mov	r3, r1
  403ce2:	4652      	mov	r2, sl
  403ce4:	4620      	mov	r0, r4
  403ce6:	4c1c      	ldr	r4, [pc, #112]	; (403d58 <prvSampleTimeNow+0xa4>)
  403ce8:	47a0      	blx	r4
				configASSERT( xResult );
  403cea:	b960      	cbnz	r0, 403d06 <prvSampleTimeNow+0x52>
  403cec:	f04f 0380 	mov.w	r3, #128	; 0x80
  403cf0:	b672      	cpsid	i
  403cf2:	f383 8811 	msr	BASEPRI, r3
  403cf6:	f3bf 8f6f 	isb	sy
  403cfa:	f3bf 8f4f 	dsb	sy
  403cfe:	b662      	cpsie	i
  403d00:	e7fe      	b.n	403d00 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403d02:	4d16      	ldr	r5, [pc, #88]	; (403d5c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403d04:	4e16      	ldr	r6, [pc, #88]	; (403d60 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403d06:	682b      	ldr	r3, [r5, #0]
  403d08:	681a      	ldr	r2, [r3, #0]
  403d0a:	b1c2      	cbz	r2, 403d3e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403d0c:	68db      	ldr	r3, [r3, #12]
  403d0e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403d12:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403d14:	f104 0904 	add.w	r9, r4, #4
  403d18:	4648      	mov	r0, r9
  403d1a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d1e:	4620      	mov	r0, r4
  403d20:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403d22:	69e3      	ldr	r3, [r4, #28]
  403d24:	2b01      	cmp	r3, #1
  403d26:	d1ee      	bne.n	403d06 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403d28:	69a3      	ldr	r3, [r4, #24]
  403d2a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403d2c:	459a      	cmp	sl, r3
  403d2e:	d2d5      	bcs.n	403cdc <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403d30:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403d32:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403d34:	4649      	mov	r1, r9
  403d36:	6828      	ldr	r0, [r5, #0]
  403d38:	4b0a      	ldr	r3, [pc, #40]	; (403d64 <prvSampleTimeNow+0xb0>)
  403d3a:	4798      	blx	r3
  403d3c:	e7e3      	b.n	403d06 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  403d3e:	4a0a      	ldr	r2, [pc, #40]	; (403d68 <prvSampleTimeNow+0xb4>)
  403d40:	6810      	ldr	r0, [r2, #0]
  403d42:	4906      	ldr	r1, [pc, #24]	; (403d5c <prvSampleTimeNow+0xa8>)
  403d44:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403d46:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403d48:	2301      	movs	r3, #1
  403d4a:	f8c8 3000 	str.w	r3, [r8]
  403d4e:	e7bf      	b.n	403cd0 <prvSampleTimeNow+0x1c>
  403d50:	004032a5 	.word	0x004032a5
  403d54:	2040c934 	.word	0x2040c934
  403d58:	00403c45 	.word	0x00403c45
  403d5c:	2040c904 	.word	0x2040c904
  403d60:	00402359 	.word	0x00402359
  403d64:	00402325 	.word	0x00402325
  403d68:	2040c908 	.word	0x2040c908

00403d6c <prvTimerTask>:
{
  403d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d70:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403d72:	4e75      	ldr	r6, [pc, #468]	; (403f48 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403d74:	4f75      	ldr	r7, [pc, #468]	; (403f4c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403d76:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403f74 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403d7a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403f78 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403d7e:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  403d80:	681a      	ldr	r2, [r3, #0]
  403d82:	2a00      	cmp	r2, #0
  403d84:	f000 80ce 	beq.w	403f24 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403d88:	68db      	ldr	r3, [r3, #12]
  403d8a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403d8c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403d8e:	a804      	add	r0, sp, #16
  403d90:	4b6f      	ldr	r3, [pc, #444]	; (403f50 <prvTimerTask+0x1e4>)
  403d92:	4798      	blx	r3
  403d94:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403d96:	9b04      	ldr	r3, [sp, #16]
  403d98:	2b00      	cmp	r3, #0
  403d9a:	d144      	bne.n	403e26 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403d9c:	42a0      	cmp	r0, r4
  403d9e:	d212      	bcs.n	403dc6 <prvTimerTask+0x5a>
  403da0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403da2:	1b61      	subs	r1, r4, r5
  403da4:	4b6b      	ldr	r3, [pc, #428]	; (403f54 <prvTimerTask+0x1e8>)
  403da6:	6818      	ldr	r0, [r3, #0]
  403da8:	4b6b      	ldr	r3, [pc, #428]	; (403f58 <prvTimerTask+0x1ec>)
  403daa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403dac:	4b6b      	ldr	r3, [pc, #428]	; (403f5c <prvTimerTask+0x1f0>)
  403dae:	4798      	blx	r3
  403db0:	2800      	cmp	r0, #0
  403db2:	d13a      	bne.n	403e2a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403db8:	f8c9 3000 	str.w	r3, [r9]
  403dbc:	f3bf 8f4f 	dsb	sy
  403dc0:	f3bf 8f6f 	isb	sy
  403dc4:	e031      	b.n	403e2a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403dc6:	4b65      	ldr	r3, [pc, #404]	; (403f5c <prvTimerTask+0x1f0>)
  403dc8:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403dca:	6833      	ldr	r3, [r6, #0]
  403dcc:	68db      	ldr	r3, [r3, #12]
  403dce:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403dd2:	f10a 0004 	add.w	r0, sl, #4
  403dd6:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403dd8:	f8da 301c 	ldr.w	r3, [sl, #28]
  403ddc:	2b01      	cmp	r3, #1
  403dde:	d004      	beq.n	403dea <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403de0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403de4:	4650      	mov	r0, sl
  403de6:	4798      	blx	r3
  403de8:	e01f      	b.n	403e2a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403dea:	f8da 1018 	ldr.w	r1, [sl, #24]
  403dee:	4623      	mov	r3, r4
  403df0:	462a      	mov	r2, r5
  403df2:	4421      	add	r1, r4
  403df4:	4650      	mov	r0, sl
  403df6:	4d5a      	ldr	r5, [pc, #360]	; (403f60 <prvTimerTask+0x1f4>)
  403df8:	47a8      	blx	r5
  403dfa:	2801      	cmp	r0, #1
  403dfc:	d1f0      	bne.n	403de0 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403dfe:	2100      	movs	r1, #0
  403e00:	9100      	str	r1, [sp, #0]
  403e02:	460b      	mov	r3, r1
  403e04:	4622      	mov	r2, r4
  403e06:	4650      	mov	r0, sl
  403e08:	4c56      	ldr	r4, [pc, #344]	; (403f64 <prvTimerTask+0x1f8>)
  403e0a:	47a0      	blx	r4
			configASSERT( xResult );
  403e0c:	2800      	cmp	r0, #0
  403e0e:	d1e7      	bne.n	403de0 <prvTimerTask+0x74>
  403e10:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e14:	b672      	cpsid	i
  403e16:	f383 8811 	msr	BASEPRI, r3
  403e1a:	f3bf 8f6f 	isb	sy
  403e1e:	f3bf 8f4f 	dsb	sy
  403e22:	b662      	cpsie	i
  403e24:	e7fe      	b.n	403e24 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403e26:	4b4d      	ldr	r3, [pc, #308]	; (403f5c <prvTimerTask+0x1f0>)
  403e28:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403e2a:	4d4a      	ldr	r5, [pc, #296]	; (403f54 <prvTimerTask+0x1e8>)
  403e2c:	4c4e      	ldr	r4, [pc, #312]	; (403f68 <prvTimerTask+0x1fc>)
  403e2e:	e006      	b.n	403e3e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403e30:	9907      	ldr	r1, [sp, #28]
  403e32:	9806      	ldr	r0, [sp, #24]
  403e34:	9b05      	ldr	r3, [sp, #20]
  403e36:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403e38:	9b04      	ldr	r3, [sp, #16]
  403e3a:	2b00      	cmp	r3, #0
  403e3c:	da09      	bge.n	403e52 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403e3e:	2300      	movs	r3, #0
  403e40:	461a      	mov	r2, r3
  403e42:	a904      	add	r1, sp, #16
  403e44:	6828      	ldr	r0, [r5, #0]
  403e46:	47a0      	blx	r4
  403e48:	2800      	cmp	r0, #0
  403e4a:	d098      	beq.n	403d7e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403e4c:	9b04      	ldr	r3, [sp, #16]
  403e4e:	2b00      	cmp	r3, #0
  403e50:	dbee      	blt.n	403e30 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403e52:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403e56:	f8da 3014 	ldr.w	r3, [sl, #20]
  403e5a:	b113      	cbz	r3, 403e62 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403e5c:	f10a 0004 	add.w	r0, sl, #4
  403e60:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403e62:	a803      	add	r0, sp, #12
  403e64:	4b3a      	ldr	r3, [pc, #232]	; (403f50 <prvTimerTask+0x1e4>)
  403e66:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403e68:	9b04      	ldr	r3, [sp, #16]
  403e6a:	2b09      	cmp	r3, #9
  403e6c:	d8e7      	bhi.n	403e3e <prvTimerTask+0xd2>
  403e6e:	a201      	add	r2, pc, #4	; (adr r2, 403e74 <prvTimerTask+0x108>)
  403e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403e74:	00403e9d 	.word	0x00403e9d
  403e78:	00403e9d 	.word	0x00403e9d
  403e7c:	00403e9d 	.word	0x00403e9d
  403e80:	00403e3f 	.word	0x00403e3f
  403e84:	00403ef1 	.word	0x00403ef1
  403e88:	00403f1d 	.word	0x00403f1d
  403e8c:	00403e9d 	.word	0x00403e9d
  403e90:	00403e9d 	.word	0x00403e9d
  403e94:	00403e3f 	.word	0x00403e3f
  403e98:	00403ef1 	.word	0x00403ef1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403e9c:	9c05      	ldr	r4, [sp, #20]
  403e9e:	f8da 1018 	ldr.w	r1, [sl, #24]
  403ea2:	4623      	mov	r3, r4
  403ea4:	4602      	mov	r2, r0
  403ea6:	4421      	add	r1, r4
  403ea8:	4650      	mov	r0, sl
  403eaa:	4c2d      	ldr	r4, [pc, #180]	; (403f60 <prvTimerTask+0x1f4>)
  403eac:	47a0      	blx	r4
  403eae:	2801      	cmp	r0, #1
  403eb0:	d1bc      	bne.n	403e2c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403eb2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403eb6:	4650      	mov	r0, sl
  403eb8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403eba:	f8da 301c 	ldr.w	r3, [sl, #28]
  403ebe:	2b01      	cmp	r3, #1
  403ec0:	d1b4      	bne.n	403e2c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403ec2:	f8da 2018 	ldr.w	r2, [sl, #24]
  403ec6:	2100      	movs	r1, #0
  403ec8:	9100      	str	r1, [sp, #0]
  403eca:	460b      	mov	r3, r1
  403ecc:	9805      	ldr	r0, [sp, #20]
  403ece:	4402      	add	r2, r0
  403ed0:	4650      	mov	r0, sl
  403ed2:	4c24      	ldr	r4, [pc, #144]	; (403f64 <prvTimerTask+0x1f8>)
  403ed4:	47a0      	blx	r4
							configASSERT( xResult );
  403ed6:	2800      	cmp	r0, #0
  403ed8:	d1a8      	bne.n	403e2c <prvTimerTask+0xc0>
  403eda:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ede:	b672      	cpsid	i
  403ee0:	f383 8811 	msr	BASEPRI, r3
  403ee4:	f3bf 8f6f 	isb	sy
  403ee8:	f3bf 8f4f 	dsb	sy
  403eec:	b662      	cpsie	i
  403eee:	e7fe      	b.n	403eee <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403ef0:	9905      	ldr	r1, [sp, #20]
  403ef2:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403ef6:	b131      	cbz	r1, 403f06 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403ef8:	4603      	mov	r3, r0
  403efa:	4602      	mov	r2, r0
  403efc:	4401      	add	r1, r0
  403efe:	4650      	mov	r0, sl
  403f00:	4c17      	ldr	r4, [pc, #92]	; (403f60 <prvTimerTask+0x1f4>)
  403f02:	47a0      	blx	r4
  403f04:	e792      	b.n	403e2c <prvTimerTask+0xc0>
  403f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  403f0a:	b672      	cpsid	i
  403f0c:	f383 8811 	msr	BASEPRI, r3
  403f10:	f3bf 8f6f 	isb	sy
  403f14:	f3bf 8f4f 	dsb	sy
  403f18:	b662      	cpsie	i
  403f1a:	e7fe      	b.n	403f1a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403f1c:	4650      	mov	r0, sl
  403f1e:	4b13      	ldr	r3, [pc, #76]	; (403f6c <prvTimerTask+0x200>)
  403f20:	4798      	blx	r3
  403f22:	e783      	b.n	403e2c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403f24:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403f26:	a804      	add	r0, sp, #16
  403f28:	4b09      	ldr	r3, [pc, #36]	; (403f50 <prvTimerTask+0x1e4>)
  403f2a:	4798      	blx	r3
  403f2c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403f2e:	9b04      	ldr	r3, [sp, #16]
  403f30:	2b00      	cmp	r3, #0
  403f32:	f47f af78 	bne.w	403e26 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403f36:	4b0e      	ldr	r3, [pc, #56]	; (403f70 <prvTimerTask+0x204>)
  403f38:	681b      	ldr	r3, [r3, #0]
  403f3a:	681a      	ldr	r2, [r3, #0]
  403f3c:	fab2 f282 	clz	r2, r2
  403f40:	0952      	lsrs	r2, r2, #5
  403f42:	2400      	movs	r4, #0
  403f44:	e72d      	b.n	403da2 <prvTimerTask+0x36>
  403f46:	bf00      	nop
  403f48:	2040c904 	.word	0x2040c904
  403f4c:	00403295 	.word	0x00403295
  403f50:	00403cb5 	.word	0x00403cb5
  403f54:	2040c938 	.word	0x2040c938
  403f58:	00402ef9 	.word	0x00402ef9
  403f5c:	004033fd 	.word	0x004033fd
  403f60:	00403b1d 	.word	0x00403b1d
  403f64:	00403c45 	.word	0x00403c45
  403f68:	00402cf5 	.word	0x00402cf5
  403f6c:	00402709 	.word	0x00402709
  403f70:	2040c908 	.word	0x2040c908
  403f74:	e000ed04 	.word	0xe000ed04
  403f78:	00402359 	.word	0x00402359

00403f7c <AFEC_pot_Callback>:
  /* Selecina canal e inicializa conversão */
  afec_channel_enable(AFEC_POT, AFEC_POT_CHANNEL);
  afec_start_software_conversion(AFEC_POT);
}

static void AFEC_pot_Callback(void){
  403f7c:	b510      	push	{r4, lr}
  403f7e:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  403f80:	4b07      	ldr	r3, [pc, #28]	; (403fa0 <AFEC_pot_Callback+0x24>)
  403f82:	2206      	movs	r2, #6
  403f84:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  adcData adc;
  adc.value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  403f88:	9301      	str	r3, [sp, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403f8a:	2300      	movs	r3, #0
  403f8c:	aa02      	add	r2, sp, #8
  403f8e:	f842 3d08 	str.w	r3, [r2, #-8]!
  xQueueSendFromISR(xQueueADC, &adc, &xHigherPriorityTaskWoken);
  403f92:	a901      	add	r1, sp, #4
  403f94:	4803      	ldr	r0, [pc, #12]	; (403fa4 <AFEC_pot_Callback+0x28>)
  403f96:	6800      	ldr	r0, [r0, #0]
  403f98:	4c03      	ldr	r4, [pc, #12]	; (403fa8 <AFEC_pot_Callback+0x2c>)
  403f9a:	47a0      	blx	r4
}
  403f9c:	b002      	add	sp, #8
  403f9e:	bd10      	pop	{r4, pc}
  403fa0:	40064000 	.word	0x40064000
  403fa4:	2040ca48 	.word	0x2040ca48
  403fa8:	00402bf5 	.word	0x00402bf5

00403fac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  403fae:	b083      	sub	sp, #12
  403fb0:	4605      	mov	r5, r0
  403fb2:	460c      	mov	r4, r1
	uint32_t val = 0;
  403fb4:	2300      	movs	r3, #0
  403fb6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403fb8:	4b2a      	ldr	r3, [pc, #168]	; (404064 <usart_serial_getchar+0xb8>)
  403fba:	4298      	cmp	r0, r3
  403fbc:	d013      	beq.n	403fe6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403fbe:	4b2a      	ldr	r3, [pc, #168]	; (404068 <usart_serial_getchar+0xbc>)
  403fc0:	4298      	cmp	r0, r3
  403fc2:	d018      	beq.n	403ff6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403fc4:	4b29      	ldr	r3, [pc, #164]	; (40406c <usart_serial_getchar+0xc0>)
  403fc6:	4298      	cmp	r0, r3
  403fc8:	d01d      	beq.n	404006 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403fca:	4b29      	ldr	r3, [pc, #164]	; (404070 <usart_serial_getchar+0xc4>)
  403fcc:	429d      	cmp	r5, r3
  403fce:	d022      	beq.n	404016 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403fd0:	4b28      	ldr	r3, [pc, #160]	; (404074 <usart_serial_getchar+0xc8>)
  403fd2:	429d      	cmp	r5, r3
  403fd4:	d027      	beq.n	404026 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403fd6:	4b28      	ldr	r3, [pc, #160]	; (404078 <usart_serial_getchar+0xcc>)
  403fd8:	429d      	cmp	r5, r3
  403fda:	d02e      	beq.n	40403a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403fdc:	4b27      	ldr	r3, [pc, #156]	; (40407c <usart_serial_getchar+0xd0>)
  403fde:	429d      	cmp	r5, r3
  403fe0:	d035      	beq.n	40404e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403fe2:	b003      	add	sp, #12
  403fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403fe6:	461f      	mov	r7, r3
  403fe8:	4e25      	ldr	r6, [pc, #148]	; (404080 <usart_serial_getchar+0xd4>)
  403fea:	4621      	mov	r1, r4
  403fec:	4638      	mov	r0, r7
  403fee:	47b0      	blx	r6
  403ff0:	2800      	cmp	r0, #0
  403ff2:	d1fa      	bne.n	403fea <usart_serial_getchar+0x3e>
  403ff4:	e7e9      	b.n	403fca <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403ff6:	461f      	mov	r7, r3
  403ff8:	4e21      	ldr	r6, [pc, #132]	; (404080 <usart_serial_getchar+0xd4>)
  403ffa:	4621      	mov	r1, r4
  403ffc:	4638      	mov	r0, r7
  403ffe:	47b0      	blx	r6
  404000:	2800      	cmp	r0, #0
  404002:	d1fa      	bne.n	403ffa <usart_serial_getchar+0x4e>
  404004:	e7e4      	b.n	403fd0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  404006:	461f      	mov	r7, r3
  404008:	4e1d      	ldr	r6, [pc, #116]	; (404080 <usart_serial_getchar+0xd4>)
  40400a:	4621      	mov	r1, r4
  40400c:	4638      	mov	r0, r7
  40400e:	47b0      	blx	r6
  404010:	2800      	cmp	r0, #0
  404012:	d1fa      	bne.n	40400a <usart_serial_getchar+0x5e>
  404014:	e7df      	b.n	403fd6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  404016:	461f      	mov	r7, r3
  404018:	4e19      	ldr	r6, [pc, #100]	; (404080 <usart_serial_getchar+0xd4>)
  40401a:	4621      	mov	r1, r4
  40401c:	4638      	mov	r0, r7
  40401e:	47b0      	blx	r6
  404020:	2800      	cmp	r0, #0
  404022:	d1fa      	bne.n	40401a <usart_serial_getchar+0x6e>
  404024:	e7da      	b.n	403fdc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  404026:	461e      	mov	r6, r3
  404028:	4d16      	ldr	r5, [pc, #88]	; (404084 <usart_serial_getchar+0xd8>)
  40402a:	a901      	add	r1, sp, #4
  40402c:	4630      	mov	r0, r6
  40402e:	47a8      	blx	r5
  404030:	2800      	cmp	r0, #0
  404032:	d1fa      	bne.n	40402a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404034:	9b01      	ldr	r3, [sp, #4]
  404036:	7023      	strb	r3, [r4, #0]
  404038:	e7d3      	b.n	403fe2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40403a:	461e      	mov	r6, r3
  40403c:	4d11      	ldr	r5, [pc, #68]	; (404084 <usart_serial_getchar+0xd8>)
  40403e:	a901      	add	r1, sp, #4
  404040:	4630      	mov	r0, r6
  404042:	47a8      	blx	r5
  404044:	2800      	cmp	r0, #0
  404046:	d1fa      	bne.n	40403e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  404048:	9b01      	ldr	r3, [sp, #4]
  40404a:	7023      	strb	r3, [r4, #0]
  40404c:	e7c9      	b.n	403fe2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40404e:	461e      	mov	r6, r3
  404050:	4d0c      	ldr	r5, [pc, #48]	; (404084 <usart_serial_getchar+0xd8>)
  404052:	a901      	add	r1, sp, #4
  404054:	4630      	mov	r0, r6
  404056:	47a8      	blx	r5
  404058:	2800      	cmp	r0, #0
  40405a:	d1fa      	bne.n	404052 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40405c:	9b01      	ldr	r3, [sp, #4]
  40405e:	7023      	strb	r3, [r4, #0]
}
  404060:	e7bf      	b.n	403fe2 <usart_serial_getchar+0x36>
  404062:	bf00      	nop
  404064:	400e0800 	.word	0x400e0800
  404068:	400e0a00 	.word	0x400e0a00
  40406c:	400e1a00 	.word	0x400e1a00
  404070:	400e1c00 	.word	0x400e1c00
  404074:	40024000 	.word	0x40024000
  404078:	40028000 	.word	0x40028000
  40407c:	4002c000 	.word	0x4002c000
  404080:	00401f1b 	.word	0x00401f1b
  404084:	00402027 	.word	0x00402027

00404088 <usart_serial_putchar>:
{
  404088:	b570      	push	{r4, r5, r6, lr}
  40408a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40408c:	4b2a      	ldr	r3, [pc, #168]	; (404138 <usart_serial_putchar+0xb0>)
  40408e:	4298      	cmp	r0, r3
  404090:	d013      	beq.n	4040ba <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  404092:	4b2a      	ldr	r3, [pc, #168]	; (40413c <usart_serial_putchar+0xb4>)
  404094:	4298      	cmp	r0, r3
  404096:	d019      	beq.n	4040cc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  404098:	4b29      	ldr	r3, [pc, #164]	; (404140 <usart_serial_putchar+0xb8>)
  40409a:	4298      	cmp	r0, r3
  40409c:	d01f      	beq.n	4040de <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40409e:	4b29      	ldr	r3, [pc, #164]	; (404144 <usart_serial_putchar+0xbc>)
  4040a0:	4298      	cmp	r0, r3
  4040a2:	d025      	beq.n	4040f0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4040a4:	4b28      	ldr	r3, [pc, #160]	; (404148 <usart_serial_putchar+0xc0>)
  4040a6:	4298      	cmp	r0, r3
  4040a8:	d02b      	beq.n	404102 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4040aa:	4b28      	ldr	r3, [pc, #160]	; (40414c <usart_serial_putchar+0xc4>)
  4040ac:	4298      	cmp	r0, r3
  4040ae:	d031      	beq.n	404114 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4040b0:	4b27      	ldr	r3, [pc, #156]	; (404150 <usart_serial_putchar+0xc8>)
  4040b2:	4298      	cmp	r0, r3
  4040b4:	d037      	beq.n	404126 <usart_serial_putchar+0x9e>
	return 0;
  4040b6:	2000      	movs	r0, #0
}
  4040b8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040ba:	461e      	mov	r6, r3
  4040bc:	4d25      	ldr	r5, [pc, #148]	; (404154 <usart_serial_putchar+0xcc>)
  4040be:	4621      	mov	r1, r4
  4040c0:	4630      	mov	r0, r6
  4040c2:	47a8      	blx	r5
  4040c4:	2800      	cmp	r0, #0
  4040c6:	d1fa      	bne.n	4040be <usart_serial_putchar+0x36>
		return 1;
  4040c8:	2001      	movs	r0, #1
  4040ca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040cc:	461e      	mov	r6, r3
  4040ce:	4d21      	ldr	r5, [pc, #132]	; (404154 <usart_serial_putchar+0xcc>)
  4040d0:	4621      	mov	r1, r4
  4040d2:	4630      	mov	r0, r6
  4040d4:	47a8      	blx	r5
  4040d6:	2800      	cmp	r0, #0
  4040d8:	d1fa      	bne.n	4040d0 <usart_serial_putchar+0x48>
		return 1;
  4040da:	2001      	movs	r0, #1
  4040dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040de:	461e      	mov	r6, r3
  4040e0:	4d1c      	ldr	r5, [pc, #112]	; (404154 <usart_serial_putchar+0xcc>)
  4040e2:	4621      	mov	r1, r4
  4040e4:	4630      	mov	r0, r6
  4040e6:	47a8      	blx	r5
  4040e8:	2800      	cmp	r0, #0
  4040ea:	d1fa      	bne.n	4040e2 <usart_serial_putchar+0x5a>
		return 1;
  4040ec:	2001      	movs	r0, #1
  4040ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040f0:	461e      	mov	r6, r3
  4040f2:	4d18      	ldr	r5, [pc, #96]	; (404154 <usart_serial_putchar+0xcc>)
  4040f4:	4621      	mov	r1, r4
  4040f6:	4630      	mov	r0, r6
  4040f8:	47a8      	blx	r5
  4040fa:	2800      	cmp	r0, #0
  4040fc:	d1fa      	bne.n	4040f4 <usart_serial_putchar+0x6c>
		return 1;
  4040fe:	2001      	movs	r0, #1
  404100:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404102:	461e      	mov	r6, r3
  404104:	4d14      	ldr	r5, [pc, #80]	; (404158 <usart_serial_putchar+0xd0>)
  404106:	4621      	mov	r1, r4
  404108:	4630      	mov	r0, r6
  40410a:	47a8      	blx	r5
  40410c:	2800      	cmp	r0, #0
  40410e:	d1fa      	bne.n	404106 <usart_serial_putchar+0x7e>
		return 1;
  404110:	2001      	movs	r0, #1
  404112:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404114:	461e      	mov	r6, r3
  404116:	4d10      	ldr	r5, [pc, #64]	; (404158 <usart_serial_putchar+0xd0>)
  404118:	4621      	mov	r1, r4
  40411a:	4630      	mov	r0, r6
  40411c:	47a8      	blx	r5
  40411e:	2800      	cmp	r0, #0
  404120:	d1fa      	bne.n	404118 <usart_serial_putchar+0x90>
		return 1;
  404122:	2001      	movs	r0, #1
  404124:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404126:	461e      	mov	r6, r3
  404128:	4d0b      	ldr	r5, [pc, #44]	; (404158 <usart_serial_putchar+0xd0>)
  40412a:	4621      	mov	r1, r4
  40412c:	4630      	mov	r0, r6
  40412e:	47a8      	blx	r5
  404130:	2800      	cmp	r0, #0
  404132:	d1fa      	bne.n	40412a <usart_serial_putchar+0xa2>
		return 1;
  404134:	2001      	movs	r0, #1
  404136:	bd70      	pop	{r4, r5, r6, pc}
  404138:	400e0800 	.word	0x400e0800
  40413c:	400e0a00 	.word	0x400e0a00
  404140:	400e1a00 	.word	0x400e1a00
  404144:	400e1c00 	.word	0x400e1c00
  404148:	40024000 	.word	0x40024000
  40414c:	40028000 	.word	0x40028000
  404150:	4002c000 	.word	0x4002c000
  404154:	00401f09 	.word	0x00401f09
  404158:	00402011 	.word	0x00402011

0040415c <TC1_Handler>:
void TC1_Handler(void){
  40415c:	b500      	push	{lr}
  40415e:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 1);
  404160:	2101      	movs	r1, #1
  404162:	4806      	ldr	r0, [pc, #24]	; (40417c <TC1_Handler+0x20>)
  404164:	4b06      	ldr	r3, [pc, #24]	; (404180 <TC1_Handler+0x24>)
  404166:	4798      	blx	r3
  404168:	9001      	str	r0, [sp, #4]
  UNUSED(ul_dummy);
  40416a:	9b01      	ldr	r3, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40416c:	4b05      	ldr	r3, [pc, #20]	; (404184 <TC1_Handler+0x28>)
  40416e:	2240      	movs	r2, #64	; 0x40
  404170:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  404172:	2202      	movs	r2, #2
  404174:	601a      	str	r2, [r3, #0]
}
  404176:	b003      	add	sp, #12
  404178:	f85d fb04 	ldr.w	pc, [sp], #4
  40417c:	4000c000 	.word	0x4000c000
  404180:	00400507 	.word	0x00400507
  404184:	40064000 	.word	0x40064000

00404188 <vApplicationStackOverflowHook>:
/**
* \brief Called if stack overflow during execution
*/
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
signed char *pcTaskName)
{
  404188:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40418a:	460a      	mov	r2, r1
  40418c:	4601      	mov	r1, r0
  40418e:	4802      	ldr	r0, [pc, #8]	; (404198 <vApplicationStackOverflowHook+0x10>)
  404190:	4b02      	ldr	r3, [pc, #8]	; (40419c <vApplicationStackOverflowHook+0x14>)
  404192:	4798      	blx	r3
  404194:	e7fe      	b.n	404194 <vApplicationStackOverflowHook+0xc>
  404196:	bf00      	nop
  404198:	00407c18 	.word	0x00407c18
  40419c:	00404bc5 	.word	0x00404bc5

004041a0 <vApplicationTickHook>:

/**
* \brief This function is called by FreeRTOS each tick
*/
extern void vApplicationTickHook(void)
{
  4041a0:	4770      	bx	lr

004041a2 <vApplicationMallocFailedHook>:
  4041a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4041a6:	b672      	cpsid	i
  4041a8:	f383 8811 	msr	BASEPRI, r3
  4041ac:	f3bf 8f6f 	isb	sy
  4041b0:	f3bf 8f4f 	dsb	sy
  4041b4:	b662      	cpsie	i
  4041b6:	e7fe      	b.n	4041b6 <vApplicationMallocFailedHook+0x14>

004041b8 <draw_screen>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void draw_screen(void) {
  4041b8:	b510      	push	{r4, lr}
  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4041ba:	4806      	ldr	r0, [pc, #24]	; (4041d4 <draw_screen+0x1c>)
  4041bc:	4b06      	ldr	r3, [pc, #24]	; (4041d8 <draw_screen+0x20>)
  4041be:	4798      	blx	r3
  ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4041c0:	f240 133f 	movw	r3, #319	; 0x13f
  4041c4:	f240 12df 	movw	r2, #479	; 0x1df
  4041c8:	2100      	movs	r1, #0
  4041ca:	4608      	mov	r0, r1
  4041cc:	4c03      	ldr	r4, [pc, #12]	; (4041dc <draw_screen+0x24>)
  4041ce:	47a0      	blx	r4
  4041d0:	bd10      	pop	{r4, pc}
  4041d2:	bf00      	nop
  4041d4:	00fcfcfc 	.word	0x00fcfcfc
  4041d8:	004012c5 	.word	0x004012c5
  4041dc:	00401515 	.word	0x00401515

004041e0 <task_lcd>:
    }
    vTaskDelay(100);
  }
}

void task_lcd(void){
  4041e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4041e4:	b085      	sub	sp, #20
  xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  4041e6:	2200      	movs	r2, #0
  4041e8:	2108      	movs	r1, #8
  4041ea:	200a      	movs	r0, #10
  4041ec:	4c28      	ldr	r4, [pc, #160]	; (404290 <task_lcd+0xb0>)
  4041ee:	47a0      	blx	r4
  4041f0:	4b28      	ldr	r3, [pc, #160]	; (404294 <task_lcd+0xb4>)
  4041f2:	6018      	str	r0, [r3, #0]
  xQueuePlot = xQueueCreate( 10, sizeof( t_plot ) );
  4041f4:	2200      	movs	r2, #0
  4041f6:	2108      	movs	r1, #8
  4041f8:	200a      	movs	r0, #10
  4041fa:	47a0      	blx	r4
  4041fc:	4b26      	ldr	r3, [pc, #152]	; (404298 <task_lcd+0xb8>)
  4041fe:	6018      	str	r0, [r3, #0]
  g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  404200:	4826      	ldr	r0, [pc, #152]	; (40429c <task_lcd+0xbc>)
  404202:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  404206:	6003      	str	r3, [r0, #0]
  g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  404208:	f44f 73a0 	mov.w	r3, #320	; 0x140
  40420c:	6043      	str	r3, [r0, #4]
  g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  40420e:	4b24      	ldr	r3, [pc, #144]	; (4042a0 <task_lcd+0xc0>)
  404210:	6083      	str	r3, [r0, #8]
  g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  404212:	60c3      	str	r3, [r0, #12]
  ili9488_init(&g_ili9488_display_opt);
  404214:	4b23      	ldr	r3, [pc, #140]	; (4042a4 <task_lcd+0xc4>)
  404216:	4798      	blx	r3
  ili9488_set_display_direction(PORTRAIT);
  404218:	2001      	movs	r0, #1
  40421a:	4b23      	ldr	r3, [pc, #140]	; (4042a8 <task_lcd+0xc8>)
  40421c:	4798      	blx	r3

  // inicializa LCD e pinta de branco
  configure_lcd();
  draw_screen();
  40421e:	4b23      	ldr	r3, [pc, #140]	; (4042ac <task_lcd+0xcc>)
  404220:	4798      	blx	r3
  // strut local para armazenar msg enviada pela task do mxt
  touchData touch;
  t_plot plot;
  
  char buffer[64];
  int x = 0;
  404222:	f04f 0800 	mov.w	r8, #0

  while (true) {
    if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  0 / portTICK_PERIOD_MS)) {
  404226:	4f1b      	ldr	r7, [pc, #108]	; (404294 <task_lcd+0xb4>)
  404228:	4d21      	ldr	r5, [pc, #132]	; (4042b0 <task_lcd+0xd0>)
      //printf("Touch em: x:%d y:%d\n", touch.x, touch.y);
    }
    
    if (xQueueReceive( xQueuePlot, &(plot), ( TickType_t )  100 / portTICK_PERIOD_MS)) {     
  40422a:	4e1b      	ldr	r6, [pc, #108]	; (404298 <task_lcd+0xb8>)
  40422c:	e007      	b.n	40423e <task_lcd+0x5e>
		  //plot_filtrado
		  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_RED));
		  ili9488_draw_filled_circle(x, ILI9488_LCD_HEIGHT - plot.filtrado / 16, 2 );
	  }else{
		  x = 0;
		  draw_screen();
  40422e:	4b1f      	ldr	r3, [pc, #124]	; (4042ac <task_lcd+0xcc>)
  404230:	4798      	blx	r3
		  x = 0;
  404232:	f04f 0800 	mov.w	r8, #0
	  }
      printf("%d\n",plot.raw); //printa no terminal o valor de plo.raw
  404236:	9900      	ldr	r1, [sp, #0]
  404238:	481e      	ldr	r0, [pc, #120]	; (4042b4 <task_lcd+0xd4>)
  40423a:	4b1f      	ldr	r3, [pc, #124]	; (4042b8 <task_lcd+0xd8>)
  40423c:	4798      	blx	r3
    if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  0 / portTICK_PERIOD_MS)) {
  40423e:	2400      	movs	r4, #0
  404240:	4623      	mov	r3, r4
  404242:	4622      	mov	r2, r4
  404244:	a902      	add	r1, sp, #8
  404246:	6838      	ldr	r0, [r7, #0]
  404248:	47a8      	blx	r5
    if (xQueueReceive( xQueuePlot, &(plot), ( TickType_t )  100 / portTICK_PERIOD_MS)) {     
  40424a:	4623      	mov	r3, r4
  40424c:	2264      	movs	r2, #100	; 0x64
  40424e:	4669      	mov	r1, sp
  404250:	6830      	ldr	r0, [r6, #0]
  404252:	47a8      	blx	r5
  404254:	2800      	cmp	r0, #0
  404256:	d0f3      	beq.n	404240 <task_lcd+0x60>
      if(x <= ILI9488_LCD_WIDTH){
  404258:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
  40425c:	dce7      	bgt.n	40422e <task_lcd+0x4e>
	      x = x + 5;
  40425e:	f108 0805 	add.w	r8, r8, #5
	      ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  404262:	2000      	movs	r0, #0
  404264:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4042c0 <task_lcd+0xe0>
  404268:	47c8      	blx	r9
	      ili9488_draw_filled_circle(x, ILI9488_LCD_HEIGHT - plot.raw / 16, 2 );
  40426a:	9900      	ldr	r1, [sp, #0]
  40426c:	0909      	lsrs	r1, r1, #4
  40426e:	2202      	movs	r2, #2
  404270:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
  404274:	4640      	mov	r0, r8
  404276:	4c11      	ldr	r4, [pc, #68]	; (4042bc <task_lcd+0xdc>)
  404278:	47a0      	blx	r4
		  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_RED));
  40427a:	f44f 007c 	mov.w	r0, #16515072	; 0xfc0000
  40427e:	47c8      	blx	r9
		  ili9488_draw_filled_circle(x, ILI9488_LCD_HEIGHT - plot.filtrado / 16, 2 );
  404280:	9901      	ldr	r1, [sp, #4]
  404282:	0909      	lsrs	r1, r1, #4
  404284:	2202      	movs	r2, #2
  404286:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
  40428a:	4640      	mov	r0, r8
  40428c:	47a0      	blx	r4
  40428e:	e7d2      	b.n	404236 <task_lcd+0x56>
  404290:	00402995 	.word	0x00402995
  404294:	2040ca5c 	.word	0x2040ca5c
  404298:	2040ca44 	.word	0x2040ca44
  40429c:	2040ca4c 	.word	0x2040ca4c
  4042a0:	00fcfcfc 	.word	0x00fcfcfc
  4042a4:	00401351 	.word	0x00401351
  4042a8:	00401205 	.word	0x00401205
  4042ac:	004041b9 	.word	0x004041b9
  4042b0:	00402cf5 	.word	0x00402cf5
  4042b4:	00407c14 	.word	0x00407c14
  4042b8:	00404bc5 	.word	0x00404bc5
  4042bc:	004015d1 	.word	0x004015d1
  4042c0:	004012c5 	.word	0x004012c5

004042c4 <mxt_handler>:
{
  4042c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4042c8:	b084      	sub	sp, #16
  4042ca:	4605      	mov	r5, r0
  4042cc:	4689      	mov	r9, r1
  4042ce:	4690      	mov	r8, r2
  uint first = 0;
  4042d0:	f04f 0a00 	mov.w	sl, #0
  uint8_t i = 0; /* Iterator */
  4042d4:	4654      	mov	r4, sl
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  4042d6:	4f15      	ldr	r7, [pc, #84]	; (40432c <mxt_handler+0x68>)
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  4042d8:	4e15      	ldr	r6, [pc, #84]	; (404330 <mxt_handler+0x6c>)
  4042da:	e008      	b.n	4042ee <mxt_handler+0x2a>
    i++;
  4042dc:	3401      	adds	r4, #1
  4042de:	b2e4      	uxtb	r4, r4
  4042e0:	f04f 0a01 	mov.w	sl, #1
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  4042e4:	4628      	mov	r0, r5
  4042e6:	47b0      	blx	r6
  4042e8:	2c02      	cmp	r4, #2
  4042ea:	d81b      	bhi.n	404324 <mxt_handler+0x60>
  4042ec:	b1d0      	cbz	r0, 404324 <mxt_handler+0x60>
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  4042ee:	a901      	add	r1, sp, #4
  4042f0:	4628      	mov	r0, r5
  4042f2:	47b8      	blx	r7
  4042f4:	2800      	cmp	r0, #0
  4042f6:	d1f5      	bne.n	4042e4 <mxt_handler+0x20>
    if(first == 0 ){
  4042f8:	f1ba 0f00 	cmp.w	sl, #0
  4042fc:	d1ee      	bne.n	4042dc <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  4042fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  404302:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  404306:	f3c3 13d3 	ubfx	r3, r3, #7, #20
  40430a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
      *x = convert_axis_system_x(touch_event.y);
  40430e:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  404312:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  return ILI9488_LCD_HEIGHT*touch_x/4096;
  404316:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40431a:	f3c3 1393 	ubfx	r3, r3, #6, #20
      *y = convert_axis_system_y(touch_event.x);
  40431e:	f8c8 3000 	str.w	r3, [r8]
  404322:	e7db      	b.n	4042dc <mxt_handler+0x18>
}
  404324:	b004      	add	sp, #16
  404326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40432a:	bf00      	nop
  40432c:	00400ae5 	.word	0x00400ae5
  404330:	00400a75 	.word	0x00400a75

00404334 <task_mxt>:
void task_mxt(void){
  404334:	b580      	push	{r7, lr}
  404336:	b08a      	sub	sp, #40	; 0x28
  mxt_init(&device);       	/* Initialize the mXT touch device */
  404338:	a802      	add	r0, sp, #8
  40433a:	4b0c      	ldr	r3, [pc, #48]	; (40436c <task_mxt+0x38>)
  40433c:	4798      	blx	r3
    if (mxt_is_message_pending(&device)) {
  40433e:	4c0c      	ldr	r4, [pc, #48]	; (404370 <task_mxt+0x3c>)
      mxt_handler(&device, &touch.x, &touch.y);
  404340:	4f0c      	ldr	r7, [pc, #48]	; (404374 <task_mxt+0x40>)
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  404342:	4e0d      	ldr	r6, [pc, #52]	; (404378 <task_mxt+0x44>)
  404344:	e002      	b.n	40434c <task_mxt+0x18>
    vTaskDelay(100);
  404346:	2064      	movs	r0, #100	; 0x64
  404348:	4b0c      	ldr	r3, [pc, #48]	; (40437c <task_mxt+0x48>)
  40434a:	4798      	blx	r3
    if (mxt_is_message_pending(&device)) {
  40434c:	a802      	add	r0, sp, #8
  40434e:	47a0      	blx	r4
  404350:	2800      	cmp	r0, #0
  404352:	d0f8      	beq.n	404346 <task_mxt+0x12>
      mxt_handler(&device, &touch.x, &touch.y);
  404354:	aa01      	add	r2, sp, #4
  404356:	4669      	mov	r1, sp
  404358:	a802      	add	r0, sp, #8
  40435a:	47b8      	blx	r7
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  40435c:	2300      	movs	r3, #0
  40435e:	461a      	mov	r2, r3
  404360:	4669      	mov	r1, sp
  404362:	6830      	ldr	r0, [r6, #0]
  404364:	4d06      	ldr	r5, [pc, #24]	; (404380 <task_mxt+0x4c>)
  404366:	47a8      	blx	r5
  404368:	e7ed      	b.n	404346 <task_mxt+0x12>
  40436a:	bf00      	nop
  40436c:	00400581 	.word	0x00400581
  404370:	00400a75 	.word	0x00400a75
  404374:	004042c5 	.word	0x004042c5
  404378:	2040ca5c 	.word	0x2040ca5c
  40437c:	0040351d 	.word	0x0040351d
  404380:	00402a11 	.word	0x00402a11

00404384 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  404384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404388:	b085      	sub	sp, #20
  40438a:	4606      	mov	r6, r0
  40438c:	460c      	mov	r4, r1
  40438e:	4617      	mov	r7, r2
  404390:	4698      	mov	r8, r3
  pmc_enable_periph_clk(ID_TC);
  404392:	4608      	mov	r0, r1
  404394:	4b1e      	ldr	r3, [pc, #120]	; (404410 <TC_init+0x8c>)
  404396:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  404398:	4d1e      	ldr	r5, [pc, #120]	; (404414 <TC_init+0x90>)
  40439a:	9500      	str	r5, [sp, #0]
  40439c:	ab02      	add	r3, sp, #8
  40439e:	aa03      	add	r2, sp, #12
  4043a0:	4629      	mov	r1, r5
  4043a2:	4640      	mov	r0, r8
  4043a4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 404434 <TC_init+0xb0>
  4043a8:	47c8      	blx	r9
  tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4043aa:	9a02      	ldr	r2, [sp, #8]
  4043ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4043b0:	4639      	mov	r1, r7
  4043b2:	4630      	mov	r0, r6
  4043b4:	4b18      	ldr	r3, [pc, #96]	; (404418 <TC_init+0x94>)
  4043b6:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4043b8:	9a03      	ldr	r2, [sp, #12]
  4043ba:	fbb5 f2f2 	udiv	r2, r5, r2
  4043be:	fbb2 f2f8 	udiv	r2, r2, r8
  4043c2:	4639      	mov	r1, r7
  4043c4:	4630      	mov	r0, r6
  4043c6:	4b15      	ldr	r3, [pc, #84]	; (40441c <TC_init+0x98>)
  4043c8:	4798      	blx	r3
  NVIC_SetPriority((IRQn_Type) ID_TC, 4);
  4043ca:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4043cc:	2b00      	cmp	r3, #0
  4043ce:	db17      	blt.n	404400 <TC_init+0x7c>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4043d0:	4a13      	ldr	r2, [pc, #76]	; (404420 <TC_init+0x9c>)
  4043d2:	2180      	movs	r1, #128	; 0x80
  4043d4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4043d6:	095b      	lsrs	r3, r3, #5
  4043d8:	f004 041f 	and.w	r4, r4, #31
  4043dc:	2201      	movs	r2, #1
  4043de:	fa02 f404 	lsl.w	r4, r2, r4
  4043e2:	4a10      	ldr	r2, [pc, #64]	; (404424 <TC_init+0xa0>)
  4043e4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4043e8:	2210      	movs	r2, #16
  4043ea:	4639      	mov	r1, r7
  4043ec:	4630      	mov	r0, r6
  4043ee:	4b0e      	ldr	r3, [pc, #56]	; (404428 <TC_init+0xa4>)
  4043f0:	4798      	blx	r3
  tc_start(TC, TC_CHANNEL);
  4043f2:	4639      	mov	r1, r7
  4043f4:	4630      	mov	r0, r6
  4043f6:	4b0d      	ldr	r3, [pc, #52]	; (40442c <TC_init+0xa8>)
  4043f8:	4798      	blx	r3
}
  4043fa:	b005      	add	sp, #20
  4043fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404400:	f004 010f 	and.w	r1, r4, #15
  404404:	4a0a      	ldr	r2, [pc, #40]	; (404430 <TC_init+0xac>)
  404406:	440a      	add	r2, r1
  404408:	2180      	movs	r1, #128	; 0x80
  40440a:	7611      	strb	r1, [r2, #24]
  40440c:	e7e3      	b.n	4043d6 <TC_init+0x52>
  40440e:	bf00      	nop
  404410:	00401b3d 	.word	0x00401b3d
  404414:	11e1a300 	.word	0x11e1a300
  404418:	004004d5 	.word	0x004004d5
  40441c:	004004f7 	.word	0x004004f7
  404420:	e000e400 	.word	0xe000e400
  404424:	e000e100 	.word	0xe000e100
  404428:	004004ff 	.word	0x004004ff
  40442c:	004004ef 	.word	0x004004ef
  404430:	e000ecfc 	.word	0xe000ecfc
  404434:	0040050f 	.word	0x0040050f

00404438 <task_adc>:

    }
  }    
}

 void task_adc(void){
  404438:	b5f0      	push	{r4, r5, r6, r7, lr}
  40443a:	b0b7      	sub	sp, #220	; 0xdc

    adcData adc;
    t_plot plot;

    xQueueADC  = xQueueCreate( 200, sizeof( adcData ) );
  40443c:	2200      	movs	r2, #0
  40443e:	2104      	movs	r1, #4
  404440:	20c8      	movs	r0, #200	; 0xc8
  404442:	4b3b      	ldr	r3, [pc, #236]	; (404530 <task_adc+0xf8>)
  404444:	4798      	blx	r3
  404446:	4b3b      	ldr	r3, [pc, #236]	; (404534 <task_adc+0xfc>)
  404448:	6018      	str	r0, [r3, #0]
  afec_enable(afec);
  40444a:	4c3b      	ldr	r4, [pc, #236]	; (404538 <task_adc+0x100>)
  40444c:	4620      	mov	r0, r4
  40444e:	4b3b      	ldr	r3, [pc, #236]	; (40453c <task_adc+0x104>)
  404450:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  404452:	a806      	add	r0, sp, #24
  404454:	4b3a      	ldr	r3, [pc, #232]	; (404540 <task_adc+0x108>)
  404456:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  404458:	a906      	add	r1, sp, #24
  40445a:	4620      	mov	r0, r4
  40445c:	4b39      	ldr	r3, [pc, #228]	; (404544 <task_adc+0x10c>)
  40445e:	4798      	blx	r3
	reg = afec->AFEC_MR;
  404460:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  404462:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  404466:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  404468:	a803      	add	r0, sp, #12
  40446a:	4b37      	ldr	r3, [pc, #220]	; (404548 <task_adc+0x110>)
  40446c:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40446e:	2600      	movs	r6, #0
  404470:	f88d 600d 	strb.w	r6, [sp, #13]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  404474:	aa03      	add	r2, sp, #12
  404476:	2106      	movs	r1, #6
  404478:	4620      	mov	r0, r4
  40447a:	4b34      	ldr	r3, [pc, #208]	; (40454c <task_adc+0x114>)
  40447c:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40447e:	2506      	movs	r5, #6
  404480:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  404482:	f44f 7300 	mov.w	r3, #512	; 0x200
  404486:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  404488:	a804      	add	r0, sp, #16
  40448a:	4b31      	ldr	r3, [pc, #196]	; (404550 <task_adc+0x118>)
  40448c:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  40448e:	a904      	add	r1, sp, #16
  404490:	4620      	mov	r0, r4
  404492:	4b30      	ldr	r3, [pc, #192]	; (404554 <task_adc+0x11c>)
  404494:	4798      	blx	r3
  afec_set_callback(afec, afec_channel,	callback, 1);
  404496:	2301      	movs	r3, #1
  404498:	4a2f      	ldr	r2, [pc, #188]	; (404558 <task_adc+0x120>)
  40449a:	4629      	mov	r1, r5
  40449c:	4620      	mov	r0, r4
  40449e:	4c2f      	ldr	r4, [pc, #188]	; (40455c <task_adc+0x124>)
  4044a0:	47a0      	blx	r4
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4044a2:	4b2f      	ldr	r3, [pc, #188]	; (404560 <task_adc+0x128>)
  4044a4:	2280      	movs	r2, #128	; 0x80
  4044a6:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4044aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4044ae:	605a      	str	r2, [r3, #4]
        
    // configura ADC e TC para controlar a leitura
    config_AFEC_pot(AFEC_POT, AFEC_POT_ID, AFEC_POT_CHANNEL, AFEC_pot_Callback);
    TC_init(TC0, ID_TC1, 1, 100);
  4044b0:	2364      	movs	r3, #100	; 0x64
  4044b2:	2201      	movs	r2, #1
  4044b4:	2118      	movs	r1, #24
  4044b6:	482b      	ldr	r0, [pc, #172]	; (404564 <task_adc+0x12c>)
  4044b8:	4c2b      	ldr	r4, [pc, #172]	; (404568 <task_adc+0x130>)
  4044ba:	47a0      	blx	r4
	/* Cria buffers para filtragem e faz a inicializacao do filtro. */
	float32_t firStateF32[BLOCK_SIZE + NUM_TAPS - 1];
	float32_t inputF32[BLOCK_SIZE + NUM_TAPS - 1];
	float32_t outputF32[BLOCK_SIZE + NUM_TAPS - 1];
	arm_fir_instance_f32 S;
	arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], BLOCK_SIZE);
  4044bc:	2301      	movs	r3, #1
  4044be:	9300      	str	r3, [sp, #0]
  4044c0:	ab27      	add	r3, sp, #156	; 0x9c
  4044c2:	4a2a      	ldr	r2, [pc, #168]	; (40456c <task_adc+0x134>)
  4044c4:	210c      	movs	r1, #12
  4044c6:	a80c      	add	r0, sp, #48	; 0x30
  4044c8:	4c29      	ldr	r4, [pc, #164]	; (404570 <task_adc+0x138>)
  4044ca:	47a0      	blx	r4
	
	int i = 0;
	
    while(1){
		
		if (xQueueReceive( xQueueADC, &(adc), 100)) {
  4044cc:	4d19      	ldr	r5, [pc, #100]	; (404534 <task_adc+0xfc>)
  4044ce:	4c29      	ldr	r4, [pc, #164]	; (404574 <task_adc+0x13c>)
			if(i <= NUM_TAPS){
				inputF32[i++] = (float) adc.value;
				} else{
				arm_fir_f32(&S, &inputF32[0], &outputF32[0], BLOCK_SIZE);
  4044d0:	4f29      	ldr	r7, [pc, #164]	; (404578 <task_adc+0x140>)
  4044d2:	e018      	b.n	404506 <task_adc+0xce>
  4044d4:	2301      	movs	r3, #1
  4044d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4044d8:	a91b      	add	r1, sp, #108	; 0x6c
  4044da:	a80c      	add	r0, sp, #48	; 0x30
  4044dc:	47b8      	blx	r7
				plot.raw = (int) inputF32[0];
  4044de:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
  4044e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4044e6:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
				plot.filtrado = (int) outputF32[0];
  4044ea:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
  4044ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4044f2:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
				xQueueSend(xQueuePlot, &plot, 0);
  4044f6:	2300      	movs	r3, #0
  4044f8:	461a      	mov	r2, r3
  4044fa:	a933      	add	r1, sp, #204	; 0xcc
  4044fc:	481f      	ldr	r0, [pc, #124]	; (40457c <task_adc+0x144>)
  4044fe:	6800      	ldr	r0, [r0, #0]
  404500:	4e1f      	ldr	r6, [pc, #124]	; (404580 <task_adc+0x148>)
  404502:	47b0      	blx	r6
				i = 0;
  404504:	2600      	movs	r6, #0
		if (xQueueReceive( xQueueADC, &(adc), 100)) {
  404506:	2300      	movs	r3, #0
  404508:	2264      	movs	r2, #100	; 0x64
  40450a:	a935      	add	r1, sp, #212	; 0xd4
  40450c:	6828      	ldr	r0, [r5, #0]
  40450e:	47a0      	blx	r4
  404510:	2800      	cmp	r0, #0
  404512:	d0f8      	beq.n	404506 <task_adc+0xce>
			if(i <= NUM_TAPS){
  404514:	2e0c      	cmp	r6, #12
  404516:	dcdd      	bgt.n	4044d4 <task_adc+0x9c>
				inputF32[i++] = (float) adc.value;
  404518:	ab36      	add	r3, sp, #216	; 0xd8
  40451a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
  40451e:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
  404522:	eef8 7a67 	vcvt.f32.u32	s15, s15
  404526:	ed43 7a1b 	vstr	s15, [r3, #-108]	; 0xffffff94
  40452a:	3601      	adds	r6, #1
  40452c:	e7eb      	b.n	404506 <task_adc+0xce>
  40452e:	bf00      	nop
  404530:	00402995 	.word	0x00402995
  404534:	2040ca48 	.word	0x2040ca48
  404538:	40064000 	.word	0x40064000
  40453c:	00400471 	.word	0x00400471
  404540:	004002a1 	.word	0x004002a1
  404544:	004002f1 	.word	0x004002f1
  404548:	004002d1 	.word	0x004002d1
  40454c:	0040025d 	.word	0x0040025d
  404550:	004002db 	.word	0x004002db
  404554:	0040028d 	.word	0x0040028d
  404558:	00403f7d 	.word	0x00403f7d
  40455c:	004003f1 	.word	0x004003f1
  404560:	e000e100 	.word	0xe000e100
  404564:	4000c000 	.word	0x4000c000
  404568:	00404385 	.word	0x00404385
  40456c:	00407b90 	.word	0x00407b90
  404570:	004046b9 	.word	0x004046b9
  404574:	00402cf5 	.word	0x00402cf5
  404578:	004046dd 	.word	0x004046dd
  40457c:	2040ca44 	.word	0x2040ca44
  404580:	00402a11 	.word	0x00402a11

00404584 <main>:
  /************************************************************************/
  /* main                                                                 */
  /************************************************************************/

  int main(void)
  {
  404584:	b500      	push	{lr}
  404586:	b08b      	sub	sp, #44	; 0x2c
      .charlength   = USART_SERIAL_CHAR_LENGTH,
      .paritytype   = USART_SERIAL_PARITY,
      .stopbits     = USART_SERIAL_STOP_BIT
    };

    sysclk_init(); /* Initialize system clocks */
  404588:	4b31      	ldr	r3, [pc, #196]	; (404650 <main+0xcc>)
  40458a:	4798      	blx	r3
    board_init();  /* Initialize board */
  40458c:	4b31      	ldr	r3, [pc, #196]	; (404654 <main+0xd0>)
  40458e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404590:	4d31      	ldr	r5, [pc, #196]	; (404658 <main+0xd4>)
  404592:	4b32      	ldr	r3, [pc, #200]	; (40465c <main+0xd8>)
  404594:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404596:	4a32      	ldr	r2, [pc, #200]	; (404660 <main+0xdc>)
  404598:	4b32      	ldr	r3, [pc, #200]	; (404664 <main+0xe0>)
  40459a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40459c:	4a32      	ldr	r2, [pc, #200]	; (404668 <main+0xe4>)
  40459e:	4b33      	ldr	r3, [pc, #204]	; (40466c <main+0xe8>)
  4045a0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4045a2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4045a6:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4045a8:	23c0      	movs	r3, #192	; 0xc0
  4045aa:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4045ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4045b0:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4045b2:	2400      	movs	r4, #0
  4045b4:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4045b6:	9408      	str	r4, [sp, #32]
  4045b8:	200e      	movs	r0, #14
  4045ba:	4b2d      	ldr	r3, [pc, #180]	; (404670 <main+0xec>)
  4045bc:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4045be:	4a2d      	ldr	r2, [pc, #180]	; (404674 <main+0xf0>)
  4045c0:	a904      	add	r1, sp, #16
  4045c2:	4628      	mov	r0, r5
  4045c4:	4b2c      	ldr	r3, [pc, #176]	; (404678 <main+0xf4>)
  4045c6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4045c8:	4628      	mov	r0, r5
  4045ca:	4b2c      	ldr	r3, [pc, #176]	; (40467c <main+0xf8>)
  4045cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4045ce:	4628      	mov	r0, r5
  4045d0:	4b2b      	ldr	r3, [pc, #172]	; (404680 <main+0xfc>)
  4045d2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4045d4:	4e2b      	ldr	r6, [pc, #172]	; (404684 <main+0x100>)
  4045d6:	6833      	ldr	r3, [r6, #0]
  4045d8:	4621      	mov	r1, r4
  4045da:	6898      	ldr	r0, [r3, #8]
  4045dc:	4d2a      	ldr	r5, [pc, #168]	; (404688 <main+0x104>)
  4045de:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4045e0:	6833      	ldr	r3, [r6, #0]
  4045e2:	4621      	mov	r1, r4
  4045e4:	6858      	ldr	r0, [r3, #4]
  4045e6:	47a8      	blx	r5
    
    /* Initialize stdio on USART */
    stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
    
    /* Create task to handler touch */
    if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  4045e8:	9403      	str	r4, [sp, #12]
  4045ea:	9402      	str	r4, [sp, #8]
  4045ec:	9401      	str	r4, [sp, #4]
  4045ee:	9400      	str	r4, [sp, #0]
  4045f0:	4623      	mov	r3, r4
  4045f2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4045f6:	4925      	ldr	r1, [pc, #148]	; (40468c <main+0x108>)
  4045f8:	4825      	ldr	r0, [pc, #148]	; (404690 <main+0x10c>)
  4045fa:	4c26      	ldr	r4, [pc, #152]	; (404694 <main+0x110>)
  4045fc:	47a0      	blx	r4
  4045fe:	2801      	cmp	r0, #1
  404600:	d002      	beq.n	404608 <main+0x84>
      printf("Failed to create test led task\r\n");
  404602:	4825      	ldr	r0, [pc, #148]	; (404698 <main+0x114>)
  404604:	4b25      	ldr	r3, [pc, #148]	; (40469c <main+0x118>)
  404606:	4798      	blx	r3
    }
    
    /* Create task to handler LCD */
    if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  404608:	2300      	movs	r3, #0
  40460a:	9303      	str	r3, [sp, #12]
  40460c:	9302      	str	r3, [sp, #8]
  40460e:	9301      	str	r3, [sp, #4]
  404610:	9300      	str	r3, [sp, #0]
  404612:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404616:	4922      	ldr	r1, [pc, #136]	; (4046a0 <main+0x11c>)
  404618:	4822      	ldr	r0, [pc, #136]	; (4046a4 <main+0x120>)
  40461a:	4c1e      	ldr	r4, [pc, #120]	; (404694 <main+0x110>)
  40461c:	47a0      	blx	r4
  40461e:	2801      	cmp	r0, #1
  404620:	d002      	beq.n	404628 <main+0xa4>
      printf("Failed to create test led task\r\n");
  404622:	481d      	ldr	r0, [pc, #116]	; (404698 <main+0x114>)
  404624:	4b1d      	ldr	r3, [pc, #116]	; (40469c <main+0x118>)
  404626:	4798      	blx	r3
    }
    
    if (xTaskCreate(task_adc, "adc", TASK_LCD_STACK_SIZE, NULL, 0, NULL) != pdPASS) {
  404628:	2300      	movs	r3, #0
  40462a:	9303      	str	r3, [sp, #12]
  40462c:	9302      	str	r3, [sp, #8]
  40462e:	9301      	str	r3, [sp, #4]
  404630:	9300      	str	r3, [sp, #0]
  404632:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404636:	491c      	ldr	r1, [pc, #112]	; (4046a8 <main+0x124>)
  404638:	481c      	ldr	r0, [pc, #112]	; (4046ac <main+0x128>)
  40463a:	4c16      	ldr	r4, [pc, #88]	; (404694 <main+0x110>)
  40463c:	47a0      	blx	r4
  40463e:	2801      	cmp	r0, #1
  404640:	d002      	beq.n	404648 <main+0xc4>
      printf("Failed to create test adc task\r\n");
  404642:	481b      	ldr	r0, [pc, #108]	; (4046b0 <main+0x12c>)
  404644:	4b15      	ldr	r3, [pc, #84]	; (40469c <main+0x118>)
  404646:	4798      	blx	r3
    }
    
    /* Start the scheduler. */
    vTaskStartScheduler();
  404648:	4b1a      	ldr	r3, [pc, #104]	; (4046b4 <main+0x130>)
  40464a:	4798      	blx	r3
  40464c:	e7fe      	b.n	40464c <main+0xc8>
  40464e:	bf00      	nop
  404650:	00400b55 	.word	0x00400b55
  404654:	00400de5 	.word	0x00400de5
  404658:	40028000 	.word	0x40028000
  40465c:	2040ca00 	.word	0x2040ca00
  404660:	00404089 	.word	0x00404089
  404664:	2040c9fc 	.word	0x2040c9fc
  404668:	00403fad 	.word	0x00403fad
  40466c:	2040c9f8 	.word	0x2040c9f8
  404670:	00401b3d 	.word	0x00401b3d
  404674:	08f0d180 	.word	0x08f0d180
  404678:	00401fb1 	.word	0x00401fb1
  40467c:	00402005 	.word	0x00402005
  404680:	0040200b 	.word	0x0040200b
  404684:	20400014 	.word	0x20400014
  404688:	00405369 	.word	0x00405369
  40468c:	00407bc0 	.word	0x00407bc0
  404690:	00404335 	.word	0x00404335
  404694:	00402fd5 	.word	0x00402fd5
  404698:	00407bc4 	.word	0x00407bc4
  40469c:	00404bc5 	.word	0x00404bc5
  4046a0:	00407be8 	.word	0x00407be8
  4046a4:	004041e1 	.word	0x004041e1
  4046a8:	00407bec 	.word	0x00407bec
  4046ac:	00404439 	.word	0x00404439
  4046b0:	00407bf0 	.word	0x00407bf0
  4046b4:	00403209 	.word	0x00403209

004046b8 <arm_fir_init_f32>:
  4046b8:	b570      	push	{r4, r5, r6, lr}
  4046ba:	9d04      	ldr	r5, [sp, #16]
  4046bc:	6082      	str	r2, [r0, #8]
  4046be:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  4046c2:	3d01      	subs	r5, #1
  4046c4:	440d      	add	r5, r1
  4046c6:	8001      	strh	r1, [r0, #0]
  4046c8:	4604      	mov	r4, r0
  4046ca:	461e      	mov	r6, r3
  4046cc:	00aa      	lsls	r2, r5, #2
  4046ce:	4618      	mov	r0, r3
  4046d0:	2100      	movs	r1, #0
  4046d2:	f000 fddd 	bl	405290 <memset>
  4046d6:	6066      	str	r6, [r4, #4]
  4046d8:	bd70      	pop	{r4, r5, r6, pc}
  4046da:	bf00      	nop

004046dc <arm_fir_f32>:
  4046dc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4046e0:	ed2d 8b0c 	vpush	{d8-d13}
  4046e4:	b08a      	sub	sp, #40	; 0x28
  4046e6:	9002      	str	r0, [sp, #8]
  4046e8:	9c02      	ldr	r4, [sp, #8]
  4046ea:	8800      	ldrh	r0, [r0, #0]
  4046ec:	f8d4 8004 	ldr.w	r8, [r4, #4]
  4046f0:	f100 4980 	add.w	r9, r0, #1073741824	; 0x40000000
  4046f4:	9001      	str	r0, [sp, #4]
  4046f6:	f109 39ff 	add.w	r9, r9, #4294967295
  4046fa:	08d8      	lsrs	r0, r3, #3
  4046fc:	9303      	str	r3, [sp, #12]
  4046fe:	eb08 0989 	add.w	r9, r8, r9, lsl #2
  404702:	f8d4 a008 	ldr.w	sl, [r4, #8]
  404706:	9004      	str	r0, [sp, #16]
  404708:	f000 81e2 	beq.w	404ad0 <arm_fir_f32+0x3f4>
  40470c:	9c01      	ldr	r4, [sp, #4]
  40470e:	f8cd 9018 	str.w	r9, [sp, #24]
  404712:	08e0      	lsrs	r0, r4, #3
  404714:	0143      	lsls	r3, r0, #5
  404716:	eb0a 0403 	add.w	r4, sl, r3
  40471a:	9400      	str	r4, [sp, #0]
  40471c:	331c      	adds	r3, #28
  40471e:	9c01      	ldr	r4, [sp, #4]
  404720:	9305      	str	r3, [sp, #20]
  404722:	9b04      	ldr	r3, [sp, #16]
  404724:	f004 0b07 	and.w	fp, r4, #7
  404728:	464c      	mov	r4, r9
  40472a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40472e:	460e      	mov	r6, r1
  404730:	f108 0c1c 	add.w	ip, r8, #28
  404734:	4647      	mov	r7, r8
  404736:	f8cd 801c 	str.w	r8, [sp, #28]
  40473a:	9108      	str	r1, [sp, #32]
  40473c:	4615      	mov	r5, r2
  40473e:	46d8      	mov	r8, fp
  404740:	4619      	mov	r1, r3
  404742:	9209      	str	r2, [sp, #36]	; 0x24
  404744:	ed9f 3ab2 	vldr	s6, [pc, #712]	; 404a10 <arm_fir_f32+0x334>
  404748:	6833      	ldr	r3, [r6, #0]
  40474a:	4662      	mov	r2, ip
  40474c:	6023      	str	r3, [r4, #0]
  40474e:	6873      	ldr	r3, [r6, #4]
  404750:	eef0 1a43 	vmov.f32	s3, s6
  404754:	6063      	str	r3, [r4, #4]
  404756:	68b3      	ldr	r3, [r6, #8]
  404758:	eeb0 1a43 	vmov.f32	s2, s6
  40475c:	60a3      	str	r3, [r4, #8]
  40475e:	68f3      	ldr	r3, [r6, #12]
  404760:	eef0 0a43 	vmov.f32	s1, s6
  404764:	60e3      	str	r3, [r4, #12]
  404766:	6933      	ldr	r3, [r6, #16]
  404768:	eeb0 0a43 	vmov.f32	s0, s6
  40476c:	6123      	str	r3, [r4, #16]
  40476e:	6973      	ldr	r3, [r6, #20]
  404770:	eeb0 8a43 	vmov.f32	s16, s6
  404774:	6163      	str	r3, [r4, #20]
  404776:	69b3      	ldr	r3, [r6, #24]
  404778:	eef0 8a43 	vmov.f32	s17, s6
  40477c:	61a3      	str	r3, [r4, #24]
  40477e:	69f3      	ldr	r3, [r6, #28]
  404780:	eeb0 9a43 	vmov.f32	s18, s6
  404784:	61e3      	str	r3, [r4, #28]
  404786:	edd7 4a00 	vldr	s9, [r7]
  40478a:	edd7 7a01 	vldr	s15, [r7, #4]
  40478e:	ed97 7a02 	vldr	s14, [r7, #8]
  404792:	edd7 6a03 	vldr	s13, [r7, #12]
  404796:	ed97 6a04 	vldr	s12, [r7, #16]
  40479a:	edd7 5a05 	vldr	s11, [r7, #20]
  40479e:	ed97 5a06 	vldr	s10, [r7, #24]
  4047a2:	2800      	cmp	r0, #0
  4047a4:	f000 81e3 	beq.w	404b6e <arm_fir_f32+0x492>
  4047a8:	4652      	mov	r2, sl
  4047aa:	4663      	mov	r3, ip
  4047ac:	4683      	mov	fp, r0
  4047ae:	ed92 2a00 	vldr	s4, [r2]
  4047b2:	edd3 3a00 	vldr	s7, [r3]
  4047b6:	edd2 2a01 	vldr	s5, [r2, #4]
  4047ba:	ee64 ca82 	vmul.f32	s25, s9, s4
  4047be:	ee67 ba82 	vmul.f32	s23, s15, s4
  4047c2:	edd3 4a01 	vldr	s9, [r3, #4]
  4047c6:	ee27 ba02 	vmul.f32	s22, s14, s4
  4047ca:	ee66 aa82 	vmul.f32	s21, s13, s4
  4047ce:	ee26 aa02 	vmul.f32	s20, s12, s4
  4047d2:	ee65 9a82 	vmul.f32	s19, s11, s4
  4047d6:	ee25 ca02 	vmul.f32	s24, s10, s4
  4047da:	ee23 4a82 	vmul.f32	s8, s7, s4
  4047de:	ee3c 9a89 	vadd.f32	s18, s25, s18
  4047e2:	ed92 2a02 	vldr	s4, [r2, #8]
  4047e6:	ee67 caa2 	vmul.f32	s25, s15, s5
  4047ea:	ee34 3a03 	vadd.f32	s6, s8, s6
  4047ee:	edd3 7a02 	vldr	s15, [r3, #8]
  4047f2:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  4047f6:	ee3b 8a08 	vadd.f32	s16, s22, s16
  4047fa:	ee67 ba22 	vmul.f32	s23, s14, s5
  4047fe:	ee26 baa2 	vmul.f32	s22, s13, s5
  404802:	ee3a 0a80 	vadd.f32	s0, s21, s0
  404806:	ee7a 0a20 	vadd.f32	s1, s20, s1
  40480a:	ee66 aa22 	vmul.f32	s21, s12, s5
  40480e:	ee25 aaa2 	vmul.f32	s20, s11, s5
  404812:	ee39 1a81 	vadd.f32	s2, s19, s2
  404816:	ee7c 1a21 	vadd.f32	s3, s24, s3
  40481a:	ee65 9a22 	vmul.f32	s19, s10, s5
  40481e:	ee23 caa2 	vmul.f32	s24, s7, s5
  404822:	ee24 4aa2 	vmul.f32	s8, s9, s5
  404826:	ee23 da82 	vmul.f32	s26, s7, s4
  40482a:	edd2 2a03 	vldr	s5, [r2, #12]
  40482e:	ee34 4a03 	vadd.f32	s8, s8, s6
  404832:	ee3c 9a89 	vadd.f32	s18, s25, s18
  404836:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  40483a:	ee67 ca02 	vmul.f32	s25, s14, s4
  40483e:	ee66 ba82 	vmul.f32	s23, s13, s4
  404842:	ed93 7a03 	vldr	s14, [r3, #12]
  404846:	ee3b 8a08 	vadd.f32	s16, s22, s16
  40484a:	ee3a 0a80 	vadd.f32	s0, s21, s0
  40484e:	ee26 ba02 	vmul.f32	s22, s12, s4
  404852:	ee65 aa82 	vmul.f32	s21, s11, s4
  404856:	ee7a 0a20 	vadd.f32	s1, s20, s1
  40485a:	ee39 1a81 	vadd.f32	s2, s19, s2
  40485e:	ee25 aa02 	vmul.f32	s20, s10, s4
  404862:	ee7c 1a21 	vadd.f32	s3, s24, s3
  404866:	ee24 ca82 	vmul.f32	s24, s9, s4
  40486a:	ee27 2a82 	vmul.f32	s4, s15, s4
  40486e:	ed92 3a04 	vldr	s6, [r2, #16]
  404872:	ee65 9a22 	vmul.f32	s19, s10, s5
  404876:	ee3c 9a89 	vadd.f32	s18, s25, s18
  40487a:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  40487e:	ee66 caa2 	vmul.f32	s25, s13, s5
  404882:	ee66 ba22 	vmul.f32	s23, s12, s5
  404886:	edd3 6a04 	vldr	s13, [r3, #16]
  40488a:	ee3b 8a08 	vadd.f32	s16, s22, s16
  40488e:	ee3a 0a80 	vadd.f32	s0, s21, s0
  404892:	ee25 baa2 	vmul.f32	s22, s11, s5
  404896:	ee63 aaa2 	vmul.f32	s21, s7, s5
  40489a:	ee7a 0a20 	vadd.f32	s1, s20, s1
  40489e:	ee3d 1a01 	vadd.f32	s2, s26, s2
  4048a2:	ee7c 1a21 	vadd.f32	s3, s24, s3
  4048a6:	ee24 daa2 	vmul.f32	s26, s9, s5
  4048aa:	ee27 caa2 	vmul.f32	s24, s15, s5
  4048ae:	ee32 2a04 	vadd.f32	s4, s4, s8
  4048b2:	ee67 2a22 	vmul.f32	s5, s14, s5
  4048b6:	ed92 4a05 	vldr	s8, [r2, #20]
  4048ba:	ee25 aa03 	vmul.f32	s20, s10, s6
  4048be:	ee32 2a82 	vadd.f32	s4, s5, s4
  4048c2:	ee3c 9a89 	vadd.f32	s18, s25, s18
  4048c6:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  4048ca:	ee66 ca03 	vmul.f32	s25, s12, s6
  4048ce:	ee65 ba83 	vmul.f32	s23, s11, s6
  4048d2:	ed93 6a05 	vldr	s12, [r3, #20]
  4048d6:	ee3b 8a08 	vadd.f32	s16, s22, s16
  4048da:	ee39 0a80 	vadd.f32	s0, s19, s0
  4048de:	ee23 ba83 	vmul.f32	s22, s7, s6
  4048e2:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  4048e6:	ee3d 1a01 	vadd.f32	s2, s26, s2
  4048ea:	ee64 aa83 	vmul.f32	s21, s9, s6
  4048ee:	ee27 da83 	vmul.f32	s26, s15, s6
  4048f2:	ee7c 1a21 	vadd.f32	s3, s24, s3
  4048f6:	ee66 2a83 	vmul.f32	s5, s13, s6
  4048fa:	ee27 ca03 	vmul.f32	s24, s14, s6
  4048fe:	ee65 9a04 	vmul.f32	s19, s10, s8
  404902:	ed92 3a06 	vldr	s6, [r2, #24]
  404906:	ee3c 9a89 	vadd.f32	s18, s25, s18
  40490a:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  40490e:	ee65 ca84 	vmul.f32	s25, s11, s8
  404912:	ee67 ba04 	vmul.f32	s23, s14, s8
  404916:	edd3 5a06 	vldr	s11, [r3, #24]
  40491a:	ee3a 8a08 	vadd.f32	s16, s20, s16
  40491e:	ee3b 0a00 	vadd.f32	s0, s22, s0
  404922:	ee23 aa84 	vmul.f32	s20, s7, s8
  404926:	ee24 ba84 	vmul.f32	s22, s9, s8
  40492a:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  40492e:	ee7c 1a21 	vadd.f32	s3, s24, s3
  404932:	ee67 aa84 	vmul.f32	s21, s15, s8
  404936:	ee72 2a82 	vadd.f32	s5, s5, s4
  40493a:	ee26 ca84 	vmul.f32	s24, s13, s8
  40493e:	ee26 2a04 	vmul.f32	s4, s12, s8
  404942:	ee3d 1a01 	vadd.f32	s2, s26, s2
  404946:	ed92 4a07 	vldr	s8, [r2, #28]
  40494a:	ee72 2a22 	vadd.f32	s5, s4, s5
  40494e:	ee3c 9a89 	vadd.f32	s18, s25, s18
  404952:	ee79 8aa8 	vadd.f32	s17, s19, s17
  404956:	ee65 ca03 	vmul.f32	s25, s10, s6
  40495a:	ee63 9a83 	vmul.f32	s19, s7, s6
  40495e:	ee3a 8a08 	vadd.f32	s16, s20, s16
  404962:	ee3b 0a00 	vadd.f32	s0, s22, s0
  404966:	ee24 aa83 	vmul.f32	s20, s9, s6
  40496a:	ee27 ba83 	vmul.f32	s22, s15, s6
  40496e:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  404972:	ee3b 1a81 	vadd.f32	s2, s23, s2
  404976:	ee67 aa03 	vmul.f32	s21, s14, s6
  40497a:	ee66 ba83 	vmul.f32	s23, s13, s6
  40497e:	ee26 2a03 	vmul.f32	s4, s12, s6
  404982:	ed93 5a07 	vldr	s10, [r3, #28]
  404986:	ee7c 1a21 	vadd.f32	s3, s24, s3
  40498a:	ee25 3a83 	vmul.f32	s6, s11, s6
  40498e:	ee63 3a84 	vmul.f32	s7, s7, s8
  404992:	ee79 8aa8 	vadd.f32	s17, s19, s17
  404996:	ee3a 8a08 	vadd.f32	s16, s20, s16
  40499a:	ee64 9a84 	vmul.f32	s19, s9, s8
  40499e:	ee27 aa84 	vmul.f32	s20, s15, s8
  4049a2:	ee3b 0a00 	vadd.f32	s0, s22, s0
  4049a6:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  4049aa:	ee27 ba04 	vmul.f32	s22, s14, s8
  4049ae:	ee66 aa84 	vmul.f32	s21, s13, s8
  4049b2:	ee3b 1a81 	vadd.f32	s2, s23, s2
  4049b6:	ee33 3a22 	vadd.f32	s6, s6, s5
  4049ba:	ee66 ba04 	vmul.f32	s23, s12, s8
  4049be:	ee65 2a84 	vmul.f32	s5, s11, s8
  4049c2:	ee3c 9a89 	vadd.f32	s18, s25, s18
  4049c6:	ee72 1a21 	vadd.f32	s3, s4, s3
  4049ca:	ee25 4a04 	vmul.f32	s8, s10, s8
  4049ce:	f1bb 0b01 	subs.w	fp, fp, #1
  4049d2:	f102 0220 	add.w	r2, r2, #32
  4049d6:	ee33 9a89 	vadd.f32	s18, s7, s18
  4049da:	ee79 8aa8 	vadd.f32	s17, s19, s17
  4049de:	ee3a 8a08 	vadd.f32	s16, s20, s16
  4049e2:	ee3b 0a00 	vadd.f32	s0, s22, s0
  4049e6:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  4049ea:	ee3b 1a81 	vadd.f32	s2, s23, s2
  4049ee:	ee72 1aa1 	vadd.f32	s3, s5, s3
  4049f2:	ee34 3a03 	vadd.f32	s6, s8, s6
  4049f6:	f103 0320 	add.w	r3, r3, #32
  4049fa:	f47f aed8 	bne.w	4047ae <arm_fir_f32+0xd2>
  4049fe:	f8dd b000 	ldr.w	fp, [sp]
  404a02:	eb07 0209 	add.w	r2, r7, r9
  404a06:	f1b8 0f00 	cmp.w	r8, #0
  404a0a:	d037      	beq.n	404a7c <arm_fir_f32+0x3a0>
  404a0c:	4643      	mov	r3, r8
  404a0e:	e00f      	b.n	404a30 <arm_fir_f32+0x354>
  404a10:	00000000 	.word	0x00000000
  404a14:	eef0 4a67 	vmov.f32	s9, s15
  404a18:	eef0 7a47 	vmov.f32	s15, s14
  404a1c:	eeb0 7a66 	vmov.f32	s14, s13
  404a20:	eef0 6a46 	vmov.f32	s13, s12
  404a24:	eeb0 6a65 	vmov.f32	s12, s11
  404a28:	eef0 5a45 	vmov.f32	s11, s10
  404a2c:	eeb0 5a63 	vmov.f32	s10, s7
  404a30:	ecbb 4a01 	vldmia	fp!, {s8}
  404a34:	ecf2 3a01 	vldmia	r2!, {s7}
  404a38:	ee64 4a84 	vmul.f32	s9, s9, s8
  404a3c:	ee27 ba84 	vmul.f32	s22, s15, s8
  404a40:	ee67 aa04 	vmul.f32	s21, s14, s8
  404a44:	ee26 aa84 	vmul.f32	s20, s13, s8
  404a48:	ee66 9a04 	vmul.f32	s19, s12, s8
  404a4c:	ee25 2a84 	vmul.f32	s4, s11, s8
  404a50:	ee65 2a04 	vmul.f32	s5, s10, s8
  404a54:	ee23 4a84 	vmul.f32	s8, s7, s8
  404a58:	3b01      	subs	r3, #1
  404a5a:	ee39 9a24 	vadd.f32	s18, s18, s9
  404a5e:	ee78 8a8b 	vadd.f32	s17, s17, s22
  404a62:	ee38 8a2a 	vadd.f32	s16, s16, s21
  404a66:	ee30 0a0a 	vadd.f32	s0, s0, s20
  404a6a:	ee70 0aa9 	vadd.f32	s1, s1, s19
  404a6e:	ee31 1a02 	vadd.f32	s2, s2, s4
  404a72:	ee71 1aa2 	vadd.f32	s3, s3, s5
  404a76:	ee33 3a04 	vadd.f32	s6, s6, s8
  404a7a:	d1cb      	bne.n	404a14 <arm_fir_f32+0x338>
  404a7c:	3901      	subs	r1, #1
  404a7e:	ed85 9a00 	vstr	s18, [r5]
  404a82:	edc5 8a01 	vstr	s17, [r5, #4]
  404a86:	ed85 8a02 	vstr	s16, [r5, #8]
  404a8a:	ed85 0a03 	vstr	s0, [r5, #12]
  404a8e:	edc5 0a04 	vstr	s1, [r5, #16]
  404a92:	ed85 1a05 	vstr	s2, [r5, #20]
  404a96:	edc5 1a06 	vstr	s3, [r5, #24]
  404a9a:	ed85 3a07 	vstr	s6, [r5, #28]
  404a9e:	f107 0720 	add.w	r7, r7, #32
  404aa2:	f106 0620 	add.w	r6, r6, #32
  404aa6:	f105 0520 	add.w	r5, r5, #32
  404aaa:	f104 0420 	add.w	r4, r4, #32
  404aae:	f10c 0c20 	add.w	ip, ip, #32
  404ab2:	f47f ae47 	bne.w	404744 <arm_fir_f32+0x68>
  404ab6:	9804      	ldr	r0, [sp, #16]
  404ab8:	f8dd 9018 	ldr.w	r9, [sp, #24]
  404abc:	f8dd 801c 	ldr.w	r8, [sp, #28]
  404ac0:	9908      	ldr	r1, [sp, #32]
  404ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404ac4:	0143      	lsls	r3, r0, #5
  404ac6:	4499      	add	r9, r3
  404ac8:	4419      	add	r1, r3
  404aca:	4498      	add	r8, r3
  404acc:	441a      	add	r2, r3
  404ace:	9b03      	ldr	r3, [sp, #12]
  404ad0:	f013 0707 	ands.w	r7, r3, #7
  404ad4:	d01e      	beq.n	404b14 <arm_fir_f32+0x438>
  404ad6:	f8dd c004 	ldr.w	ip, [sp, #4]
  404ada:	463e      	mov	r6, r7
  404adc:	4645      	mov	r5, r8
  404ade:	ed5f 7a34 	vldr	s15, [pc, #-208]	; 404a10 <arm_fir_f32+0x334>
  404ae2:	f851 3b04 	ldr.w	r3, [r1], #4
  404ae6:	4654      	mov	r4, sl
  404ae8:	f849 3b04 	str.w	r3, [r9], #4
  404aec:	4628      	mov	r0, r5
  404aee:	4663      	mov	r3, ip
  404af0:	ecf0 6a01 	vldmia	r0!, {s13}
  404af4:	ecb4 7a01 	vldmia	r4!, {s14}
  404af8:	ee26 7a87 	vmul.f32	s14, s13, s14
  404afc:	3b01      	subs	r3, #1
  404afe:	ee77 7a87 	vadd.f32	s15, s15, s14
  404b02:	d1f5      	bne.n	404af0 <arm_fir_f32+0x414>
  404b04:	3e01      	subs	r6, #1
  404b06:	ece2 7a01 	vstmia	r2!, {s15}
  404b0a:	f105 0504 	add.w	r5, r5, #4
  404b0e:	d1e6      	bne.n	404ade <arm_fir_f32+0x402>
  404b10:	eb08 0887 	add.w	r8, r8, r7, lsl #2
  404b14:	9c01      	ldr	r4, [sp, #4]
  404b16:	1e65      	subs	r5, r4, #1
  404b18:	9c02      	ldr	r4, [sp, #8]
  404b1a:	08ae      	lsrs	r6, r5, #2
  404b1c:	6860      	ldr	r0, [r4, #4]
  404b1e:	d017      	beq.n	404b50 <arm_fir_f32+0x474>
  404b20:	4642      	mov	r2, r8
  404b22:	4603      	mov	r3, r0
  404b24:	4631      	mov	r1, r6
  404b26:	6814      	ldr	r4, [r2, #0]
  404b28:	3901      	subs	r1, #1
  404b2a:	601c      	str	r4, [r3, #0]
  404b2c:	6854      	ldr	r4, [r2, #4]
  404b2e:	f103 0310 	add.w	r3, r3, #16
  404b32:	f843 4c0c 	str.w	r4, [r3, #-12]
  404b36:	6894      	ldr	r4, [r2, #8]
  404b38:	f102 0210 	add.w	r2, r2, #16
  404b3c:	f843 4c08 	str.w	r4, [r3, #-8]
  404b40:	f852 4c04 	ldr.w	r4, [r2, #-4]
  404b44:	f843 4c04 	str.w	r4, [r3, #-4]
  404b48:	d1ed      	bne.n	404b26 <arm_fir_f32+0x44a>
  404b4a:	0133      	lsls	r3, r6, #4
  404b4c:	4418      	add	r0, r3
  404b4e:	4498      	add	r8, r3
  404b50:	f015 0303 	ands.w	r3, r5, #3
  404b54:	d005      	beq.n	404b62 <arm_fir_f32+0x486>
  404b56:	f858 2b04 	ldr.w	r2, [r8], #4
  404b5a:	3b01      	subs	r3, #1
  404b5c:	f840 2b04 	str.w	r2, [r0], #4
  404b60:	d1f9      	bne.n	404b56 <arm_fir_f32+0x47a>
  404b62:	b00a      	add	sp, #40	; 0x28
  404b64:	ecbd 8b0c 	vpop	{d8-d13}
  404b68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404b6c:	4770      	bx	lr
  404b6e:	46d3      	mov	fp, sl
  404b70:	e749      	b.n	404a06 <arm_fir_f32+0x32a>
  404b72:	bf00      	nop

00404b74 <__libc_init_array>:
  404b74:	b570      	push	{r4, r5, r6, lr}
  404b76:	4e0f      	ldr	r6, [pc, #60]	; (404bb4 <__libc_init_array+0x40>)
  404b78:	4d0f      	ldr	r5, [pc, #60]	; (404bb8 <__libc_init_array+0x44>)
  404b7a:	1b76      	subs	r6, r6, r5
  404b7c:	10b6      	asrs	r6, r6, #2
  404b7e:	bf18      	it	ne
  404b80:	2400      	movne	r4, #0
  404b82:	d005      	beq.n	404b90 <__libc_init_array+0x1c>
  404b84:	3401      	adds	r4, #1
  404b86:	f855 3b04 	ldr.w	r3, [r5], #4
  404b8a:	4798      	blx	r3
  404b8c:	42a6      	cmp	r6, r4
  404b8e:	d1f9      	bne.n	404b84 <__libc_init_array+0x10>
  404b90:	4e0a      	ldr	r6, [pc, #40]	; (404bbc <__libc_init_array+0x48>)
  404b92:	4d0b      	ldr	r5, [pc, #44]	; (404bc0 <__libc_init_array+0x4c>)
  404b94:	1b76      	subs	r6, r6, r5
  404b96:	f003 f8ff 	bl	407d98 <_init>
  404b9a:	10b6      	asrs	r6, r6, #2
  404b9c:	bf18      	it	ne
  404b9e:	2400      	movne	r4, #0
  404ba0:	d006      	beq.n	404bb0 <__libc_init_array+0x3c>
  404ba2:	3401      	adds	r4, #1
  404ba4:	f855 3b04 	ldr.w	r3, [r5], #4
  404ba8:	4798      	blx	r3
  404baa:	42a6      	cmp	r6, r4
  404bac:	d1f9      	bne.n	404ba2 <__libc_init_array+0x2e>
  404bae:	bd70      	pop	{r4, r5, r6, pc}
  404bb0:	bd70      	pop	{r4, r5, r6, pc}
  404bb2:	bf00      	nop
  404bb4:	00407da4 	.word	0x00407da4
  404bb8:	00407da4 	.word	0x00407da4
  404bbc:	00407dac 	.word	0x00407dac
  404bc0:	00407da4 	.word	0x00407da4

00404bc4 <iprintf>:
  404bc4:	b40f      	push	{r0, r1, r2, r3}
  404bc6:	b500      	push	{lr}
  404bc8:	4907      	ldr	r1, [pc, #28]	; (404be8 <iprintf+0x24>)
  404bca:	b083      	sub	sp, #12
  404bcc:	ab04      	add	r3, sp, #16
  404bce:	6808      	ldr	r0, [r1, #0]
  404bd0:	f853 2b04 	ldr.w	r2, [r3], #4
  404bd4:	6881      	ldr	r1, [r0, #8]
  404bd6:	9301      	str	r3, [sp, #4]
  404bd8:	f000 fd60 	bl	40569c <_vfiprintf_r>
  404bdc:	b003      	add	sp, #12
  404bde:	f85d eb04 	ldr.w	lr, [sp], #4
  404be2:	b004      	add	sp, #16
  404be4:	4770      	bx	lr
  404be6:	bf00      	nop
  404be8:	20400014 	.word	0x20400014

00404bec <malloc>:
  404bec:	4b02      	ldr	r3, [pc, #8]	; (404bf8 <malloc+0xc>)
  404bee:	4601      	mov	r1, r0
  404bf0:	6818      	ldr	r0, [r3, #0]
  404bf2:	f000 b803 	b.w	404bfc <_malloc_r>
  404bf6:	bf00      	nop
  404bf8:	20400014 	.word	0x20400014

00404bfc <_malloc_r>:
  404bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c00:	f101 060b 	add.w	r6, r1, #11
  404c04:	2e16      	cmp	r6, #22
  404c06:	b083      	sub	sp, #12
  404c08:	4605      	mov	r5, r0
  404c0a:	f240 809e 	bls.w	404d4a <_malloc_r+0x14e>
  404c0e:	f036 0607 	bics.w	r6, r6, #7
  404c12:	f100 80bd 	bmi.w	404d90 <_malloc_r+0x194>
  404c16:	42b1      	cmp	r1, r6
  404c18:	f200 80ba 	bhi.w	404d90 <_malloc_r+0x194>
  404c1c:	f000 fb86 	bl	40532c <__malloc_lock>
  404c20:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404c24:	f0c0 8293 	bcc.w	40514e <_malloc_r+0x552>
  404c28:	0a73      	lsrs	r3, r6, #9
  404c2a:	f000 80b8 	beq.w	404d9e <_malloc_r+0x1a2>
  404c2e:	2b04      	cmp	r3, #4
  404c30:	f200 8179 	bhi.w	404f26 <_malloc_r+0x32a>
  404c34:	09b3      	lsrs	r3, r6, #6
  404c36:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404c3a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404c3e:	00c3      	lsls	r3, r0, #3
  404c40:	4fbf      	ldr	r7, [pc, #764]	; (404f40 <_malloc_r+0x344>)
  404c42:	443b      	add	r3, r7
  404c44:	f1a3 0108 	sub.w	r1, r3, #8
  404c48:	685c      	ldr	r4, [r3, #4]
  404c4a:	42a1      	cmp	r1, r4
  404c4c:	d106      	bne.n	404c5c <_malloc_r+0x60>
  404c4e:	e00c      	b.n	404c6a <_malloc_r+0x6e>
  404c50:	2a00      	cmp	r2, #0
  404c52:	f280 80aa 	bge.w	404daa <_malloc_r+0x1ae>
  404c56:	68e4      	ldr	r4, [r4, #12]
  404c58:	42a1      	cmp	r1, r4
  404c5a:	d006      	beq.n	404c6a <_malloc_r+0x6e>
  404c5c:	6863      	ldr	r3, [r4, #4]
  404c5e:	f023 0303 	bic.w	r3, r3, #3
  404c62:	1b9a      	subs	r2, r3, r6
  404c64:	2a0f      	cmp	r2, #15
  404c66:	ddf3      	ble.n	404c50 <_malloc_r+0x54>
  404c68:	4670      	mov	r0, lr
  404c6a:	693c      	ldr	r4, [r7, #16]
  404c6c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404f54 <_malloc_r+0x358>
  404c70:	4574      	cmp	r4, lr
  404c72:	f000 81ab 	beq.w	404fcc <_malloc_r+0x3d0>
  404c76:	6863      	ldr	r3, [r4, #4]
  404c78:	f023 0303 	bic.w	r3, r3, #3
  404c7c:	1b9a      	subs	r2, r3, r6
  404c7e:	2a0f      	cmp	r2, #15
  404c80:	f300 8190 	bgt.w	404fa4 <_malloc_r+0x3a8>
  404c84:	2a00      	cmp	r2, #0
  404c86:	f8c7 e014 	str.w	lr, [r7, #20]
  404c8a:	f8c7 e010 	str.w	lr, [r7, #16]
  404c8e:	f280 809d 	bge.w	404dcc <_malloc_r+0x1d0>
  404c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404c96:	f080 8161 	bcs.w	404f5c <_malloc_r+0x360>
  404c9a:	08db      	lsrs	r3, r3, #3
  404c9c:	f103 0c01 	add.w	ip, r3, #1
  404ca0:	1099      	asrs	r1, r3, #2
  404ca2:	687a      	ldr	r2, [r7, #4]
  404ca4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404ca8:	f8c4 8008 	str.w	r8, [r4, #8]
  404cac:	2301      	movs	r3, #1
  404cae:	408b      	lsls	r3, r1
  404cb0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404cb4:	4313      	orrs	r3, r2
  404cb6:	3908      	subs	r1, #8
  404cb8:	60e1      	str	r1, [r4, #12]
  404cba:	607b      	str	r3, [r7, #4]
  404cbc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404cc0:	f8c8 400c 	str.w	r4, [r8, #12]
  404cc4:	1082      	asrs	r2, r0, #2
  404cc6:	2401      	movs	r4, #1
  404cc8:	4094      	lsls	r4, r2
  404cca:	429c      	cmp	r4, r3
  404ccc:	f200 808b 	bhi.w	404de6 <_malloc_r+0x1ea>
  404cd0:	421c      	tst	r4, r3
  404cd2:	d106      	bne.n	404ce2 <_malloc_r+0xe6>
  404cd4:	f020 0003 	bic.w	r0, r0, #3
  404cd8:	0064      	lsls	r4, r4, #1
  404cda:	421c      	tst	r4, r3
  404cdc:	f100 0004 	add.w	r0, r0, #4
  404ce0:	d0fa      	beq.n	404cd8 <_malloc_r+0xdc>
  404ce2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404ce6:	46cc      	mov	ip, r9
  404ce8:	4680      	mov	r8, r0
  404cea:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404cee:	459c      	cmp	ip, r3
  404cf0:	d107      	bne.n	404d02 <_malloc_r+0x106>
  404cf2:	e16d      	b.n	404fd0 <_malloc_r+0x3d4>
  404cf4:	2a00      	cmp	r2, #0
  404cf6:	f280 817b 	bge.w	404ff0 <_malloc_r+0x3f4>
  404cfa:	68db      	ldr	r3, [r3, #12]
  404cfc:	459c      	cmp	ip, r3
  404cfe:	f000 8167 	beq.w	404fd0 <_malloc_r+0x3d4>
  404d02:	6859      	ldr	r1, [r3, #4]
  404d04:	f021 0103 	bic.w	r1, r1, #3
  404d08:	1b8a      	subs	r2, r1, r6
  404d0a:	2a0f      	cmp	r2, #15
  404d0c:	ddf2      	ble.n	404cf4 <_malloc_r+0xf8>
  404d0e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404d12:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404d16:	9300      	str	r3, [sp, #0]
  404d18:	199c      	adds	r4, r3, r6
  404d1a:	4628      	mov	r0, r5
  404d1c:	f046 0601 	orr.w	r6, r6, #1
  404d20:	f042 0501 	orr.w	r5, r2, #1
  404d24:	605e      	str	r6, [r3, #4]
  404d26:	f8c8 c00c 	str.w	ip, [r8, #12]
  404d2a:	f8cc 8008 	str.w	r8, [ip, #8]
  404d2e:	617c      	str	r4, [r7, #20]
  404d30:	613c      	str	r4, [r7, #16]
  404d32:	f8c4 e00c 	str.w	lr, [r4, #12]
  404d36:	f8c4 e008 	str.w	lr, [r4, #8]
  404d3a:	6065      	str	r5, [r4, #4]
  404d3c:	505a      	str	r2, [r3, r1]
  404d3e:	f000 fafb 	bl	405338 <__malloc_unlock>
  404d42:	9b00      	ldr	r3, [sp, #0]
  404d44:	f103 0408 	add.w	r4, r3, #8
  404d48:	e01e      	b.n	404d88 <_malloc_r+0x18c>
  404d4a:	2910      	cmp	r1, #16
  404d4c:	d820      	bhi.n	404d90 <_malloc_r+0x194>
  404d4e:	f000 faed 	bl	40532c <__malloc_lock>
  404d52:	2610      	movs	r6, #16
  404d54:	2318      	movs	r3, #24
  404d56:	2002      	movs	r0, #2
  404d58:	4f79      	ldr	r7, [pc, #484]	; (404f40 <_malloc_r+0x344>)
  404d5a:	443b      	add	r3, r7
  404d5c:	f1a3 0208 	sub.w	r2, r3, #8
  404d60:	685c      	ldr	r4, [r3, #4]
  404d62:	4294      	cmp	r4, r2
  404d64:	f000 813d 	beq.w	404fe2 <_malloc_r+0x3e6>
  404d68:	6863      	ldr	r3, [r4, #4]
  404d6a:	68e1      	ldr	r1, [r4, #12]
  404d6c:	68a6      	ldr	r6, [r4, #8]
  404d6e:	f023 0303 	bic.w	r3, r3, #3
  404d72:	4423      	add	r3, r4
  404d74:	4628      	mov	r0, r5
  404d76:	685a      	ldr	r2, [r3, #4]
  404d78:	60f1      	str	r1, [r6, #12]
  404d7a:	f042 0201 	orr.w	r2, r2, #1
  404d7e:	608e      	str	r6, [r1, #8]
  404d80:	605a      	str	r2, [r3, #4]
  404d82:	f000 fad9 	bl	405338 <__malloc_unlock>
  404d86:	3408      	adds	r4, #8
  404d88:	4620      	mov	r0, r4
  404d8a:	b003      	add	sp, #12
  404d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d90:	2400      	movs	r4, #0
  404d92:	230c      	movs	r3, #12
  404d94:	4620      	mov	r0, r4
  404d96:	602b      	str	r3, [r5, #0]
  404d98:	b003      	add	sp, #12
  404d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d9e:	2040      	movs	r0, #64	; 0x40
  404da0:	f44f 7300 	mov.w	r3, #512	; 0x200
  404da4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404da8:	e74a      	b.n	404c40 <_malloc_r+0x44>
  404daa:	4423      	add	r3, r4
  404dac:	68e1      	ldr	r1, [r4, #12]
  404dae:	685a      	ldr	r2, [r3, #4]
  404db0:	68a6      	ldr	r6, [r4, #8]
  404db2:	f042 0201 	orr.w	r2, r2, #1
  404db6:	60f1      	str	r1, [r6, #12]
  404db8:	4628      	mov	r0, r5
  404dba:	608e      	str	r6, [r1, #8]
  404dbc:	605a      	str	r2, [r3, #4]
  404dbe:	f000 fabb 	bl	405338 <__malloc_unlock>
  404dc2:	3408      	adds	r4, #8
  404dc4:	4620      	mov	r0, r4
  404dc6:	b003      	add	sp, #12
  404dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dcc:	4423      	add	r3, r4
  404dce:	4628      	mov	r0, r5
  404dd0:	685a      	ldr	r2, [r3, #4]
  404dd2:	f042 0201 	orr.w	r2, r2, #1
  404dd6:	605a      	str	r2, [r3, #4]
  404dd8:	f000 faae 	bl	405338 <__malloc_unlock>
  404ddc:	3408      	adds	r4, #8
  404dde:	4620      	mov	r0, r4
  404de0:	b003      	add	sp, #12
  404de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404de6:	68bc      	ldr	r4, [r7, #8]
  404de8:	6863      	ldr	r3, [r4, #4]
  404dea:	f023 0803 	bic.w	r8, r3, #3
  404dee:	45b0      	cmp	r8, r6
  404df0:	d304      	bcc.n	404dfc <_malloc_r+0x200>
  404df2:	eba8 0306 	sub.w	r3, r8, r6
  404df6:	2b0f      	cmp	r3, #15
  404df8:	f300 8085 	bgt.w	404f06 <_malloc_r+0x30a>
  404dfc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404f58 <_malloc_r+0x35c>
  404e00:	4b50      	ldr	r3, [pc, #320]	; (404f44 <_malloc_r+0x348>)
  404e02:	f8d9 2000 	ldr.w	r2, [r9]
  404e06:	681b      	ldr	r3, [r3, #0]
  404e08:	3201      	adds	r2, #1
  404e0a:	4433      	add	r3, r6
  404e0c:	eb04 0a08 	add.w	sl, r4, r8
  404e10:	f000 8155 	beq.w	4050be <_malloc_r+0x4c2>
  404e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404e18:	330f      	adds	r3, #15
  404e1a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404e1e:	f02b 0b0f 	bic.w	fp, fp, #15
  404e22:	4659      	mov	r1, fp
  404e24:	4628      	mov	r0, r5
  404e26:	f000 fa8d 	bl	405344 <_sbrk_r>
  404e2a:	1c41      	adds	r1, r0, #1
  404e2c:	4602      	mov	r2, r0
  404e2e:	f000 80fc 	beq.w	40502a <_malloc_r+0x42e>
  404e32:	4582      	cmp	sl, r0
  404e34:	f200 80f7 	bhi.w	405026 <_malloc_r+0x42a>
  404e38:	4b43      	ldr	r3, [pc, #268]	; (404f48 <_malloc_r+0x34c>)
  404e3a:	6819      	ldr	r1, [r3, #0]
  404e3c:	4459      	add	r1, fp
  404e3e:	6019      	str	r1, [r3, #0]
  404e40:	f000 814d 	beq.w	4050de <_malloc_r+0x4e2>
  404e44:	f8d9 0000 	ldr.w	r0, [r9]
  404e48:	3001      	adds	r0, #1
  404e4a:	bf1b      	ittet	ne
  404e4c:	eba2 0a0a 	subne.w	sl, r2, sl
  404e50:	4451      	addne	r1, sl
  404e52:	f8c9 2000 	streq.w	r2, [r9]
  404e56:	6019      	strne	r1, [r3, #0]
  404e58:	f012 0107 	ands.w	r1, r2, #7
  404e5c:	f000 8115 	beq.w	40508a <_malloc_r+0x48e>
  404e60:	f1c1 0008 	rsb	r0, r1, #8
  404e64:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404e68:	4402      	add	r2, r0
  404e6a:	3108      	adds	r1, #8
  404e6c:	eb02 090b 	add.w	r9, r2, fp
  404e70:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404e74:	eba1 0909 	sub.w	r9, r1, r9
  404e78:	4649      	mov	r1, r9
  404e7a:	4628      	mov	r0, r5
  404e7c:	9301      	str	r3, [sp, #4]
  404e7e:	9200      	str	r2, [sp, #0]
  404e80:	f000 fa60 	bl	405344 <_sbrk_r>
  404e84:	1c43      	adds	r3, r0, #1
  404e86:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404e8a:	f000 8143 	beq.w	405114 <_malloc_r+0x518>
  404e8e:	1a80      	subs	r0, r0, r2
  404e90:	4448      	add	r0, r9
  404e92:	f040 0001 	orr.w	r0, r0, #1
  404e96:	6819      	ldr	r1, [r3, #0]
  404e98:	60ba      	str	r2, [r7, #8]
  404e9a:	4449      	add	r1, r9
  404e9c:	42bc      	cmp	r4, r7
  404e9e:	6050      	str	r0, [r2, #4]
  404ea0:	6019      	str	r1, [r3, #0]
  404ea2:	d017      	beq.n	404ed4 <_malloc_r+0x2d8>
  404ea4:	f1b8 0f0f 	cmp.w	r8, #15
  404ea8:	f240 80fb 	bls.w	4050a2 <_malloc_r+0x4a6>
  404eac:	6860      	ldr	r0, [r4, #4]
  404eae:	f1a8 020c 	sub.w	r2, r8, #12
  404eb2:	f022 0207 	bic.w	r2, r2, #7
  404eb6:	eb04 0e02 	add.w	lr, r4, r2
  404eba:	f000 0001 	and.w	r0, r0, #1
  404ebe:	f04f 0c05 	mov.w	ip, #5
  404ec2:	4310      	orrs	r0, r2
  404ec4:	2a0f      	cmp	r2, #15
  404ec6:	6060      	str	r0, [r4, #4]
  404ec8:	f8ce c004 	str.w	ip, [lr, #4]
  404ecc:	f8ce c008 	str.w	ip, [lr, #8]
  404ed0:	f200 8117 	bhi.w	405102 <_malloc_r+0x506>
  404ed4:	4b1d      	ldr	r3, [pc, #116]	; (404f4c <_malloc_r+0x350>)
  404ed6:	68bc      	ldr	r4, [r7, #8]
  404ed8:	681a      	ldr	r2, [r3, #0]
  404eda:	4291      	cmp	r1, r2
  404edc:	bf88      	it	hi
  404ede:	6019      	strhi	r1, [r3, #0]
  404ee0:	4b1b      	ldr	r3, [pc, #108]	; (404f50 <_malloc_r+0x354>)
  404ee2:	681a      	ldr	r2, [r3, #0]
  404ee4:	4291      	cmp	r1, r2
  404ee6:	6862      	ldr	r2, [r4, #4]
  404ee8:	bf88      	it	hi
  404eea:	6019      	strhi	r1, [r3, #0]
  404eec:	f022 0203 	bic.w	r2, r2, #3
  404ef0:	4296      	cmp	r6, r2
  404ef2:	eba2 0306 	sub.w	r3, r2, r6
  404ef6:	d801      	bhi.n	404efc <_malloc_r+0x300>
  404ef8:	2b0f      	cmp	r3, #15
  404efa:	dc04      	bgt.n	404f06 <_malloc_r+0x30a>
  404efc:	4628      	mov	r0, r5
  404efe:	f000 fa1b 	bl	405338 <__malloc_unlock>
  404f02:	2400      	movs	r4, #0
  404f04:	e740      	b.n	404d88 <_malloc_r+0x18c>
  404f06:	19a2      	adds	r2, r4, r6
  404f08:	f043 0301 	orr.w	r3, r3, #1
  404f0c:	f046 0601 	orr.w	r6, r6, #1
  404f10:	6066      	str	r6, [r4, #4]
  404f12:	4628      	mov	r0, r5
  404f14:	60ba      	str	r2, [r7, #8]
  404f16:	6053      	str	r3, [r2, #4]
  404f18:	f000 fa0e 	bl	405338 <__malloc_unlock>
  404f1c:	3408      	adds	r4, #8
  404f1e:	4620      	mov	r0, r4
  404f20:	b003      	add	sp, #12
  404f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f26:	2b14      	cmp	r3, #20
  404f28:	d971      	bls.n	40500e <_malloc_r+0x412>
  404f2a:	2b54      	cmp	r3, #84	; 0x54
  404f2c:	f200 80a3 	bhi.w	405076 <_malloc_r+0x47a>
  404f30:	0b33      	lsrs	r3, r6, #12
  404f32:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404f36:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404f3a:	00c3      	lsls	r3, r0, #3
  404f3c:	e680      	b.n	404c40 <_malloc_r+0x44>
  404f3e:	bf00      	nop
  404f40:	20400440 	.word	0x20400440
  404f44:	2040c96c 	.word	0x2040c96c
  404f48:	2040c93c 	.word	0x2040c93c
  404f4c:	2040c964 	.word	0x2040c964
  404f50:	2040c968 	.word	0x2040c968
  404f54:	20400448 	.word	0x20400448
  404f58:	20400848 	.word	0x20400848
  404f5c:	0a5a      	lsrs	r2, r3, #9
  404f5e:	2a04      	cmp	r2, #4
  404f60:	d95b      	bls.n	40501a <_malloc_r+0x41e>
  404f62:	2a14      	cmp	r2, #20
  404f64:	f200 80ae 	bhi.w	4050c4 <_malloc_r+0x4c8>
  404f68:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404f6c:	00c9      	lsls	r1, r1, #3
  404f6e:	325b      	adds	r2, #91	; 0x5b
  404f70:	eb07 0c01 	add.w	ip, r7, r1
  404f74:	5879      	ldr	r1, [r7, r1]
  404f76:	f1ac 0c08 	sub.w	ip, ip, #8
  404f7a:	458c      	cmp	ip, r1
  404f7c:	f000 8088 	beq.w	405090 <_malloc_r+0x494>
  404f80:	684a      	ldr	r2, [r1, #4]
  404f82:	f022 0203 	bic.w	r2, r2, #3
  404f86:	4293      	cmp	r3, r2
  404f88:	d273      	bcs.n	405072 <_malloc_r+0x476>
  404f8a:	6889      	ldr	r1, [r1, #8]
  404f8c:	458c      	cmp	ip, r1
  404f8e:	d1f7      	bne.n	404f80 <_malloc_r+0x384>
  404f90:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404f94:	687b      	ldr	r3, [r7, #4]
  404f96:	60e2      	str	r2, [r4, #12]
  404f98:	f8c4 c008 	str.w	ip, [r4, #8]
  404f9c:	6094      	str	r4, [r2, #8]
  404f9e:	f8cc 400c 	str.w	r4, [ip, #12]
  404fa2:	e68f      	b.n	404cc4 <_malloc_r+0xc8>
  404fa4:	19a1      	adds	r1, r4, r6
  404fa6:	f046 0c01 	orr.w	ip, r6, #1
  404faa:	f042 0601 	orr.w	r6, r2, #1
  404fae:	f8c4 c004 	str.w	ip, [r4, #4]
  404fb2:	4628      	mov	r0, r5
  404fb4:	6179      	str	r1, [r7, #20]
  404fb6:	6139      	str	r1, [r7, #16]
  404fb8:	f8c1 e00c 	str.w	lr, [r1, #12]
  404fbc:	f8c1 e008 	str.w	lr, [r1, #8]
  404fc0:	604e      	str	r6, [r1, #4]
  404fc2:	50e2      	str	r2, [r4, r3]
  404fc4:	f000 f9b8 	bl	405338 <__malloc_unlock>
  404fc8:	3408      	adds	r4, #8
  404fca:	e6dd      	b.n	404d88 <_malloc_r+0x18c>
  404fcc:	687b      	ldr	r3, [r7, #4]
  404fce:	e679      	b.n	404cc4 <_malloc_r+0xc8>
  404fd0:	f108 0801 	add.w	r8, r8, #1
  404fd4:	f018 0f03 	tst.w	r8, #3
  404fd8:	f10c 0c08 	add.w	ip, ip, #8
  404fdc:	f47f ae85 	bne.w	404cea <_malloc_r+0xee>
  404fe0:	e02d      	b.n	40503e <_malloc_r+0x442>
  404fe2:	68dc      	ldr	r4, [r3, #12]
  404fe4:	42a3      	cmp	r3, r4
  404fe6:	bf08      	it	eq
  404fe8:	3002      	addeq	r0, #2
  404fea:	f43f ae3e 	beq.w	404c6a <_malloc_r+0x6e>
  404fee:	e6bb      	b.n	404d68 <_malloc_r+0x16c>
  404ff0:	4419      	add	r1, r3
  404ff2:	461c      	mov	r4, r3
  404ff4:	684a      	ldr	r2, [r1, #4]
  404ff6:	68db      	ldr	r3, [r3, #12]
  404ff8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404ffc:	f042 0201 	orr.w	r2, r2, #1
  405000:	604a      	str	r2, [r1, #4]
  405002:	4628      	mov	r0, r5
  405004:	60f3      	str	r3, [r6, #12]
  405006:	609e      	str	r6, [r3, #8]
  405008:	f000 f996 	bl	405338 <__malloc_unlock>
  40500c:	e6bc      	b.n	404d88 <_malloc_r+0x18c>
  40500e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405012:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405016:	00c3      	lsls	r3, r0, #3
  405018:	e612      	b.n	404c40 <_malloc_r+0x44>
  40501a:	099a      	lsrs	r2, r3, #6
  40501c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405020:	00c9      	lsls	r1, r1, #3
  405022:	3238      	adds	r2, #56	; 0x38
  405024:	e7a4      	b.n	404f70 <_malloc_r+0x374>
  405026:	42bc      	cmp	r4, r7
  405028:	d054      	beq.n	4050d4 <_malloc_r+0x4d8>
  40502a:	68bc      	ldr	r4, [r7, #8]
  40502c:	6862      	ldr	r2, [r4, #4]
  40502e:	f022 0203 	bic.w	r2, r2, #3
  405032:	e75d      	b.n	404ef0 <_malloc_r+0x2f4>
  405034:	f859 3908 	ldr.w	r3, [r9], #-8
  405038:	4599      	cmp	r9, r3
  40503a:	f040 8086 	bne.w	40514a <_malloc_r+0x54e>
  40503e:	f010 0f03 	tst.w	r0, #3
  405042:	f100 30ff 	add.w	r0, r0, #4294967295
  405046:	d1f5      	bne.n	405034 <_malloc_r+0x438>
  405048:	687b      	ldr	r3, [r7, #4]
  40504a:	ea23 0304 	bic.w	r3, r3, r4
  40504e:	607b      	str	r3, [r7, #4]
  405050:	0064      	lsls	r4, r4, #1
  405052:	429c      	cmp	r4, r3
  405054:	f63f aec7 	bhi.w	404de6 <_malloc_r+0x1ea>
  405058:	2c00      	cmp	r4, #0
  40505a:	f43f aec4 	beq.w	404de6 <_malloc_r+0x1ea>
  40505e:	421c      	tst	r4, r3
  405060:	4640      	mov	r0, r8
  405062:	f47f ae3e 	bne.w	404ce2 <_malloc_r+0xe6>
  405066:	0064      	lsls	r4, r4, #1
  405068:	421c      	tst	r4, r3
  40506a:	f100 0004 	add.w	r0, r0, #4
  40506e:	d0fa      	beq.n	405066 <_malloc_r+0x46a>
  405070:	e637      	b.n	404ce2 <_malloc_r+0xe6>
  405072:	468c      	mov	ip, r1
  405074:	e78c      	b.n	404f90 <_malloc_r+0x394>
  405076:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40507a:	d815      	bhi.n	4050a8 <_malloc_r+0x4ac>
  40507c:	0bf3      	lsrs	r3, r6, #15
  40507e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405082:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405086:	00c3      	lsls	r3, r0, #3
  405088:	e5da      	b.n	404c40 <_malloc_r+0x44>
  40508a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40508e:	e6ed      	b.n	404e6c <_malloc_r+0x270>
  405090:	687b      	ldr	r3, [r7, #4]
  405092:	1092      	asrs	r2, r2, #2
  405094:	2101      	movs	r1, #1
  405096:	fa01 f202 	lsl.w	r2, r1, r2
  40509a:	4313      	orrs	r3, r2
  40509c:	607b      	str	r3, [r7, #4]
  40509e:	4662      	mov	r2, ip
  4050a0:	e779      	b.n	404f96 <_malloc_r+0x39a>
  4050a2:	2301      	movs	r3, #1
  4050a4:	6053      	str	r3, [r2, #4]
  4050a6:	e729      	b.n	404efc <_malloc_r+0x300>
  4050a8:	f240 5254 	movw	r2, #1364	; 0x554
  4050ac:	4293      	cmp	r3, r2
  4050ae:	d822      	bhi.n	4050f6 <_malloc_r+0x4fa>
  4050b0:	0cb3      	lsrs	r3, r6, #18
  4050b2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4050b6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4050ba:	00c3      	lsls	r3, r0, #3
  4050bc:	e5c0      	b.n	404c40 <_malloc_r+0x44>
  4050be:	f103 0b10 	add.w	fp, r3, #16
  4050c2:	e6ae      	b.n	404e22 <_malloc_r+0x226>
  4050c4:	2a54      	cmp	r2, #84	; 0x54
  4050c6:	d829      	bhi.n	40511c <_malloc_r+0x520>
  4050c8:	0b1a      	lsrs	r2, r3, #12
  4050ca:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4050ce:	00c9      	lsls	r1, r1, #3
  4050d0:	326e      	adds	r2, #110	; 0x6e
  4050d2:	e74d      	b.n	404f70 <_malloc_r+0x374>
  4050d4:	4b20      	ldr	r3, [pc, #128]	; (405158 <_malloc_r+0x55c>)
  4050d6:	6819      	ldr	r1, [r3, #0]
  4050d8:	4459      	add	r1, fp
  4050da:	6019      	str	r1, [r3, #0]
  4050dc:	e6b2      	b.n	404e44 <_malloc_r+0x248>
  4050de:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4050e2:	2800      	cmp	r0, #0
  4050e4:	f47f aeae 	bne.w	404e44 <_malloc_r+0x248>
  4050e8:	eb08 030b 	add.w	r3, r8, fp
  4050ec:	68ba      	ldr	r2, [r7, #8]
  4050ee:	f043 0301 	orr.w	r3, r3, #1
  4050f2:	6053      	str	r3, [r2, #4]
  4050f4:	e6ee      	b.n	404ed4 <_malloc_r+0x2d8>
  4050f6:	207f      	movs	r0, #127	; 0x7f
  4050f8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4050fc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405100:	e59e      	b.n	404c40 <_malloc_r+0x44>
  405102:	f104 0108 	add.w	r1, r4, #8
  405106:	4628      	mov	r0, r5
  405108:	9300      	str	r3, [sp, #0]
  40510a:	f001 fbe3 	bl	4068d4 <_free_r>
  40510e:	9b00      	ldr	r3, [sp, #0]
  405110:	6819      	ldr	r1, [r3, #0]
  405112:	e6df      	b.n	404ed4 <_malloc_r+0x2d8>
  405114:	2001      	movs	r0, #1
  405116:	f04f 0900 	mov.w	r9, #0
  40511a:	e6bc      	b.n	404e96 <_malloc_r+0x29a>
  40511c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405120:	d805      	bhi.n	40512e <_malloc_r+0x532>
  405122:	0bda      	lsrs	r2, r3, #15
  405124:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405128:	00c9      	lsls	r1, r1, #3
  40512a:	3277      	adds	r2, #119	; 0x77
  40512c:	e720      	b.n	404f70 <_malloc_r+0x374>
  40512e:	f240 5154 	movw	r1, #1364	; 0x554
  405132:	428a      	cmp	r2, r1
  405134:	d805      	bhi.n	405142 <_malloc_r+0x546>
  405136:	0c9a      	lsrs	r2, r3, #18
  405138:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40513c:	00c9      	lsls	r1, r1, #3
  40513e:	327c      	adds	r2, #124	; 0x7c
  405140:	e716      	b.n	404f70 <_malloc_r+0x374>
  405142:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405146:	227e      	movs	r2, #126	; 0x7e
  405148:	e712      	b.n	404f70 <_malloc_r+0x374>
  40514a:	687b      	ldr	r3, [r7, #4]
  40514c:	e780      	b.n	405050 <_malloc_r+0x454>
  40514e:	08f0      	lsrs	r0, r6, #3
  405150:	f106 0308 	add.w	r3, r6, #8
  405154:	e600      	b.n	404d58 <_malloc_r+0x15c>
  405156:	bf00      	nop
  405158:	2040c93c 	.word	0x2040c93c

0040515c <memcpy>:
  40515c:	4684      	mov	ip, r0
  40515e:	ea41 0300 	orr.w	r3, r1, r0
  405162:	f013 0303 	ands.w	r3, r3, #3
  405166:	d16d      	bne.n	405244 <memcpy+0xe8>
  405168:	3a40      	subs	r2, #64	; 0x40
  40516a:	d341      	bcc.n	4051f0 <memcpy+0x94>
  40516c:	f851 3b04 	ldr.w	r3, [r1], #4
  405170:	f840 3b04 	str.w	r3, [r0], #4
  405174:	f851 3b04 	ldr.w	r3, [r1], #4
  405178:	f840 3b04 	str.w	r3, [r0], #4
  40517c:	f851 3b04 	ldr.w	r3, [r1], #4
  405180:	f840 3b04 	str.w	r3, [r0], #4
  405184:	f851 3b04 	ldr.w	r3, [r1], #4
  405188:	f840 3b04 	str.w	r3, [r0], #4
  40518c:	f851 3b04 	ldr.w	r3, [r1], #4
  405190:	f840 3b04 	str.w	r3, [r0], #4
  405194:	f851 3b04 	ldr.w	r3, [r1], #4
  405198:	f840 3b04 	str.w	r3, [r0], #4
  40519c:	f851 3b04 	ldr.w	r3, [r1], #4
  4051a0:	f840 3b04 	str.w	r3, [r0], #4
  4051a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4051a8:	f840 3b04 	str.w	r3, [r0], #4
  4051ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4051b0:	f840 3b04 	str.w	r3, [r0], #4
  4051b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4051b8:	f840 3b04 	str.w	r3, [r0], #4
  4051bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4051c0:	f840 3b04 	str.w	r3, [r0], #4
  4051c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4051c8:	f840 3b04 	str.w	r3, [r0], #4
  4051cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4051d0:	f840 3b04 	str.w	r3, [r0], #4
  4051d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4051d8:	f840 3b04 	str.w	r3, [r0], #4
  4051dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4051e0:	f840 3b04 	str.w	r3, [r0], #4
  4051e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4051e8:	f840 3b04 	str.w	r3, [r0], #4
  4051ec:	3a40      	subs	r2, #64	; 0x40
  4051ee:	d2bd      	bcs.n	40516c <memcpy+0x10>
  4051f0:	3230      	adds	r2, #48	; 0x30
  4051f2:	d311      	bcc.n	405218 <memcpy+0xbc>
  4051f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4051f8:	f840 3b04 	str.w	r3, [r0], #4
  4051fc:	f851 3b04 	ldr.w	r3, [r1], #4
  405200:	f840 3b04 	str.w	r3, [r0], #4
  405204:	f851 3b04 	ldr.w	r3, [r1], #4
  405208:	f840 3b04 	str.w	r3, [r0], #4
  40520c:	f851 3b04 	ldr.w	r3, [r1], #4
  405210:	f840 3b04 	str.w	r3, [r0], #4
  405214:	3a10      	subs	r2, #16
  405216:	d2ed      	bcs.n	4051f4 <memcpy+0x98>
  405218:	320c      	adds	r2, #12
  40521a:	d305      	bcc.n	405228 <memcpy+0xcc>
  40521c:	f851 3b04 	ldr.w	r3, [r1], #4
  405220:	f840 3b04 	str.w	r3, [r0], #4
  405224:	3a04      	subs	r2, #4
  405226:	d2f9      	bcs.n	40521c <memcpy+0xc0>
  405228:	3204      	adds	r2, #4
  40522a:	d008      	beq.n	40523e <memcpy+0xe2>
  40522c:	07d2      	lsls	r2, r2, #31
  40522e:	bf1c      	itt	ne
  405230:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405234:	f800 3b01 	strbne.w	r3, [r0], #1
  405238:	d301      	bcc.n	40523e <memcpy+0xe2>
  40523a:	880b      	ldrh	r3, [r1, #0]
  40523c:	8003      	strh	r3, [r0, #0]
  40523e:	4660      	mov	r0, ip
  405240:	4770      	bx	lr
  405242:	bf00      	nop
  405244:	2a08      	cmp	r2, #8
  405246:	d313      	bcc.n	405270 <memcpy+0x114>
  405248:	078b      	lsls	r3, r1, #30
  40524a:	d08d      	beq.n	405168 <memcpy+0xc>
  40524c:	f010 0303 	ands.w	r3, r0, #3
  405250:	d08a      	beq.n	405168 <memcpy+0xc>
  405252:	f1c3 0304 	rsb	r3, r3, #4
  405256:	1ad2      	subs	r2, r2, r3
  405258:	07db      	lsls	r3, r3, #31
  40525a:	bf1c      	itt	ne
  40525c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405260:	f800 3b01 	strbne.w	r3, [r0], #1
  405264:	d380      	bcc.n	405168 <memcpy+0xc>
  405266:	f831 3b02 	ldrh.w	r3, [r1], #2
  40526a:	f820 3b02 	strh.w	r3, [r0], #2
  40526e:	e77b      	b.n	405168 <memcpy+0xc>
  405270:	3a04      	subs	r2, #4
  405272:	d3d9      	bcc.n	405228 <memcpy+0xcc>
  405274:	3a01      	subs	r2, #1
  405276:	f811 3b01 	ldrb.w	r3, [r1], #1
  40527a:	f800 3b01 	strb.w	r3, [r0], #1
  40527e:	d2f9      	bcs.n	405274 <memcpy+0x118>
  405280:	780b      	ldrb	r3, [r1, #0]
  405282:	7003      	strb	r3, [r0, #0]
  405284:	784b      	ldrb	r3, [r1, #1]
  405286:	7043      	strb	r3, [r0, #1]
  405288:	788b      	ldrb	r3, [r1, #2]
  40528a:	7083      	strb	r3, [r0, #2]
  40528c:	4660      	mov	r0, ip
  40528e:	4770      	bx	lr

00405290 <memset>:
  405290:	b470      	push	{r4, r5, r6}
  405292:	0786      	lsls	r6, r0, #30
  405294:	d046      	beq.n	405324 <memset+0x94>
  405296:	1e54      	subs	r4, r2, #1
  405298:	2a00      	cmp	r2, #0
  40529a:	d041      	beq.n	405320 <memset+0x90>
  40529c:	b2ca      	uxtb	r2, r1
  40529e:	4603      	mov	r3, r0
  4052a0:	e002      	b.n	4052a8 <memset+0x18>
  4052a2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4052a6:	d33b      	bcc.n	405320 <memset+0x90>
  4052a8:	f803 2b01 	strb.w	r2, [r3], #1
  4052ac:	079d      	lsls	r5, r3, #30
  4052ae:	d1f8      	bne.n	4052a2 <memset+0x12>
  4052b0:	2c03      	cmp	r4, #3
  4052b2:	d92e      	bls.n	405312 <memset+0x82>
  4052b4:	b2cd      	uxtb	r5, r1
  4052b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4052ba:	2c0f      	cmp	r4, #15
  4052bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4052c0:	d919      	bls.n	4052f6 <memset+0x66>
  4052c2:	f103 0210 	add.w	r2, r3, #16
  4052c6:	4626      	mov	r6, r4
  4052c8:	3e10      	subs	r6, #16
  4052ca:	2e0f      	cmp	r6, #15
  4052cc:	f842 5c10 	str.w	r5, [r2, #-16]
  4052d0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4052d4:	f842 5c08 	str.w	r5, [r2, #-8]
  4052d8:	f842 5c04 	str.w	r5, [r2, #-4]
  4052dc:	f102 0210 	add.w	r2, r2, #16
  4052e0:	d8f2      	bhi.n	4052c8 <memset+0x38>
  4052e2:	f1a4 0210 	sub.w	r2, r4, #16
  4052e6:	f022 020f 	bic.w	r2, r2, #15
  4052ea:	f004 040f 	and.w	r4, r4, #15
  4052ee:	3210      	adds	r2, #16
  4052f0:	2c03      	cmp	r4, #3
  4052f2:	4413      	add	r3, r2
  4052f4:	d90d      	bls.n	405312 <memset+0x82>
  4052f6:	461e      	mov	r6, r3
  4052f8:	4622      	mov	r2, r4
  4052fa:	3a04      	subs	r2, #4
  4052fc:	2a03      	cmp	r2, #3
  4052fe:	f846 5b04 	str.w	r5, [r6], #4
  405302:	d8fa      	bhi.n	4052fa <memset+0x6a>
  405304:	1f22      	subs	r2, r4, #4
  405306:	f022 0203 	bic.w	r2, r2, #3
  40530a:	3204      	adds	r2, #4
  40530c:	4413      	add	r3, r2
  40530e:	f004 0403 	and.w	r4, r4, #3
  405312:	b12c      	cbz	r4, 405320 <memset+0x90>
  405314:	b2c9      	uxtb	r1, r1
  405316:	441c      	add	r4, r3
  405318:	f803 1b01 	strb.w	r1, [r3], #1
  40531c:	429c      	cmp	r4, r3
  40531e:	d1fb      	bne.n	405318 <memset+0x88>
  405320:	bc70      	pop	{r4, r5, r6}
  405322:	4770      	bx	lr
  405324:	4614      	mov	r4, r2
  405326:	4603      	mov	r3, r0
  405328:	e7c2      	b.n	4052b0 <memset+0x20>
  40532a:	bf00      	nop

0040532c <__malloc_lock>:
  40532c:	4801      	ldr	r0, [pc, #4]	; (405334 <__malloc_lock+0x8>)
  40532e:	f001 bd6b 	b.w	406e08 <__retarget_lock_acquire_recursive>
  405332:	bf00      	nop
  405334:	2040ca70 	.word	0x2040ca70

00405338 <__malloc_unlock>:
  405338:	4801      	ldr	r0, [pc, #4]	; (405340 <__malloc_unlock+0x8>)
  40533a:	f001 bd67 	b.w	406e0c <__retarget_lock_release_recursive>
  40533e:	bf00      	nop
  405340:	2040ca70 	.word	0x2040ca70

00405344 <_sbrk_r>:
  405344:	b538      	push	{r3, r4, r5, lr}
  405346:	4c07      	ldr	r4, [pc, #28]	; (405364 <_sbrk_r+0x20>)
  405348:	2300      	movs	r3, #0
  40534a:	4605      	mov	r5, r0
  40534c:	4608      	mov	r0, r1
  40534e:	6023      	str	r3, [r4, #0]
  405350:	f7fc ffa6 	bl	4022a0 <_sbrk>
  405354:	1c43      	adds	r3, r0, #1
  405356:	d000      	beq.n	40535a <_sbrk_r+0x16>
  405358:	bd38      	pop	{r3, r4, r5, pc}
  40535a:	6823      	ldr	r3, [r4, #0]
  40535c:	2b00      	cmp	r3, #0
  40535e:	d0fb      	beq.n	405358 <_sbrk_r+0x14>
  405360:	602b      	str	r3, [r5, #0]
  405362:	bd38      	pop	{r3, r4, r5, pc}
  405364:	2040ca84 	.word	0x2040ca84

00405368 <setbuf>:
  405368:	2900      	cmp	r1, #0
  40536a:	bf0c      	ite	eq
  40536c:	2202      	moveq	r2, #2
  40536e:	2200      	movne	r2, #0
  405370:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405374:	f000 b800 	b.w	405378 <setvbuf>

00405378 <setvbuf>:
  405378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40537c:	4c61      	ldr	r4, [pc, #388]	; (405504 <setvbuf+0x18c>)
  40537e:	6825      	ldr	r5, [r4, #0]
  405380:	b083      	sub	sp, #12
  405382:	4604      	mov	r4, r0
  405384:	460f      	mov	r7, r1
  405386:	4690      	mov	r8, r2
  405388:	461e      	mov	r6, r3
  40538a:	b115      	cbz	r5, 405392 <setvbuf+0x1a>
  40538c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40538e:	2b00      	cmp	r3, #0
  405390:	d064      	beq.n	40545c <setvbuf+0xe4>
  405392:	f1b8 0f02 	cmp.w	r8, #2
  405396:	d006      	beq.n	4053a6 <setvbuf+0x2e>
  405398:	f1b8 0f01 	cmp.w	r8, #1
  40539c:	f200 809f 	bhi.w	4054de <setvbuf+0x166>
  4053a0:	2e00      	cmp	r6, #0
  4053a2:	f2c0 809c 	blt.w	4054de <setvbuf+0x166>
  4053a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4053a8:	07d8      	lsls	r0, r3, #31
  4053aa:	d534      	bpl.n	405416 <setvbuf+0x9e>
  4053ac:	4621      	mov	r1, r4
  4053ae:	4628      	mov	r0, r5
  4053b0:	f001 f912 	bl	4065d8 <_fflush_r>
  4053b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4053b6:	b141      	cbz	r1, 4053ca <setvbuf+0x52>
  4053b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4053bc:	4299      	cmp	r1, r3
  4053be:	d002      	beq.n	4053c6 <setvbuf+0x4e>
  4053c0:	4628      	mov	r0, r5
  4053c2:	f001 fa87 	bl	4068d4 <_free_r>
  4053c6:	2300      	movs	r3, #0
  4053c8:	6323      	str	r3, [r4, #48]	; 0x30
  4053ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053ce:	2200      	movs	r2, #0
  4053d0:	61a2      	str	r2, [r4, #24]
  4053d2:	6062      	str	r2, [r4, #4]
  4053d4:	061a      	lsls	r2, r3, #24
  4053d6:	d43a      	bmi.n	40544e <setvbuf+0xd6>
  4053d8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4053dc:	f023 0303 	bic.w	r3, r3, #3
  4053e0:	f1b8 0f02 	cmp.w	r8, #2
  4053e4:	81a3      	strh	r3, [r4, #12]
  4053e6:	d01d      	beq.n	405424 <setvbuf+0xac>
  4053e8:	ab01      	add	r3, sp, #4
  4053ea:	466a      	mov	r2, sp
  4053ec:	4621      	mov	r1, r4
  4053ee:	4628      	mov	r0, r5
  4053f0:	f001 fd0e 	bl	406e10 <__swhatbuf_r>
  4053f4:	89a3      	ldrh	r3, [r4, #12]
  4053f6:	4318      	orrs	r0, r3
  4053f8:	81a0      	strh	r0, [r4, #12]
  4053fa:	2e00      	cmp	r6, #0
  4053fc:	d132      	bne.n	405464 <setvbuf+0xec>
  4053fe:	9e00      	ldr	r6, [sp, #0]
  405400:	4630      	mov	r0, r6
  405402:	f7ff fbf3 	bl	404bec <malloc>
  405406:	4607      	mov	r7, r0
  405408:	2800      	cmp	r0, #0
  40540a:	d06b      	beq.n	4054e4 <setvbuf+0x16c>
  40540c:	89a3      	ldrh	r3, [r4, #12]
  40540e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405412:	81a3      	strh	r3, [r4, #12]
  405414:	e028      	b.n	405468 <setvbuf+0xf0>
  405416:	89a3      	ldrh	r3, [r4, #12]
  405418:	0599      	lsls	r1, r3, #22
  40541a:	d4c7      	bmi.n	4053ac <setvbuf+0x34>
  40541c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40541e:	f001 fcf3 	bl	406e08 <__retarget_lock_acquire_recursive>
  405422:	e7c3      	b.n	4053ac <setvbuf+0x34>
  405424:	2500      	movs	r5, #0
  405426:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405428:	2600      	movs	r6, #0
  40542a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40542e:	f043 0302 	orr.w	r3, r3, #2
  405432:	2001      	movs	r0, #1
  405434:	60a6      	str	r6, [r4, #8]
  405436:	07ce      	lsls	r6, r1, #31
  405438:	81a3      	strh	r3, [r4, #12]
  40543a:	6022      	str	r2, [r4, #0]
  40543c:	6122      	str	r2, [r4, #16]
  40543e:	6160      	str	r0, [r4, #20]
  405440:	d401      	bmi.n	405446 <setvbuf+0xce>
  405442:	0598      	lsls	r0, r3, #22
  405444:	d53e      	bpl.n	4054c4 <setvbuf+0x14c>
  405446:	4628      	mov	r0, r5
  405448:	b003      	add	sp, #12
  40544a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40544e:	6921      	ldr	r1, [r4, #16]
  405450:	4628      	mov	r0, r5
  405452:	f001 fa3f 	bl	4068d4 <_free_r>
  405456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40545a:	e7bd      	b.n	4053d8 <setvbuf+0x60>
  40545c:	4628      	mov	r0, r5
  40545e:	f001 f913 	bl	406688 <__sinit>
  405462:	e796      	b.n	405392 <setvbuf+0x1a>
  405464:	2f00      	cmp	r7, #0
  405466:	d0cb      	beq.n	405400 <setvbuf+0x88>
  405468:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40546a:	2b00      	cmp	r3, #0
  40546c:	d033      	beq.n	4054d6 <setvbuf+0x15e>
  40546e:	9b00      	ldr	r3, [sp, #0]
  405470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405474:	6027      	str	r7, [r4, #0]
  405476:	429e      	cmp	r6, r3
  405478:	bf1c      	itt	ne
  40547a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40547e:	81a2      	strhne	r2, [r4, #12]
  405480:	f1b8 0f01 	cmp.w	r8, #1
  405484:	bf04      	itt	eq
  405486:	f042 0201 	orreq.w	r2, r2, #1
  40548a:	81a2      	strheq	r2, [r4, #12]
  40548c:	b292      	uxth	r2, r2
  40548e:	f012 0308 	ands.w	r3, r2, #8
  405492:	6127      	str	r7, [r4, #16]
  405494:	6166      	str	r6, [r4, #20]
  405496:	d00e      	beq.n	4054b6 <setvbuf+0x13e>
  405498:	07d1      	lsls	r1, r2, #31
  40549a:	d51a      	bpl.n	4054d2 <setvbuf+0x15a>
  40549c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40549e:	4276      	negs	r6, r6
  4054a0:	2300      	movs	r3, #0
  4054a2:	f015 0501 	ands.w	r5, r5, #1
  4054a6:	61a6      	str	r6, [r4, #24]
  4054a8:	60a3      	str	r3, [r4, #8]
  4054aa:	d009      	beq.n	4054c0 <setvbuf+0x148>
  4054ac:	2500      	movs	r5, #0
  4054ae:	4628      	mov	r0, r5
  4054b0:	b003      	add	sp, #12
  4054b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4054b6:	60a3      	str	r3, [r4, #8]
  4054b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4054ba:	f015 0501 	ands.w	r5, r5, #1
  4054be:	d1f5      	bne.n	4054ac <setvbuf+0x134>
  4054c0:	0593      	lsls	r3, r2, #22
  4054c2:	d4c0      	bmi.n	405446 <setvbuf+0xce>
  4054c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4054c6:	f001 fca1 	bl	406e0c <__retarget_lock_release_recursive>
  4054ca:	4628      	mov	r0, r5
  4054cc:	b003      	add	sp, #12
  4054ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4054d2:	60a6      	str	r6, [r4, #8]
  4054d4:	e7f0      	b.n	4054b8 <setvbuf+0x140>
  4054d6:	4628      	mov	r0, r5
  4054d8:	f001 f8d6 	bl	406688 <__sinit>
  4054dc:	e7c7      	b.n	40546e <setvbuf+0xf6>
  4054de:	f04f 35ff 	mov.w	r5, #4294967295
  4054e2:	e7b0      	b.n	405446 <setvbuf+0xce>
  4054e4:	f8dd 9000 	ldr.w	r9, [sp]
  4054e8:	45b1      	cmp	r9, r6
  4054ea:	d004      	beq.n	4054f6 <setvbuf+0x17e>
  4054ec:	4648      	mov	r0, r9
  4054ee:	f7ff fb7d 	bl	404bec <malloc>
  4054f2:	4607      	mov	r7, r0
  4054f4:	b920      	cbnz	r0, 405500 <setvbuf+0x188>
  4054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054fa:	f04f 35ff 	mov.w	r5, #4294967295
  4054fe:	e792      	b.n	405426 <setvbuf+0xae>
  405500:	464e      	mov	r6, r9
  405502:	e783      	b.n	40540c <setvbuf+0x94>
  405504:	20400014 	.word	0x20400014
	...

00405540 <strlen>:
  405540:	f890 f000 	pld	[r0]
  405544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405548:	f020 0107 	bic.w	r1, r0, #7
  40554c:	f06f 0c00 	mvn.w	ip, #0
  405550:	f010 0407 	ands.w	r4, r0, #7
  405554:	f891 f020 	pld	[r1, #32]
  405558:	f040 8049 	bne.w	4055ee <strlen+0xae>
  40555c:	f04f 0400 	mov.w	r4, #0
  405560:	f06f 0007 	mvn.w	r0, #7
  405564:	e9d1 2300 	ldrd	r2, r3, [r1]
  405568:	f891 f040 	pld	[r1, #64]	; 0x40
  40556c:	f100 0008 	add.w	r0, r0, #8
  405570:	fa82 f24c 	uadd8	r2, r2, ip
  405574:	faa4 f28c 	sel	r2, r4, ip
  405578:	fa83 f34c 	uadd8	r3, r3, ip
  40557c:	faa2 f38c 	sel	r3, r2, ip
  405580:	bb4b      	cbnz	r3, 4055d6 <strlen+0x96>
  405582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405586:	fa82 f24c 	uadd8	r2, r2, ip
  40558a:	f100 0008 	add.w	r0, r0, #8
  40558e:	faa4 f28c 	sel	r2, r4, ip
  405592:	fa83 f34c 	uadd8	r3, r3, ip
  405596:	faa2 f38c 	sel	r3, r2, ip
  40559a:	b9e3      	cbnz	r3, 4055d6 <strlen+0x96>
  40559c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4055a0:	fa82 f24c 	uadd8	r2, r2, ip
  4055a4:	f100 0008 	add.w	r0, r0, #8
  4055a8:	faa4 f28c 	sel	r2, r4, ip
  4055ac:	fa83 f34c 	uadd8	r3, r3, ip
  4055b0:	faa2 f38c 	sel	r3, r2, ip
  4055b4:	b97b      	cbnz	r3, 4055d6 <strlen+0x96>
  4055b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4055ba:	f101 0120 	add.w	r1, r1, #32
  4055be:	fa82 f24c 	uadd8	r2, r2, ip
  4055c2:	f100 0008 	add.w	r0, r0, #8
  4055c6:	faa4 f28c 	sel	r2, r4, ip
  4055ca:	fa83 f34c 	uadd8	r3, r3, ip
  4055ce:	faa2 f38c 	sel	r3, r2, ip
  4055d2:	2b00      	cmp	r3, #0
  4055d4:	d0c6      	beq.n	405564 <strlen+0x24>
  4055d6:	2a00      	cmp	r2, #0
  4055d8:	bf04      	itt	eq
  4055da:	3004      	addeq	r0, #4
  4055dc:	461a      	moveq	r2, r3
  4055de:	ba12      	rev	r2, r2
  4055e0:	fab2 f282 	clz	r2, r2
  4055e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4055e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4055ec:	4770      	bx	lr
  4055ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4055f2:	f004 0503 	and.w	r5, r4, #3
  4055f6:	f1c4 0000 	rsb	r0, r4, #0
  4055fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4055fe:	f014 0f04 	tst.w	r4, #4
  405602:	f891 f040 	pld	[r1, #64]	; 0x40
  405606:	fa0c f505 	lsl.w	r5, ip, r5
  40560a:	ea62 0205 	orn	r2, r2, r5
  40560e:	bf1c      	itt	ne
  405610:	ea63 0305 	ornne	r3, r3, r5
  405614:	4662      	movne	r2, ip
  405616:	f04f 0400 	mov.w	r4, #0
  40561a:	e7a9      	b.n	405570 <strlen+0x30>

0040561c <__sprint_r.part.0>:
  40561c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405620:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405622:	049c      	lsls	r4, r3, #18
  405624:	4693      	mov	fp, r2
  405626:	d52f      	bpl.n	405688 <__sprint_r.part.0+0x6c>
  405628:	6893      	ldr	r3, [r2, #8]
  40562a:	6812      	ldr	r2, [r2, #0]
  40562c:	b353      	cbz	r3, 405684 <__sprint_r.part.0+0x68>
  40562e:	460e      	mov	r6, r1
  405630:	4607      	mov	r7, r0
  405632:	f102 0908 	add.w	r9, r2, #8
  405636:	e919 0420 	ldmdb	r9, {r5, sl}
  40563a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40563e:	d017      	beq.n	405670 <__sprint_r.part.0+0x54>
  405640:	3d04      	subs	r5, #4
  405642:	2400      	movs	r4, #0
  405644:	e001      	b.n	40564a <__sprint_r.part.0+0x2e>
  405646:	45a0      	cmp	r8, r4
  405648:	d010      	beq.n	40566c <__sprint_r.part.0+0x50>
  40564a:	4632      	mov	r2, r6
  40564c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405650:	4638      	mov	r0, r7
  405652:	f001 f8bb 	bl	4067cc <_fputwc_r>
  405656:	1c43      	adds	r3, r0, #1
  405658:	f104 0401 	add.w	r4, r4, #1
  40565c:	d1f3      	bne.n	405646 <__sprint_r.part.0+0x2a>
  40565e:	2300      	movs	r3, #0
  405660:	f8cb 3008 	str.w	r3, [fp, #8]
  405664:	f8cb 3004 	str.w	r3, [fp, #4]
  405668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40566c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405670:	f02a 0a03 	bic.w	sl, sl, #3
  405674:	eba3 030a 	sub.w	r3, r3, sl
  405678:	f8cb 3008 	str.w	r3, [fp, #8]
  40567c:	f109 0908 	add.w	r9, r9, #8
  405680:	2b00      	cmp	r3, #0
  405682:	d1d8      	bne.n	405636 <__sprint_r.part.0+0x1a>
  405684:	2000      	movs	r0, #0
  405686:	e7ea      	b.n	40565e <__sprint_r.part.0+0x42>
  405688:	f001 fa0a 	bl	406aa0 <__sfvwrite_r>
  40568c:	2300      	movs	r3, #0
  40568e:	f8cb 3008 	str.w	r3, [fp, #8]
  405692:	f8cb 3004 	str.w	r3, [fp, #4]
  405696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40569a:	bf00      	nop

0040569c <_vfiprintf_r>:
  40569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056a0:	b0ad      	sub	sp, #180	; 0xb4
  4056a2:	461d      	mov	r5, r3
  4056a4:	468b      	mov	fp, r1
  4056a6:	4690      	mov	r8, r2
  4056a8:	9307      	str	r3, [sp, #28]
  4056aa:	9006      	str	r0, [sp, #24]
  4056ac:	b118      	cbz	r0, 4056b6 <_vfiprintf_r+0x1a>
  4056ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4056b0:	2b00      	cmp	r3, #0
  4056b2:	f000 80f3 	beq.w	40589c <_vfiprintf_r+0x200>
  4056b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4056ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4056be:	07df      	lsls	r7, r3, #31
  4056c0:	b281      	uxth	r1, r0
  4056c2:	d402      	bmi.n	4056ca <_vfiprintf_r+0x2e>
  4056c4:	058e      	lsls	r6, r1, #22
  4056c6:	f140 80fc 	bpl.w	4058c2 <_vfiprintf_r+0x226>
  4056ca:	048c      	lsls	r4, r1, #18
  4056cc:	d40a      	bmi.n	4056e4 <_vfiprintf_r+0x48>
  4056ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4056d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4056d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4056da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4056de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4056e2:	b289      	uxth	r1, r1
  4056e4:	0708      	lsls	r0, r1, #28
  4056e6:	f140 80b3 	bpl.w	405850 <_vfiprintf_r+0x1b4>
  4056ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4056ee:	2b00      	cmp	r3, #0
  4056f0:	f000 80ae 	beq.w	405850 <_vfiprintf_r+0x1b4>
  4056f4:	f001 031a 	and.w	r3, r1, #26
  4056f8:	2b0a      	cmp	r3, #10
  4056fa:	f000 80b5 	beq.w	405868 <_vfiprintf_r+0x1cc>
  4056fe:	2300      	movs	r3, #0
  405700:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405704:	930b      	str	r3, [sp, #44]	; 0x2c
  405706:	9311      	str	r3, [sp, #68]	; 0x44
  405708:	9310      	str	r3, [sp, #64]	; 0x40
  40570a:	9303      	str	r3, [sp, #12]
  40570c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405710:	46ca      	mov	sl, r9
  405712:	f8cd b010 	str.w	fp, [sp, #16]
  405716:	f898 3000 	ldrb.w	r3, [r8]
  40571a:	4644      	mov	r4, r8
  40571c:	b1fb      	cbz	r3, 40575e <_vfiprintf_r+0xc2>
  40571e:	2b25      	cmp	r3, #37	; 0x25
  405720:	d102      	bne.n	405728 <_vfiprintf_r+0x8c>
  405722:	e01c      	b.n	40575e <_vfiprintf_r+0xc2>
  405724:	2b25      	cmp	r3, #37	; 0x25
  405726:	d003      	beq.n	405730 <_vfiprintf_r+0x94>
  405728:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40572c:	2b00      	cmp	r3, #0
  40572e:	d1f9      	bne.n	405724 <_vfiprintf_r+0x88>
  405730:	eba4 0508 	sub.w	r5, r4, r8
  405734:	b19d      	cbz	r5, 40575e <_vfiprintf_r+0xc2>
  405736:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405738:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40573a:	f8ca 8000 	str.w	r8, [sl]
  40573e:	3301      	adds	r3, #1
  405740:	442a      	add	r2, r5
  405742:	2b07      	cmp	r3, #7
  405744:	f8ca 5004 	str.w	r5, [sl, #4]
  405748:	9211      	str	r2, [sp, #68]	; 0x44
  40574a:	9310      	str	r3, [sp, #64]	; 0x40
  40574c:	dd7a      	ble.n	405844 <_vfiprintf_r+0x1a8>
  40574e:	2a00      	cmp	r2, #0
  405750:	f040 84b0 	bne.w	4060b4 <_vfiprintf_r+0xa18>
  405754:	9b03      	ldr	r3, [sp, #12]
  405756:	9210      	str	r2, [sp, #64]	; 0x40
  405758:	442b      	add	r3, r5
  40575a:	46ca      	mov	sl, r9
  40575c:	9303      	str	r3, [sp, #12]
  40575e:	7823      	ldrb	r3, [r4, #0]
  405760:	2b00      	cmp	r3, #0
  405762:	f000 83e0 	beq.w	405f26 <_vfiprintf_r+0x88a>
  405766:	2000      	movs	r0, #0
  405768:	f04f 0300 	mov.w	r3, #0
  40576c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405770:	f104 0801 	add.w	r8, r4, #1
  405774:	7862      	ldrb	r2, [r4, #1]
  405776:	4605      	mov	r5, r0
  405778:	4606      	mov	r6, r0
  40577a:	4603      	mov	r3, r0
  40577c:	f04f 34ff 	mov.w	r4, #4294967295
  405780:	f108 0801 	add.w	r8, r8, #1
  405784:	f1a2 0120 	sub.w	r1, r2, #32
  405788:	2958      	cmp	r1, #88	; 0x58
  40578a:	f200 82de 	bhi.w	405d4a <_vfiprintf_r+0x6ae>
  40578e:	e8df f011 	tbh	[pc, r1, lsl #1]
  405792:	0221      	.short	0x0221
  405794:	02dc02dc 	.word	0x02dc02dc
  405798:	02dc0229 	.word	0x02dc0229
  40579c:	02dc02dc 	.word	0x02dc02dc
  4057a0:	02dc02dc 	.word	0x02dc02dc
  4057a4:	028902dc 	.word	0x028902dc
  4057a8:	02dc0295 	.word	0x02dc0295
  4057ac:	02bd00a2 	.word	0x02bd00a2
  4057b0:	019f02dc 	.word	0x019f02dc
  4057b4:	01a401a4 	.word	0x01a401a4
  4057b8:	01a401a4 	.word	0x01a401a4
  4057bc:	01a401a4 	.word	0x01a401a4
  4057c0:	01a401a4 	.word	0x01a401a4
  4057c4:	02dc01a4 	.word	0x02dc01a4
  4057c8:	02dc02dc 	.word	0x02dc02dc
  4057cc:	02dc02dc 	.word	0x02dc02dc
  4057d0:	02dc02dc 	.word	0x02dc02dc
  4057d4:	02dc02dc 	.word	0x02dc02dc
  4057d8:	01b202dc 	.word	0x01b202dc
  4057dc:	02dc02dc 	.word	0x02dc02dc
  4057e0:	02dc02dc 	.word	0x02dc02dc
  4057e4:	02dc02dc 	.word	0x02dc02dc
  4057e8:	02dc02dc 	.word	0x02dc02dc
  4057ec:	02dc02dc 	.word	0x02dc02dc
  4057f0:	02dc0197 	.word	0x02dc0197
  4057f4:	02dc02dc 	.word	0x02dc02dc
  4057f8:	02dc02dc 	.word	0x02dc02dc
  4057fc:	02dc019b 	.word	0x02dc019b
  405800:	025302dc 	.word	0x025302dc
  405804:	02dc02dc 	.word	0x02dc02dc
  405808:	02dc02dc 	.word	0x02dc02dc
  40580c:	02dc02dc 	.word	0x02dc02dc
  405810:	02dc02dc 	.word	0x02dc02dc
  405814:	02dc02dc 	.word	0x02dc02dc
  405818:	021b025a 	.word	0x021b025a
  40581c:	02dc02dc 	.word	0x02dc02dc
  405820:	026e02dc 	.word	0x026e02dc
  405824:	02dc021b 	.word	0x02dc021b
  405828:	027302dc 	.word	0x027302dc
  40582c:	01f502dc 	.word	0x01f502dc
  405830:	02090182 	.word	0x02090182
  405834:	02dc02d7 	.word	0x02dc02d7
  405838:	02dc029a 	.word	0x02dc029a
  40583c:	02dc00a7 	.word	0x02dc00a7
  405840:	022e02dc 	.word	0x022e02dc
  405844:	f10a 0a08 	add.w	sl, sl, #8
  405848:	9b03      	ldr	r3, [sp, #12]
  40584a:	442b      	add	r3, r5
  40584c:	9303      	str	r3, [sp, #12]
  40584e:	e786      	b.n	40575e <_vfiprintf_r+0xc2>
  405850:	4659      	mov	r1, fp
  405852:	9806      	ldr	r0, [sp, #24]
  405854:	f000 fdac 	bl	4063b0 <__swsetup_r>
  405858:	bb18      	cbnz	r0, 4058a2 <_vfiprintf_r+0x206>
  40585a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40585e:	f001 031a 	and.w	r3, r1, #26
  405862:	2b0a      	cmp	r3, #10
  405864:	f47f af4b 	bne.w	4056fe <_vfiprintf_r+0x62>
  405868:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40586c:	2b00      	cmp	r3, #0
  40586e:	f6ff af46 	blt.w	4056fe <_vfiprintf_r+0x62>
  405872:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405876:	07db      	lsls	r3, r3, #31
  405878:	d405      	bmi.n	405886 <_vfiprintf_r+0x1ea>
  40587a:	058f      	lsls	r7, r1, #22
  40587c:	d403      	bmi.n	405886 <_vfiprintf_r+0x1ea>
  40587e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405882:	f001 fac3 	bl	406e0c <__retarget_lock_release_recursive>
  405886:	462b      	mov	r3, r5
  405888:	4642      	mov	r2, r8
  40588a:	4659      	mov	r1, fp
  40588c:	9806      	ldr	r0, [sp, #24]
  40588e:	f000 fd4d 	bl	40632c <__sbprintf>
  405892:	9003      	str	r0, [sp, #12]
  405894:	9803      	ldr	r0, [sp, #12]
  405896:	b02d      	add	sp, #180	; 0xb4
  405898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40589c:	f000 fef4 	bl	406688 <__sinit>
  4058a0:	e709      	b.n	4056b6 <_vfiprintf_r+0x1a>
  4058a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4058a6:	07d9      	lsls	r1, r3, #31
  4058a8:	d404      	bmi.n	4058b4 <_vfiprintf_r+0x218>
  4058aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4058ae:	059a      	lsls	r2, r3, #22
  4058b0:	f140 84aa 	bpl.w	406208 <_vfiprintf_r+0xb6c>
  4058b4:	f04f 33ff 	mov.w	r3, #4294967295
  4058b8:	9303      	str	r3, [sp, #12]
  4058ba:	9803      	ldr	r0, [sp, #12]
  4058bc:	b02d      	add	sp, #180	; 0xb4
  4058be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4058c6:	f001 fa9f 	bl	406e08 <__retarget_lock_acquire_recursive>
  4058ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4058ce:	b281      	uxth	r1, r0
  4058d0:	e6fb      	b.n	4056ca <_vfiprintf_r+0x2e>
  4058d2:	4276      	negs	r6, r6
  4058d4:	9207      	str	r2, [sp, #28]
  4058d6:	f043 0304 	orr.w	r3, r3, #4
  4058da:	f898 2000 	ldrb.w	r2, [r8]
  4058de:	e74f      	b.n	405780 <_vfiprintf_r+0xe4>
  4058e0:	9608      	str	r6, [sp, #32]
  4058e2:	069e      	lsls	r6, r3, #26
  4058e4:	f100 8450 	bmi.w	406188 <_vfiprintf_r+0xaec>
  4058e8:	9907      	ldr	r1, [sp, #28]
  4058ea:	06dd      	lsls	r5, r3, #27
  4058ec:	460a      	mov	r2, r1
  4058ee:	f100 83ef 	bmi.w	4060d0 <_vfiprintf_r+0xa34>
  4058f2:	0658      	lsls	r0, r3, #25
  4058f4:	f140 83ec 	bpl.w	4060d0 <_vfiprintf_r+0xa34>
  4058f8:	880e      	ldrh	r6, [r1, #0]
  4058fa:	3104      	adds	r1, #4
  4058fc:	2700      	movs	r7, #0
  4058fe:	2201      	movs	r2, #1
  405900:	9107      	str	r1, [sp, #28]
  405902:	f04f 0100 	mov.w	r1, #0
  405906:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40590a:	2500      	movs	r5, #0
  40590c:	1c61      	adds	r1, r4, #1
  40590e:	f000 8116 	beq.w	405b3e <_vfiprintf_r+0x4a2>
  405912:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405916:	9102      	str	r1, [sp, #8]
  405918:	ea56 0107 	orrs.w	r1, r6, r7
  40591c:	f040 8114 	bne.w	405b48 <_vfiprintf_r+0x4ac>
  405920:	2c00      	cmp	r4, #0
  405922:	f040 835c 	bne.w	405fde <_vfiprintf_r+0x942>
  405926:	2a00      	cmp	r2, #0
  405928:	f040 83b7 	bne.w	40609a <_vfiprintf_r+0x9fe>
  40592c:	f013 0301 	ands.w	r3, r3, #1
  405930:	9305      	str	r3, [sp, #20]
  405932:	f000 8457 	beq.w	4061e4 <_vfiprintf_r+0xb48>
  405936:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40593a:	2330      	movs	r3, #48	; 0x30
  40593c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405940:	9b05      	ldr	r3, [sp, #20]
  405942:	42a3      	cmp	r3, r4
  405944:	bfb8      	it	lt
  405946:	4623      	movlt	r3, r4
  405948:	9301      	str	r3, [sp, #4]
  40594a:	b10d      	cbz	r5, 405950 <_vfiprintf_r+0x2b4>
  40594c:	3301      	adds	r3, #1
  40594e:	9301      	str	r3, [sp, #4]
  405950:	9b02      	ldr	r3, [sp, #8]
  405952:	f013 0302 	ands.w	r3, r3, #2
  405956:	9309      	str	r3, [sp, #36]	; 0x24
  405958:	d002      	beq.n	405960 <_vfiprintf_r+0x2c4>
  40595a:	9b01      	ldr	r3, [sp, #4]
  40595c:	3302      	adds	r3, #2
  40595e:	9301      	str	r3, [sp, #4]
  405960:	9b02      	ldr	r3, [sp, #8]
  405962:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405966:	930a      	str	r3, [sp, #40]	; 0x28
  405968:	f040 8217 	bne.w	405d9a <_vfiprintf_r+0x6fe>
  40596c:	9b08      	ldr	r3, [sp, #32]
  40596e:	9a01      	ldr	r2, [sp, #4]
  405970:	1a9d      	subs	r5, r3, r2
  405972:	2d00      	cmp	r5, #0
  405974:	f340 8211 	ble.w	405d9a <_vfiprintf_r+0x6fe>
  405978:	2d10      	cmp	r5, #16
  40597a:	f340 8490 	ble.w	40629e <_vfiprintf_r+0xc02>
  40597e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405980:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405982:	4ec4      	ldr	r6, [pc, #784]	; (405c94 <_vfiprintf_r+0x5f8>)
  405984:	46d6      	mov	lr, sl
  405986:	2710      	movs	r7, #16
  405988:	46a2      	mov	sl, r4
  40598a:	4619      	mov	r1, r3
  40598c:	9c06      	ldr	r4, [sp, #24]
  40598e:	e007      	b.n	4059a0 <_vfiprintf_r+0x304>
  405990:	f101 0c02 	add.w	ip, r1, #2
  405994:	f10e 0e08 	add.w	lr, lr, #8
  405998:	4601      	mov	r1, r0
  40599a:	3d10      	subs	r5, #16
  40599c:	2d10      	cmp	r5, #16
  40599e:	dd11      	ble.n	4059c4 <_vfiprintf_r+0x328>
  4059a0:	1c48      	adds	r0, r1, #1
  4059a2:	3210      	adds	r2, #16
  4059a4:	2807      	cmp	r0, #7
  4059a6:	9211      	str	r2, [sp, #68]	; 0x44
  4059a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4059ac:	9010      	str	r0, [sp, #64]	; 0x40
  4059ae:	ddef      	ble.n	405990 <_vfiprintf_r+0x2f4>
  4059b0:	2a00      	cmp	r2, #0
  4059b2:	f040 81e4 	bne.w	405d7e <_vfiprintf_r+0x6e2>
  4059b6:	3d10      	subs	r5, #16
  4059b8:	2d10      	cmp	r5, #16
  4059ba:	4611      	mov	r1, r2
  4059bc:	f04f 0c01 	mov.w	ip, #1
  4059c0:	46ce      	mov	lr, r9
  4059c2:	dced      	bgt.n	4059a0 <_vfiprintf_r+0x304>
  4059c4:	4654      	mov	r4, sl
  4059c6:	4661      	mov	r1, ip
  4059c8:	46f2      	mov	sl, lr
  4059ca:	442a      	add	r2, r5
  4059cc:	2907      	cmp	r1, #7
  4059ce:	9211      	str	r2, [sp, #68]	; 0x44
  4059d0:	f8ca 6000 	str.w	r6, [sl]
  4059d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4059d8:	9110      	str	r1, [sp, #64]	; 0x40
  4059da:	f300 82ec 	bgt.w	405fb6 <_vfiprintf_r+0x91a>
  4059de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4059e2:	f10a 0a08 	add.w	sl, sl, #8
  4059e6:	1c48      	adds	r0, r1, #1
  4059e8:	2d00      	cmp	r5, #0
  4059ea:	f040 81de 	bne.w	405daa <_vfiprintf_r+0x70e>
  4059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4059f0:	2b00      	cmp	r3, #0
  4059f2:	f000 81f8 	beq.w	405de6 <_vfiprintf_r+0x74a>
  4059f6:	3202      	adds	r2, #2
  4059f8:	a90e      	add	r1, sp, #56	; 0x38
  4059fa:	2302      	movs	r3, #2
  4059fc:	2807      	cmp	r0, #7
  4059fe:	9211      	str	r2, [sp, #68]	; 0x44
  405a00:	9010      	str	r0, [sp, #64]	; 0x40
  405a02:	e88a 000a 	stmia.w	sl, {r1, r3}
  405a06:	f340 81ea 	ble.w	405dde <_vfiprintf_r+0x742>
  405a0a:	2a00      	cmp	r2, #0
  405a0c:	f040 838c 	bne.w	406128 <_vfiprintf_r+0xa8c>
  405a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a12:	2b80      	cmp	r3, #128	; 0x80
  405a14:	f04f 0001 	mov.w	r0, #1
  405a18:	4611      	mov	r1, r2
  405a1a:	46ca      	mov	sl, r9
  405a1c:	f040 81e7 	bne.w	405dee <_vfiprintf_r+0x752>
  405a20:	9b08      	ldr	r3, [sp, #32]
  405a22:	9d01      	ldr	r5, [sp, #4]
  405a24:	1b5e      	subs	r6, r3, r5
  405a26:	2e00      	cmp	r6, #0
  405a28:	f340 81e1 	ble.w	405dee <_vfiprintf_r+0x752>
  405a2c:	2e10      	cmp	r6, #16
  405a2e:	4d9a      	ldr	r5, [pc, #616]	; (405c98 <_vfiprintf_r+0x5fc>)
  405a30:	f340 8450 	ble.w	4062d4 <_vfiprintf_r+0xc38>
  405a34:	46d4      	mov	ip, sl
  405a36:	2710      	movs	r7, #16
  405a38:	46a2      	mov	sl, r4
  405a3a:	9c06      	ldr	r4, [sp, #24]
  405a3c:	e007      	b.n	405a4e <_vfiprintf_r+0x3b2>
  405a3e:	f101 0e02 	add.w	lr, r1, #2
  405a42:	f10c 0c08 	add.w	ip, ip, #8
  405a46:	4601      	mov	r1, r0
  405a48:	3e10      	subs	r6, #16
  405a4a:	2e10      	cmp	r6, #16
  405a4c:	dd11      	ble.n	405a72 <_vfiprintf_r+0x3d6>
  405a4e:	1c48      	adds	r0, r1, #1
  405a50:	3210      	adds	r2, #16
  405a52:	2807      	cmp	r0, #7
  405a54:	9211      	str	r2, [sp, #68]	; 0x44
  405a56:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405a5a:	9010      	str	r0, [sp, #64]	; 0x40
  405a5c:	ddef      	ble.n	405a3e <_vfiprintf_r+0x3a2>
  405a5e:	2a00      	cmp	r2, #0
  405a60:	f040 829d 	bne.w	405f9e <_vfiprintf_r+0x902>
  405a64:	3e10      	subs	r6, #16
  405a66:	2e10      	cmp	r6, #16
  405a68:	f04f 0e01 	mov.w	lr, #1
  405a6c:	4611      	mov	r1, r2
  405a6e:	46cc      	mov	ip, r9
  405a70:	dced      	bgt.n	405a4e <_vfiprintf_r+0x3b2>
  405a72:	4654      	mov	r4, sl
  405a74:	46e2      	mov	sl, ip
  405a76:	4432      	add	r2, r6
  405a78:	f1be 0f07 	cmp.w	lr, #7
  405a7c:	9211      	str	r2, [sp, #68]	; 0x44
  405a7e:	e88a 0060 	stmia.w	sl, {r5, r6}
  405a82:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405a86:	f300 8369 	bgt.w	40615c <_vfiprintf_r+0xac0>
  405a8a:	f10a 0a08 	add.w	sl, sl, #8
  405a8e:	f10e 0001 	add.w	r0, lr, #1
  405a92:	4671      	mov	r1, lr
  405a94:	e1ab      	b.n	405dee <_vfiprintf_r+0x752>
  405a96:	9608      	str	r6, [sp, #32]
  405a98:	f013 0220 	ands.w	r2, r3, #32
  405a9c:	f040 838c 	bne.w	4061b8 <_vfiprintf_r+0xb1c>
  405aa0:	f013 0110 	ands.w	r1, r3, #16
  405aa4:	f040 831a 	bne.w	4060dc <_vfiprintf_r+0xa40>
  405aa8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405aac:	f000 8316 	beq.w	4060dc <_vfiprintf_r+0xa40>
  405ab0:	9807      	ldr	r0, [sp, #28]
  405ab2:	460a      	mov	r2, r1
  405ab4:	4601      	mov	r1, r0
  405ab6:	3104      	adds	r1, #4
  405ab8:	8806      	ldrh	r6, [r0, #0]
  405aba:	9107      	str	r1, [sp, #28]
  405abc:	2700      	movs	r7, #0
  405abe:	e720      	b.n	405902 <_vfiprintf_r+0x266>
  405ac0:	9608      	str	r6, [sp, #32]
  405ac2:	f043 0310 	orr.w	r3, r3, #16
  405ac6:	e7e7      	b.n	405a98 <_vfiprintf_r+0x3fc>
  405ac8:	9608      	str	r6, [sp, #32]
  405aca:	f043 0310 	orr.w	r3, r3, #16
  405ace:	e708      	b.n	4058e2 <_vfiprintf_r+0x246>
  405ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ad4:	f898 2000 	ldrb.w	r2, [r8]
  405ad8:	e652      	b.n	405780 <_vfiprintf_r+0xe4>
  405ada:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405ade:	2600      	movs	r6, #0
  405ae0:	f818 2b01 	ldrb.w	r2, [r8], #1
  405ae4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405ae8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405aec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405af0:	2909      	cmp	r1, #9
  405af2:	d9f5      	bls.n	405ae0 <_vfiprintf_r+0x444>
  405af4:	e646      	b.n	405784 <_vfiprintf_r+0xe8>
  405af6:	9608      	str	r6, [sp, #32]
  405af8:	2800      	cmp	r0, #0
  405afa:	f040 8408 	bne.w	40630e <_vfiprintf_r+0xc72>
  405afe:	f043 0310 	orr.w	r3, r3, #16
  405b02:	069e      	lsls	r6, r3, #26
  405b04:	f100 834c 	bmi.w	4061a0 <_vfiprintf_r+0xb04>
  405b08:	06dd      	lsls	r5, r3, #27
  405b0a:	f100 82f3 	bmi.w	4060f4 <_vfiprintf_r+0xa58>
  405b0e:	0658      	lsls	r0, r3, #25
  405b10:	f140 82f0 	bpl.w	4060f4 <_vfiprintf_r+0xa58>
  405b14:	9d07      	ldr	r5, [sp, #28]
  405b16:	f9b5 6000 	ldrsh.w	r6, [r5]
  405b1a:	462a      	mov	r2, r5
  405b1c:	17f7      	asrs	r7, r6, #31
  405b1e:	3204      	adds	r2, #4
  405b20:	4630      	mov	r0, r6
  405b22:	4639      	mov	r1, r7
  405b24:	9207      	str	r2, [sp, #28]
  405b26:	2800      	cmp	r0, #0
  405b28:	f171 0200 	sbcs.w	r2, r1, #0
  405b2c:	f2c0 835d 	blt.w	4061ea <_vfiprintf_r+0xb4e>
  405b30:	1c61      	adds	r1, r4, #1
  405b32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405b36:	f04f 0201 	mov.w	r2, #1
  405b3a:	f47f aeea 	bne.w	405912 <_vfiprintf_r+0x276>
  405b3e:	ea56 0107 	orrs.w	r1, r6, r7
  405b42:	f000 824d 	beq.w	405fe0 <_vfiprintf_r+0x944>
  405b46:	9302      	str	r3, [sp, #8]
  405b48:	2a01      	cmp	r2, #1
  405b4a:	f000 828c 	beq.w	406066 <_vfiprintf_r+0x9ca>
  405b4e:	2a02      	cmp	r2, #2
  405b50:	f040 825c 	bne.w	40600c <_vfiprintf_r+0x970>
  405b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405b56:	46cb      	mov	fp, r9
  405b58:	0933      	lsrs	r3, r6, #4
  405b5a:	f006 010f 	and.w	r1, r6, #15
  405b5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405b62:	093a      	lsrs	r2, r7, #4
  405b64:	461e      	mov	r6, r3
  405b66:	4617      	mov	r7, r2
  405b68:	5c43      	ldrb	r3, [r0, r1]
  405b6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405b6e:	ea56 0307 	orrs.w	r3, r6, r7
  405b72:	d1f1      	bne.n	405b58 <_vfiprintf_r+0x4bc>
  405b74:	eba9 030b 	sub.w	r3, r9, fp
  405b78:	9305      	str	r3, [sp, #20]
  405b7a:	e6e1      	b.n	405940 <_vfiprintf_r+0x2a4>
  405b7c:	2800      	cmp	r0, #0
  405b7e:	f040 83c0 	bne.w	406302 <_vfiprintf_r+0xc66>
  405b82:	0699      	lsls	r1, r3, #26
  405b84:	f100 8367 	bmi.w	406256 <_vfiprintf_r+0xbba>
  405b88:	06da      	lsls	r2, r3, #27
  405b8a:	f100 80f1 	bmi.w	405d70 <_vfiprintf_r+0x6d4>
  405b8e:	065b      	lsls	r3, r3, #25
  405b90:	f140 80ee 	bpl.w	405d70 <_vfiprintf_r+0x6d4>
  405b94:	9a07      	ldr	r2, [sp, #28]
  405b96:	6813      	ldr	r3, [r2, #0]
  405b98:	3204      	adds	r2, #4
  405b9a:	9207      	str	r2, [sp, #28]
  405b9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405ba0:	801a      	strh	r2, [r3, #0]
  405ba2:	e5b8      	b.n	405716 <_vfiprintf_r+0x7a>
  405ba4:	9807      	ldr	r0, [sp, #28]
  405ba6:	4a3d      	ldr	r2, [pc, #244]	; (405c9c <_vfiprintf_r+0x600>)
  405ba8:	9608      	str	r6, [sp, #32]
  405baa:	920b      	str	r2, [sp, #44]	; 0x2c
  405bac:	6806      	ldr	r6, [r0, #0]
  405bae:	2278      	movs	r2, #120	; 0x78
  405bb0:	2130      	movs	r1, #48	; 0x30
  405bb2:	3004      	adds	r0, #4
  405bb4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405bb8:	f043 0302 	orr.w	r3, r3, #2
  405bbc:	9007      	str	r0, [sp, #28]
  405bbe:	2700      	movs	r7, #0
  405bc0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405bc4:	2202      	movs	r2, #2
  405bc6:	e69c      	b.n	405902 <_vfiprintf_r+0x266>
  405bc8:	9608      	str	r6, [sp, #32]
  405bca:	2800      	cmp	r0, #0
  405bcc:	d099      	beq.n	405b02 <_vfiprintf_r+0x466>
  405bce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405bd2:	e796      	b.n	405b02 <_vfiprintf_r+0x466>
  405bd4:	f898 2000 	ldrb.w	r2, [r8]
  405bd8:	2d00      	cmp	r5, #0
  405bda:	f47f add1 	bne.w	405780 <_vfiprintf_r+0xe4>
  405bde:	2001      	movs	r0, #1
  405be0:	2520      	movs	r5, #32
  405be2:	e5cd      	b.n	405780 <_vfiprintf_r+0xe4>
  405be4:	f043 0301 	orr.w	r3, r3, #1
  405be8:	f898 2000 	ldrb.w	r2, [r8]
  405bec:	e5c8      	b.n	405780 <_vfiprintf_r+0xe4>
  405bee:	9608      	str	r6, [sp, #32]
  405bf0:	2800      	cmp	r0, #0
  405bf2:	f040 8393 	bne.w	40631c <_vfiprintf_r+0xc80>
  405bf6:	4929      	ldr	r1, [pc, #164]	; (405c9c <_vfiprintf_r+0x600>)
  405bf8:	910b      	str	r1, [sp, #44]	; 0x2c
  405bfa:	069f      	lsls	r7, r3, #26
  405bfc:	f100 82e8 	bmi.w	4061d0 <_vfiprintf_r+0xb34>
  405c00:	9807      	ldr	r0, [sp, #28]
  405c02:	06de      	lsls	r6, r3, #27
  405c04:	4601      	mov	r1, r0
  405c06:	f100 8270 	bmi.w	4060ea <_vfiprintf_r+0xa4e>
  405c0a:	065d      	lsls	r5, r3, #25
  405c0c:	f140 826d 	bpl.w	4060ea <_vfiprintf_r+0xa4e>
  405c10:	3104      	adds	r1, #4
  405c12:	8806      	ldrh	r6, [r0, #0]
  405c14:	9107      	str	r1, [sp, #28]
  405c16:	2700      	movs	r7, #0
  405c18:	07d8      	lsls	r0, r3, #31
  405c1a:	f140 8222 	bpl.w	406062 <_vfiprintf_r+0x9c6>
  405c1e:	ea56 0107 	orrs.w	r1, r6, r7
  405c22:	f000 821e 	beq.w	406062 <_vfiprintf_r+0x9c6>
  405c26:	2130      	movs	r1, #48	; 0x30
  405c28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405c2c:	f043 0302 	orr.w	r3, r3, #2
  405c30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405c34:	2202      	movs	r2, #2
  405c36:	e664      	b.n	405902 <_vfiprintf_r+0x266>
  405c38:	9608      	str	r6, [sp, #32]
  405c3a:	2800      	cmp	r0, #0
  405c3c:	f040 836b 	bne.w	406316 <_vfiprintf_r+0xc7a>
  405c40:	4917      	ldr	r1, [pc, #92]	; (405ca0 <_vfiprintf_r+0x604>)
  405c42:	910b      	str	r1, [sp, #44]	; 0x2c
  405c44:	e7d9      	b.n	405bfa <_vfiprintf_r+0x55e>
  405c46:	9907      	ldr	r1, [sp, #28]
  405c48:	9608      	str	r6, [sp, #32]
  405c4a:	680a      	ldr	r2, [r1, #0]
  405c4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405c50:	f04f 0000 	mov.w	r0, #0
  405c54:	460a      	mov	r2, r1
  405c56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405c5a:	3204      	adds	r2, #4
  405c5c:	2001      	movs	r0, #1
  405c5e:	9001      	str	r0, [sp, #4]
  405c60:	9207      	str	r2, [sp, #28]
  405c62:	9005      	str	r0, [sp, #20]
  405c64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405c68:	9302      	str	r3, [sp, #8]
  405c6a:	2400      	movs	r4, #0
  405c6c:	e670      	b.n	405950 <_vfiprintf_r+0x2b4>
  405c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405c72:	f898 2000 	ldrb.w	r2, [r8]
  405c76:	e583      	b.n	405780 <_vfiprintf_r+0xe4>
  405c78:	f898 2000 	ldrb.w	r2, [r8]
  405c7c:	2a6c      	cmp	r2, #108	; 0x6c
  405c7e:	bf03      	ittte	eq
  405c80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405c84:	f043 0320 	orreq.w	r3, r3, #32
  405c88:	f108 0801 	addeq.w	r8, r8, #1
  405c8c:	f043 0310 	orrne.w	r3, r3, #16
  405c90:	e576      	b.n	405780 <_vfiprintf_r+0xe4>
  405c92:	bf00      	nop
  405c94:	00407c64 	.word	0x00407c64
  405c98:	00407c74 	.word	0x00407c74
  405c9c:	00407c48 	.word	0x00407c48
  405ca0:	00407c34 	.word	0x00407c34
  405ca4:	9907      	ldr	r1, [sp, #28]
  405ca6:	680e      	ldr	r6, [r1, #0]
  405ca8:	460a      	mov	r2, r1
  405caa:	2e00      	cmp	r6, #0
  405cac:	f102 0204 	add.w	r2, r2, #4
  405cb0:	f6ff ae0f 	blt.w	4058d2 <_vfiprintf_r+0x236>
  405cb4:	9207      	str	r2, [sp, #28]
  405cb6:	f898 2000 	ldrb.w	r2, [r8]
  405cba:	e561      	b.n	405780 <_vfiprintf_r+0xe4>
  405cbc:	f898 2000 	ldrb.w	r2, [r8]
  405cc0:	2001      	movs	r0, #1
  405cc2:	252b      	movs	r5, #43	; 0x2b
  405cc4:	e55c      	b.n	405780 <_vfiprintf_r+0xe4>
  405cc6:	9907      	ldr	r1, [sp, #28]
  405cc8:	9608      	str	r6, [sp, #32]
  405cca:	f8d1 b000 	ldr.w	fp, [r1]
  405cce:	f04f 0200 	mov.w	r2, #0
  405cd2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405cd6:	1d0e      	adds	r6, r1, #4
  405cd8:	f1bb 0f00 	cmp.w	fp, #0
  405cdc:	f000 82e5 	beq.w	4062aa <_vfiprintf_r+0xc0e>
  405ce0:	1c67      	adds	r7, r4, #1
  405ce2:	f000 82c4 	beq.w	40626e <_vfiprintf_r+0xbd2>
  405ce6:	4622      	mov	r2, r4
  405ce8:	2100      	movs	r1, #0
  405cea:	4658      	mov	r0, fp
  405cec:	9301      	str	r3, [sp, #4]
  405cee:	f001 f91f 	bl	406f30 <memchr>
  405cf2:	9b01      	ldr	r3, [sp, #4]
  405cf4:	2800      	cmp	r0, #0
  405cf6:	f000 82e5 	beq.w	4062c4 <_vfiprintf_r+0xc28>
  405cfa:	eba0 020b 	sub.w	r2, r0, fp
  405cfe:	9205      	str	r2, [sp, #20]
  405d00:	9607      	str	r6, [sp, #28]
  405d02:	9302      	str	r3, [sp, #8]
  405d04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d08:	2400      	movs	r4, #0
  405d0a:	e619      	b.n	405940 <_vfiprintf_r+0x2a4>
  405d0c:	f898 2000 	ldrb.w	r2, [r8]
  405d10:	2a2a      	cmp	r2, #42	; 0x2a
  405d12:	f108 0701 	add.w	r7, r8, #1
  405d16:	f000 82e9 	beq.w	4062ec <_vfiprintf_r+0xc50>
  405d1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405d1e:	2909      	cmp	r1, #9
  405d20:	46b8      	mov	r8, r7
  405d22:	f04f 0400 	mov.w	r4, #0
  405d26:	f63f ad2d 	bhi.w	405784 <_vfiprintf_r+0xe8>
  405d2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  405d2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405d32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405d36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405d3a:	2909      	cmp	r1, #9
  405d3c:	d9f5      	bls.n	405d2a <_vfiprintf_r+0x68e>
  405d3e:	e521      	b.n	405784 <_vfiprintf_r+0xe8>
  405d40:	f043 0320 	orr.w	r3, r3, #32
  405d44:	f898 2000 	ldrb.w	r2, [r8]
  405d48:	e51a      	b.n	405780 <_vfiprintf_r+0xe4>
  405d4a:	9608      	str	r6, [sp, #32]
  405d4c:	2800      	cmp	r0, #0
  405d4e:	f040 82db 	bne.w	406308 <_vfiprintf_r+0xc6c>
  405d52:	2a00      	cmp	r2, #0
  405d54:	f000 80e7 	beq.w	405f26 <_vfiprintf_r+0x88a>
  405d58:	2101      	movs	r1, #1
  405d5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405d5e:	f04f 0200 	mov.w	r2, #0
  405d62:	9101      	str	r1, [sp, #4]
  405d64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405d68:	9105      	str	r1, [sp, #20]
  405d6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405d6e:	e77b      	b.n	405c68 <_vfiprintf_r+0x5cc>
  405d70:	9a07      	ldr	r2, [sp, #28]
  405d72:	6813      	ldr	r3, [r2, #0]
  405d74:	3204      	adds	r2, #4
  405d76:	9207      	str	r2, [sp, #28]
  405d78:	9a03      	ldr	r2, [sp, #12]
  405d7a:	601a      	str	r2, [r3, #0]
  405d7c:	e4cb      	b.n	405716 <_vfiprintf_r+0x7a>
  405d7e:	aa0f      	add	r2, sp, #60	; 0x3c
  405d80:	9904      	ldr	r1, [sp, #16]
  405d82:	4620      	mov	r0, r4
  405d84:	f7ff fc4a 	bl	40561c <__sprint_r.part.0>
  405d88:	2800      	cmp	r0, #0
  405d8a:	f040 8139 	bne.w	406000 <_vfiprintf_r+0x964>
  405d8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d92:	f101 0c01 	add.w	ip, r1, #1
  405d96:	46ce      	mov	lr, r9
  405d98:	e5ff      	b.n	40599a <_vfiprintf_r+0x2fe>
  405d9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d9e:	1c48      	adds	r0, r1, #1
  405da0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405da4:	2d00      	cmp	r5, #0
  405da6:	f43f ae22 	beq.w	4059ee <_vfiprintf_r+0x352>
  405daa:	3201      	adds	r2, #1
  405dac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405db0:	2101      	movs	r1, #1
  405db2:	2807      	cmp	r0, #7
  405db4:	9211      	str	r2, [sp, #68]	; 0x44
  405db6:	9010      	str	r0, [sp, #64]	; 0x40
  405db8:	f8ca 5000 	str.w	r5, [sl]
  405dbc:	f8ca 1004 	str.w	r1, [sl, #4]
  405dc0:	f340 8108 	ble.w	405fd4 <_vfiprintf_r+0x938>
  405dc4:	2a00      	cmp	r2, #0
  405dc6:	f040 81bc 	bne.w	406142 <_vfiprintf_r+0xaa6>
  405dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405dcc:	2b00      	cmp	r3, #0
  405dce:	f43f ae1f 	beq.w	405a10 <_vfiprintf_r+0x374>
  405dd2:	ab0e      	add	r3, sp, #56	; 0x38
  405dd4:	2202      	movs	r2, #2
  405dd6:	4608      	mov	r0, r1
  405dd8:	931c      	str	r3, [sp, #112]	; 0x70
  405dda:	921d      	str	r2, [sp, #116]	; 0x74
  405ddc:	46ca      	mov	sl, r9
  405dde:	4601      	mov	r1, r0
  405de0:	f10a 0a08 	add.w	sl, sl, #8
  405de4:	3001      	adds	r0, #1
  405de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405de8:	2b80      	cmp	r3, #128	; 0x80
  405dea:	f43f ae19 	beq.w	405a20 <_vfiprintf_r+0x384>
  405dee:	9b05      	ldr	r3, [sp, #20]
  405df0:	1ae4      	subs	r4, r4, r3
  405df2:	2c00      	cmp	r4, #0
  405df4:	dd2e      	ble.n	405e54 <_vfiprintf_r+0x7b8>
  405df6:	2c10      	cmp	r4, #16
  405df8:	4db3      	ldr	r5, [pc, #716]	; (4060c8 <_vfiprintf_r+0xa2c>)
  405dfa:	dd1e      	ble.n	405e3a <_vfiprintf_r+0x79e>
  405dfc:	46d6      	mov	lr, sl
  405dfe:	2610      	movs	r6, #16
  405e00:	9f06      	ldr	r7, [sp, #24]
  405e02:	f8dd a010 	ldr.w	sl, [sp, #16]
  405e06:	e006      	b.n	405e16 <_vfiprintf_r+0x77a>
  405e08:	1c88      	adds	r0, r1, #2
  405e0a:	f10e 0e08 	add.w	lr, lr, #8
  405e0e:	4619      	mov	r1, r3
  405e10:	3c10      	subs	r4, #16
  405e12:	2c10      	cmp	r4, #16
  405e14:	dd10      	ble.n	405e38 <_vfiprintf_r+0x79c>
  405e16:	1c4b      	adds	r3, r1, #1
  405e18:	3210      	adds	r2, #16
  405e1a:	2b07      	cmp	r3, #7
  405e1c:	9211      	str	r2, [sp, #68]	; 0x44
  405e1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  405e22:	9310      	str	r3, [sp, #64]	; 0x40
  405e24:	ddf0      	ble.n	405e08 <_vfiprintf_r+0x76c>
  405e26:	2a00      	cmp	r2, #0
  405e28:	d165      	bne.n	405ef6 <_vfiprintf_r+0x85a>
  405e2a:	3c10      	subs	r4, #16
  405e2c:	2c10      	cmp	r4, #16
  405e2e:	f04f 0001 	mov.w	r0, #1
  405e32:	4611      	mov	r1, r2
  405e34:	46ce      	mov	lr, r9
  405e36:	dcee      	bgt.n	405e16 <_vfiprintf_r+0x77a>
  405e38:	46f2      	mov	sl, lr
  405e3a:	4422      	add	r2, r4
  405e3c:	2807      	cmp	r0, #7
  405e3e:	9211      	str	r2, [sp, #68]	; 0x44
  405e40:	f8ca 5000 	str.w	r5, [sl]
  405e44:	f8ca 4004 	str.w	r4, [sl, #4]
  405e48:	9010      	str	r0, [sp, #64]	; 0x40
  405e4a:	f300 8085 	bgt.w	405f58 <_vfiprintf_r+0x8bc>
  405e4e:	f10a 0a08 	add.w	sl, sl, #8
  405e52:	3001      	adds	r0, #1
  405e54:	9905      	ldr	r1, [sp, #20]
  405e56:	f8ca b000 	str.w	fp, [sl]
  405e5a:	440a      	add	r2, r1
  405e5c:	2807      	cmp	r0, #7
  405e5e:	9211      	str	r2, [sp, #68]	; 0x44
  405e60:	f8ca 1004 	str.w	r1, [sl, #4]
  405e64:	9010      	str	r0, [sp, #64]	; 0x40
  405e66:	f340 8082 	ble.w	405f6e <_vfiprintf_r+0x8d2>
  405e6a:	2a00      	cmp	r2, #0
  405e6c:	f040 8118 	bne.w	4060a0 <_vfiprintf_r+0xa04>
  405e70:	9b02      	ldr	r3, [sp, #8]
  405e72:	9210      	str	r2, [sp, #64]	; 0x40
  405e74:	0758      	lsls	r0, r3, #29
  405e76:	d535      	bpl.n	405ee4 <_vfiprintf_r+0x848>
  405e78:	9b08      	ldr	r3, [sp, #32]
  405e7a:	9901      	ldr	r1, [sp, #4]
  405e7c:	1a5c      	subs	r4, r3, r1
  405e7e:	2c00      	cmp	r4, #0
  405e80:	f340 80e7 	ble.w	406052 <_vfiprintf_r+0x9b6>
  405e84:	46ca      	mov	sl, r9
  405e86:	2c10      	cmp	r4, #16
  405e88:	f340 8218 	ble.w	4062bc <_vfiprintf_r+0xc20>
  405e8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e8e:	4e8f      	ldr	r6, [pc, #572]	; (4060cc <_vfiprintf_r+0xa30>)
  405e90:	9f06      	ldr	r7, [sp, #24]
  405e92:	f8dd b010 	ldr.w	fp, [sp, #16]
  405e96:	2510      	movs	r5, #16
  405e98:	e006      	b.n	405ea8 <_vfiprintf_r+0x80c>
  405e9a:	1c88      	adds	r0, r1, #2
  405e9c:	f10a 0a08 	add.w	sl, sl, #8
  405ea0:	4619      	mov	r1, r3
  405ea2:	3c10      	subs	r4, #16
  405ea4:	2c10      	cmp	r4, #16
  405ea6:	dd11      	ble.n	405ecc <_vfiprintf_r+0x830>
  405ea8:	1c4b      	adds	r3, r1, #1
  405eaa:	3210      	adds	r2, #16
  405eac:	2b07      	cmp	r3, #7
  405eae:	9211      	str	r2, [sp, #68]	; 0x44
  405eb0:	f8ca 6000 	str.w	r6, [sl]
  405eb4:	f8ca 5004 	str.w	r5, [sl, #4]
  405eb8:	9310      	str	r3, [sp, #64]	; 0x40
  405eba:	ddee      	ble.n	405e9a <_vfiprintf_r+0x7fe>
  405ebc:	bb42      	cbnz	r2, 405f10 <_vfiprintf_r+0x874>
  405ebe:	3c10      	subs	r4, #16
  405ec0:	2c10      	cmp	r4, #16
  405ec2:	f04f 0001 	mov.w	r0, #1
  405ec6:	4611      	mov	r1, r2
  405ec8:	46ca      	mov	sl, r9
  405eca:	dced      	bgt.n	405ea8 <_vfiprintf_r+0x80c>
  405ecc:	4422      	add	r2, r4
  405ece:	2807      	cmp	r0, #7
  405ed0:	9211      	str	r2, [sp, #68]	; 0x44
  405ed2:	f8ca 6000 	str.w	r6, [sl]
  405ed6:	f8ca 4004 	str.w	r4, [sl, #4]
  405eda:	9010      	str	r0, [sp, #64]	; 0x40
  405edc:	dd51      	ble.n	405f82 <_vfiprintf_r+0x8e6>
  405ede:	2a00      	cmp	r2, #0
  405ee0:	f040 819b 	bne.w	40621a <_vfiprintf_r+0xb7e>
  405ee4:	9b03      	ldr	r3, [sp, #12]
  405ee6:	9a08      	ldr	r2, [sp, #32]
  405ee8:	9901      	ldr	r1, [sp, #4]
  405eea:	428a      	cmp	r2, r1
  405eec:	bfac      	ite	ge
  405eee:	189b      	addge	r3, r3, r2
  405ef0:	185b      	addlt	r3, r3, r1
  405ef2:	9303      	str	r3, [sp, #12]
  405ef4:	e04e      	b.n	405f94 <_vfiprintf_r+0x8f8>
  405ef6:	aa0f      	add	r2, sp, #60	; 0x3c
  405ef8:	4651      	mov	r1, sl
  405efa:	4638      	mov	r0, r7
  405efc:	f7ff fb8e 	bl	40561c <__sprint_r.part.0>
  405f00:	2800      	cmp	r0, #0
  405f02:	f040 813f 	bne.w	406184 <_vfiprintf_r+0xae8>
  405f06:	9910      	ldr	r1, [sp, #64]	; 0x40
  405f08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f0a:	1c48      	adds	r0, r1, #1
  405f0c:	46ce      	mov	lr, r9
  405f0e:	e77f      	b.n	405e10 <_vfiprintf_r+0x774>
  405f10:	aa0f      	add	r2, sp, #60	; 0x3c
  405f12:	4659      	mov	r1, fp
  405f14:	4638      	mov	r0, r7
  405f16:	f7ff fb81 	bl	40561c <__sprint_r.part.0>
  405f1a:	b960      	cbnz	r0, 405f36 <_vfiprintf_r+0x89a>
  405f1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405f1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f20:	1c48      	adds	r0, r1, #1
  405f22:	46ca      	mov	sl, r9
  405f24:	e7bd      	b.n	405ea2 <_vfiprintf_r+0x806>
  405f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f28:	f8dd b010 	ldr.w	fp, [sp, #16]
  405f2c:	2b00      	cmp	r3, #0
  405f2e:	f040 81d4 	bne.w	4062da <_vfiprintf_r+0xc3e>
  405f32:	2300      	movs	r3, #0
  405f34:	9310      	str	r3, [sp, #64]	; 0x40
  405f36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405f3a:	f013 0f01 	tst.w	r3, #1
  405f3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405f42:	d102      	bne.n	405f4a <_vfiprintf_r+0x8ae>
  405f44:	059a      	lsls	r2, r3, #22
  405f46:	f140 80de 	bpl.w	406106 <_vfiprintf_r+0xa6a>
  405f4a:	065b      	lsls	r3, r3, #25
  405f4c:	f53f acb2 	bmi.w	4058b4 <_vfiprintf_r+0x218>
  405f50:	9803      	ldr	r0, [sp, #12]
  405f52:	b02d      	add	sp, #180	; 0xb4
  405f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f58:	2a00      	cmp	r2, #0
  405f5a:	f040 8106 	bne.w	40616a <_vfiprintf_r+0xace>
  405f5e:	9a05      	ldr	r2, [sp, #20]
  405f60:	921d      	str	r2, [sp, #116]	; 0x74
  405f62:	2301      	movs	r3, #1
  405f64:	9211      	str	r2, [sp, #68]	; 0x44
  405f66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405f6a:	9310      	str	r3, [sp, #64]	; 0x40
  405f6c:	46ca      	mov	sl, r9
  405f6e:	f10a 0a08 	add.w	sl, sl, #8
  405f72:	9b02      	ldr	r3, [sp, #8]
  405f74:	0759      	lsls	r1, r3, #29
  405f76:	d504      	bpl.n	405f82 <_vfiprintf_r+0x8e6>
  405f78:	9b08      	ldr	r3, [sp, #32]
  405f7a:	9901      	ldr	r1, [sp, #4]
  405f7c:	1a5c      	subs	r4, r3, r1
  405f7e:	2c00      	cmp	r4, #0
  405f80:	dc81      	bgt.n	405e86 <_vfiprintf_r+0x7ea>
  405f82:	9b03      	ldr	r3, [sp, #12]
  405f84:	9908      	ldr	r1, [sp, #32]
  405f86:	9801      	ldr	r0, [sp, #4]
  405f88:	4281      	cmp	r1, r0
  405f8a:	bfac      	ite	ge
  405f8c:	185b      	addge	r3, r3, r1
  405f8e:	181b      	addlt	r3, r3, r0
  405f90:	9303      	str	r3, [sp, #12]
  405f92:	bb72      	cbnz	r2, 405ff2 <_vfiprintf_r+0x956>
  405f94:	2300      	movs	r3, #0
  405f96:	9310      	str	r3, [sp, #64]	; 0x40
  405f98:	46ca      	mov	sl, r9
  405f9a:	f7ff bbbc 	b.w	405716 <_vfiprintf_r+0x7a>
  405f9e:	aa0f      	add	r2, sp, #60	; 0x3c
  405fa0:	9904      	ldr	r1, [sp, #16]
  405fa2:	4620      	mov	r0, r4
  405fa4:	f7ff fb3a 	bl	40561c <__sprint_r.part.0>
  405fa8:	bb50      	cbnz	r0, 406000 <_vfiprintf_r+0x964>
  405faa:	9910      	ldr	r1, [sp, #64]	; 0x40
  405fac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405fae:	f101 0e01 	add.w	lr, r1, #1
  405fb2:	46cc      	mov	ip, r9
  405fb4:	e548      	b.n	405a48 <_vfiprintf_r+0x3ac>
  405fb6:	2a00      	cmp	r2, #0
  405fb8:	f040 8140 	bne.w	40623c <_vfiprintf_r+0xba0>
  405fbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405fc0:	2900      	cmp	r1, #0
  405fc2:	f000 811b 	beq.w	4061fc <_vfiprintf_r+0xb60>
  405fc6:	2201      	movs	r2, #1
  405fc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405fcc:	4610      	mov	r0, r2
  405fce:	921d      	str	r2, [sp, #116]	; 0x74
  405fd0:	911c      	str	r1, [sp, #112]	; 0x70
  405fd2:	46ca      	mov	sl, r9
  405fd4:	4601      	mov	r1, r0
  405fd6:	f10a 0a08 	add.w	sl, sl, #8
  405fda:	3001      	adds	r0, #1
  405fdc:	e507      	b.n	4059ee <_vfiprintf_r+0x352>
  405fde:	9b02      	ldr	r3, [sp, #8]
  405fe0:	2a01      	cmp	r2, #1
  405fe2:	f000 8098 	beq.w	406116 <_vfiprintf_r+0xa7a>
  405fe6:	2a02      	cmp	r2, #2
  405fe8:	d10d      	bne.n	406006 <_vfiprintf_r+0x96a>
  405fea:	9302      	str	r3, [sp, #8]
  405fec:	2600      	movs	r6, #0
  405fee:	2700      	movs	r7, #0
  405ff0:	e5b0      	b.n	405b54 <_vfiprintf_r+0x4b8>
  405ff2:	aa0f      	add	r2, sp, #60	; 0x3c
  405ff4:	9904      	ldr	r1, [sp, #16]
  405ff6:	9806      	ldr	r0, [sp, #24]
  405ff8:	f7ff fb10 	bl	40561c <__sprint_r.part.0>
  405ffc:	2800      	cmp	r0, #0
  405ffe:	d0c9      	beq.n	405f94 <_vfiprintf_r+0x8f8>
  406000:	f8dd b010 	ldr.w	fp, [sp, #16]
  406004:	e797      	b.n	405f36 <_vfiprintf_r+0x89a>
  406006:	9302      	str	r3, [sp, #8]
  406008:	2600      	movs	r6, #0
  40600a:	2700      	movs	r7, #0
  40600c:	4649      	mov	r1, r9
  40600e:	e000      	b.n	406012 <_vfiprintf_r+0x976>
  406010:	4659      	mov	r1, fp
  406012:	08f2      	lsrs	r2, r6, #3
  406014:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406018:	08f8      	lsrs	r0, r7, #3
  40601a:	f006 0307 	and.w	r3, r6, #7
  40601e:	4607      	mov	r7, r0
  406020:	4616      	mov	r6, r2
  406022:	3330      	adds	r3, #48	; 0x30
  406024:	ea56 0207 	orrs.w	r2, r6, r7
  406028:	f801 3c01 	strb.w	r3, [r1, #-1]
  40602c:	f101 3bff 	add.w	fp, r1, #4294967295
  406030:	d1ee      	bne.n	406010 <_vfiprintf_r+0x974>
  406032:	9a02      	ldr	r2, [sp, #8]
  406034:	07d6      	lsls	r6, r2, #31
  406036:	f57f ad9d 	bpl.w	405b74 <_vfiprintf_r+0x4d8>
  40603a:	2b30      	cmp	r3, #48	; 0x30
  40603c:	f43f ad9a 	beq.w	405b74 <_vfiprintf_r+0x4d8>
  406040:	3902      	subs	r1, #2
  406042:	2330      	movs	r3, #48	; 0x30
  406044:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406048:	eba9 0301 	sub.w	r3, r9, r1
  40604c:	9305      	str	r3, [sp, #20]
  40604e:	468b      	mov	fp, r1
  406050:	e476      	b.n	405940 <_vfiprintf_r+0x2a4>
  406052:	9b03      	ldr	r3, [sp, #12]
  406054:	9a08      	ldr	r2, [sp, #32]
  406056:	428a      	cmp	r2, r1
  406058:	bfac      	ite	ge
  40605a:	189b      	addge	r3, r3, r2
  40605c:	185b      	addlt	r3, r3, r1
  40605e:	9303      	str	r3, [sp, #12]
  406060:	e798      	b.n	405f94 <_vfiprintf_r+0x8f8>
  406062:	2202      	movs	r2, #2
  406064:	e44d      	b.n	405902 <_vfiprintf_r+0x266>
  406066:	2f00      	cmp	r7, #0
  406068:	bf08      	it	eq
  40606a:	2e0a      	cmpeq	r6, #10
  40606c:	d352      	bcc.n	406114 <_vfiprintf_r+0xa78>
  40606e:	46cb      	mov	fp, r9
  406070:	4630      	mov	r0, r6
  406072:	4639      	mov	r1, r7
  406074:	220a      	movs	r2, #10
  406076:	2300      	movs	r3, #0
  406078:	f001 fbc6 	bl	407808 <__aeabi_uldivmod>
  40607c:	3230      	adds	r2, #48	; 0x30
  40607e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406082:	4630      	mov	r0, r6
  406084:	4639      	mov	r1, r7
  406086:	2300      	movs	r3, #0
  406088:	220a      	movs	r2, #10
  40608a:	f001 fbbd 	bl	407808 <__aeabi_uldivmod>
  40608e:	4606      	mov	r6, r0
  406090:	460f      	mov	r7, r1
  406092:	ea56 0307 	orrs.w	r3, r6, r7
  406096:	d1eb      	bne.n	406070 <_vfiprintf_r+0x9d4>
  406098:	e56c      	b.n	405b74 <_vfiprintf_r+0x4d8>
  40609a:	9405      	str	r4, [sp, #20]
  40609c:	46cb      	mov	fp, r9
  40609e:	e44f      	b.n	405940 <_vfiprintf_r+0x2a4>
  4060a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4060a2:	9904      	ldr	r1, [sp, #16]
  4060a4:	9806      	ldr	r0, [sp, #24]
  4060a6:	f7ff fab9 	bl	40561c <__sprint_r.part.0>
  4060aa:	2800      	cmp	r0, #0
  4060ac:	d1a8      	bne.n	406000 <_vfiprintf_r+0x964>
  4060ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4060b0:	46ca      	mov	sl, r9
  4060b2:	e75e      	b.n	405f72 <_vfiprintf_r+0x8d6>
  4060b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4060b6:	9904      	ldr	r1, [sp, #16]
  4060b8:	9806      	ldr	r0, [sp, #24]
  4060ba:	f7ff faaf 	bl	40561c <__sprint_r.part.0>
  4060be:	2800      	cmp	r0, #0
  4060c0:	d19e      	bne.n	406000 <_vfiprintf_r+0x964>
  4060c2:	46ca      	mov	sl, r9
  4060c4:	f7ff bbc0 	b.w	405848 <_vfiprintf_r+0x1ac>
  4060c8:	00407c74 	.word	0x00407c74
  4060cc:	00407c64 	.word	0x00407c64
  4060d0:	3104      	adds	r1, #4
  4060d2:	6816      	ldr	r6, [r2, #0]
  4060d4:	9107      	str	r1, [sp, #28]
  4060d6:	2201      	movs	r2, #1
  4060d8:	2700      	movs	r7, #0
  4060da:	e412      	b.n	405902 <_vfiprintf_r+0x266>
  4060dc:	9807      	ldr	r0, [sp, #28]
  4060de:	4601      	mov	r1, r0
  4060e0:	3104      	adds	r1, #4
  4060e2:	6806      	ldr	r6, [r0, #0]
  4060e4:	9107      	str	r1, [sp, #28]
  4060e6:	2700      	movs	r7, #0
  4060e8:	e40b      	b.n	405902 <_vfiprintf_r+0x266>
  4060ea:	680e      	ldr	r6, [r1, #0]
  4060ec:	3104      	adds	r1, #4
  4060ee:	9107      	str	r1, [sp, #28]
  4060f0:	2700      	movs	r7, #0
  4060f2:	e591      	b.n	405c18 <_vfiprintf_r+0x57c>
  4060f4:	9907      	ldr	r1, [sp, #28]
  4060f6:	680e      	ldr	r6, [r1, #0]
  4060f8:	460a      	mov	r2, r1
  4060fa:	17f7      	asrs	r7, r6, #31
  4060fc:	3204      	adds	r2, #4
  4060fe:	9207      	str	r2, [sp, #28]
  406100:	4630      	mov	r0, r6
  406102:	4639      	mov	r1, r7
  406104:	e50f      	b.n	405b26 <_vfiprintf_r+0x48a>
  406106:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40610a:	f000 fe7f 	bl	406e0c <__retarget_lock_release_recursive>
  40610e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406112:	e71a      	b.n	405f4a <_vfiprintf_r+0x8ae>
  406114:	9b02      	ldr	r3, [sp, #8]
  406116:	9302      	str	r3, [sp, #8]
  406118:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40611c:	3630      	adds	r6, #48	; 0x30
  40611e:	2301      	movs	r3, #1
  406120:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406124:	9305      	str	r3, [sp, #20]
  406126:	e40b      	b.n	405940 <_vfiprintf_r+0x2a4>
  406128:	aa0f      	add	r2, sp, #60	; 0x3c
  40612a:	9904      	ldr	r1, [sp, #16]
  40612c:	9806      	ldr	r0, [sp, #24]
  40612e:	f7ff fa75 	bl	40561c <__sprint_r.part.0>
  406132:	2800      	cmp	r0, #0
  406134:	f47f af64 	bne.w	406000 <_vfiprintf_r+0x964>
  406138:	9910      	ldr	r1, [sp, #64]	; 0x40
  40613a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40613c:	1c48      	adds	r0, r1, #1
  40613e:	46ca      	mov	sl, r9
  406140:	e651      	b.n	405de6 <_vfiprintf_r+0x74a>
  406142:	aa0f      	add	r2, sp, #60	; 0x3c
  406144:	9904      	ldr	r1, [sp, #16]
  406146:	9806      	ldr	r0, [sp, #24]
  406148:	f7ff fa68 	bl	40561c <__sprint_r.part.0>
  40614c:	2800      	cmp	r0, #0
  40614e:	f47f af57 	bne.w	406000 <_vfiprintf_r+0x964>
  406152:	9910      	ldr	r1, [sp, #64]	; 0x40
  406154:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406156:	1c48      	adds	r0, r1, #1
  406158:	46ca      	mov	sl, r9
  40615a:	e448      	b.n	4059ee <_vfiprintf_r+0x352>
  40615c:	2a00      	cmp	r2, #0
  40615e:	f040 8091 	bne.w	406284 <_vfiprintf_r+0xbe8>
  406162:	2001      	movs	r0, #1
  406164:	4611      	mov	r1, r2
  406166:	46ca      	mov	sl, r9
  406168:	e641      	b.n	405dee <_vfiprintf_r+0x752>
  40616a:	aa0f      	add	r2, sp, #60	; 0x3c
  40616c:	9904      	ldr	r1, [sp, #16]
  40616e:	9806      	ldr	r0, [sp, #24]
  406170:	f7ff fa54 	bl	40561c <__sprint_r.part.0>
  406174:	2800      	cmp	r0, #0
  406176:	f47f af43 	bne.w	406000 <_vfiprintf_r+0x964>
  40617a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40617c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40617e:	3001      	adds	r0, #1
  406180:	46ca      	mov	sl, r9
  406182:	e667      	b.n	405e54 <_vfiprintf_r+0x7b8>
  406184:	46d3      	mov	fp, sl
  406186:	e6d6      	b.n	405f36 <_vfiprintf_r+0x89a>
  406188:	9e07      	ldr	r6, [sp, #28]
  40618a:	3607      	adds	r6, #7
  40618c:	f026 0207 	bic.w	r2, r6, #7
  406190:	f102 0108 	add.w	r1, r2, #8
  406194:	e9d2 6700 	ldrd	r6, r7, [r2]
  406198:	9107      	str	r1, [sp, #28]
  40619a:	2201      	movs	r2, #1
  40619c:	f7ff bbb1 	b.w	405902 <_vfiprintf_r+0x266>
  4061a0:	9e07      	ldr	r6, [sp, #28]
  4061a2:	3607      	adds	r6, #7
  4061a4:	f026 0607 	bic.w	r6, r6, #7
  4061a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4061ac:	f106 0208 	add.w	r2, r6, #8
  4061b0:	9207      	str	r2, [sp, #28]
  4061b2:	4606      	mov	r6, r0
  4061b4:	460f      	mov	r7, r1
  4061b6:	e4b6      	b.n	405b26 <_vfiprintf_r+0x48a>
  4061b8:	9e07      	ldr	r6, [sp, #28]
  4061ba:	3607      	adds	r6, #7
  4061bc:	f026 0207 	bic.w	r2, r6, #7
  4061c0:	f102 0108 	add.w	r1, r2, #8
  4061c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4061c8:	9107      	str	r1, [sp, #28]
  4061ca:	2200      	movs	r2, #0
  4061cc:	f7ff bb99 	b.w	405902 <_vfiprintf_r+0x266>
  4061d0:	9e07      	ldr	r6, [sp, #28]
  4061d2:	3607      	adds	r6, #7
  4061d4:	f026 0107 	bic.w	r1, r6, #7
  4061d8:	f101 0008 	add.w	r0, r1, #8
  4061dc:	9007      	str	r0, [sp, #28]
  4061de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4061e2:	e519      	b.n	405c18 <_vfiprintf_r+0x57c>
  4061e4:	46cb      	mov	fp, r9
  4061e6:	f7ff bbab 	b.w	405940 <_vfiprintf_r+0x2a4>
  4061ea:	252d      	movs	r5, #45	; 0x2d
  4061ec:	4276      	negs	r6, r6
  4061ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4061f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4061f6:	2201      	movs	r2, #1
  4061f8:	f7ff bb88 	b.w	40590c <_vfiprintf_r+0x270>
  4061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061fe:	b9b3      	cbnz	r3, 40622e <_vfiprintf_r+0xb92>
  406200:	4611      	mov	r1, r2
  406202:	2001      	movs	r0, #1
  406204:	46ca      	mov	sl, r9
  406206:	e5f2      	b.n	405dee <_vfiprintf_r+0x752>
  406208:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40620c:	f000 fdfe 	bl	406e0c <__retarget_lock_release_recursive>
  406210:	f04f 33ff 	mov.w	r3, #4294967295
  406214:	9303      	str	r3, [sp, #12]
  406216:	f7ff bb50 	b.w	4058ba <_vfiprintf_r+0x21e>
  40621a:	aa0f      	add	r2, sp, #60	; 0x3c
  40621c:	9904      	ldr	r1, [sp, #16]
  40621e:	9806      	ldr	r0, [sp, #24]
  406220:	f7ff f9fc 	bl	40561c <__sprint_r.part.0>
  406224:	2800      	cmp	r0, #0
  406226:	f47f aeeb 	bne.w	406000 <_vfiprintf_r+0x964>
  40622a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40622c:	e6a9      	b.n	405f82 <_vfiprintf_r+0x8e6>
  40622e:	ab0e      	add	r3, sp, #56	; 0x38
  406230:	2202      	movs	r2, #2
  406232:	931c      	str	r3, [sp, #112]	; 0x70
  406234:	921d      	str	r2, [sp, #116]	; 0x74
  406236:	2001      	movs	r0, #1
  406238:	46ca      	mov	sl, r9
  40623a:	e5d0      	b.n	405dde <_vfiprintf_r+0x742>
  40623c:	aa0f      	add	r2, sp, #60	; 0x3c
  40623e:	9904      	ldr	r1, [sp, #16]
  406240:	9806      	ldr	r0, [sp, #24]
  406242:	f7ff f9eb 	bl	40561c <__sprint_r.part.0>
  406246:	2800      	cmp	r0, #0
  406248:	f47f aeda 	bne.w	406000 <_vfiprintf_r+0x964>
  40624c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40624e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406250:	1c48      	adds	r0, r1, #1
  406252:	46ca      	mov	sl, r9
  406254:	e5a4      	b.n	405da0 <_vfiprintf_r+0x704>
  406256:	9a07      	ldr	r2, [sp, #28]
  406258:	9903      	ldr	r1, [sp, #12]
  40625a:	6813      	ldr	r3, [r2, #0]
  40625c:	17cd      	asrs	r5, r1, #31
  40625e:	4608      	mov	r0, r1
  406260:	3204      	adds	r2, #4
  406262:	4629      	mov	r1, r5
  406264:	9207      	str	r2, [sp, #28]
  406266:	e9c3 0100 	strd	r0, r1, [r3]
  40626a:	f7ff ba54 	b.w	405716 <_vfiprintf_r+0x7a>
  40626e:	4658      	mov	r0, fp
  406270:	9607      	str	r6, [sp, #28]
  406272:	9302      	str	r3, [sp, #8]
  406274:	f7ff f964 	bl	405540 <strlen>
  406278:	2400      	movs	r4, #0
  40627a:	9005      	str	r0, [sp, #20]
  40627c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406280:	f7ff bb5e 	b.w	405940 <_vfiprintf_r+0x2a4>
  406284:	aa0f      	add	r2, sp, #60	; 0x3c
  406286:	9904      	ldr	r1, [sp, #16]
  406288:	9806      	ldr	r0, [sp, #24]
  40628a:	f7ff f9c7 	bl	40561c <__sprint_r.part.0>
  40628e:	2800      	cmp	r0, #0
  406290:	f47f aeb6 	bne.w	406000 <_vfiprintf_r+0x964>
  406294:	9910      	ldr	r1, [sp, #64]	; 0x40
  406296:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406298:	1c48      	adds	r0, r1, #1
  40629a:	46ca      	mov	sl, r9
  40629c:	e5a7      	b.n	405dee <_vfiprintf_r+0x752>
  40629e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4062a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062a2:	4e20      	ldr	r6, [pc, #128]	; (406324 <_vfiprintf_r+0xc88>)
  4062a4:	3101      	adds	r1, #1
  4062a6:	f7ff bb90 	b.w	4059ca <_vfiprintf_r+0x32e>
  4062aa:	2c06      	cmp	r4, #6
  4062ac:	bf28      	it	cs
  4062ae:	2406      	movcs	r4, #6
  4062b0:	9405      	str	r4, [sp, #20]
  4062b2:	9607      	str	r6, [sp, #28]
  4062b4:	9401      	str	r4, [sp, #4]
  4062b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 406328 <_vfiprintf_r+0xc8c>
  4062ba:	e4d5      	b.n	405c68 <_vfiprintf_r+0x5cc>
  4062bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4062be:	4e19      	ldr	r6, [pc, #100]	; (406324 <_vfiprintf_r+0xc88>)
  4062c0:	3001      	adds	r0, #1
  4062c2:	e603      	b.n	405ecc <_vfiprintf_r+0x830>
  4062c4:	9405      	str	r4, [sp, #20]
  4062c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4062ca:	9607      	str	r6, [sp, #28]
  4062cc:	9302      	str	r3, [sp, #8]
  4062ce:	4604      	mov	r4, r0
  4062d0:	f7ff bb36 	b.w	405940 <_vfiprintf_r+0x2a4>
  4062d4:	4686      	mov	lr, r0
  4062d6:	f7ff bbce 	b.w	405a76 <_vfiprintf_r+0x3da>
  4062da:	9806      	ldr	r0, [sp, #24]
  4062dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4062de:	4659      	mov	r1, fp
  4062e0:	f7ff f99c 	bl	40561c <__sprint_r.part.0>
  4062e4:	2800      	cmp	r0, #0
  4062e6:	f43f ae24 	beq.w	405f32 <_vfiprintf_r+0x896>
  4062ea:	e624      	b.n	405f36 <_vfiprintf_r+0x89a>
  4062ec:	9907      	ldr	r1, [sp, #28]
  4062ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4062f2:	680c      	ldr	r4, [r1, #0]
  4062f4:	3104      	adds	r1, #4
  4062f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4062fa:	46b8      	mov	r8, r7
  4062fc:	9107      	str	r1, [sp, #28]
  4062fe:	f7ff ba3f 	b.w	405780 <_vfiprintf_r+0xe4>
  406302:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406306:	e43c      	b.n	405b82 <_vfiprintf_r+0x4e6>
  406308:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40630c:	e521      	b.n	405d52 <_vfiprintf_r+0x6b6>
  40630e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406312:	f7ff bbf4 	b.w	405afe <_vfiprintf_r+0x462>
  406316:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40631a:	e491      	b.n	405c40 <_vfiprintf_r+0x5a4>
  40631c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406320:	e469      	b.n	405bf6 <_vfiprintf_r+0x55a>
  406322:	bf00      	nop
  406324:	00407c64 	.word	0x00407c64
  406328:	00407c5c 	.word	0x00407c5c

0040632c <__sbprintf>:
  40632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406330:	460c      	mov	r4, r1
  406332:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406336:	8989      	ldrh	r1, [r1, #12]
  406338:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40633a:	89e5      	ldrh	r5, [r4, #14]
  40633c:	9619      	str	r6, [sp, #100]	; 0x64
  40633e:	f021 0102 	bic.w	r1, r1, #2
  406342:	4606      	mov	r6, r0
  406344:	69e0      	ldr	r0, [r4, #28]
  406346:	f8ad 100c 	strh.w	r1, [sp, #12]
  40634a:	4617      	mov	r7, r2
  40634c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406350:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406352:	f8ad 500e 	strh.w	r5, [sp, #14]
  406356:	4698      	mov	r8, r3
  406358:	ad1a      	add	r5, sp, #104	; 0x68
  40635a:	2300      	movs	r3, #0
  40635c:	9007      	str	r0, [sp, #28]
  40635e:	a816      	add	r0, sp, #88	; 0x58
  406360:	9209      	str	r2, [sp, #36]	; 0x24
  406362:	9306      	str	r3, [sp, #24]
  406364:	9500      	str	r5, [sp, #0]
  406366:	9504      	str	r5, [sp, #16]
  406368:	9102      	str	r1, [sp, #8]
  40636a:	9105      	str	r1, [sp, #20]
  40636c:	f000 fd48 	bl	406e00 <__retarget_lock_init_recursive>
  406370:	4643      	mov	r3, r8
  406372:	463a      	mov	r2, r7
  406374:	4669      	mov	r1, sp
  406376:	4630      	mov	r0, r6
  406378:	f7ff f990 	bl	40569c <_vfiprintf_r>
  40637c:	1e05      	subs	r5, r0, #0
  40637e:	db07      	blt.n	406390 <__sbprintf+0x64>
  406380:	4630      	mov	r0, r6
  406382:	4669      	mov	r1, sp
  406384:	f000 f928 	bl	4065d8 <_fflush_r>
  406388:	2800      	cmp	r0, #0
  40638a:	bf18      	it	ne
  40638c:	f04f 35ff 	movne.w	r5, #4294967295
  406390:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406394:	065b      	lsls	r3, r3, #25
  406396:	d503      	bpl.n	4063a0 <__sbprintf+0x74>
  406398:	89a3      	ldrh	r3, [r4, #12]
  40639a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40639e:	81a3      	strh	r3, [r4, #12]
  4063a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4063a2:	f000 fd2f 	bl	406e04 <__retarget_lock_close_recursive>
  4063a6:	4628      	mov	r0, r5
  4063a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004063b0 <__swsetup_r>:
  4063b0:	b538      	push	{r3, r4, r5, lr}
  4063b2:	4b30      	ldr	r3, [pc, #192]	; (406474 <__swsetup_r+0xc4>)
  4063b4:	681b      	ldr	r3, [r3, #0]
  4063b6:	4605      	mov	r5, r0
  4063b8:	460c      	mov	r4, r1
  4063ba:	b113      	cbz	r3, 4063c2 <__swsetup_r+0x12>
  4063bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4063be:	2a00      	cmp	r2, #0
  4063c0:	d038      	beq.n	406434 <__swsetup_r+0x84>
  4063c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4063c6:	b293      	uxth	r3, r2
  4063c8:	0718      	lsls	r0, r3, #28
  4063ca:	d50c      	bpl.n	4063e6 <__swsetup_r+0x36>
  4063cc:	6920      	ldr	r0, [r4, #16]
  4063ce:	b1a8      	cbz	r0, 4063fc <__swsetup_r+0x4c>
  4063d0:	f013 0201 	ands.w	r2, r3, #1
  4063d4:	d01e      	beq.n	406414 <__swsetup_r+0x64>
  4063d6:	6963      	ldr	r3, [r4, #20]
  4063d8:	2200      	movs	r2, #0
  4063da:	425b      	negs	r3, r3
  4063dc:	61a3      	str	r3, [r4, #24]
  4063de:	60a2      	str	r2, [r4, #8]
  4063e0:	b1f0      	cbz	r0, 406420 <__swsetup_r+0x70>
  4063e2:	2000      	movs	r0, #0
  4063e4:	bd38      	pop	{r3, r4, r5, pc}
  4063e6:	06d9      	lsls	r1, r3, #27
  4063e8:	d53c      	bpl.n	406464 <__swsetup_r+0xb4>
  4063ea:	0758      	lsls	r0, r3, #29
  4063ec:	d426      	bmi.n	40643c <__swsetup_r+0x8c>
  4063ee:	6920      	ldr	r0, [r4, #16]
  4063f0:	f042 0308 	orr.w	r3, r2, #8
  4063f4:	81a3      	strh	r3, [r4, #12]
  4063f6:	b29b      	uxth	r3, r3
  4063f8:	2800      	cmp	r0, #0
  4063fa:	d1e9      	bne.n	4063d0 <__swsetup_r+0x20>
  4063fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406400:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406404:	d0e4      	beq.n	4063d0 <__swsetup_r+0x20>
  406406:	4628      	mov	r0, r5
  406408:	4621      	mov	r1, r4
  40640a:	f000 fd2f 	bl	406e6c <__smakebuf_r>
  40640e:	89a3      	ldrh	r3, [r4, #12]
  406410:	6920      	ldr	r0, [r4, #16]
  406412:	e7dd      	b.n	4063d0 <__swsetup_r+0x20>
  406414:	0799      	lsls	r1, r3, #30
  406416:	bf58      	it	pl
  406418:	6962      	ldrpl	r2, [r4, #20]
  40641a:	60a2      	str	r2, [r4, #8]
  40641c:	2800      	cmp	r0, #0
  40641e:	d1e0      	bne.n	4063e2 <__swsetup_r+0x32>
  406420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406424:	061a      	lsls	r2, r3, #24
  406426:	d5dd      	bpl.n	4063e4 <__swsetup_r+0x34>
  406428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40642c:	81a3      	strh	r3, [r4, #12]
  40642e:	f04f 30ff 	mov.w	r0, #4294967295
  406432:	bd38      	pop	{r3, r4, r5, pc}
  406434:	4618      	mov	r0, r3
  406436:	f000 f927 	bl	406688 <__sinit>
  40643a:	e7c2      	b.n	4063c2 <__swsetup_r+0x12>
  40643c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40643e:	b151      	cbz	r1, 406456 <__swsetup_r+0xa6>
  406440:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406444:	4299      	cmp	r1, r3
  406446:	d004      	beq.n	406452 <__swsetup_r+0xa2>
  406448:	4628      	mov	r0, r5
  40644a:	f000 fa43 	bl	4068d4 <_free_r>
  40644e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406452:	2300      	movs	r3, #0
  406454:	6323      	str	r3, [r4, #48]	; 0x30
  406456:	2300      	movs	r3, #0
  406458:	6920      	ldr	r0, [r4, #16]
  40645a:	6063      	str	r3, [r4, #4]
  40645c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406460:	6020      	str	r0, [r4, #0]
  406462:	e7c5      	b.n	4063f0 <__swsetup_r+0x40>
  406464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406468:	2309      	movs	r3, #9
  40646a:	602b      	str	r3, [r5, #0]
  40646c:	f04f 30ff 	mov.w	r0, #4294967295
  406470:	81a2      	strh	r2, [r4, #12]
  406472:	bd38      	pop	{r3, r4, r5, pc}
  406474:	20400014 	.word	0x20400014

00406478 <register_fini>:
  406478:	4b02      	ldr	r3, [pc, #8]	; (406484 <register_fini+0xc>)
  40647a:	b113      	cbz	r3, 406482 <register_fini+0xa>
  40647c:	4802      	ldr	r0, [pc, #8]	; (406488 <register_fini+0x10>)
  40647e:	f000 b805 	b.w	40648c <atexit>
  406482:	4770      	bx	lr
  406484:	00000000 	.word	0x00000000
  406488:	004066f9 	.word	0x004066f9

0040648c <atexit>:
  40648c:	2300      	movs	r3, #0
  40648e:	4601      	mov	r1, r0
  406490:	461a      	mov	r2, r3
  406492:	4618      	mov	r0, r3
  406494:	f001 b890 	b.w	4075b8 <__register_exitproc>

00406498 <__sflush_r>:
  406498:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40649c:	b29a      	uxth	r2, r3
  40649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4064a2:	460d      	mov	r5, r1
  4064a4:	0711      	lsls	r1, r2, #28
  4064a6:	4680      	mov	r8, r0
  4064a8:	d43a      	bmi.n	406520 <__sflush_r+0x88>
  4064aa:	686a      	ldr	r2, [r5, #4]
  4064ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4064b0:	2a00      	cmp	r2, #0
  4064b2:	81ab      	strh	r3, [r5, #12]
  4064b4:	dd6f      	ble.n	406596 <__sflush_r+0xfe>
  4064b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4064b8:	2c00      	cmp	r4, #0
  4064ba:	d049      	beq.n	406550 <__sflush_r+0xb8>
  4064bc:	2200      	movs	r2, #0
  4064be:	b29b      	uxth	r3, r3
  4064c0:	f8d8 6000 	ldr.w	r6, [r8]
  4064c4:	f8c8 2000 	str.w	r2, [r8]
  4064c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4064cc:	d067      	beq.n	40659e <__sflush_r+0x106>
  4064ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4064d0:	075f      	lsls	r7, r3, #29
  4064d2:	d505      	bpl.n	4064e0 <__sflush_r+0x48>
  4064d4:	6869      	ldr	r1, [r5, #4]
  4064d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4064d8:	1a52      	subs	r2, r2, r1
  4064da:	b10b      	cbz	r3, 4064e0 <__sflush_r+0x48>
  4064dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4064de:	1ad2      	subs	r2, r2, r3
  4064e0:	2300      	movs	r3, #0
  4064e2:	69e9      	ldr	r1, [r5, #28]
  4064e4:	4640      	mov	r0, r8
  4064e6:	47a0      	blx	r4
  4064e8:	1c44      	adds	r4, r0, #1
  4064ea:	d03c      	beq.n	406566 <__sflush_r+0xce>
  4064ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4064f0:	692a      	ldr	r2, [r5, #16]
  4064f2:	602a      	str	r2, [r5, #0]
  4064f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4064f8:	2200      	movs	r2, #0
  4064fa:	81ab      	strh	r3, [r5, #12]
  4064fc:	04db      	lsls	r3, r3, #19
  4064fe:	606a      	str	r2, [r5, #4]
  406500:	d447      	bmi.n	406592 <__sflush_r+0xfa>
  406502:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406504:	f8c8 6000 	str.w	r6, [r8]
  406508:	b311      	cbz	r1, 406550 <__sflush_r+0xb8>
  40650a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40650e:	4299      	cmp	r1, r3
  406510:	d002      	beq.n	406518 <__sflush_r+0x80>
  406512:	4640      	mov	r0, r8
  406514:	f000 f9de 	bl	4068d4 <_free_r>
  406518:	2000      	movs	r0, #0
  40651a:	6328      	str	r0, [r5, #48]	; 0x30
  40651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406520:	692e      	ldr	r6, [r5, #16]
  406522:	b1ae      	cbz	r6, 406550 <__sflush_r+0xb8>
  406524:	682c      	ldr	r4, [r5, #0]
  406526:	602e      	str	r6, [r5, #0]
  406528:	0791      	lsls	r1, r2, #30
  40652a:	bf0c      	ite	eq
  40652c:	696b      	ldreq	r3, [r5, #20]
  40652e:	2300      	movne	r3, #0
  406530:	1ba4      	subs	r4, r4, r6
  406532:	60ab      	str	r3, [r5, #8]
  406534:	e00a      	b.n	40654c <__sflush_r+0xb4>
  406536:	4623      	mov	r3, r4
  406538:	4632      	mov	r2, r6
  40653a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40653c:	69e9      	ldr	r1, [r5, #28]
  40653e:	4640      	mov	r0, r8
  406540:	47b8      	blx	r7
  406542:	2800      	cmp	r0, #0
  406544:	eba4 0400 	sub.w	r4, r4, r0
  406548:	4406      	add	r6, r0
  40654a:	dd04      	ble.n	406556 <__sflush_r+0xbe>
  40654c:	2c00      	cmp	r4, #0
  40654e:	dcf2      	bgt.n	406536 <__sflush_r+0x9e>
  406550:	2000      	movs	r0, #0
  406552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406556:	89ab      	ldrh	r3, [r5, #12]
  406558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40655c:	81ab      	strh	r3, [r5, #12]
  40655e:	f04f 30ff 	mov.w	r0, #4294967295
  406562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406566:	f8d8 4000 	ldr.w	r4, [r8]
  40656a:	2c1d      	cmp	r4, #29
  40656c:	d8f3      	bhi.n	406556 <__sflush_r+0xbe>
  40656e:	4b19      	ldr	r3, [pc, #100]	; (4065d4 <__sflush_r+0x13c>)
  406570:	40e3      	lsrs	r3, r4
  406572:	43db      	mvns	r3, r3
  406574:	f013 0301 	ands.w	r3, r3, #1
  406578:	d1ed      	bne.n	406556 <__sflush_r+0xbe>
  40657a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40657e:	606b      	str	r3, [r5, #4]
  406580:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406584:	6929      	ldr	r1, [r5, #16]
  406586:	81ab      	strh	r3, [r5, #12]
  406588:	04da      	lsls	r2, r3, #19
  40658a:	6029      	str	r1, [r5, #0]
  40658c:	d5b9      	bpl.n	406502 <__sflush_r+0x6a>
  40658e:	2c00      	cmp	r4, #0
  406590:	d1b7      	bne.n	406502 <__sflush_r+0x6a>
  406592:	6528      	str	r0, [r5, #80]	; 0x50
  406594:	e7b5      	b.n	406502 <__sflush_r+0x6a>
  406596:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406598:	2a00      	cmp	r2, #0
  40659a:	dc8c      	bgt.n	4064b6 <__sflush_r+0x1e>
  40659c:	e7d8      	b.n	406550 <__sflush_r+0xb8>
  40659e:	2301      	movs	r3, #1
  4065a0:	69e9      	ldr	r1, [r5, #28]
  4065a2:	4640      	mov	r0, r8
  4065a4:	47a0      	blx	r4
  4065a6:	1c43      	adds	r3, r0, #1
  4065a8:	4602      	mov	r2, r0
  4065aa:	d002      	beq.n	4065b2 <__sflush_r+0x11a>
  4065ac:	89ab      	ldrh	r3, [r5, #12]
  4065ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4065b0:	e78e      	b.n	4064d0 <__sflush_r+0x38>
  4065b2:	f8d8 3000 	ldr.w	r3, [r8]
  4065b6:	2b00      	cmp	r3, #0
  4065b8:	d0f8      	beq.n	4065ac <__sflush_r+0x114>
  4065ba:	2b1d      	cmp	r3, #29
  4065bc:	d001      	beq.n	4065c2 <__sflush_r+0x12a>
  4065be:	2b16      	cmp	r3, #22
  4065c0:	d102      	bne.n	4065c8 <__sflush_r+0x130>
  4065c2:	f8c8 6000 	str.w	r6, [r8]
  4065c6:	e7c3      	b.n	406550 <__sflush_r+0xb8>
  4065c8:	89ab      	ldrh	r3, [r5, #12]
  4065ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4065ce:	81ab      	strh	r3, [r5, #12]
  4065d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4065d4:	20400001 	.word	0x20400001

004065d8 <_fflush_r>:
  4065d8:	b538      	push	{r3, r4, r5, lr}
  4065da:	460d      	mov	r5, r1
  4065dc:	4604      	mov	r4, r0
  4065de:	b108      	cbz	r0, 4065e4 <_fflush_r+0xc>
  4065e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4065e2:	b1bb      	cbz	r3, 406614 <_fflush_r+0x3c>
  4065e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4065e8:	b188      	cbz	r0, 40660e <_fflush_r+0x36>
  4065ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4065ec:	07db      	lsls	r3, r3, #31
  4065ee:	d401      	bmi.n	4065f4 <_fflush_r+0x1c>
  4065f0:	0581      	lsls	r1, r0, #22
  4065f2:	d517      	bpl.n	406624 <_fflush_r+0x4c>
  4065f4:	4620      	mov	r0, r4
  4065f6:	4629      	mov	r1, r5
  4065f8:	f7ff ff4e 	bl	406498 <__sflush_r>
  4065fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4065fe:	07da      	lsls	r2, r3, #31
  406600:	4604      	mov	r4, r0
  406602:	d402      	bmi.n	40660a <_fflush_r+0x32>
  406604:	89ab      	ldrh	r3, [r5, #12]
  406606:	059b      	lsls	r3, r3, #22
  406608:	d507      	bpl.n	40661a <_fflush_r+0x42>
  40660a:	4620      	mov	r0, r4
  40660c:	bd38      	pop	{r3, r4, r5, pc}
  40660e:	4604      	mov	r4, r0
  406610:	4620      	mov	r0, r4
  406612:	bd38      	pop	{r3, r4, r5, pc}
  406614:	f000 f838 	bl	406688 <__sinit>
  406618:	e7e4      	b.n	4065e4 <_fflush_r+0xc>
  40661a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40661c:	f000 fbf6 	bl	406e0c <__retarget_lock_release_recursive>
  406620:	4620      	mov	r0, r4
  406622:	bd38      	pop	{r3, r4, r5, pc}
  406624:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406626:	f000 fbef 	bl	406e08 <__retarget_lock_acquire_recursive>
  40662a:	e7e3      	b.n	4065f4 <_fflush_r+0x1c>

0040662c <_cleanup_r>:
  40662c:	4901      	ldr	r1, [pc, #4]	; (406634 <_cleanup_r+0x8>)
  40662e:	f000 bbaf 	b.w	406d90 <_fwalk_reent>
  406632:	bf00      	nop
  406634:	004076a1 	.word	0x004076a1

00406638 <std.isra.0>:
  406638:	b510      	push	{r4, lr}
  40663a:	2300      	movs	r3, #0
  40663c:	4604      	mov	r4, r0
  40663e:	8181      	strh	r1, [r0, #12]
  406640:	81c2      	strh	r2, [r0, #14]
  406642:	6003      	str	r3, [r0, #0]
  406644:	6043      	str	r3, [r0, #4]
  406646:	6083      	str	r3, [r0, #8]
  406648:	6643      	str	r3, [r0, #100]	; 0x64
  40664a:	6103      	str	r3, [r0, #16]
  40664c:	6143      	str	r3, [r0, #20]
  40664e:	6183      	str	r3, [r0, #24]
  406650:	4619      	mov	r1, r3
  406652:	2208      	movs	r2, #8
  406654:	305c      	adds	r0, #92	; 0x5c
  406656:	f7fe fe1b 	bl	405290 <memset>
  40665a:	4807      	ldr	r0, [pc, #28]	; (406678 <std.isra.0+0x40>)
  40665c:	4907      	ldr	r1, [pc, #28]	; (40667c <std.isra.0+0x44>)
  40665e:	4a08      	ldr	r2, [pc, #32]	; (406680 <std.isra.0+0x48>)
  406660:	4b08      	ldr	r3, [pc, #32]	; (406684 <std.isra.0+0x4c>)
  406662:	6220      	str	r0, [r4, #32]
  406664:	61e4      	str	r4, [r4, #28]
  406666:	6261      	str	r1, [r4, #36]	; 0x24
  406668:	62a2      	str	r2, [r4, #40]	; 0x28
  40666a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40666c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406674:	f000 bbc4 	b.w	406e00 <__retarget_lock_init_recursive>
  406678:	004073e5 	.word	0x004073e5
  40667c:	00407409 	.word	0x00407409
  406680:	00407445 	.word	0x00407445
  406684:	00407465 	.word	0x00407465

00406688 <__sinit>:
  406688:	b510      	push	{r4, lr}
  40668a:	4604      	mov	r4, r0
  40668c:	4812      	ldr	r0, [pc, #72]	; (4066d8 <__sinit+0x50>)
  40668e:	f000 fbbb 	bl	406e08 <__retarget_lock_acquire_recursive>
  406692:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406694:	b9d2      	cbnz	r2, 4066cc <__sinit+0x44>
  406696:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40669a:	4810      	ldr	r0, [pc, #64]	; (4066dc <__sinit+0x54>)
  40669c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4066a0:	2103      	movs	r1, #3
  4066a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4066a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4066a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4066ac:	6860      	ldr	r0, [r4, #4]
  4066ae:	2104      	movs	r1, #4
  4066b0:	f7ff ffc2 	bl	406638 <std.isra.0>
  4066b4:	2201      	movs	r2, #1
  4066b6:	2109      	movs	r1, #9
  4066b8:	68a0      	ldr	r0, [r4, #8]
  4066ba:	f7ff ffbd 	bl	406638 <std.isra.0>
  4066be:	2202      	movs	r2, #2
  4066c0:	2112      	movs	r1, #18
  4066c2:	68e0      	ldr	r0, [r4, #12]
  4066c4:	f7ff ffb8 	bl	406638 <std.isra.0>
  4066c8:	2301      	movs	r3, #1
  4066ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4066cc:	4802      	ldr	r0, [pc, #8]	; (4066d8 <__sinit+0x50>)
  4066ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4066d2:	f000 bb9b 	b.w	406e0c <__retarget_lock_release_recursive>
  4066d6:	bf00      	nop
  4066d8:	2040ca6c 	.word	0x2040ca6c
  4066dc:	0040662d 	.word	0x0040662d

004066e0 <__sfp_lock_acquire>:
  4066e0:	4801      	ldr	r0, [pc, #4]	; (4066e8 <__sfp_lock_acquire+0x8>)
  4066e2:	f000 bb91 	b.w	406e08 <__retarget_lock_acquire_recursive>
  4066e6:	bf00      	nop
  4066e8:	2040ca80 	.word	0x2040ca80

004066ec <__sfp_lock_release>:
  4066ec:	4801      	ldr	r0, [pc, #4]	; (4066f4 <__sfp_lock_release+0x8>)
  4066ee:	f000 bb8d 	b.w	406e0c <__retarget_lock_release_recursive>
  4066f2:	bf00      	nop
  4066f4:	2040ca80 	.word	0x2040ca80

004066f8 <__libc_fini_array>:
  4066f8:	b538      	push	{r3, r4, r5, lr}
  4066fa:	4c0a      	ldr	r4, [pc, #40]	; (406724 <__libc_fini_array+0x2c>)
  4066fc:	4d0a      	ldr	r5, [pc, #40]	; (406728 <__libc_fini_array+0x30>)
  4066fe:	1b64      	subs	r4, r4, r5
  406700:	10a4      	asrs	r4, r4, #2
  406702:	d00a      	beq.n	40671a <__libc_fini_array+0x22>
  406704:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406708:	3b01      	subs	r3, #1
  40670a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40670e:	3c01      	subs	r4, #1
  406710:	f855 3904 	ldr.w	r3, [r5], #-4
  406714:	4798      	blx	r3
  406716:	2c00      	cmp	r4, #0
  406718:	d1f9      	bne.n	40670e <__libc_fini_array+0x16>
  40671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40671e:	f001 bb45 	b.w	407dac <_fini>
  406722:	bf00      	nop
  406724:	00407dbc 	.word	0x00407dbc
  406728:	00407db8 	.word	0x00407db8

0040672c <__fputwc>:
  40672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406730:	b082      	sub	sp, #8
  406732:	4680      	mov	r8, r0
  406734:	4689      	mov	r9, r1
  406736:	4614      	mov	r4, r2
  406738:	f000 fb54 	bl	406de4 <__locale_mb_cur_max>
  40673c:	2801      	cmp	r0, #1
  40673e:	d036      	beq.n	4067ae <__fputwc+0x82>
  406740:	464a      	mov	r2, r9
  406742:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406746:	a901      	add	r1, sp, #4
  406748:	4640      	mov	r0, r8
  40674a:	f000 fee7 	bl	40751c <_wcrtomb_r>
  40674e:	1c42      	adds	r2, r0, #1
  406750:	4606      	mov	r6, r0
  406752:	d025      	beq.n	4067a0 <__fputwc+0x74>
  406754:	b3a8      	cbz	r0, 4067c2 <__fputwc+0x96>
  406756:	f89d e004 	ldrb.w	lr, [sp, #4]
  40675a:	2500      	movs	r5, #0
  40675c:	f10d 0a04 	add.w	sl, sp, #4
  406760:	e009      	b.n	406776 <__fputwc+0x4a>
  406762:	6823      	ldr	r3, [r4, #0]
  406764:	1c5a      	adds	r2, r3, #1
  406766:	6022      	str	r2, [r4, #0]
  406768:	f883 e000 	strb.w	lr, [r3]
  40676c:	3501      	adds	r5, #1
  40676e:	42b5      	cmp	r5, r6
  406770:	d227      	bcs.n	4067c2 <__fputwc+0x96>
  406772:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406776:	68a3      	ldr	r3, [r4, #8]
  406778:	3b01      	subs	r3, #1
  40677a:	2b00      	cmp	r3, #0
  40677c:	60a3      	str	r3, [r4, #8]
  40677e:	daf0      	bge.n	406762 <__fputwc+0x36>
  406780:	69a7      	ldr	r7, [r4, #24]
  406782:	42bb      	cmp	r3, r7
  406784:	4671      	mov	r1, lr
  406786:	4622      	mov	r2, r4
  406788:	4640      	mov	r0, r8
  40678a:	db02      	blt.n	406792 <__fputwc+0x66>
  40678c:	f1be 0f0a 	cmp.w	lr, #10
  406790:	d1e7      	bne.n	406762 <__fputwc+0x36>
  406792:	f000 fe6b 	bl	40746c <__swbuf_r>
  406796:	1c43      	adds	r3, r0, #1
  406798:	d1e8      	bne.n	40676c <__fputwc+0x40>
  40679a:	b002      	add	sp, #8
  40679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067a0:	89a3      	ldrh	r3, [r4, #12]
  4067a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067a6:	81a3      	strh	r3, [r4, #12]
  4067a8:	b002      	add	sp, #8
  4067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4067b2:	2bfe      	cmp	r3, #254	; 0xfe
  4067b4:	d8c4      	bhi.n	406740 <__fputwc+0x14>
  4067b6:	fa5f fe89 	uxtb.w	lr, r9
  4067ba:	4606      	mov	r6, r0
  4067bc:	f88d e004 	strb.w	lr, [sp, #4]
  4067c0:	e7cb      	b.n	40675a <__fputwc+0x2e>
  4067c2:	4648      	mov	r0, r9
  4067c4:	b002      	add	sp, #8
  4067c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067ca:	bf00      	nop

004067cc <_fputwc_r>:
  4067cc:	b530      	push	{r4, r5, lr}
  4067ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4067d0:	f013 0f01 	tst.w	r3, #1
  4067d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4067d8:	4614      	mov	r4, r2
  4067da:	b083      	sub	sp, #12
  4067dc:	4605      	mov	r5, r0
  4067de:	b29a      	uxth	r2, r3
  4067e0:	d101      	bne.n	4067e6 <_fputwc_r+0x1a>
  4067e2:	0590      	lsls	r0, r2, #22
  4067e4:	d51c      	bpl.n	406820 <_fputwc_r+0x54>
  4067e6:	0490      	lsls	r0, r2, #18
  4067e8:	d406      	bmi.n	4067f8 <_fputwc_r+0x2c>
  4067ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4067ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4067f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4067f4:	81a3      	strh	r3, [r4, #12]
  4067f6:	6662      	str	r2, [r4, #100]	; 0x64
  4067f8:	4628      	mov	r0, r5
  4067fa:	4622      	mov	r2, r4
  4067fc:	f7ff ff96 	bl	40672c <__fputwc>
  406800:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406802:	07da      	lsls	r2, r3, #31
  406804:	4605      	mov	r5, r0
  406806:	d402      	bmi.n	40680e <_fputwc_r+0x42>
  406808:	89a3      	ldrh	r3, [r4, #12]
  40680a:	059b      	lsls	r3, r3, #22
  40680c:	d502      	bpl.n	406814 <_fputwc_r+0x48>
  40680e:	4628      	mov	r0, r5
  406810:	b003      	add	sp, #12
  406812:	bd30      	pop	{r4, r5, pc}
  406814:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406816:	f000 faf9 	bl	406e0c <__retarget_lock_release_recursive>
  40681a:	4628      	mov	r0, r5
  40681c:	b003      	add	sp, #12
  40681e:	bd30      	pop	{r4, r5, pc}
  406820:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406822:	9101      	str	r1, [sp, #4]
  406824:	f000 faf0 	bl	406e08 <__retarget_lock_acquire_recursive>
  406828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40682c:	9901      	ldr	r1, [sp, #4]
  40682e:	b29a      	uxth	r2, r3
  406830:	e7d9      	b.n	4067e6 <_fputwc_r+0x1a>
  406832:	bf00      	nop

00406834 <_malloc_trim_r>:
  406834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406836:	4f24      	ldr	r7, [pc, #144]	; (4068c8 <_malloc_trim_r+0x94>)
  406838:	460c      	mov	r4, r1
  40683a:	4606      	mov	r6, r0
  40683c:	f7fe fd76 	bl	40532c <__malloc_lock>
  406840:	68bb      	ldr	r3, [r7, #8]
  406842:	685d      	ldr	r5, [r3, #4]
  406844:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406848:	310f      	adds	r1, #15
  40684a:	f025 0503 	bic.w	r5, r5, #3
  40684e:	4429      	add	r1, r5
  406850:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406854:	f021 010f 	bic.w	r1, r1, #15
  406858:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40685c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406860:	db07      	blt.n	406872 <_malloc_trim_r+0x3e>
  406862:	2100      	movs	r1, #0
  406864:	4630      	mov	r0, r6
  406866:	f7fe fd6d 	bl	405344 <_sbrk_r>
  40686a:	68bb      	ldr	r3, [r7, #8]
  40686c:	442b      	add	r3, r5
  40686e:	4298      	cmp	r0, r3
  406870:	d004      	beq.n	40687c <_malloc_trim_r+0x48>
  406872:	4630      	mov	r0, r6
  406874:	f7fe fd60 	bl	405338 <__malloc_unlock>
  406878:	2000      	movs	r0, #0
  40687a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40687c:	4261      	negs	r1, r4
  40687e:	4630      	mov	r0, r6
  406880:	f7fe fd60 	bl	405344 <_sbrk_r>
  406884:	3001      	adds	r0, #1
  406886:	d00d      	beq.n	4068a4 <_malloc_trim_r+0x70>
  406888:	4b10      	ldr	r3, [pc, #64]	; (4068cc <_malloc_trim_r+0x98>)
  40688a:	68ba      	ldr	r2, [r7, #8]
  40688c:	6819      	ldr	r1, [r3, #0]
  40688e:	1b2d      	subs	r5, r5, r4
  406890:	f045 0501 	orr.w	r5, r5, #1
  406894:	4630      	mov	r0, r6
  406896:	1b09      	subs	r1, r1, r4
  406898:	6055      	str	r5, [r2, #4]
  40689a:	6019      	str	r1, [r3, #0]
  40689c:	f7fe fd4c 	bl	405338 <__malloc_unlock>
  4068a0:	2001      	movs	r0, #1
  4068a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4068a4:	2100      	movs	r1, #0
  4068a6:	4630      	mov	r0, r6
  4068a8:	f7fe fd4c 	bl	405344 <_sbrk_r>
  4068ac:	68ba      	ldr	r2, [r7, #8]
  4068ae:	1a83      	subs	r3, r0, r2
  4068b0:	2b0f      	cmp	r3, #15
  4068b2:	ddde      	ble.n	406872 <_malloc_trim_r+0x3e>
  4068b4:	4c06      	ldr	r4, [pc, #24]	; (4068d0 <_malloc_trim_r+0x9c>)
  4068b6:	4905      	ldr	r1, [pc, #20]	; (4068cc <_malloc_trim_r+0x98>)
  4068b8:	6824      	ldr	r4, [r4, #0]
  4068ba:	f043 0301 	orr.w	r3, r3, #1
  4068be:	1b00      	subs	r0, r0, r4
  4068c0:	6053      	str	r3, [r2, #4]
  4068c2:	6008      	str	r0, [r1, #0]
  4068c4:	e7d5      	b.n	406872 <_malloc_trim_r+0x3e>
  4068c6:	bf00      	nop
  4068c8:	20400440 	.word	0x20400440
  4068cc:	2040c93c 	.word	0x2040c93c
  4068d0:	20400848 	.word	0x20400848

004068d4 <_free_r>:
  4068d4:	2900      	cmp	r1, #0
  4068d6:	d044      	beq.n	406962 <_free_r+0x8e>
  4068d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4068dc:	460d      	mov	r5, r1
  4068de:	4680      	mov	r8, r0
  4068e0:	f7fe fd24 	bl	40532c <__malloc_lock>
  4068e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4068e8:	4969      	ldr	r1, [pc, #420]	; (406a90 <_free_r+0x1bc>)
  4068ea:	f027 0301 	bic.w	r3, r7, #1
  4068ee:	f1a5 0408 	sub.w	r4, r5, #8
  4068f2:	18e2      	adds	r2, r4, r3
  4068f4:	688e      	ldr	r6, [r1, #8]
  4068f6:	6850      	ldr	r0, [r2, #4]
  4068f8:	42b2      	cmp	r2, r6
  4068fa:	f020 0003 	bic.w	r0, r0, #3
  4068fe:	d05e      	beq.n	4069be <_free_r+0xea>
  406900:	07fe      	lsls	r6, r7, #31
  406902:	6050      	str	r0, [r2, #4]
  406904:	d40b      	bmi.n	40691e <_free_r+0x4a>
  406906:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40690a:	1be4      	subs	r4, r4, r7
  40690c:	f101 0e08 	add.w	lr, r1, #8
  406910:	68a5      	ldr	r5, [r4, #8]
  406912:	4575      	cmp	r5, lr
  406914:	443b      	add	r3, r7
  406916:	d06d      	beq.n	4069f4 <_free_r+0x120>
  406918:	68e7      	ldr	r7, [r4, #12]
  40691a:	60ef      	str	r7, [r5, #12]
  40691c:	60bd      	str	r5, [r7, #8]
  40691e:	1815      	adds	r5, r2, r0
  406920:	686d      	ldr	r5, [r5, #4]
  406922:	07ed      	lsls	r5, r5, #31
  406924:	d53e      	bpl.n	4069a4 <_free_r+0xd0>
  406926:	f043 0201 	orr.w	r2, r3, #1
  40692a:	6062      	str	r2, [r4, #4]
  40692c:	50e3      	str	r3, [r4, r3]
  40692e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406932:	d217      	bcs.n	406964 <_free_r+0x90>
  406934:	08db      	lsrs	r3, r3, #3
  406936:	1c58      	adds	r0, r3, #1
  406938:	109a      	asrs	r2, r3, #2
  40693a:	684d      	ldr	r5, [r1, #4]
  40693c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406940:	60a7      	str	r7, [r4, #8]
  406942:	2301      	movs	r3, #1
  406944:	4093      	lsls	r3, r2
  406946:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40694a:	432b      	orrs	r3, r5
  40694c:	3a08      	subs	r2, #8
  40694e:	60e2      	str	r2, [r4, #12]
  406950:	604b      	str	r3, [r1, #4]
  406952:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406956:	60fc      	str	r4, [r7, #12]
  406958:	4640      	mov	r0, r8
  40695a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40695e:	f7fe bceb 	b.w	405338 <__malloc_unlock>
  406962:	4770      	bx	lr
  406964:	0a5a      	lsrs	r2, r3, #9
  406966:	2a04      	cmp	r2, #4
  406968:	d852      	bhi.n	406a10 <_free_r+0x13c>
  40696a:	099a      	lsrs	r2, r3, #6
  40696c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406970:	00ff      	lsls	r7, r7, #3
  406972:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406976:	19c8      	adds	r0, r1, r7
  406978:	59ca      	ldr	r2, [r1, r7]
  40697a:	3808      	subs	r0, #8
  40697c:	4290      	cmp	r0, r2
  40697e:	d04f      	beq.n	406a20 <_free_r+0x14c>
  406980:	6851      	ldr	r1, [r2, #4]
  406982:	f021 0103 	bic.w	r1, r1, #3
  406986:	428b      	cmp	r3, r1
  406988:	d232      	bcs.n	4069f0 <_free_r+0x11c>
  40698a:	6892      	ldr	r2, [r2, #8]
  40698c:	4290      	cmp	r0, r2
  40698e:	d1f7      	bne.n	406980 <_free_r+0xac>
  406990:	68c3      	ldr	r3, [r0, #12]
  406992:	60a0      	str	r0, [r4, #8]
  406994:	60e3      	str	r3, [r4, #12]
  406996:	609c      	str	r4, [r3, #8]
  406998:	60c4      	str	r4, [r0, #12]
  40699a:	4640      	mov	r0, r8
  40699c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4069a0:	f7fe bcca 	b.w	405338 <__malloc_unlock>
  4069a4:	6895      	ldr	r5, [r2, #8]
  4069a6:	4f3b      	ldr	r7, [pc, #236]	; (406a94 <_free_r+0x1c0>)
  4069a8:	42bd      	cmp	r5, r7
  4069aa:	4403      	add	r3, r0
  4069ac:	d040      	beq.n	406a30 <_free_r+0x15c>
  4069ae:	68d0      	ldr	r0, [r2, #12]
  4069b0:	60e8      	str	r0, [r5, #12]
  4069b2:	f043 0201 	orr.w	r2, r3, #1
  4069b6:	6085      	str	r5, [r0, #8]
  4069b8:	6062      	str	r2, [r4, #4]
  4069ba:	50e3      	str	r3, [r4, r3]
  4069bc:	e7b7      	b.n	40692e <_free_r+0x5a>
  4069be:	07ff      	lsls	r7, r7, #31
  4069c0:	4403      	add	r3, r0
  4069c2:	d407      	bmi.n	4069d4 <_free_r+0x100>
  4069c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4069c8:	1aa4      	subs	r4, r4, r2
  4069ca:	4413      	add	r3, r2
  4069cc:	68a0      	ldr	r0, [r4, #8]
  4069ce:	68e2      	ldr	r2, [r4, #12]
  4069d0:	60c2      	str	r2, [r0, #12]
  4069d2:	6090      	str	r0, [r2, #8]
  4069d4:	4a30      	ldr	r2, [pc, #192]	; (406a98 <_free_r+0x1c4>)
  4069d6:	6812      	ldr	r2, [r2, #0]
  4069d8:	f043 0001 	orr.w	r0, r3, #1
  4069dc:	4293      	cmp	r3, r2
  4069de:	6060      	str	r0, [r4, #4]
  4069e0:	608c      	str	r4, [r1, #8]
  4069e2:	d3b9      	bcc.n	406958 <_free_r+0x84>
  4069e4:	4b2d      	ldr	r3, [pc, #180]	; (406a9c <_free_r+0x1c8>)
  4069e6:	4640      	mov	r0, r8
  4069e8:	6819      	ldr	r1, [r3, #0]
  4069ea:	f7ff ff23 	bl	406834 <_malloc_trim_r>
  4069ee:	e7b3      	b.n	406958 <_free_r+0x84>
  4069f0:	4610      	mov	r0, r2
  4069f2:	e7cd      	b.n	406990 <_free_r+0xbc>
  4069f4:	1811      	adds	r1, r2, r0
  4069f6:	6849      	ldr	r1, [r1, #4]
  4069f8:	07c9      	lsls	r1, r1, #31
  4069fa:	d444      	bmi.n	406a86 <_free_r+0x1b2>
  4069fc:	6891      	ldr	r1, [r2, #8]
  4069fe:	68d2      	ldr	r2, [r2, #12]
  406a00:	60ca      	str	r2, [r1, #12]
  406a02:	4403      	add	r3, r0
  406a04:	f043 0001 	orr.w	r0, r3, #1
  406a08:	6091      	str	r1, [r2, #8]
  406a0a:	6060      	str	r0, [r4, #4]
  406a0c:	50e3      	str	r3, [r4, r3]
  406a0e:	e7a3      	b.n	406958 <_free_r+0x84>
  406a10:	2a14      	cmp	r2, #20
  406a12:	d816      	bhi.n	406a42 <_free_r+0x16e>
  406a14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406a18:	00ff      	lsls	r7, r7, #3
  406a1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406a1e:	e7aa      	b.n	406976 <_free_r+0xa2>
  406a20:	10aa      	asrs	r2, r5, #2
  406a22:	2301      	movs	r3, #1
  406a24:	684d      	ldr	r5, [r1, #4]
  406a26:	4093      	lsls	r3, r2
  406a28:	432b      	orrs	r3, r5
  406a2a:	604b      	str	r3, [r1, #4]
  406a2c:	4603      	mov	r3, r0
  406a2e:	e7b0      	b.n	406992 <_free_r+0xbe>
  406a30:	f043 0201 	orr.w	r2, r3, #1
  406a34:	614c      	str	r4, [r1, #20]
  406a36:	610c      	str	r4, [r1, #16]
  406a38:	60e5      	str	r5, [r4, #12]
  406a3a:	60a5      	str	r5, [r4, #8]
  406a3c:	6062      	str	r2, [r4, #4]
  406a3e:	50e3      	str	r3, [r4, r3]
  406a40:	e78a      	b.n	406958 <_free_r+0x84>
  406a42:	2a54      	cmp	r2, #84	; 0x54
  406a44:	d806      	bhi.n	406a54 <_free_r+0x180>
  406a46:	0b1a      	lsrs	r2, r3, #12
  406a48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406a4c:	00ff      	lsls	r7, r7, #3
  406a4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406a52:	e790      	b.n	406976 <_free_r+0xa2>
  406a54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406a58:	d806      	bhi.n	406a68 <_free_r+0x194>
  406a5a:	0bda      	lsrs	r2, r3, #15
  406a5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406a60:	00ff      	lsls	r7, r7, #3
  406a62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406a66:	e786      	b.n	406976 <_free_r+0xa2>
  406a68:	f240 5054 	movw	r0, #1364	; 0x554
  406a6c:	4282      	cmp	r2, r0
  406a6e:	d806      	bhi.n	406a7e <_free_r+0x1aa>
  406a70:	0c9a      	lsrs	r2, r3, #18
  406a72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406a76:	00ff      	lsls	r7, r7, #3
  406a78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406a7c:	e77b      	b.n	406976 <_free_r+0xa2>
  406a7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406a82:	257e      	movs	r5, #126	; 0x7e
  406a84:	e777      	b.n	406976 <_free_r+0xa2>
  406a86:	f043 0101 	orr.w	r1, r3, #1
  406a8a:	6061      	str	r1, [r4, #4]
  406a8c:	6013      	str	r3, [r2, #0]
  406a8e:	e763      	b.n	406958 <_free_r+0x84>
  406a90:	20400440 	.word	0x20400440
  406a94:	20400448 	.word	0x20400448
  406a98:	2040084c 	.word	0x2040084c
  406a9c:	2040c96c 	.word	0x2040c96c

00406aa0 <__sfvwrite_r>:
  406aa0:	6893      	ldr	r3, [r2, #8]
  406aa2:	2b00      	cmp	r3, #0
  406aa4:	d073      	beq.n	406b8e <__sfvwrite_r+0xee>
  406aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406aaa:	898b      	ldrh	r3, [r1, #12]
  406aac:	b083      	sub	sp, #12
  406aae:	460c      	mov	r4, r1
  406ab0:	0719      	lsls	r1, r3, #28
  406ab2:	9000      	str	r0, [sp, #0]
  406ab4:	4616      	mov	r6, r2
  406ab6:	d526      	bpl.n	406b06 <__sfvwrite_r+0x66>
  406ab8:	6922      	ldr	r2, [r4, #16]
  406aba:	b322      	cbz	r2, 406b06 <__sfvwrite_r+0x66>
  406abc:	f013 0002 	ands.w	r0, r3, #2
  406ac0:	6835      	ldr	r5, [r6, #0]
  406ac2:	d02c      	beq.n	406b1e <__sfvwrite_r+0x7e>
  406ac4:	f04f 0900 	mov.w	r9, #0
  406ac8:	4fb0      	ldr	r7, [pc, #704]	; (406d8c <__sfvwrite_r+0x2ec>)
  406aca:	46c8      	mov	r8, r9
  406acc:	46b2      	mov	sl, r6
  406ace:	45b8      	cmp	r8, r7
  406ad0:	4643      	mov	r3, r8
  406ad2:	464a      	mov	r2, r9
  406ad4:	bf28      	it	cs
  406ad6:	463b      	movcs	r3, r7
  406ad8:	9800      	ldr	r0, [sp, #0]
  406ada:	f1b8 0f00 	cmp.w	r8, #0
  406ade:	d050      	beq.n	406b82 <__sfvwrite_r+0xe2>
  406ae0:	69e1      	ldr	r1, [r4, #28]
  406ae2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406ae4:	47b0      	blx	r6
  406ae6:	2800      	cmp	r0, #0
  406ae8:	dd58      	ble.n	406b9c <__sfvwrite_r+0xfc>
  406aea:	f8da 3008 	ldr.w	r3, [sl, #8]
  406aee:	1a1b      	subs	r3, r3, r0
  406af0:	4481      	add	r9, r0
  406af2:	eba8 0800 	sub.w	r8, r8, r0
  406af6:	f8ca 3008 	str.w	r3, [sl, #8]
  406afa:	2b00      	cmp	r3, #0
  406afc:	d1e7      	bne.n	406ace <__sfvwrite_r+0x2e>
  406afe:	2000      	movs	r0, #0
  406b00:	b003      	add	sp, #12
  406b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b06:	4621      	mov	r1, r4
  406b08:	9800      	ldr	r0, [sp, #0]
  406b0a:	f7ff fc51 	bl	4063b0 <__swsetup_r>
  406b0e:	2800      	cmp	r0, #0
  406b10:	f040 8133 	bne.w	406d7a <__sfvwrite_r+0x2da>
  406b14:	89a3      	ldrh	r3, [r4, #12]
  406b16:	6835      	ldr	r5, [r6, #0]
  406b18:	f013 0002 	ands.w	r0, r3, #2
  406b1c:	d1d2      	bne.n	406ac4 <__sfvwrite_r+0x24>
  406b1e:	f013 0901 	ands.w	r9, r3, #1
  406b22:	d145      	bne.n	406bb0 <__sfvwrite_r+0x110>
  406b24:	464f      	mov	r7, r9
  406b26:	9601      	str	r6, [sp, #4]
  406b28:	b337      	cbz	r7, 406b78 <__sfvwrite_r+0xd8>
  406b2a:	059a      	lsls	r2, r3, #22
  406b2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406b30:	f140 8083 	bpl.w	406c3a <__sfvwrite_r+0x19a>
  406b34:	4547      	cmp	r7, r8
  406b36:	46c3      	mov	fp, r8
  406b38:	f0c0 80ab 	bcc.w	406c92 <__sfvwrite_r+0x1f2>
  406b3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406b40:	f040 80ac 	bne.w	406c9c <__sfvwrite_r+0x1fc>
  406b44:	6820      	ldr	r0, [r4, #0]
  406b46:	46ba      	mov	sl, r7
  406b48:	465a      	mov	r2, fp
  406b4a:	4649      	mov	r1, r9
  406b4c:	f000 fa40 	bl	406fd0 <memmove>
  406b50:	68a2      	ldr	r2, [r4, #8]
  406b52:	6823      	ldr	r3, [r4, #0]
  406b54:	eba2 0208 	sub.w	r2, r2, r8
  406b58:	445b      	add	r3, fp
  406b5a:	60a2      	str	r2, [r4, #8]
  406b5c:	6023      	str	r3, [r4, #0]
  406b5e:	9a01      	ldr	r2, [sp, #4]
  406b60:	6893      	ldr	r3, [r2, #8]
  406b62:	eba3 030a 	sub.w	r3, r3, sl
  406b66:	44d1      	add	r9, sl
  406b68:	eba7 070a 	sub.w	r7, r7, sl
  406b6c:	6093      	str	r3, [r2, #8]
  406b6e:	2b00      	cmp	r3, #0
  406b70:	d0c5      	beq.n	406afe <__sfvwrite_r+0x5e>
  406b72:	89a3      	ldrh	r3, [r4, #12]
  406b74:	2f00      	cmp	r7, #0
  406b76:	d1d8      	bne.n	406b2a <__sfvwrite_r+0x8a>
  406b78:	f8d5 9000 	ldr.w	r9, [r5]
  406b7c:	686f      	ldr	r7, [r5, #4]
  406b7e:	3508      	adds	r5, #8
  406b80:	e7d2      	b.n	406b28 <__sfvwrite_r+0x88>
  406b82:	f8d5 9000 	ldr.w	r9, [r5]
  406b86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406b8a:	3508      	adds	r5, #8
  406b8c:	e79f      	b.n	406ace <__sfvwrite_r+0x2e>
  406b8e:	2000      	movs	r0, #0
  406b90:	4770      	bx	lr
  406b92:	4621      	mov	r1, r4
  406b94:	9800      	ldr	r0, [sp, #0]
  406b96:	f7ff fd1f 	bl	4065d8 <_fflush_r>
  406b9a:	b370      	cbz	r0, 406bfa <__sfvwrite_r+0x15a>
  406b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406ba4:	f04f 30ff 	mov.w	r0, #4294967295
  406ba8:	81a3      	strh	r3, [r4, #12]
  406baa:	b003      	add	sp, #12
  406bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bb0:	4681      	mov	r9, r0
  406bb2:	4633      	mov	r3, r6
  406bb4:	464e      	mov	r6, r9
  406bb6:	46a8      	mov	r8, r5
  406bb8:	469a      	mov	sl, r3
  406bba:	464d      	mov	r5, r9
  406bbc:	b34e      	cbz	r6, 406c12 <__sfvwrite_r+0x172>
  406bbe:	b380      	cbz	r0, 406c22 <__sfvwrite_r+0x182>
  406bc0:	6820      	ldr	r0, [r4, #0]
  406bc2:	6923      	ldr	r3, [r4, #16]
  406bc4:	6962      	ldr	r2, [r4, #20]
  406bc6:	45b1      	cmp	r9, r6
  406bc8:	46cb      	mov	fp, r9
  406bca:	bf28      	it	cs
  406bcc:	46b3      	movcs	fp, r6
  406bce:	4298      	cmp	r0, r3
  406bd0:	465f      	mov	r7, fp
  406bd2:	d904      	bls.n	406bde <__sfvwrite_r+0x13e>
  406bd4:	68a3      	ldr	r3, [r4, #8]
  406bd6:	4413      	add	r3, r2
  406bd8:	459b      	cmp	fp, r3
  406bda:	f300 80a6 	bgt.w	406d2a <__sfvwrite_r+0x28a>
  406bde:	4593      	cmp	fp, r2
  406be0:	db4b      	blt.n	406c7a <__sfvwrite_r+0x1da>
  406be2:	4613      	mov	r3, r2
  406be4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406be6:	69e1      	ldr	r1, [r4, #28]
  406be8:	9800      	ldr	r0, [sp, #0]
  406bea:	462a      	mov	r2, r5
  406bec:	47b8      	blx	r7
  406bee:	1e07      	subs	r7, r0, #0
  406bf0:	ddd4      	ble.n	406b9c <__sfvwrite_r+0xfc>
  406bf2:	ebb9 0907 	subs.w	r9, r9, r7
  406bf6:	d0cc      	beq.n	406b92 <__sfvwrite_r+0xf2>
  406bf8:	2001      	movs	r0, #1
  406bfa:	f8da 3008 	ldr.w	r3, [sl, #8]
  406bfe:	1bdb      	subs	r3, r3, r7
  406c00:	443d      	add	r5, r7
  406c02:	1bf6      	subs	r6, r6, r7
  406c04:	f8ca 3008 	str.w	r3, [sl, #8]
  406c08:	2b00      	cmp	r3, #0
  406c0a:	f43f af78 	beq.w	406afe <__sfvwrite_r+0x5e>
  406c0e:	2e00      	cmp	r6, #0
  406c10:	d1d5      	bne.n	406bbe <__sfvwrite_r+0x11e>
  406c12:	f108 0308 	add.w	r3, r8, #8
  406c16:	e913 0060 	ldmdb	r3, {r5, r6}
  406c1a:	4698      	mov	r8, r3
  406c1c:	3308      	adds	r3, #8
  406c1e:	2e00      	cmp	r6, #0
  406c20:	d0f9      	beq.n	406c16 <__sfvwrite_r+0x176>
  406c22:	4632      	mov	r2, r6
  406c24:	210a      	movs	r1, #10
  406c26:	4628      	mov	r0, r5
  406c28:	f000 f982 	bl	406f30 <memchr>
  406c2c:	2800      	cmp	r0, #0
  406c2e:	f000 80a1 	beq.w	406d74 <__sfvwrite_r+0x2d4>
  406c32:	3001      	adds	r0, #1
  406c34:	eba0 0905 	sub.w	r9, r0, r5
  406c38:	e7c2      	b.n	406bc0 <__sfvwrite_r+0x120>
  406c3a:	6820      	ldr	r0, [r4, #0]
  406c3c:	6923      	ldr	r3, [r4, #16]
  406c3e:	4298      	cmp	r0, r3
  406c40:	d802      	bhi.n	406c48 <__sfvwrite_r+0x1a8>
  406c42:	6963      	ldr	r3, [r4, #20]
  406c44:	429f      	cmp	r7, r3
  406c46:	d25d      	bcs.n	406d04 <__sfvwrite_r+0x264>
  406c48:	45b8      	cmp	r8, r7
  406c4a:	bf28      	it	cs
  406c4c:	46b8      	movcs	r8, r7
  406c4e:	4642      	mov	r2, r8
  406c50:	4649      	mov	r1, r9
  406c52:	f000 f9bd 	bl	406fd0 <memmove>
  406c56:	68a3      	ldr	r3, [r4, #8]
  406c58:	6822      	ldr	r2, [r4, #0]
  406c5a:	eba3 0308 	sub.w	r3, r3, r8
  406c5e:	4442      	add	r2, r8
  406c60:	60a3      	str	r3, [r4, #8]
  406c62:	6022      	str	r2, [r4, #0]
  406c64:	b10b      	cbz	r3, 406c6a <__sfvwrite_r+0x1ca>
  406c66:	46c2      	mov	sl, r8
  406c68:	e779      	b.n	406b5e <__sfvwrite_r+0xbe>
  406c6a:	4621      	mov	r1, r4
  406c6c:	9800      	ldr	r0, [sp, #0]
  406c6e:	f7ff fcb3 	bl	4065d8 <_fflush_r>
  406c72:	2800      	cmp	r0, #0
  406c74:	d192      	bne.n	406b9c <__sfvwrite_r+0xfc>
  406c76:	46c2      	mov	sl, r8
  406c78:	e771      	b.n	406b5e <__sfvwrite_r+0xbe>
  406c7a:	465a      	mov	r2, fp
  406c7c:	4629      	mov	r1, r5
  406c7e:	f000 f9a7 	bl	406fd0 <memmove>
  406c82:	68a2      	ldr	r2, [r4, #8]
  406c84:	6823      	ldr	r3, [r4, #0]
  406c86:	eba2 020b 	sub.w	r2, r2, fp
  406c8a:	445b      	add	r3, fp
  406c8c:	60a2      	str	r2, [r4, #8]
  406c8e:	6023      	str	r3, [r4, #0]
  406c90:	e7af      	b.n	406bf2 <__sfvwrite_r+0x152>
  406c92:	6820      	ldr	r0, [r4, #0]
  406c94:	46b8      	mov	r8, r7
  406c96:	46ba      	mov	sl, r7
  406c98:	46bb      	mov	fp, r7
  406c9a:	e755      	b.n	406b48 <__sfvwrite_r+0xa8>
  406c9c:	6962      	ldr	r2, [r4, #20]
  406c9e:	6820      	ldr	r0, [r4, #0]
  406ca0:	6921      	ldr	r1, [r4, #16]
  406ca2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406ca6:	eba0 0a01 	sub.w	sl, r0, r1
  406caa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406cae:	f10a 0001 	add.w	r0, sl, #1
  406cb2:	ea4f 0868 	mov.w	r8, r8, asr #1
  406cb6:	4438      	add	r0, r7
  406cb8:	4540      	cmp	r0, r8
  406cba:	4642      	mov	r2, r8
  406cbc:	bf84      	itt	hi
  406cbe:	4680      	movhi	r8, r0
  406cc0:	4642      	movhi	r2, r8
  406cc2:	055b      	lsls	r3, r3, #21
  406cc4:	d544      	bpl.n	406d50 <__sfvwrite_r+0x2b0>
  406cc6:	4611      	mov	r1, r2
  406cc8:	9800      	ldr	r0, [sp, #0]
  406cca:	f7fd ff97 	bl	404bfc <_malloc_r>
  406cce:	4683      	mov	fp, r0
  406cd0:	2800      	cmp	r0, #0
  406cd2:	d055      	beq.n	406d80 <__sfvwrite_r+0x2e0>
  406cd4:	4652      	mov	r2, sl
  406cd6:	6921      	ldr	r1, [r4, #16]
  406cd8:	f7fe fa40 	bl	40515c <memcpy>
  406cdc:	89a3      	ldrh	r3, [r4, #12]
  406cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406ce6:	81a3      	strh	r3, [r4, #12]
  406ce8:	eb0b 000a 	add.w	r0, fp, sl
  406cec:	eba8 030a 	sub.w	r3, r8, sl
  406cf0:	f8c4 b010 	str.w	fp, [r4, #16]
  406cf4:	f8c4 8014 	str.w	r8, [r4, #20]
  406cf8:	6020      	str	r0, [r4, #0]
  406cfa:	60a3      	str	r3, [r4, #8]
  406cfc:	46b8      	mov	r8, r7
  406cfe:	46ba      	mov	sl, r7
  406d00:	46bb      	mov	fp, r7
  406d02:	e721      	b.n	406b48 <__sfvwrite_r+0xa8>
  406d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406d08:	42b9      	cmp	r1, r7
  406d0a:	bf28      	it	cs
  406d0c:	4639      	movcs	r1, r7
  406d0e:	464a      	mov	r2, r9
  406d10:	fb91 f1f3 	sdiv	r1, r1, r3
  406d14:	9800      	ldr	r0, [sp, #0]
  406d16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406d18:	fb03 f301 	mul.w	r3, r3, r1
  406d1c:	69e1      	ldr	r1, [r4, #28]
  406d1e:	47b0      	blx	r6
  406d20:	f1b0 0a00 	subs.w	sl, r0, #0
  406d24:	f73f af1b 	bgt.w	406b5e <__sfvwrite_r+0xbe>
  406d28:	e738      	b.n	406b9c <__sfvwrite_r+0xfc>
  406d2a:	461a      	mov	r2, r3
  406d2c:	4629      	mov	r1, r5
  406d2e:	9301      	str	r3, [sp, #4]
  406d30:	f000 f94e 	bl	406fd0 <memmove>
  406d34:	6822      	ldr	r2, [r4, #0]
  406d36:	9b01      	ldr	r3, [sp, #4]
  406d38:	9800      	ldr	r0, [sp, #0]
  406d3a:	441a      	add	r2, r3
  406d3c:	6022      	str	r2, [r4, #0]
  406d3e:	4621      	mov	r1, r4
  406d40:	f7ff fc4a 	bl	4065d8 <_fflush_r>
  406d44:	9b01      	ldr	r3, [sp, #4]
  406d46:	2800      	cmp	r0, #0
  406d48:	f47f af28 	bne.w	406b9c <__sfvwrite_r+0xfc>
  406d4c:	461f      	mov	r7, r3
  406d4e:	e750      	b.n	406bf2 <__sfvwrite_r+0x152>
  406d50:	9800      	ldr	r0, [sp, #0]
  406d52:	f000 f9a1 	bl	407098 <_realloc_r>
  406d56:	4683      	mov	fp, r0
  406d58:	2800      	cmp	r0, #0
  406d5a:	d1c5      	bne.n	406ce8 <__sfvwrite_r+0x248>
  406d5c:	9d00      	ldr	r5, [sp, #0]
  406d5e:	6921      	ldr	r1, [r4, #16]
  406d60:	4628      	mov	r0, r5
  406d62:	f7ff fdb7 	bl	4068d4 <_free_r>
  406d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d6a:	220c      	movs	r2, #12
  406d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406d70:	602a      	str	r2, [r5, #0]
  406d72:	e715      	b.n	406ba0 <__sfvwrite_r+0x100>
  406d74:	f106 0901 	add.w	r9, r6, #1
  406d78:	e722      	b.n	406bc0 <__sfvwrite_r+0x120>
  406d7a:	f04f 30ff 	mov.w	r0, #4294967295
  406d7e:	e6bf      	b.n	406b00 <__sfvwrite_r+0x60>
  406d80:	9a00      	ldr	r2, [sp, #0]
  406d82:	230c      	movs	r3, #12
  406d84:	6013      	str	r3, [r2, #0]
  406d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d8a:	e709      	b.n	406ba0 <__sfvwrite_r+0x100>
  406d8c:	7ffffc00 	.word	0x7ffffc00

00406d90 <_fwalk_reent>:
  406d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406d94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406d98:	d01f      	beq.n	406dda <_fwalk_reent+0x4a>
  406d9a:	4688      	mov	r8, r1
  406d9c:	4606      	mov	r6, r0
  406d9e:	f04f 0900 	mov.w	r9, #0
  406da2:	687d      	ldr	r5, [r7, #4]
  406da4:	68bc      	ldr	r4, [r7, #8]
  406da6:	3d01      	subs	r5, #1
  406da8:	d411      	bmi.n	406dce <_fwalk_reent+0x3e>
  406daa:	89a3      	ldrh	r3, [r4, #12]
  406dac:	2b01      	cmp	r3, #1
  406dae:	f105 35ff 	add.w	r5, r5, #4294967295
  406db2:	d908      	bls.n	406dc6 <_fwalk_reent+0x36>
  406db4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406db8:	3301      	adds	r3, #1
  406dba:	4621      	mov	r1, r4
  406dbc:	4630      	mov	r0, r6
  406dbe:	d002      	beq.n	406dc6 <_fwalk_reent+0x36>
  406dc0:	47c0      	blx	r8
  406dc2:	ea49 0900 	orr.w	r9, r9, r0
  406dc6:	1c6b      	adds	r3, r5, #1
  406dc8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406dcc:	d1ed      	bne.n	406daa <_fwalk_reent+0x1a>
  406dce:	683f      	ldr	r7, [r7, #0]
  406dd0:	2f00      	cmp	r7, #0
  406dd2:	d1e6      	bne.n	406da2 <_fwalk_reent+0x12>
  406dd4:	4648      	mov	r0, r9
  406dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406dda:	46b9      	mov	r9, r7
  406ddc:	4648      	mov	r0, r9
  406dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406de2:	bf00      	nop

00406de4 <__locale_mb_cur_max>:
  406de4:	4b04      	ldr	r3, [pc, #16]	; (406df8 <__locale_mb_cur_max+0x14>)
  406de6:	4a05      	ldr	r2, [pc, #20]	; (406dfc <__locale_mb_cur_max+0x18>)
  406de8:	681b      	ldr	r3, [r3, #0]
  406dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406dec:	2b00      	cmp	r3, #0
  406dee:	bf08      	it	eq
  406df0:	4613      	moveq	r3, r2
  406df2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406df6:	4770      	bx	lr
  406df8:	20400014 	.word	0x20400014
  406dfc:	20400854 	.word	0x20400854

00406e00 <__retarget_lock_init_recursive>:
  406e00:	4770      	bx	lr
  406e02:	bf00      	nop

00406e04 <__retarget_lock_close_recursive>:
  406e04:	4770      	bx	lr
  406e06:	bf00      	nop

00406e08 <__retarget_lock_acquire_recursive>:
  406e08:	4770      	bx	lr
  406e0a:	bf00      	nop

00406e0c <__retarget_lock_release_recursive>:
  406e0c:	4770      	bx	lr
  406e0e:	bf00      	nop

00406e10 <__swhatbuf_r>:
  406e10:	b570      	push	{r4, r5, r6, lr}
  406e12:	460c      	mov	r4, r1
  406e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406e18:	2900      	cmp	r1, #0
  406e1a:	b090      	sub	sp, #64	; 0x40
  406e1c:	4615      	mov	r5, r2
  406e1e:	461e      	mov	r6, r3
  406e20:	db14      	blt.n	406e4c <__swhatbuf_r+0x3c>
  406e22:	aa01      	add	r2, sp, #4
  406e24:	f000 fc9e 	bl	407764 <_fstat_r>
  406e28:	2800      	cmp	r0, #0
  406e2a:	db0f      	blt.n	406e4c <__swhatbuf_r+0x3c>
  406e2c:	9a02      	ldr	r2, [sp, #8]
  406e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406e32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406e36:	fab2 f282 	clz	r2, r2
  406e3a:	0952      	lsrs	r2, r2, #5
  406e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406e40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406e44:	6032      	str	r2, [r6, #0]
  406e46:	602b      	str	r3, [r5, #0]
  406e48:	b010      	add	sp, #64	; 0x40
  406e4a:	bd70      	pop	{r4, r5, r6, pc}
  406e4c:	89a2      	ldrh	r2, [r4, #12]
  406e4e:	2300      	movs	r3, #0
  406e50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406e54:	6033      	str	r3, [r6, #0]
  406e56:	d004      	beq.n	406e62 <__swhatbuf_r+0x52>
  406e58:	2240      	movs	r2, #64	; 0x40
  406e5a:	4618      	mov	r0, r3
  406e5c:	602a      	str	r2, [r5, #0]
  406e5e:	b010      	add	sp, #64	; 0x40
  406e60:	bd70      	pop	{r4, r5, r6, pc}
  406e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406e66:	602b      	str	r3, [r5, #0]
  406e68:	b010      	add	sp, #64	; 0x40
  406e6a:	bd70      	pop	{r4, r5, r6, pc}

00406e6c <__smakebuf_r>:
  406e6c:	898a      	ldrh	r2, [r1, #12]
  406e6e:	0792      	lsls	r2, r2, #30
  406e70:	460b      	mov	r3, r1
  406e72:	d506      	bpl.n	406e82 <__smakebuf_r+0x16>
  406e74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406e78:	2101      	movs	r1, #1
  406e7a:	601a      	str	r2, [r3, #0]
  406e7c:	611a      	str	r2, [r3, #16]
  406e7e:	6159      	str	r1, [r3, #20]
  406e80:	4770      	bx	lr
  406e82:	b5f0      	push	{r4, r5, r6, r7, lr}
  406e84:	b083      	sub	sp, #12
  406e86:	ab01      	add	r3, sp, #4
  406e88:	466a      	mov	r2, sp
  406e8a:	460c      	mov	r4, r1
  406e8c:	4606      	mov	r6, r0
  406e8e:	f7ff ffbf 	bl	406e10 <__swhatbuf_r>
  406e92:	9900      	ldr	r1, [sp, #0]
  406e94:	4605      	mov	r5, r0
  406e96:	4630      	mov	r0, r6
  406e98:	f7fd feb0 	bl	404bfc <_malloc_r>
  406e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ea0:	b1d8      	cbz	r0, 406eda <__smakebuf_r+0x6e>
  406ea2:	9a01      	ldr	r2, [sp, #4]
  406ea4:	4f15      	ldr	r7, [pc, #84]	; (406efc <__smakebuf_r+0x90>)
  406ea6:	9900      	ldr	r1, [sp, #0]
  406ea8:	63f7      	str	r7, [r6, #60]	; 0x3c
  406eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406eae:	81a3      	strh	r3, [r4, #12]
  406eb0:	6020      	str	r0, [r4, #0]
  406eb2:	6120      	str	r0, [r4, #16]
  406eb4:	6161      	str	r1, [r4, #20]
  406eb6:	b91a      	cbnz	r2, 406ec0 <__smakebuf_r+0x54>
  406eb8:	432b      	orrs	r3, r5
  406eba:	81a3      	strh	r3, [r4, #12]
  406ebc:	b003      	add	sp, #12
  406ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ec0:	4630      	mov	r0, r6
  406ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406ec6:	f000 fc61 	bl	40778c <_isatty_r>
  406eca:	b1a0      	cbz	r0, 406ef6 <__smakebuf_r+0x8a>
  406ecc:	89a3      	ldrh	r3, [r4, #12]
  406ece:	f023 0303 	bic.w	r3, r3, #3
  406ed2:	f043 0301 	orr.w	r3, r3, #1
  406ed6:	b21b      	sxth	r3, r3
  406ed8:	e7ee      	b.n	406eb8 <__smakebuf_r+0x4c>
  406eda:	059a      	lsls	r2, r3, #22
  406edc:	d4ee      	bmi.n	406ebc <__smakebuf_r+0x50>
  406ede:	f023 0303 	bic.w	r3, r3, #3
  406ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406ee6:	f043 0302 	orr.w	r3, r3, #2
  406eea:	2101      	movs	r1, #1
  406eec:	81a3      	strh	r3, [r4, #12]
  406eee:	6022      	str	r2, [r4, #0]
  406ef0:	6122      	str	r2, [r4, #16]
  406ef2:	6161      	str	r1, [r4, #20]
  406ef4:	e7e2      	b.n	406ebc <__smakebuf_r+0x50>
  406ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406efa:	e7dd      	b.n	406eb8 <__smakebuf_r+0x4c>
  406efc:	0040662d 	.word	0x0040662d

00406f00 <__ascii_mbtowc>:
  406f00:	b082      	sub	sp, #8
  406f02:	b149      	cbz	r1, 406f18 <__ascii_mbtowc+0x18>
  406f04:	b15a      	cbz	r2, 406f1e <__ascii_mbtowc+0x1e>
  406f06:	b16b      	cbz	r3, 406f24 <__ascii_mbtowc+0x24>
  406f08:	7813      	ldrb	r3, [r2, #0]
  406f0a:	600b      	str	r3, [r1, #0]
  406f0c:	7812      	ldrb	r2, [r2, #0]
  406f0e:	1c10      	adds	r0, r2, #0
  406f10:	bf18      	it	ne
  406f12:	2001      	movne	r0, #1
  406f14:	b002      	add	sp, #8
  406f16:	4770      	bx	lr
  406f18:	a901      	add	r1, sp, #4
  406f1a:	2a00      	cmp	r2, #0
  406f1c:	d1f3      	bne.n	406f06 <__ascii_mbtowc+0x6>
  406f1e:	4610      	mov	r0, r2
  406f20:	b002      	add	sp, #8
  406f22:	4770      	bx	lr
  406f24:	f06f 0001 	mvn.w	r0, #1
  406f28:	e7f4      	b.n	406f14 <__ascii_mbtowc+0x14>
  406f2a:	bf00      	nop
  406f2c:	0000      	movs	r0, r0
	...

00406f30 <memchr>:
  406f30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406f34:	2a10      	cmp	r2, #16
  406f36:	db2b      	blt.n	406f90 <memchr+0x60>
  406f38:	f010 0f07 	tst.w	r0, #7
  406f3c:	d008      	beq.n	406f50 <memchr+0x20>
  406f3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406f42:	3a01      	subs	r2, #1
  406f44:	428b      	cmp	r3, r1
  406f46:	d02d      	beq.n	406fa4 <memchr+0x74>
  406f48:	f010 0f07 	tst.w	r0, #7
  406f4c:	b342      	cbz	r2, 406fa0 <memchr+0x70>
  406f4e:	d1f6      	bne.n	406f3e <memchr+0xe>
  406f50:	b4f0      	push	{r4, r5, r6, r7}
  406f52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406f56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406f5a:	f022 0407 	bic.w	r4, r2, #7
  406f5e:	f07f 0700 	mvns.w	r7, #0
  406f62:	2300      	movs	r3, #0
  406f64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406f68:	3c08      	subs	r4, #8
  406f6a:	ea85 0501 	eor.w	r5, r5, r1
  406f6e:	ea86 0601 	eor.w	r6, r6, r1
  406f72:	fa85 f547 	uadd8	r5, r5, r7
  406f76:	faa3 f587 	sel	r5, r3, r7
  406f7a:	fa86 f647 	uadd8	r6, r6, r7
  406f7e:	faa5 f687 	sel	r6, r5, r7
  406f82:	b98e      	cbnz	r6, 406fa8 <memchr+0x78>
  406f84:	d1ee      	bne.n	406f64 <memchr+0x34>
  406f86:	bcf0      	pop	{r4, r5, r6, r7}
  406f88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406f8c:	f002 0207 	and.w	r2, r2, #7
  406f90:	b132      	cbz	r2, 406fa0 <memchr+0x70>
  406f92:	f810 3b01 	ldrb.w	r3, [r0], #1
  406f96:	3a01      	subs	r2, #1
  406f98:	ea83 0301 	eor.w	r3, r3, r1
  406f9c:	b113      	cbz	r3, 406fa4 <memchr+0x74>
  406f9e:	d1f8      	bne.n	406f92 <memchr+0x62>
  406fa0:	2000      	movs	r0, #0
  406fa2:	4770      	bx	lr
  406fa4:	3801      	subs	r0, #1
  406fa6:	4770      	bx	lr
  406fa8:	2d00      	cmp	r5, #0
  406faa:	bf06      	itte	eq
  406fac:	4635      	moveq	r5, r6
  406fae:	3803      	subeq	r0, #3
  406fb0:	3807      	subne	r0, #7
  406fb2:	f015 0f01 	tst.w	r5, #1
  406fb6:	d107      	bne.n	406fc8 <memchr+0x98>
  406fb8:	3001      	adds	r0, #1
  406fba:	f415 7f80 	tst.w	r5, #256	; 0x100
  406fbe:	bf02      	ittt	eq
  406fc0:	3001      	addeq	r0, #1
  406fc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406fc6:	3001      	addeq	r0, #1
  406fc8:	bcf0      	pop	{r4, r5, r6, r7}
  406fca:	3801      	subs	r0, #1
  406fcc:	4770      	bx	lr
  406fce:	bf00      	nop

00406fd0 <memmove>:
  406fd0:	4288      	cmp	r0, r1
  406fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  406fd4:	d90d      	bls.n	406ff2 <memmove+0x22>
  406fd6:	188b      	adds	r3, r1, r2
  406fd8:	4298      	cmp	r0, r3
  406fda:	d20a      	bcs.n	406ff2 <memmove+0x22>
  406fdc:	1884      	adds	r4, r0, r2
  406fde:	2a00      	cmp	r2, #0
  406fe0:	d051      	beq.n	407086 <memmove+0xb6>
  406fe2:	4622      	mov	r2, r4
  406fe4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406fe8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406fec:	4299      	cmp	r1, r3
  406fee:	d1f9      	bne.n	406fe4 <memmove+0x14>
  406ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ff2:	2a0f      	cmp	r2, #15
  406ff4:	d948      	bls.n	407088 <memmove+0xb8>
  406ff6:	ea41 0300 	orr.w	r3, r1, r0
  406ffa:	079b      	lsls	r3, r3, #30
  406ffc:	d146      	bne.n	40708c <memmove+0xbc>
  406ffe:	f100 0410 	add.w	r4, r0, #16
  407002:	f101 0310 	add.w	r3, r1, #16
  407006:	4615      	mov	r5, r2
  407008:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40700c:	f844 6c10 	str.w	r6, [r4, #-16]
  407010:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407014:	f844 6c0c 	str.w	r6, [r4, #-12]
  407018:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40701c:	f844 6c08 	str.w	r6, [r4, #-8]
  407020:	3d10      	subs	r5, #16
  407022:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407026:	f844 6c04 	str.w	r6, [r4, #-4]
  40702a:	2d0f      	cmp	r5, #15
  40702c:	f103 0310 	add.w	r3, r3, #16
  407030:	f104 0410 	add.w	r4, r4, #16
  407034:	d8e8      	bhi.n	407008 <memmove+0x38>
  407036:	f1a2 0310 	sub.w	r3, r2, #16
  40703a:	f023 030f 	bic.w	r3, r3, #15
  40703e:	f002 0e0f 	and.w	lr, r2, #15
  407042:	3310      	adds	r3, #16
  407044:	f1be 0f03 	cmp.w	lr, #3
  407048:	4419      	add	r1, r3
  40704a:	4403      	add	r3, r0
  40704c:	d921      	bls.n	407092 <memmove+0xc2>
  40704e:	1f1e      	subs	r6, r3, #4
  407050:	460d      	mov	r5, r1
  407052:	4674      	mov	r4, lr
  407054:	3c04      	subs	r4, #4
  407056:	f855 7b04 	ldr.w	r7, [r5], #4
  40705a:	f846 7f04 	str.w	r7, [r6, #4]!
  40705e:	2c03      	cmp	r4, #3
  407060:	d8f8      	bhi.n	407054 <memmove+0x84>
  407062:	f1ae 0404 	sub.w	r4, lr, #4
  407066:	f024 0403 	bic.w	r4, r4, #3
  40706a:	3404      	adds	r4, #4
  40706c:	4421      	add	r1, r4
  40706e:	4423      	add	r3, r4
  407070:	f002 0203 	and.w	r2, r2, #3
  407074:	b162      	cbz	r2, 407090 <memmove+0xc0>
  407076:	3b01      	subs	r3, #1
  407078:	440a      	add	r2, r1
  40707a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40707e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407082:	428a      	cmp	r2, r1
  407084:	d1f9      	bne.n	40707a <memmove+0xaa>
  407086:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407088:	4603      	mov	r3, r0
  40708a:	e7f3      	b.n	407074 <memmove+0xa4>
  40708c:	4603      	mov	r3, r0
  40708e:	e7f2      	b.n	407076 <memmove+0xa6>
  407090:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407092:	4672      	mov	r2, lr
  407094:	e7ee      	b.n	407074 <memmove+0xa4>
  407096:	bf00      	nop

00407098 <_realloc_r>:
  407098:	2900      	cmp	r1, #0
  40709a:	f000 8095 	beq.w	4071c8 <_realloc_r+0x130>
  40709e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070a2:	460d      	mov	r5, r1
  4070a4:	4616      	mov	r6, r2
  4070a6:	b083      	sub	sp, #12
  4070a8:	4680      	mov	r8, r0
  4070aa:	f106 070b 	add.w	r7, r6, #11
  4070ae:	f7fe f93d 	bl	40532c <__malloc_lock>
  4070b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4070b6:	2f16      	cmp	r7, #22
  4070b8:	f02e 0403 	bic.w	r4, lr, #3
  4070bc:	f1a5 0908 	sub.w	r9, r5, #8
  4070c0:	d83c      	bhi.n	40713c <_realloc_r+0xa4>
  4070c2:	2210      	movs	r2, #16
  4070c4:	4617      	mov	r7, r2
  4070c6:	42be      	cmp	r6, r7
  4070c8:	d83d      	bhi.n	407146 <_realloc_r+0xae>
  4070ca:	4294      	cmp	r4, r2
  4070cc:	da43      	bge.n	407156 <_realloc_r+0xbe>
  4070ce:	4bc4      	ldr	r3, [pc, #784]	; (4073e0 <_realloc_r+0x348>)
  4070d0:	6899      	ldr	r1, [r3, #8]
  4070d2:	eb09 0004 	add.w	r0, r9, r4
  4070d6:	4288      	cmp	r0, r1
  4070d8:	f000 80b4 	beq.w	407244 <_realloc_r+0x1ac>
  4070dc:	6843      	ldr	r3, [r0, #4]
  4070de:	f023 0101 	bic.w	r1, r3, #1
  4070e2:	4401      	add	r1, r0
  4070e4:	6849      	ldr	r1, [r1, #4]
  4070e6:	07c9      	lsls	r1, r1, #31
  4070e8:	d54c      	bpl.n	407184 <_realloc_r+0xec>
  4070ea:	f01e 0f01 	tst.w	lr, #1
  4070ee:	f000 809b 	beq.w	407228 <_realloc_r+0x190>
  4070f2:	4631      	mov	r1, r6
  4070f4:	4640      	mov	r0, r8
  4070f6:	f7fd fd81 	bl	404bfc <_malloc_r>
  4070fa:	4606      	mov	r6, r0
  4070fc:	2800      	cmp	r0, #0
  4070fe:	d03a      	beq.n	407176 <_realloc_r+0xde>
  407100:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407104:	f023 0301 	bic.w	r3, r3, #1
  407108:	444b      	add	r3, r9
  40710a:	f1a0 0208 	sub.w	r2, r0, #8
  40710e:	429a      	cmp	r2, r3
  407110:	f000 8121 	beq.w	407356 <_realloc_r+0x2be>
  407114:	1f22      	subs	r2, r4, #4
  407116:	2a24      	cmp	r2, #36	; 0x24
  407118:	f200 8107 	bhi.w	40732a <_realloc_r+0x292>
  40711c:	2a13      	cmp	r2, #19
  40711e:	f200 80db 	bhi.w	4072d8 <_realloc_r+0x240>
  407122:	4603      	mov	r3, r0
  407124:	462a      	mov	r2, r5
  407126:	6811      	ldr	r1, [r2, #0]
  407128:	6019      	str	r1, [r3, #0]
  40712a:	6851      	ldr	r1, [r2, #4]
  40712c:	6059      	str	r1, [r3, #4]
  40712e:	6892      	ldr	r2, [r2, #8]
  407130:	609a      	str	r2, [r3, #8]
  407132:	4629      	mov	r1, r5
  407134:	4640      	mov	r0, r8
  407136:	f7ff fbcd 	bl	4068d4 <_free_r>
  40713a:	e01c      	b.n	407176 <_realloc_r+0xde>
  40713c:	f027 0707 	bic.w	r7, r7, #7
  407140:	2f00      	cmp	r7, #0
  407142:	463a      	mov	r2, r7
  407144:	dabf      	bge.n	4070c6 <_realloc_r+0x2e>
  407146:	2600      	movs	r6, #0
  407148:	230c      	movs	r3, #12
  40714a:	4630      	mov	r0, r6
  40714c:	f8c8 3000 	str.w	r3, [r8]
  407150:	b003      	add	sp, #12
  407152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407156:	462e      	mov	r6, r5
  407158:	1be3      	subs	r3, r4, r7
  40715a:	2b0f      	cmp	r3, #15
  40715c:	d81e      	bhi.n	40719c <_realloc_r+0x104>
  40715e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407162:	f003 0301 	and.w	r3, r3, #1
  407166:	4323      	orrs	r3, r4
  407168:	444c      	add	r4, r9
  40716a:	f8c9 3004 	str.w	r3, [r9, #4]
  40716e:	6863      	ldr	r3, [r4, #4]
  407170:	f043 0301 	orr.w	r3, r3, #1
  407174:	6063      	str	r3, [r4, #4]
  407176:	4640      	mov	r0, r8
  407178:	f7fe f8de 	bl	405338 <__malloc_unlock>
  40717c:	4630      	mov	r0, r6
  40717e:	b003      	add	sp, #12
  407180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407184:	f023 0303 	bic.w	r3, r3, #3
  407188:	18e1      	adds	r1, r4, r3
  40718a:	4291      	cmp	r1, r2
  40718c:	db1f      	blt.n	4071ce <_realloc_r+0x136>
  40718e:	68c3      	ldr	r3, [r0, #12]
  407190:	6882      	ldr	r2, [r0, #8]
  407192:	462e      	mov	r6, r5
  407194:	60d3      	str	r3, [r2, #12]
  407196:	460c      	mov	r4, r1
  407198:	609a      	str	r2, [r3, #8]
  40719a:	e7dd      	b.n	407158 <_realloc_r+0xc0>
  40719c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4071a0:	eb09 0107 	add.w	r1, r9, r7
  4071a4:	f002 0201 	and.w	r2, r2, #1
  4071a8:	444c      	add	r4, r9
  4071aa:	f043 0301 	orr.w	r3, r3, #1
  4071ae:	4317      	orrs	r7, r2
  4071b0:	f8c9 7004 	str.w	r7, [r9, #4]
  4071b4:	604b      	str	r3, [r1, #4]
  4071b6:	6863      	ldr	r3, [r4, #4]
  4071b8:	f043 0301 	orr.w	r3, r3, #1
  4071bc:	3108      	adds	r1, #8
  4071be:	6063      	str	r3, [r4, #4]
  4071c0:	4640      	mov	r0, r8
  4071c2:	f7ff fb87 	bl	4068d4 <_free_r>
  4071c6:	e7d6      	b.n	407176 <_realloc_r+0xde>
  4071c8:	4611      	mov	r1, r2
  4071ca:	f7fd bd17 	b.w	404bfc <_malloc_r>
  4071ce:	f01e 0f01 	tst.w	lr, #1
  4071d2:	d18e      	bne.n	4070f2 <_realloc_r+0x5a>
  4071d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4071d8:	eba9 0a01 	sub.w	sl, r9, r1
  4071dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4071e0:	f021 0103 	bic.w	r1, r1, #3
  4071e4:	440b      	add	r3, r1
  4071e6:	4423      	add	r3, r4
  4071e8:	4293      	cmp	r3, r2
  4071ea:	db25      	blt.n	407238 <_realloc_r+0x1a0>
  4071ec:	68c2      	ldr	r2, [r0, #12]
  4071ee:	6881      	ldr	r1, [r0, #8]
  4071f0:	4656      	mov	r6, sl
  4071f2:	60ca      	str	r2, [r1, #12]
  4071f4:	6091      	str	r1, [r2, #8]
  4071f6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4071fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4071fe:	1f22      	subs	r2, r4, #4
  407200:	2a24      	cmp	r2, #36	; 0x24
  407202:	60c1      	str	r1, [r0, #12]
  407204:	6088      	str	r0, [r1, #8]
  407206:	f200 8094 	bhi.w	407332 <_realloc_r+0x29a>
  40720a:	2a13      	cmp	r2, #19
  40720c:	d96f      	bls.n	4072ee <_realloc_r+0x256>
  40720e:	6829      	ldr	r1, [r5, #0]
  407210:	f8ca 1008 	str.w	r1, [sl, #8]
  407214:	6869      	ldr	r1, [r5, #4]
  407216:	f8ca 100c 	str.w	r1, [sl, #12]
  40721a:	2a1b      	cmp	r2, #27
  40721c:	f200 80a2 	bhi.w	407364 <_realloc_r+0x2cc>
  407220:	3508      	adds	r5, #8
  407222:	f10a 0210 	add.w	r2, sl, #16
  407226:	e063      	b.n	4072f0 <_realloc_r+0x258>
  407228:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40722c:	eba9 0a03 	sub.w	sl, r9, r3
  407230:	f8da 1004 	ldr.w	r1, [sl, #4]
  407234:	f021 0103 	bic.w	r1, r1, #3
  407238:	1863      	adds	r3, r4, r1
  40723a:	4293      	cmp	r3, r2
  40723c:	f6ff af59 	blt.w	4070f2 <_realloc_r+0x5a>
  407240:	4656      	mov	r6, sl
  407242:	e7d8      	b.n	4071f6 <_realloc_r+0x15e>
  407244:	6841      	ldr	r1, [r0, #4]
  407246:	f021 0b03 	bic.w	fp, r1, #3
  40724a:	44a3      	add	fp, r4
  40724c:	f107 0010 	add.w	r0, r7, #16
  407250:	4583      	cmp	fp, r0
  407252:	da56      	bge.n	407302 <_realloc_r+0x26a>
  407254:	f01e 0f01 	tst.w	lr, #1
  407258:	f47f af4b 	bne.w	4070f2 <_realloc_r+0x5a>
  40725c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407260:	eba9 0a01 	sub.w	sl, r9, r1
  407264:	f8da 1004 	ldr.w	r1, [sl, #4]
  407268:	f021 0103 	bic.w	r1, r1, #3
  40726c:	448b      	add	fp, r1
  40726e:	4558      	cmp	r0, fp
  407270:	dce2      	bgt.n	407238 <_realloc_r+0x1a0>
  407272:	4656      	mov	r6, sl
  407274:	f8da 100c 	ldr.w	r1, [sl, #12]
  407278:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40727c:	1f22      	subs	r2, r4, #4
  40727e:	2a24      	cmp	r2, #36	; 0x24
  407280:	60c1      	str	r1, [r0, #12]
  407282:	6088      	str	r0, [r1, #8]
  407284:	f200 808f 	bhi.w	4073a6 <_realloc_r+0x30e>
  407288:	2a13      	cmp	r2, #19
  40728a:	f240 808a 	bls.w	4073a2 <_realloc_r+0x30a>
  40728e:	6829      	ldr	r1, [r5, #0]
  407290:	f8ca 1008 	str.w	r1, [sl, #8]
  407294:	6869      	ldr	r1, [r5, #4]
  407296:	f8ca 100c 	str.w	r1, [sl, #12]
  40729a:	2a1b      	cmp	r2, #27
  40729c:	f200 808a 	bhi.w	4073b4 <_realloc_r+0x31c>
  4072a0:	3508      	adds	r5, #8
  4072a2:	f10a 0210 	add.w	r2, sl, #16
  4072a6:	6829      	ldr	r1, [r5, #0]
  4072a8:	6011      	str	r1, [r2, #0]
  4072aa:	6869      	ldr	r1, [r5, #4]
  4072ac:	6051      	str	r1, [r2, #4]
  4072ae:	68a9      	ldr	r1, [r5, #8]
  4072b0:	6091      	str	r1, [r2, #8]
  4072b2:	eb0a 0107 	add.w	r1, sl, r7
  4072b6:	ebab 0207 	sub.w	r2, fp, r7
  4072ba:	f042 0201 	orr.w	r2, r2, #1
  4072be:	6099      	str	r1, [r3, #8]
  4072c0:	604a      	str	r2, [r1, #4]
  4072c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4072c6:	f003 0301 	and.w	r3, r3, #1
  4072ca:	431f      	orrs	r7, r3
  4072cc:	4640      	mov	r0, r8
  4072ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4072d2:	f7fe f831 	bl	405338 <__malloc_unlock>
  4072d6:	e751      	b.n	40717c <_realloc_r+0xe4>
  4072d8:	682b      	ldr	r3, [r5, #0]
  4072da:	6003      	str	r3, [r0, #0]
  4072dc:	686b      	ldr	r3, [r5, #4]
  4072de:	6043      	str	r3, [r0, #4]
  4072e0:	2a1b      	cmp	r2, #27
  4072e2:	d82d      	bhi.n	407340 <_realloc_r+0x2a8>
  4072e4:	f100 0308 	add.w	r3, r0, #8
  4072e8:	f105 0208 	add.w	r2, r5, #8
  4072ec:	e71b      	b.n	407126 <_realloc_r+0x8e>
  4072ee:	4632      	mov	r2, r6
  4072f0:	6829      	ldr	r1, [r5, #0]
  4072f2:	6011      	str	r1, [r2, #0]
  4072f4:	6869      	ldr	r1, [r5, #4]
  4072f6:	6051      	str	r1, [r2, #4]
  4072f8:	68a9      	ldr	r1, [r5, #8]
  4072fa:	6091      	str	r1, [r2, #8]
  4072fc:	461c      	mov	r4, r3
  4072fe:	46d1      	mov	r9, sl
  407300:	e72a      	b.n	407158 <_realloc_r+0xc0>
  407302:	eb09 0107 	add.w	r1, r9, r7
  407306:	ebab 0b07 	sub.w	fp, fp, r7
  40730a:	f04b 0201 	orr.w	r2, fp, #1
  40730e:	6099      	str	r1, [r3, #8]
  407310:	604a      	str	r2, [r1, #4]
  407312:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407316:	f003 0301 	and.w	r3, r3, #1
  40731a:	431f      	orrs	r7, r3
  40731c:	4640      	mov	r0, r8
  40731e:	f845 7c04 	str.w	r7, [r5, #-4]
  407322:	f7fe f809 	bl	405338 <__malloc_unlock>
  407326:	462e      	mov	r6, r5
  407328:	e728      	b.n	40717c <_realloc_r+0xe4>
  40732a:	4629      	mov	r1, r5
  40732c:	f7ff fe50 	bl	406fd0 <memmove>
  407330:	e6ff      	b.n	407132 <_realloc_r+0x9a>
  407332:	4629      	mov	r1, r5
  407334:	4630      	mov	r0, r6
  407336:	461c      	mov	r4, r3
  407338:	46d1      	mov	r9, sl
  40733a:	f7ff fe49 	bl	406fd0 <memmove>
  40733e:	e70b      	b.n	407158 <_realloc_r+0xc0>
  407340:	68ab      	ldr	r3, [r5, #8]
  407342:	6083      	str	r3, [r0, #8]
  407344:	68eb      	ldr	r3, [r5, #12]
  407346:	60c3      	str	r3, [r0, #12]
  407348:	2a24      	cmp	r2, #36	; 0x24
  40734a:	d017      	beq.n	40737c <_realloc_r+0x2e4>
  40734c:	f100 0310 	add.w	r3, r0, #16
  407350:	f105 0210 	add.w	r2, r5, #16
  407354:	e6e7      	b.n	407126 <_realloc_r+0x8e>
  407356:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40735a:	f023 0303 	bic.w	r3, r3, #3
  40735e:	441c      	add	r4, r3
  407360:	462e      	mov	r6, r5
  407362:	e6f9      	b.n	407158 <_realloc_r+0xc0>
  407364:	68a9      	ldr	r1, [r5, #8]
  407366:	f8ca 1010 	str.w	r1, [sl, #16]
  40736a:	68e9      	ldr	r1, [r5, #12]
  40736c:	f8ca 1014 	str.w	r1, [sl, #20]
  407370:	2a24      	cmp	r2, #36	; 0x24
  407372:	d00c      	beq.n	40738e <_realloc_r+0x2f6>
  407374:	3510      	adds	r5, #16
  407376:	f10a 0218 	add.w	r2, sl, #24
  40737a:	e7b9      	b.n	4072f0 <_realloc_r+0x258>
  40737c:	692b      	ldr	r3, [r5, #16]
  40737e:	6103      	str	r3, [r0, #16]
  407380:	696b      	ldr	r3, [r5, #20]
  407382:	6143      	str	r3, [r0, #20]
  407384:	f105 0218 	add.w	r2, r5, #24
  407388:	f100 0318 	add.w	r3, r0, #24
  40738c:	e6cb      	b.n	407126 <_realloc_r+0x8e>
  40738e:	692a      	ldr	r2, [r5, #16]
  407390:	f8ca 2018 	str.w	r2, [sl, #24]
  407394:	696a      	ldr	r2, [r5, #20]
  407396:	f8ca 201c 	str.w	r2, [sl, #28]
  40739a:	3518      	adds	r5, #24
  40739c:	f10a 0220 	add.w	r2, sl, #32
  4073a0:	e7a6      	b.n	4072f0 <_realloc_r+0x258>
  4073a2:	4632      	mov	r2, r6
  4073a4:	e77f      	b.n	4072a6 <_realloc_r+0x20e>
  4073a6:	4629      	mov	r1, r5
  4073a8:	4630      	mov	r0, r6
  4073aa:	9301      	str	r3, [sp, #4]
  4073ac:	f7ff fe10 	bl	406fd0 <memmove>
  4073b0:	9b01      	ldr	r3, [sp, #4]
  4073b2:	e77e      	b.n	4072b2 <_realloc_r+0x21a>
  4073b4:	68a9      	ldr	r1, [r5, #8]
  4073b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4073ba:	68e9      	ldr	r1, [r5, #12]
  4073bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4073c0:	2a24      	cmp	r2, #36	; 0x24
  4073c2:	d003      	beq.n	4073cc <_realloc_r+0x334>
  4073c4:	3510      	adds	r5, #16
  4073c6:	f10a 0218 	add.w	r2, sl, #24
  4073ca:	e76c      	b.n	4072a6 <_realloc_r+0x20e>
  4073cc:	692a      	ldr	r2, [r5, #16]
  4073ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4073d2:	696a      	ldr	r2, [r5, #20]
  4073d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4073d8:	3518      	adds	r5, #24
  4073da:	f10a 0220 	add.w	r2, sl, #32
  4073de:	e762      	b.n	4072a6 <_realloc_r+0x20e>
  4073e0:	20400440 	.word	0x20400440

004073e4 <__sread>:
  4073e4:	b510      	push	{r4, lr}
  4073e6:	460c      	mov	r4, r1
  4073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4073ec:	f000 f9f6 	bl	4077dc <_read_r>
  4073f0:	2800      	cmp	r0, #0
  4073f2:	db03      	blt.n	4073fc <__sread+0x18>
  4073f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4073f6:	4403      	add	r3, r0
  4073f8:	6523      	str	r3, [r4, #80]	; 0x50
  4073fa:	bd10      	pop	{r4, pc}
  4073fc:	89a3      	ldrh	r3, [r4, #12]
  4073fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407402:	81a3      	strh	r3, [r4, #12]
  407404:	bd10      	pop	{r4, pc}
  407406:	bf00      	nop

00407408 <__swrite>:
  407408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40740c:	4616      	mov	r6, r2
  40740e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407412:	461f      	mov	r7, r3
  407414:	05d3      	lsls	r3, r2, #23
  407416:	460c      	mov	r4, r1
  407418:	4605      	mov	r5, r0
  40741a:	d507      	bpl.n	40742c <__swrite+0x24>
  40741c:	2200      	movs	r2, #0
  40741e:	2302      	movs	r3, #2
  407420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407424:	f000 f9c4 	bl	4077b0 <_lseek_r>
  407428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40742c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407430:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407434:	81a2      	strh	r2, [r4, #12]
  407436:	463b      	mov	r3, r7
  407438:	4632      	mov	r2, r6
  40743a:	4628      	mov	r0, r5
  40743c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407440:	f000 b8a4 	b.w	40758c <_write_r>

00407444 <__sseek>:
  407444:	b510      	push	{r4, lr}
  407446:	460c      	mov	r4, r1
  407448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40744c:	f000 f9b0 	bl	4077b0 <_lseek_r>
  407450:	89a3      	ldrh	r3, [r4, #12]
  407452:	1c42      	adds	r2, r0, #1
  407454:	bf0e      	itee	eq
  407456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40745a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40745e:	6520      	strne	r0, [r4, #80]	; 0x50
  407460:	81a3      	strh	r3, [r4, #12]
  407462:	bd10      	pop	{r4, pc}

00407464 <__sclose>:
  407464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407468:	f000 b908 	b.w	40767c <_close_r>

0040746c <__swbuf_r>:
  40746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40746e:	460d      	mov	r5, r1
  407470:	4614      	mov	r4, r2
  407472:	4606      	mov	r6, r0
  407474:	b110      	cbz	r0, 40747c <__swbuf_r+0x10>
  407476:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407478:	2b00      	cmp	r3, #0
  40747a:	d04b      	beq.n	407514 <__swbuf_r+0xa8>
  40747c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407480:	69a3      	ldr	r3, [r4, #24]
  407482:	60a3      	str	r3, [r4, #8]
  407484:	b291      	uxth	r1, r2
  407486:	0708      	lsls	r0, r1, #28
  407488:	d539      	bpl.n	4074fe <__swbuf_r+0x92>
  40748a:	6923      	ldr	r3, [r4, #16]
  40748c:	2b00      	cmp	r3, #0
  40748e:	d036      	beq.n	4074fe <__swbuf_r+0x92>
  407490:	b2ed      	uxtb	r5, r5
  407492:	0489      	lsls	r1, r1, #18
  407494:	462f      	mov	r7, r5
  407496:	d515      	bpl.n	4074c4 <__swbuf_r+0x58>
  407498:	6822      	ldr	r2, [r4, #0]
  40749a:	6961      	ldr	r1, [r4, #20]
  40749c:	1ad3      	subs	r3, r2, r3
  40749e:	428b      	cmp	r3, r1
  4074a0:	da1c      	bge.n	4074dc <__swbuf_r+0x70>
  4074a2:	3301      	adds	r3, #1
  4074a4:	68a1      	ldr	r1, [r4, #8]
  4074a6:	1c50      	adds	r0, r2, #1
  4074a8:	3901      	subs	r1, #1
  4074aa:	60a1      	str	r1, [r4, #8]
  4074ac:	6020      	str	r0, [r4, #0]
  4074ae:	7015      	strb	r5, [r2, #0]
  4074b0:	6962      	ldr	r2, [r4, #20]
  4074b2:	429a      	cmp	r2, r3
  4074b4:	d01a      	beq.n	4074ec <__swbuf_r+0x80>
  4074b6:	89a3      	ldrh	r3, [r4, #12]
  4074b8:	07db      	lsls	r3, r3, #31
  4074ba:	d501      	bpl.n	4074c0 <__swbuf_r+0x54>
  4074bc:	2d0a      	cmp	r5, #10
  4074be:	d015      	beq.n	4074ec <__swbuf_r+0x80>
  4074c0:	4638      	mov	r0, r7
  4074c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4074c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4074c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4074ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4074ce:	81a2      	strh	r2, [r4, #12]
  4074d0:	6822      	ldr	r2, [r4, #0]
  4074d2:	6661      	str	r1, [r4, #100]	; 0x64
  4074d4:	6961      	ldr	r1, [r4, #20]
  4074d6:	1ad3      	subs	r3, r2, r3
  4074d8:	428b      	cmp	r3, r1
  4074da:	dbe2      	blt.n	4074a2 <__swbuf_r+0x36>
  4074dc:	4621      	mov	r1, r4
  4074de:	4630      	mov	r0, r6
  4074e0:	f7ff f87a 	bl	4065d8 <_fflush_r>
  4074e4:	b940      	cbnz	r0, 4074f8 <__swbuf_r+0x8c>
  4074e6:	6822      	ldr	r2, [r4, #0]
  4074e8:	2301      	movs	r3, #1
  4074ea:	e7db      	b.n	4074a4 <__swbuf_r+0x38>
  4074ec:	4621      	mov	r1, r4
  4074ee:	4630      	mov	r0, r6
  4074f0:	f7ff f872 	bl	4065d8 <_fflush_r>
  4074f4:	2800      	cmp	r0, #0
  4074f6:	d0e3      	beq.n	4074c0 <__swbuf_r+0x54>
  4074f8:	f04f 37ff 	mov.w	r7, #4294967295
  4074fc:	e7e0      	b.n	4074c0 <__swbuf_r+0x54>
  4074fe:	4621      	mov	r1, r4
  407500:	4630      	mov	r0, r6
  407502:	f7fe ff55 	bl	4063b0 <__swsetup_r>
  407506:	2800      	cmp	r0, #0
  407508:	d1f6      	bne.n	4074f8 <__swbuf_r+0x8c>
  40750a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40750e:	6923      	ldr	r3, [r4, #16]
  407510:	b291      	uxth	r1, r2
  407512:	e7bd      	b.n	407490 <__swbuf_r+0x24>
  407514:	f7ff f8b8 	bl	406688 <__sinit>
  407518:	e7b0      	b.n	40747c <__swbuf_r+0x10>
  40751a:	bf00      	nop

0040751c <_wcrtomb_r>:
  40751c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40751e:	4606      	mov	r6, r0
  407520:	b085      	sub	sp, #20
  407522:	461f      	mov	r7, r3
  407524:	b189      	cbz	r1, 40754a <_wcrtomb_r+0x2e>
  407526:	4c10      	ldr	r4, [pc, #64]	; (407568 <_wcrtomb_r+0x4c>)
  407528:	4d10      	ldr	r5, [pc, #64]	; (40756c <_wcrtomb_r+0x50>)
  40752a:	6824      	ldr	r4, [r4, #0]
  40752c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40752e:	2c00      	cmp	r4, #0
  407530:	bf08      	it	eq
  407532:	462c      	moveq	r4, r5
  407534:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407538:	47a0      	blx	r4
  40753a:	1c43      	adds	r3, r0, #1
  40753c:	d103      	bne.n	407546 <_wcrtomb_r+0x2a>
  40753e:	2200      	movs	r2, #0
  407540:	238a      	movs	r3, #138	; 0x8a
  407542:	603a      	str	r2, [r7, #0]
  407544:	6033      	str	r3, [r6, #0]
  407546:	b005      	add	sp, #20
  407548:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40754a:	460c      	mov	r4, r1
  40754c:	4906      	ldr	r1, [pc, #24]	; (407568 <_wcrtomb_r+0x4c>)
  40754e:	4a07      	ldr	r2, [pc, #28]	; (40756c <_wcrtomb_r+0x50>)
  407550:	6809      	ldr	r1, [r1, #0]
  407552:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407554:	2900      	cmp	r1, #0
  407556:	bf08      	it	eq
  407558:	4611      	moveq	r1, r2
  40755a:	4622      	mov	r2, r4
  40755c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407560:	a901      	add	r1, sp, #4
  407562:	47a0      	blx	r4
  407564:	e7e9      	b.n	40753a <_wcrtomb_r+0x1e>
  407566:	bf00      	nop
  407568:	20400014 	.word	0x20400014
  40756c:	20400854 	.word	0x20400854

00407570 <__ascii_wctomb>:
  407570:	b121      	cbz	r1, 40757c <__ascii_wctomb+0xc>
  407572:	2aff      	cmp	r2, #255	; 0xff
  407574:	d804      	bhi.n	407580 <__ascii_wctomb+0x10>
  407576:	700a      	strb	r2, [r1, #0]
  407578:	2001      	movs	r0, #1
  40757a:	4770      	bx	lr
  40757c:	4608      	mov	r0, r1
  40757e:	4770      	bx	lr
  407580:	238a      	movs	r3, #138	; 0x8a
  407582:	6003      	str	r3, [r0, #0]
  407584:	f04f 30ff 	mov.w	r0, #4294967295
  407588:	4770      	bx	lr
  40758a:	bf00      	nop

0040758c <_write_r>:
  40758c:	b570      	push	{r4, r5, r6, lr}
  40758e:	460d      	mov	r5, r1
  407590:	4c08      	ldr	r4, [pc, #32]	; (4075b4 <_write_r+0x28>)
  407592:	4611      	mov	r1, r2
  407594:	4606      	mov	r6, r0
  407596:	461a      	mov	r2, r3
  407598:	4628      	mov	r0, r5
  40759a:	2300      	movs	r3, #0
  40759c:	6023      	str	r3, [r4, #0]
  40759e:	f7f9 fbf9 	bl	400d94 <_write>
  4075a2:	1c43      	adds	r3, r0, #1
  4075a4:	d000      	beq.n	4075a8 <_write_r+0x1c>
  4075a6:	bd70      	pop	{r4, r5, r6, pc}
  4075a8:	6823      	ldr	r3, [r4, #0]
  4075aa:	2b00      	cmp	r3, #0
  4075ac:	d0fb      	beq.n	4075a6 <_write_r+0x1a>
  4075ae:	6033      	str	r3, [r6, #0]
  4075b0:	bd70      	pop	{r4, r5, r6, pc}
  4075b2:	bf00      	nop
  4075b4:	2040ca84 	.word	0x2040ca84

004075b8 <__register_exitproc>:
  4075b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4075bc:	4d2c      	ldr	r5, [pc, #176]	; (407670 <__register_exitproc+0xb8>)
  4075be:	4606      	mov	r6, r0
  4075c0:	6828      	ldr	r0, [r5, #0]
  4075c2:	4698      	mov	r8, r3
  4075c4:	460f      	mov	r7, r1
  4075c6:	4691      	mov	r9, r2
  4075c8:	f7ff fc1e 	bl	406e08 <__retarget_lock_acquire_recursive>
  4075cc:	4b29      	ldr	r3, [pc, #164]	; (407674 <__register_exitproc+0xbc>)
  4075ce:	681c      	ldr	r4, [r3, #0]
  4075d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4075d4:	2b00      	cmp	r3, #0
  4075d6:	d03e      	beq.n	407656 <__register_exitproc+0x9e>
  4075d8:	685a      	ldr	r2, [r3, #4]
  4075da:	2a1f      	cmp	r2, #31
  4075dc:	dc1c      	bgt.n	407618 <__register_exitproc+0x60>
  4075de:	f102 0e01 	add.w	lr, r2, #1
  4075e2:	b176      	cbz	r6, 407602 <__register_exitproc+0x4a>
  4075e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4075e8:	2401      	movs	r4, #1
  4075ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4075ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4075f2:	4094      	lsls	r4, r2
  4075f4:	4320      	orrs	r0, r4
  4075f6:	2e02      	cmp	r6, #2
  4075f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4075fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407600:	d023      	beq.n	40764a <__register_exitproc+0x92>
  407602:	3202      	adds	r2, #2
  407604:	f8c3 e004 	str.w	lr, [r3, #4]
  407608:	6828      	ldr	r0, [r5, #0]
  40760a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40760e:	f7ff fbfd 	bl	406e0c <__retarget_lock_release_recursive>
  407612:	2000      	movs	r0, #0
  407614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407618:	4b17      	ldr	r3, [pc, #92]	; (407678 <__register_exitproc+0xc0>)
  40761a:	b30b      	cbz	r3, 407660 <__register_exitproc+0xa8>
  40761c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407620:	f7fd fae4 	bl	404bec <malloc>
  407624:	4603      	mov	r3, r0
  407626:	b1d8      	cbz	r0, 407660 <__register_exitproc+0xa8>
  407628:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40762c:	6002      	str	r2, [r0, #0]
  40762e:	2100      	movs	r1, #0
  407630:	6041      	str	r1, [r0, #4]
  407632:	460a      	mov	r2, r1
  407634:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407638:	f04f 0e01 	mov.w	lr, #1
  40763c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407640:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407644:	2e00      	cmp	r6, #0
  407646:	d0dc      	beq.n	407602 <__register_exitproc+0x4a>
  407648:	e7cc      	b.n	4075e4 <__register_exitproc+0x2c>
  40764a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40764e:	430c      	orrs	r4, r1
  407650:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407654:	e7d5      	b.n	407602 <__register_exitproc+0x4a>
  407656:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40765a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40765e:	e7bb      	b.n	4075d8 <__register_exitproc+0x20>
  407660:	6828      	ldr	r0, [r5, #0]
  407662:	f7ff fbd3 	bl	406e0c <__retarget_lock_release_recursive>
  407666:	f04f 30ff 	mov.w	r0, #4294967295
  40766a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40766e:	bf00      	nop
  407670:	20400850 	.word	0x20400850
  407674:	00407c30 	.word	0x00407c30
  407678:	00404bed 	.word	0x00404bed

0040767c <_close_r>:
  40767c:	b538      	push	{r3, r4, r5, lr}
  40767e:	4c07      	ldr	r4, [pc, #28]	; (40769c <_close_r+0x20>)
  407680:	2300      	movs	r3, #0
  407682:	4605      	mov	r5, r0
  407684:	4608      	mov	r0, r1
  407686:	6023      	str	r3, [r4, #0]
  407688:	f7fa fe26 	bl	4022d8 <_close>
  40768c:	1c43      	adds	r3, r0, #1
  40768e:	d000      	beq.n	407692 <_close_r+0x16>
  407690:	bd38      	pop	{r3, r4, r5, pc}
  407692:	6823      	ldr	r3, [r4, #0]
  407694:	2b00      	cmp	r3, #0
  407696:	d0fb      	beq.n	407690 <_close_r+0x14>
  407698:	602b      	str	r3, [r5, #0]
  40769a:	bd38      	pop	{r3, r4, r5, pc}
  40769c:	2040ca84 	.word	0x2040ca84

004076a0 <_fclose_r>:
  4076a0:	b570      	push	{r4, r5, r6, lr}
  4076a2:	b159      	cbz	r1, 4076bc <_fclose_r+0x1c>
  4076a4:	4605      	mov	r5, r0
  4076a6:	460c      	mov	r4, r1
  4076a8:	b110      	cbz	r0, 4076b0 <_fclose_r+0x10>
  4076aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4076ac:	2b00      	cmp	r3, #0
  4076ae:	d03c      	beq.n	40772a <_fclose_r+0x8a>
  4076b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4076b2:	07d8      	lsls	r0, r3, #31
  4076b4:	d505      	bpl.n	4076c2 <_fclose_r+0x22>
  4076b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076ba:	b92b      	cbnz	r3, 4076c8 <_fclose_r+0x28>
  4076bc:	2600      	movs	r6, #0
  4076be:	4630      	mov	r0, r6
  4076c0:	bd70      	pop	{r4, r5, r6, pc}
  4076c2:	89a3      	ldrh	r3, [r4, #12]
  4076c4:	0599      	lsls	r1, r3, #22
  4076c6:	d53c      	bpl.n	407742 <_fclose_r+0xa2>
  4076c8:	4621      	mov	r1, r4
  4076ca:	4628      	mov	r0, r5
  4076cc:	f7fe fee4 	bl	406498 <__sflush_r>
  4076d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4076d2:	4606      	mov	r6, r0
  4076d4:	b133      	cbz	r3, 4076e4 <_fclose_r+0x44>
  4076d6:	69e1      	ldr	r1, [r4, #28]
  4076d8:	4628      	mov	r0, r5
  4076da:	4798      	blx	r3
  4076dc:	2800      	cmp	r0, #0
  4076de:	bfb8      	it	lt
  4076e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4076e4:	89a3      	ldrh	r3, [r4, #12]
  4076e6:	061a      	lsls	r2, r3, #24
  4076e8:	d422      	bmi.n	407730 <_fclose_r+0x90>
  4076ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4076ec:	b141      	cbz	r1, 407700 <_fclose_r+0x60>
  4076ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4076f2:	4299      	cmp	r1, r3
  4076f4:	d002      	beq.n	4076fc <_fclose_r+0x5c>
  4076f6:	4628      	mov	r0, r5
  4076f8:	f7ff f8ec 	bl	4068d4 <_free_r>
  4076fc:	2300      	movs	r3, #0
  4076fe:	6323      	str	r3, [r4, #48]	; 0x30
  407700:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407702:	b121      	cbz	r1, 40770e <_fclose_r+0x6e>
  407704:	4628      	mov	r0, r5
  407706:	f7ff f8e5 	bl	4068d4 <_free_r>
  40770a:	2300      	movs	r3, #0
  40770c:	6463      	str	r3, [r4, #68]	; 0x44
  40770e:	f7fe ffe7 	bl	4066e0 <__sfp_lock_acquire>
  407712:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407714:	2200      	movs	r2, #0
  407716:	07db      	lsls	r3, r3, #31
  407718:	81a2      	strh	r2, [r4, #12]
  40771a:	d50e      	bpl.n	40773a <_fclose_r+0x9a>
  40771c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40771e:	f7ff fb71 	bl	406e04 <__retarget_lock_close_recursive>
  407722:	f7fe ffe3 	bl	4066ec <__sfp_lock_release>
  407726:	4630      	mov	r0, r6
  407728:	bd70      	pop	{r4, r5, r6, pc}
  40772a:	f7fe ffad 	bl	406688 <__sinit>
  40772e:	e7bf      	b.n	4076b0 <_fclose_r+0x10>
  407730:	6921      	ldr	r1, [r4, #16]
  407732:	4628      	mov	r0, r5
  407734:	f7ff f8ce 	bl	4068d4 <_free_r>
  407738:	e7d7      	b.n	4076ea <_fclose_r+0x4a>
  40773a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40773c:	f7ff fb66 	bl	406e0c <__retarget_lock_release_recursive>
  407740:	e7ec      	b.n	40771c <_fclose_r+0x7c>
  407742:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407744:	f7ff fb60 	bl	406e08 <__retarget_lock_acquire_recursive>
  407748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40774c:	2b00      	cmp	r3, #0
  40774e:	d1bb      	bne.n	4076c8 <_fclose_r+0x28>
  407750:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407752:	f016 0601 	ands.w	r6, r6, #1
  407756:	d1b1      	bne.n	4076bc <_fclose_r+0x1c>
  407758:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40775a:	f7ff fb57 	bl	406e0c <__retarget_lock_release_recursive>
  40775e:	4630      	mov	r0, r6
  407760:	bd70      	pop	{r4, r5, r6, pc}
  407762:	bf00      	nop

00407764 <_fstat_r>:
  407764:	b538      	push	{r3, r4, r5, lr}
  407766:	460b      	mov	r3, r1
  407768:	4c07      	ldr	r4, [pc, #28]	; (407788 <_fstat_r+0x24>)
  40776a:	4605      	mov	r5, r0
  40776c:	4611      	mov	r1, r2
  40776e:	4618      	mov	r0, r3
  407770:	2300      	movs	r3, #0
  407772:	6023      	str	r3, [r4, #0]
  407774:	f7fa fdb3 	bl	4022de <_fstat>
  407778:	1c43      	adds	r3, r0, #1
  40777a:	d000      	beq.n	40777e <_fstat_r+0x1a>
  40777c:	bd38      	pop	{r3, r4, r5, pc}
  40777e:	6823      	ldr	r3, [r4, #0]
  407780:	2b00      	cmp	r3, #0
  407782:	d0fb      	beq.n	40777c <_fstat_r+0x18>
  407784:	602b      	str	r3, [r5, #0]
  407786:	bd38      	pop	{r3, r4, r5, pc}
  407788:	2040ca84 	.word	0x2040ca84

0040778c <_isatty_r>:
  40778c:	b538      	push	{r3, r4, r5, lr}
  40778e:	4c07      	ldr	r4, [pc, #28]	; (4077ac <_isatty_r+0x20>)
  407790:	2300      	movs	r3, #0
  407792:	4605      	mov	r5, r0
  407794:	4608      	mov	r0, r1
  407796:	6023      	str	r3, [r4, #0]
  407798:	f7fa fda6 	bl	4022e8 <_isatty>
  40779c:	1c43      	adds	r3, r0, #1
  40779e:	d000      	beq.n	4077a2 <_isatty_r+0x16>
  4077a0:	bd38      	pop	{r3, r4, r5, pc}
  4077a2:	6823      	ldr	r3, [r4, #0]
  4077a4:	2b00      	cmp	r3, #0
  4077a6:	d0fb      	beq.n	4077a0 <_isatty_r+0x14>
  4077a8:	602b      	str	r3, [r5, #0]
  4077aa:	bd38      	pop	{r3, r4, r5, pc}
  4077ac:	2040ca84 	.word	0x2040ca84

004077b0 <_lseek_r>:
  4077b0:	b570      	push	{r4, r5, r6, lr}
  4077b2:	460d      	mov	r5, r1
  4077b4:	4c08      	ldr	r4, [pc, #32]	; (4077d8 <_lseek_r+0x28>)
  4077b6:	4611      	mov	r1, r2
  4077b8:	4606      	mov	r6, r0
  4077ba:	461a      	mov	r2, r3
  4077bc:	4628      	mov	r0, r5
  4077be:	2300      	movs	r3, #0
  4077c0:	6023      	str	r3, [r4, #0]
  4077c2:	f7fa fd93 	bl	4022ec <_lseek>
  4077c6:	1c43      	adds	r3, r0, #1
  4077c8:	d000      	beq.n	4077cc <_lseek_r+0x1c>
  4077ca:	bd70      	pop	{r4, r5, r6, pc}
  4077cc:	6823      	ldr	r3, [r4, #0]
  4077ce:	2b00      	cmp	r3, #0
  4077d0:	d0fb      	beq.n	4077ca <_lseek_r+0x1a>
  4077d2:	6033      	str	r3, [r6, #0]
  4077d4:	bd70      	pop	{r4, r5, r6, pc}
  4077d6:	bf00      	nop
  4077d8:	2040ca84 	.word	0x2040ca84

004077dc <_read_r>:
  4077dc:	b570      	push	{r4, r5, r6, lr}
  4077de:	460d      	mov	r5, r1
  4077e0:	4c08      	ldr	r4, [pc, #32]	; (407804 <_read_r+0x28>)
  4077e2:	4611      	mov	r1, r2
  4077e4:	4606      	mov	r6, r0
  4077e6:	461a      	mov	r2, r3
  4077e8:	4628      	mov	r0, r5
  4077ea:	2300      	movs	r3, #0
  4077ec:	6023      	str	r3, [r4, #0]
  4077ee:	f7f9 fab3 	bl	400d58 <_read>
  4077f2:	1c43      	adds	r3, r0, #1
  4077f4:	d000      	beq.n	4077f8 <_read_r+0x1c>
  4077f6:	bd70      	pop	{r4, r5, r6, pc}
  4077f8:	6823      	ldr	r3, [r4, #0]
  4077fa:	2b00      	cmp	r3, #0
  4077fc:	d0fb      	beq.n	4077f6 <_read_r+0x1a>
  4077fe:	6033      	str	r3, [r6, #0]
  407800:	bd70      	pop	{r4, r5, r6, pc}
  407802:	bf00      	nop
  407804:	2040ca84 	.word	0x2040ca84

00407808 <__aeabi_uldivmod>:
  407808:	b953      	cbnz	r3, 407820 <__aeabi_uldivmod+0x18>
  40780a:	b94a      	cbnz	r2, 407820 <__aeabi_uldivmod+0x18>
  40780c:	2900      	cmp	r1, #0
  40780e:	bf08      	it	eq
  407810:	2800      	cmpeq	r0, #0
  407812:	bf1c      	itt	ne
  407814:	f04f 31ff 	movne.w	r1, #4294967295
  407818:	f04f 30ff 	movne.w	r0, #4294967295
  40781c:	f000 b97a 	b.w	407b14 <__aeabi_idiv0>
  407820:	f1ad 0c08 	sub.w	ip, sp, #8
  407824:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407828:	f000 f806 	bl	407838 <__udivmoddi4>
  40782c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407834:	b004      	add	sp, #16
  407836:	4770      	bx	lr

00407838 <__udivmoddi4>:
  407838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40783c:	468c      	mov	ip, r1
  40783e:	460d      	mov	r5, r1
  407840:	4604      	mov	r4, r0
  407842:	9e08      	ldr	r6, [sp, #32]
  407844:	2b00      	cmp	r3, #0
  407846:	d151      	bne.n	4078ec <__udivmoddi4+0xb4>
  407848:	428a      	cmp	r2, r1
  40784a:	4617      	mov	r7, r2
  40784c:	d96d      	bls.n	40792a <__udivmoddi4+0xf2>
  40784e:	fab2 fe82 	clz	lr, r2
  407852:	f1be 0f00 	cmp.w	lr, #0
  407856:	d00b      	beq.n	407870 <__udivmoddi4+0x38>
  407858:	f1ce 0c20 	rsb	ip, lr, #32
  40785c:	fa01 f50e 	lsl.w	r5, r1, lr
  407860:	fa20 fc0c 	lsr.w	ip, r0, ip
  407864:	fa02 f70e 	lsl.w	r7, r2, lr
  407868:	ea4c 0c05 	orr.w	ip, ip, r5
  40786c:	fa00 f40e 	lsl.w	r4, r0, lr
  407870:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407874:	0c25      	lsrs	r5, r4, #16
  407876:	fbbc f8fa 	udiv	r8, ip, sl
  40787a:	fa1f f987 	uxth.w	r9, r7
  40787e:	fb0a cc18 	mls	ip, sl, r8, ip
  407882:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407886:	fb08 f309 	mul.w	r3, r8, r9
  40788a:	42ab      	cmp	r3, r5
  40788c:	d90a      	bls.n	4078a4 <__udivmoddi4+0x6c>
  40788e:	19ed      	adds	r5, r5, r7
  407890:	f108 32ff 	add.w	r2, r8, #4294967295
  407894:	f080 8123 	bcs.w	407ade <__udivmoddi4+0x2a6>
  407898:	42ab      	cmp	r3, r5
  40789a:	f240 8120 	bls.w	407ade <__udivmoddi4+0x2a6>
  40789e:	f1a8 0802 	sub.w	r8, r8, #2
  4078a2:	443d      	add	r5, r7
  4078a4:	1aed      	subs	r5, r5, r3
  4078a6:	b2a4      	uxth	r4, r4
  4078a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4078ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4078b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4078b4:	fb00 f909 	mul.w	r9, r0, r9
  4078b8:	45a1      	cmp	r9, r4
  4078ba:	d909      	bls.n	4078d0 <__udivmoddi4+0x98>
  4078bc:	19e4      	adds	r4, r4, r7
  4078be:	f100 33ff 	add.w	r3, r0, #4294967295
  4078c2:	f080 810a 	bcs.w	407ada <__udivmoddi4+0x2a2>
  4078c6:	45a1      	cmp	r9, r4
  4078c8:	f240 8107 	bls.w	407ada <__udivmoddi4+0x2a2>
  4078cc:	3802      	subs	r0, #2
  4078ce:	443c      	add	r4, r7
  4078d0:	eba4 0409 	sub.w	r4, r4, r9
  4078d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4078d8:	2100      	movs	r1, #0
  4078da:	2e00      	cmp	r6, #0
  4078dc:	d061      	beq.n	4079a2 <__udivmoddi4+0x16a>
  4078de:	fa24 f40e 	lsr.w	r4, r4, lr
  4078e2:	2300      	movs	r3, #0
  4078e4:	6034      	str	r4, [r6, #0]
  4078e6:	6073      	str	r3, [r6, #4]
  4078e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4078ec:	428b      	cmp	r3, r1
  4078ee:	d907      	bls.n	407900 <__udivmoddi4+0xc8>
  4078f0:	2e00      	cmp	r6, #0
  4078f2:	d054      	beq.n	40799e <__udivmoddi4+0x166>
  4078f4:	2100      	movs	r1, #0
  4078f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4078fa:	4608      	mov	r0, r1
  4078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407900:	fab3 f183 	clz	r1, r3
  407904:	2900      	cmp	r1, #0
  407906:	f040 808e 	bne.w	407a26 <__udivmoddi4+0x1ee>
  40790a:	42ab      	cmp	r3, r5
  40790c:	d302      	bcc.n	407914 <__udivmoddi4+0xdc>
  40790e:	4282      	cmp	r2, r0
  407910:	f200 80fa 	bhi.w	407b08 <__udivmoddi4+0x2d0>
  407914:	1a84      	subs	r4, r0, r2
  407916:	eb65 0503 	sbc.w	r5, r5, r3
  40791a:	2001      	movs	r0, #1
  40791c:	46ac      	mov	ip, r5
  40791e:	2e00      	cmp	r6, #0
  407920:	d03f      	beq.n	4079a2 <__udivmoddi4+0x16a>
  407922:	e886 1010 	stmia.w	r6, {r4, ip}
  407926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40792a:	b912      	cbnz	r2, 407932 <__udivmoddi4+0xfa>
  40792c:	2701      	movs	r7, #1
  40792e:	fbb7 f7f2 	udiv	r7, r7, r2
  407932:	fab7 fe87 	clz	lr, r7
  407936:	f1be 0f00 	cmp.w	lr, #0
  40793a:	d134      	bne.n	4079a6 <__udivmoddi4+0x16e>
  40793c:	1beb      	subs	r3, r5, r7
  40793e:	0c3a      	lsrs	r2, r7, #16
  407940:	fa1f fc87 	uxth.w	ip, r7
  407944:	2101      	movs	r1, #1
  407946:	fbb3 f8f2 	udiv	r8, r3, r2
  40794a:	0c25      	lsrs	r5, r4, #16
  40794c:	fb02 3318 	mls	r3, r2, r8, r3
  407950:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407954:	fb0c f308 	mul.w	r3, ip, r8
  407958:	42ab      	cmp	r3, r5
  40795a:	d907      	bls.n	40796c <__udivmoddi4+0x134>
  40795c:	19ed      	adds	r5, r5, r7
  40795e:	f108 30ff 	add.w	r0, r8, #4294967295
  407962:	d202      	bcs.n	40796a <__udivmoddi4+0x132>
  407964:	42ab      	cmp	r3, r5
  407966:	f200 80d1 	bhi.w	407b0c <__udivmoddi4+0x2d4>
  40796a:	4680      	mov	r8, r0
  40796c:	1aed      	subs	r5, r5, r3
  40796e:	b2a3      	uxth	r3, r4
  407970:	fbb5 f0f2 	udiv	r0, r5, r2
  407974:	fb02 5510 	mls	r5, r2, r0, r5
  407978:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40797c:	fb0c fc00 	mul.w	ip, ip, r0
  407980:	45a4      	cmp	ip, r4
  407982:	d907      	bls.n	407994 <__udivmoddi4+0x15c>
  407984:	19e4      	adds	r4, r4, r7
  407986:	f100 33ff 	add.w	r3, r0, #4294967295
  40798a:	d202      	bcs.n	407992 <__udivmoddi4+0x15a>
  40798c:	45a4      	cmp	ip, r4
  40798e:	f200 80b8 	bhi.w	407b02 <__udivmoddi4+0x2ca>
  407992:	4618      	mov	r0, r3
  407994:	eba4 040c 	sub.w	r4, r4, ip
  407998:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40799c:	e79d      	b.n	4078da <__udivmoddi4+0xa2>
  40799e:	4631      	mov	r1, r6
  4079a0:	4630      	mov	r0, r6
  4079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4079a6:	f1ce 0420 	rsb	r4, lr, #32
  4079aa:	fa05 f30e 	lsl.w	r3, r5, lr
  4079ae:	fa07 f70e 	lsl.w	r7, r7, lr
  4079b2:	fa20 f804 	lsr.w	r8, r0, r4
  4079b6:	0c3a      	lsrs	r2, r7, #16
  4079b8:	fa25 f404 	lsr.w	r4, r5, r4
  4079bc:	ea48 0803 	orr.w	r8, r8, r3
  4079c0:	fbb4 f1f2 	udiv	r1, r4, r2
  4079c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4079c8:	fb02 4411 	mls	r4, r2, r1, r4
  4079cc:	fa1f fc87 	uxth.w	ip, r7
  4079d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4079d4:	fb01 f30c 	mul.w	r3, r1, ip
  4079d8:	42ab      	cmp	r3, r5
  4079da:	fa00 f40e 	lsl.w	r4, r0, lr
  4079de:	d909      	bls.n	4079f4 <__udivmoddi4+0x1bc>
  4079e0:	19ed      	adds	r5, r5, r7
  4079e2:	f101 30ff 	add.w	r0, r1, #4294967295
  4079e6:	f080 808a 	bcs.w	407afe <__udivmoddi4+0x2c6>
  4079ea:	42ab      	cmp	r3, r5
  4079ec:	f240 8087 	bls.w	407afe <__udivmoddi4+0x2c6>
  4079f0:	3902      	subs	r1, #2
  4079f2:	443d      	add	r5, r7
  4079f4:	1aeb      	subs	r3, r5, r3
  4079f6:	fa1f f588 	uxth.w	r5, r8
  4079fa:	fbb3 f0f2 	udiv	r0, r3, r2
  4079fe:	fb02 3310 	mls	r3, r2, r0, r3
  407a02:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407a06:	fb00 f30c 	mul.w	r3, r0, ip
  407a0a:	42ab      	cmp	r3, r5
  407a0c:	d907      	bls.n	407a1e <__udivmoddi4+0x1e6>
  407a0e:	19ed      	adds	r5, r5, r7
  407a10:	f100 38ff 	add.w	r8, r0, #4294967295
  407a14:	d26f      	bcs.n	407af6 <__udivmoddi4+0x2be>
  407a16:	42ab      	cmp	r3, r5
  407a18:	d96d      	bls.n	407af6 <__udivmoddi4+0x2be>
  407a1a:	3802      	subs	r0, #2
  407a1c:	443d      	add	r5, r7
  407a1e:	1aeb      	subs	r3, r5, r3
  407a20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407a24:	e78f      	b.n	407946 <__udivmoddi4+0x10e>
  407a26:	f1c1 0720 	rsb	r7, r1, #32
  407a2a:	fa22 f807 	lsr.w	r8, r2, r7
  407a2e:	408b      	lsls	r3, r1
  407a30:	fa05 f401 	lsl.w	r4, r5, r1
  407a34:	ea48 0303 	orr.w	r3, r8, r3
  407a38:	fa20 fe07 	lsr.w	lr, r0, r7
  407a3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407a40:	40fd      	lsrs	r5, r7
  407a42:	ea4e 0e04 	orr.w	lr, lr, r4
  407a46:	fbb5 f9fc 	udiv	r9, r5, ip
  407a4a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  407a4e:	fb0c 5519 	mls	r5, ip, r9, r5
  407a52:	fa1f f883 	uxth.w	r8, r3
  407a56:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  407a5a:	fb09 f408 	mul.w	r4, r9, r8
  407a5e:	42ac      	cmp	r4, r5
  407a60:	fa02 f201 	lsl.w	r2, r2, r1
  407a64:	fa00 fa01 	lsl.w	sl, r0, r1
  407a68:	d908      	bls.n	407a7c <__udivmoddi4+0x244>
  407a6a:	18ed      	adds	r5, r5, r3
  407a6c:	f109 30ff 	add.w	r0, r9, #4294967295
  407a70:	d243      	bcs.n	407afa <__udivmoddi4+0x2c2>
  407a72:	42ac      	cmp	r4, r5
  407a74:	d941      	bls.n	407afa <__udivmoddi4+0x2c2>
  407a76:	f1a9 0902 	sub.w	r9, r9, #2
  407a7a:	441d      	add	r5, r3
  407a7c:	1b2d      	subs	r5, r5, r4
  407a7e:	fa1f fe8e 	uxth.w	lr, lr
  407a82:	fbb5 f0fc 	udiv	r0, r5, ip
  407a86:	fb0c 5510 	mls	r5, ip, r0, r5
  407a8a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  407a8e:	fb00 f808 	mul.w	r8, r0, r8
  407a92:	45a0      	cmp	r8, r4
  407a94:	d907      	bls.n	407aa6 <__udivmoddi4+0x26e>
  407a96:	18e4      	adds	r4, r4, r3
  407a98:	f100 35ff 	add.w	r5, r0, #4294967295
  407a9c:	d229      	bcs.n	407af2 <__udivmoddi4+0x2ba>
  407a9e:	45a0      	cmp	r8, r4
  407aa0:	d927      	bls.n	407af2 <__udivmoddi4+0x2ba>
  407aa2:	3802      	subs	r0, #2
  407aa4:	441c      	add	r4, r3
  407aa6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  407aaa:	eba4 0408 	sub.w	r4, r4, r8
  407aae:	fba0 8902 	umull	r8, r9, r0, r2
  407ab2:	454c      	cmp	r4, r9
  407ab4:	46c6      	mov	lr, r8
  407ab6:	464d      	mov	r5, r9
  407ab8:	d315      	bcc.n	407ae6 <__udivmoddi4+0x2ae>
  407aba:	d012      	beq.n	407ae2 <__udivmoddi4+0x2aa>
  407abc:	b156      	cbz	r6, 407ad4 <__udivmoddi4+0x29c>
  407abe:	ebba 030e 	subs.w	r3, sl, lr
  407ac2:	eb64 0405 	sbc.w	r4, r4, r5
  407ac6:	fa04 f707 	lsl.w	r7, r4, r7
  407aca:	40cb      	lsrs	r3, r1
  407acc:	431f      	orrs	r7, r3
  407ace:	40cc      	lsrs	r4, r1
  407ad0:	6037      	str	r7, [r6, #0]
  407ad2:	6074      	str	r4, [r6, #4]
  407ad4:	2100      	movs	r1, #0
  407ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ada:	4618      	mov	r0, r3
  407adc:	e6f8      	b.n	4078d0 <__udivmoddi4+0x98>
  407ade:	4690      	mov	r8, r2
  407ae0:	e6e0      	b.n	4078a4 <__udivmoddi4+0x6c>
  407ae2:	45c2      	cmp	sl, r8
  407ae4:	d2ea      	bcs.n	407abc <__udivmoddi4+0x284>
  407ae6:	ebb8 0e02 	subs.w	lr, r8, r2
  407aea:	eb69 0503 	sbc.w	r5, r9, r3
  407aee:	3801      	subs	r0, #1
  407af0:	e7e4      	b.n	407abc <__udivmoddi4+0x284>
  407af2:	4628      	mov	r0, r5
  407af4:	e7d7      	b.n	407aa6 <__udivmoddi4+0x26e>
  407af6:	4640      	mov	r0, r8
  407af8:	e791      	b.n	407a1e <__udivmoddi4+0x1e6>
  407afa:	4681      	mov	r9, r0
  407afc:	e7be      	b.n	407a7c <__udivmoddi4+0x244>
  407afe:	4601      	mov	r1, r0
  407b00:	e778      	b.n	4079f4 <__udivmoddi4+0x1bc>
  407b02:	3802      	subs	r0, #2
  407b04:	443c      	add	r4, r7
  407b06:	e745      	b.n	407994 <__udivmoddi4+0x15c>
  407b08:	4608      	mov	r0, r1
  407b0a:	e708      	b.n	40791e <__udivmoddi4+0xe6>
  407b0c:	f1a8 0802 	sub.w	r8, r8, #2
  407b10:	443d      	add	r5, r7
  407b12:	e72b      	b.n	40796c <__udivmoddi4+0x134>

00407b14 <__aeabi_idiv0>:
  407b14:	4770      	bx	lr
  407b16:	bf00      	nop
  407b18:	0a05000d 	.word	0x0a05000d
  407b1c:	0000004b 	.word	0x0000004b
  407b20:	00001932 	.word	0x00001932
  407b24:	0e00008b 	.word	0x0e00008b
  407b28:	32800008 	.word	0x32800008
  407b2c:	030a0205 	.word	0x030a0205
  407b30:	0f022003 	.word	0x0f022003
  407b34:	00000a0f 	.word	0x00000a0f
  407b38:	18180000 	.word	0x18180000
  407b3c:	00002020 	.word	0x00002020
  407b40:	0a000000 	.word	0x0a000000
  407b44:	02020000 	.word	0x02020000
  407b48:	18180000 	.word	0x18180000
  407b4c:	00030000 	.word	0x00030000
  407b50:	00000000 	.word	0x00000000
  407b54:	18010002 	.word	0x18010002
  407b58:	1e1e1e1e 	.word	0x1e1e1e1e
  407b5c:	1e1e1e1e 	.word	0x1e1e1e1e
  407b60:	1e1e1e1e 	.word	0x1e1e1e1e
  407b64:	00001e1e 	.word	0x00001e1e
	...
  407b78:	454c4449 	.word	0x454c4449
  407b7c:	00000000 	.word	0x00000000
  407b80:	51726d54 	.word	0x51726d54
  407b84:	00000000 	.word	0x00000000
  407b88:	20726d54 	.word	0x20726d54
  407b8c:	00637653 	.word	0x00637653

00407b90 <firCoeffs32>:
  407b90:	3da268b3 3da6dc8d 3daa799c 3dad3729     .h.=...=.y.=)7.=
  407ba0:	3daf0e94 3daffb68 3daffb68 3daf0e94     ...=h..=h..=...=
  407bb0:	3dad3729 3daa799c 3da6dc8d 3da268b3     )7.=.y.=...=.h.=
  407bc0:	0074786d 6c696146 74206465 7263206f     mxt.Failed to cr
  407bd0:	65746165 73657420 656c2074 61742064     eate test led ta
  407be0:	0a0d6b73 00000000 0064636c 00636461     sk......lcd.adc.
  407bf0:	6c696146 74206465 7263206f 65746165     Failed to create
  407c00:	73657420 64612074 61742063 0a0d6b73      test adc task..
  407c10:	00000000 000a6425 63617473 766f206b     ....%d..stack ov
  407c20:	6c667265 2520776f 73252078 00000a0d     erflow %x %s....

00407c30 <_global_impure_ptr>:
  407c30:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  407c40:	46454443 00000000 33323130 37363534     CDEF....01234567
  407c50:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407c60:	0000296c                                l)..

00407c64 <blanks.7217>:
  407c64:	20202020 20202020 20202020 20202020                     

00407c74 <zeroes.7218>:
  407c74:	30303030 30303030 30303030 30303030     0000000000000000
  407c84:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00407c94 <_ctype_>:
  407c94:	20202000 20202020 28282020 20282828     .         ((((( 
  407ca4:	20202020 20202020 20202020 20202020                     
  407cb4:	10108820 10101010 10101010 10101010      ...............
  407cc4:	04040410 04040404 10040404 10101010     ................
  407cd4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407ce4:	01010101 01010101 01010101 10101010     ................
  407cf4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407d04:	02020202 02020202 02020202 10101010     ................
  407d14:	00000020 00000000 00000000 00000000      ...............
	...

00407d98 <_init>:
  407d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d9a:	bf00      	nop
  407d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407d9e:	bc08      	pop	{r3}
  407da0:	469e      	mov	lr, r3
  407da2:	4770      	bx	lr

00407da4 <__init_array_start>:
  407da4:	00406479 	.word	0x00406479

00407da8 <__frame_dummy_init_array_entry>:
  407da8:	0040018d                                ..@.

00407dac <_fini>:
  407dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407dae:	bf00      	nop
  407db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407db2:	bc08      	pop	{r3}
  407db4:	469e      	mov	lr, r3
  407db6:	4770      	bx	lr

00407db8 <__fini_array_start>:
  407db8:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	ca60 2040                                   `.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	7571 0040 6f01 0040 0000 0000 7c94 0040     qu@..o@......|@.
20400944:	7c90 0040 7c10 0040 7c10 0040 7c10 0040     .|@..|@..|@..|@.
20400954:	7c10 0040 7c10 0040 7c10 0040 7c10 0040     .|@..|@..|@..|@.
20400964:	7c10 0040 7c10 0040 ffff ffff ffff ffff     .|@..|@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
